[
  {
    "title": "Elixir (programming language)",
    "url": "https://en.wikipedia.org/wiki/Elixir_(programming_language)",
    "history": "José Valim created the Elixir programming language as a research and development project at Plataformatec. His goals were to enable higher extensibility and productivity in the Erlang VM while maintaining compatibility with Erlang's ecosystem. Elixir is aimed at large-scale sites and apps. It uses features of Ruby, Erlang, and Clojure to develop a high-concurrency and low-latency language. It was designed to handle large data volumes. Elixir is also used in telecommunications, e-commerce, and finance. In 2021, the Numerical Elixir effort was announced with the goal of bringing machine learning, neural networks, GPU compilation, data processing, and computational notebooks to the Elixir ecosystem.",
    "versioning": "Each of the minor versions supports a specific range of Erlang/OTP versions. The current stable release version is 1.18.3 .",
    "features": "Compiles to bytecode for the BEAM virtual machine of Erlang. Full interoperability with Erlang code, without runtime impact. Scalability and fault-tolerance, thanks to Erlang's lightweight concurrency mechanisms Built-in tooling for managing dependencies, code compilation, running tests, formatting code, remote debugging and more. An interactive REPL inside running programs, including Phoenix web servers, with code reloading and access to internal state Everything is an expression Pattern matching to promote assertive code Type hints for static analysis tools Immutable data, with an emphasis, like other functional languages, on recursion and higher-order functions instead of side-effect-based looping Shared nothing concurrent programming via message passing (actor model) Lazy and async collections with streams Railway oriented programming via the with construct Hygienic metaprogramming by direct access to the abstract syntax tree (AST). Libraries often implement small domain-specific languages, such as for databases or testing. Code execution at compile time. The Elixir compiler also runs on the BEAM, so modules that are being compiled can immediately run code which has already been compiled. Polymorphism via a mechanism called protocols. Dynamic dispatch, as in Clojure, however, without multiple dispatch because Elixir protocols dispatch on a single type. Support for documentation via Python-like docstrings in the Markdown formatting language Unicode support and UTF-8 strings",
    "examples": "The following examples can be run in an iex shell or saved in a file and run from the command line by typing elixir <filename>. Classic Hello world example: iex> IO.puts(Hello World!) Hello World! Pipe operator: iex> Elixir |> String.graphemes() |> Enum.frequencies() %{E => 1, i => 2, l => 1, r => 1, x => 1} iex> %{values: 1..5} |> Map.get(:values) |> Enum.map(& &1 * 2) [2, 4, 6, 8, 10] iex> |> Enum.sum() 30 Pattern matching (a.k.a. destructuring): iex> %{left: x} = %{left: 5, right: 8} iex> x 5 iex> {:ok, [_ | rest]} = {:ok, [1, 2, 3]} iex> rest [2, 3] Pattern matching with multiple clauses: iex> case File.read(path/to/file) do iex> {:ok, contents} -> IO.puts(found file: #{contents}) iex> {:error, reason} -> IO.puts(missing file: #{reason}) iex> end List comprehension: iex> for n <- 1..5, rem(n, 2) == 1, do: n*n [1, 9, 25] Asynchronously reading files with streams: 1..5 |> Task.async_stream(&File.read!(#{&1}.txt)) |> Stream.filter(fn {:ok, contents} -> String.trim(contents) !=  end) |> Enum.join(\\n) Multiple function bodies with guards: def fib(n) when n in [0, 1], do: n def fib(n), do: fib(n-2) + fib(n-1) Relational databases with the Ecto library: schema weather do field :city # Defaults to type :string field :temp_lo, :integer field :temp_hi, :integer field :prcp, :float, default: 0.0 end Weather |> where(city: Kraków) |> order_by(:temp_lo) |> limit(10) |> Repo.all Sequentially spawning a thousand processes: for num <- 1..1000, do: spawn fn -> IO.puts(#{num * 2}) end Asynchronously performing a task: task = Task.async fn -> perform_complex_action() end other_time_consuming_action() Task.await task [citation needed]",
    "see_also": "Free and open-source software portal Concurrent computing Distributed computing Parallel computing",
    "references": "^ a b Release 1.18.3. 6 March 2025. Retrieved 23 March 2025. ^ elixir/LICENSE at master · elixir-lang/elixir · GitHub. GitHub. ^ Most Popular Programming Languages of 2018 - Elite Infoworld Blog. 2018-03-30. Archived from the original on 2018-05-09. Retrieved 2018-05-08. ^ Elixir. José Valim. Retrieved 2013-02-17. ^ ElixirConf. Retrieved 2018-07-11. ^ ElixirConf. Retrieved 2018-07-11. ^ Erlang & Elixir Fest. Retrieved 2019-02-18. ^ Elixir LDN. Retrieved 2018-07-12. ^ EMPEX - Empire State Elixir Conference. Retrieved 2018-07-12. ^ Elixir - A modern approach to programming for the Erlang VM. Retrieved 2013-02-17. ^ José Valim - ElixirConf EU 2017 Keynote. Archived from the original on 2021-11-17. Retrieved 2017-07-14. ^ Behinde the code: The One Who Created Elixir. Retrieved 2019-11-25. ^ Numerical Elixir (Nx). GitHub. Retrieved 2024-05-06. ^ Elixir is a dynamic, functional language designed for building scalable and maintainable applications: elixir-lang/elixir, Elixir, 2019-04-21, retrieved 2019-04-21 ^ a b c d e f Elixir. Retrieved 2014-09-07. ^ Writing assertive code with Elixir. 24 September 2014. Retrieved 2018-07-05. ^ Loder, Wolfgang (12 May 2015). Erlang and Elixir for Imperative Programmers. Chapter 16: Code Structuring Concepts, section title Actor Model: Leanpub. Retrieved 7 July 2015.{{cite book}}: CS1 maint: location (link) ^ Wlaschin, Scott (May 2013). Railway Oriented Programming. F# for Fun and Profit. Archived from the original on 30 January 2021. Retrieved 28 February 2021.",
    "further_reading": "Simon St. Laurent; J. Eisenberg (December 22, 2016). Introducing Elixir: Getting Started in Functional Programming 2nd Edition. O'Reilly Media. ISBN 978-1491956779. Sasa Juric (January 12, 2019). Elixir in Action 2nd Edition. Manning Publications. ISBN 978-1617295027. vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases: National United StatesCzech RepublicIsrael",
    "document": "José Valim created the Elixir programming language as a research and development project at Plataformatec. His goals were to enable higher extensibility and productivity in the Erlang VM while maintaining compatibility with Erlang's ecosystem. Elixir is aimed at large-scale sites and apps. It uses features of Ruby, Erlang, and Clojure to develop a high-concurrency and low-latency language. It was designed to handle large data volumes. Elixir is also used in telecommunications, e-commerce, and finance. In 2021, the Numerical Elixir effort was announced with the goal of bringing machine learning, neural networks, GPU compilation, data processing, and computational notebooks to the Elixir ecosystem. Each of the minor versions supports a specific range of Erlang/OTP versions. The current stable release version is 1.18.3 . Compiles to bytecode for the BEAM virtual machine of Erlang. Full interoperability with Erlang code, without runtime impact. Scalability and fault-tolerance, thanks to Erlang's lightweight concurrency mechanisms Built-in tooling for managing dependencies, code compilation, running tests, formatting code, remote debugging and more. An interactive REPL inside running programs, including Phoenix web servers, with code reloading and access to internal state Everything is an expression Pattern matching to promote assertive code Type hints for static analysis tools Immutable data, with an emphasis, like other functional languages, on recursion and higher-order functions instead of side-effect-based looping Shared nothing concurrent programming via message passing (actor model) Lazy and async collections with streams Railway oriented programming via the with construct Hygienic metaprogramming by direct access to the abstract syntax tree (AST). Libraries often implement small domain-specific languages, such as for databases or testing. Code execution at compile time. The Elixir compiler also runs on the BEAM, so modules that are being compiled can immediately run code which has already been compiled. Polymorphism via a mechanism called protocols. Dynamic dispatch, as in Clojure, however, without multiple dispatch because Elixir protocols dispatch on a single type. Support for documentation via Python-like docstrings in the Markdown formatting language Unicode support and UTF-8 strings The following examples can be run in an iex shell or saved in a file and run from the command line by typing elixir <filename>. Classic Hello world example: iex> IO.puts(Hello World!) Hello World! Pipe operator: iex> Elixir |> String.graphemes() |> Enum.frequencies() %{E => 1, i => 2, l => 1, r => 1, x => 1} iex> %{values: 1..5} |> Map.get(:values) |> Enum.map(& &1 * 2) [2, 4, 6, 8, 10] iex> |> Enum.sum() 30 Pattern matching (a.k.a. destructuring): iex> %{left: x} = %{left: 5, right: 8} iex> x 5 iex> {:ok, [_ | rest]} = {:ok, [1, 2, 3]} iex> rest [2, 3] Pattern matching with multiple clauses: iex> case File.read(path/to/file) do iex> {:ok, contents} -> IO.puts(found file: #{contents}) iex> {:error, reason} -> IO.puts(missing file: #{reason}) iex> end List comprehension: iex> for n <- 1..5, rem(n, 2) == 1, do: n*n [1, 9, 25] Asynchronously reading files with streams: 1..5 |> Task.async_stream(&File.read!(#{&1}.txt)) |> Stream.filter(fn {:ok, contents} -> String.trim(contents) !=  end) |> Enum.join(\\n) Multiple function bodies with guards: def fib(n) when n in [0, 1], do: n def fib(n), do: fib(n-2) + fib(n-1) Relational databases with the Ecto library: schema weather do field :city # Defaults to type :string field :temp_lo, :integer field :temp_hi, :integer field :prcp, :float, default: 0.0 end Weather |> where(city: Kraków) |> order_by(:temp_lo) |> limit(10) |> Repo.all Sequentially spawning a thousand processes: for num <- 1..1000, do: spawn fn -> IO.puts(#{num * 2}) end Asynchronously performing a task: task = Task.async fn -> perform_complex_action() end other_time_consuming_action() Task.await task [citation needed] Free and open-source software portal Concurrent computing Distributed computing Parallel computing ^ a b Release 1.18.3. 6 March 2025. Retrieved 23 March 2025. ^ elixir/LICENSE at master · elixir-lang/elixir · GitHub. GitHub. ^ Most Popular Programming Languages of 2018 - Elite Infoworld Blog. 2018-03-30. Archived from the original on 2018-05-09. Retrieved 2018-05-08. ^ Elixir. José Valim. Retrieved 2013-02-17. ^ ElixirConf. Retrieved 2018-07-11. ^ ElixirConf. Retrieved 2018-07-11. ^ Erlang & Elixir Fest. Retrieved 2019-02-18. ^ Elixir LDN. Retrieved 2018-07-12. ^ EMPEX - Empire State Elixir Conference. Retrieved 2018-07-12. ^ Elixir - A modern approach to programming for the Erlang VM. Retrieved 2013-02-17. ^ José Valim - ElixirConf EU 2017 Keynote. Archived from the original on 2021-11-17. Retrieved 2017-07-14. ^ Behinde the code: The One Who Created Elixir. Retrieved 2019-11-25. ^ Numerical Elixir (Nx). GitHub. Retrieved 2024-05-06. ^ Elixir is a dynamic, functional language designed for building scalable and maintainable applications: elixir-lang/elixir, Elixir, 2019-04-21, retrieved 2019-04-21 ^ a b c d e f Elixir. Retrieved 2014-09-07. ^ Writing assertive code with Elixir. 24 September 2014. Retrieved 2018-07-05. ^ Loder, Wolfgang (12 May 2015). Erlang and Elixir for Imperative Programmers. Chapter 16: Code Structuring Concepts, section title Actor Model: Leanpub. Retrieved 7 July 2015.{{cite book}}: CS1 maint: location (link) ^ Wlaschin, Scott (May 2013). Railway Oriented Programming. F# for Fun and Profit. Archived from the original on 30 January 2021. Retrieved 28 February 2021. Simon St. Laurent; J. Eisenberg (December 22, 2016). Introducing Elixir: Getting Started in Functional Programming 2nd Edition. O'Reilly Media. ISBN 978-1491956779. Sasa Juric (January 12, 2019). Elixir in Action 2nd Edition. Manning Publications. ISBN 978-1617295027. vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases: National United StatesCzech RepublicIsrael",
    "paradigm": "multi-paradigm : functional , concurrent , distributed , process-oriented",
    "first_appeared": "2012 ; 13 years ago ( 2012 )",
    "stable_release": "1.18.4",
    "typing_discipline": "dynamic , strong",
    "influenced_by": "Clojure , Erlang , Ruby",
    "influenced": "Gleam , LFE",
    "stable_release_date": "2025-05-21T00:00:00Z"
  },
  {
    "title": "MATLAB",
    "url": "https://en.wikipedia.org/wiki/MATLAB",
    "origins": "MATLAB was invented by mathematician and computer programmer Cleve Moler. The idea for MATLAB was based on his 1960s PhD thesis. Moler became a math professor at the University of New Mexico and started developing MATLAB for his students as a hobby. He developed MATLAB's initial linear algebra programming in 1967 with his one-time thesis advisor, George Forsythe. This was followed by Fortran code for linear equations in 1971. Before version 1.0, MATLAB was not a programming language; it was a simple interactive matrix calculator. There were no programs, no toolboxes, no graphics. And no ODEs or FFTs. The first early version of MATLAB was completed in the late 1970s. The software was disclosed to the public for the first time in February 1979 at the Naval Postgraduate School in California. Early versions of MATLAB were simple matrix calculators with 71 pre-built functions. At the time, MATLAB was distributed for free to universities. Moler would leave copies at universities he visited and the software developed a strong following in the math departments of university campuses.: 5 In the 1980s, Cleve Moler met John N. Little. They decided to reprogram MATLAB in C and market it for the IBM desktops that were replacing mainframe computers at the time. John Little and programmer Steve Bangert re-programmed MATLAB in C, created the MATLAB programming language, and developed features for toolboxes.",
    "commercial_development": "MATLAB was first released as a commercial product in 1984 at the Automatic Control Conference in Las Vegas. MathWorks, Inc. was founded to develop the software and the MATLAB programming language was released. The first MATLAB sale was the following year, when Nick Trefethen from the Massachusetts Institute of Technology bought ten copies. By the end of the 1980s, several hundred copies of MATLAB had been sold to universities for student use. The software was popularized largely thanks to toolboxes created by experts in various fields for performing specialized mathematical tasks. Many of the toolboxes were developed as a result of Stanford students that used MATLAB in academia, then brought the software with them to the private sector. Over time, MATLAB was re-written for early operating systems created by Digital Equipment Corporation, VAX, Sun Microsystems, and for Unix PCs. Version 3 was released in 1987. The first MATLAB compiler was developed by Stephen C. Johnson in the 1990s. In 2000, MathWorks added a Fortran-based library for linear algebra in MATLAB 6, replacing the software's original LINPACK and EISPACK subroutines that were in C. MATLAB's Parallel Computing Toolbox was released at the 2004 Supercomputing Conference and support for graphics processing units (GPUs) was added to it in 2010.",
    "recent_history": "Some especially large changes to the software were made with version 8 in 2012. The user interface was reworked[citation needed] and Simulink's functionality was expanded. By 2016, MATLAB had introduced several technical and user interface improvements, including the MATLAB Live Editor notebook, and other features.",
    "release_history": "For a complete list of changes of both MATLAB an official toolboxes, check MATLAB previous releases. Versions of the MATLAB product family Name of release MATLAB Simulink, Stateflow (MATLAB attachments) Year Volume 8 5.0 1996 Volume 9 5.1 1997 R9.1 5.1.1 1997 R10 5.2 1998 R10.1 5.2.1 1998 R11 5.3 1999 R11.1 5.3.1 1999 R12 6.0 2000 R12.1 6.1 2001 R13 6.5 2002 R13SP1 6.5.1 2003 R13SP2 6.5.2 R14 7 6.0 2004 R14SP1 7.0.1 6.1 R14SP2 7.0.4 6.2 2005 R14SP3 7.1 6.3 R2006a 7.2 6.4 2006 R2006b 7.3 6.5 R2007a 7.4 6.6 2007 R2007b 7.5 7.0 R2008a 7.6 7.1 2008 R2008b 7.7 7.2 R2009a 7.8 7.3 2009 R2009b 7.9 7.4 R2010a 7.10 7.5 2010 R2010b 7.11 7.6 R2011a 7.12 7.7 2011 R2011b 7.13 7.8 R2012a 7.14 7.9 2012 R2012b 8.0 8.0 R2013a 8.1 8.1 2013 R2013b 8.2 8.2 R2014a 8.3 8.3 2014 R2014b 8.4 8.4 R2015a 8.5 8.5 2015 R2015b 8.6 8.6 R2016a 9.0 8.7 2016 R2016b 9.1 8.8 R2017a 9.2 8.9 2017 R2017b 9.3 9.0 R2018a 9.4 9.1 2018 R2018b 9.5 9.2 R2019a 9.6 9.3 2019 R2019b 9.7 10.0 R2020a 9.8 10.1 2020 R2020b 9.9 10.2 R2021a 9.10 10.3 2021 R2021b 9.11 10.4 R2022a 9.12 10.5 2022 R2022b 9.13 10.6 R2023a 9.14 10.7 2023 R2023b 23.2 23.2 R2024a 24.1 24.1 2024 R2024b 24.2 24.2",
    "syntax": "The MATLAB application is built around the MATLAB programming language. Common usage of the MATLAB application involves using the Command Window as an interactive mathematical shell or executing text files containing MATLAB code.",
    "variables": "Variables are defined using the assignment operator, =. MATLAB is a weakly typed programming language because types are implicitly converted. It is an inferred typed language because variables can be assigned without declaring their type, except if they are to be treated as symbolic objects, and that their type can change. Values can come from constants, from computation involving values of other variables, or from the output of a function. For example: >> x = 17 x = 17 >> x = 'hat' x = hat >> x = [3*4, pi/2] x = 12.0000 1.5708 >> y = 3*sin(x) y = -1.6097 3.0000",
    "vectors_and_matrices": "A simple array is defined using the colon syntax: initial:increment:terminator. For instance: >> array = 1:2:9 array = 1 3 5 7 9 defines a variable named array (or assigns a new value to an existing variable with the name array) which is an array consisting of the values 1, 3, 5, 7, and 9. That is, the array starts at 1 (the initial value), increments with each step from the previous value by 2 (the increment value), and stops once it reaches (or is about to exceed) 9 (the terminator value). The increment value can actually be left out of this syntax (along with one of the colons), to use a default value of 1. >> ari = 1:5 ari = 1 2 3 4 5 assigns to the variable named ari an array with the values 1, 2, 3, 4, and 5, since the default value of 1 is used as the increment. Indexing is one-based, which is the usual convention for matrices in mathematics, unlike zero-based indexing commonly used in other programming languages such as C, C++, and Java. Matrices can be defined by separating the elements of a row with blank space or comma and using a semicolon to separate the rows. The list of elements should be surrounded by square brackets []. Parentheses () are used to access elements and subarrays (they are also used to denote a function argument list). >> A = [16, 3, 2, 13 ; 5, 10, 11, 8 ; 9, 6, 7, 12 ; 4, 15, 14, 1] A = 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 >> A(2,3) ans = 11 Sets of indices can be specified by expressions such as 2:4, which evaluates to [2, 3, 4]. For example, a submatrix taken from rows 2 through 4 and columns 3 through 4 can be written as: >> A(2:4,3:4) ans = 11 8 7 12 14 1 A square identity matrix of size n can be generated using the function eye, and matrices of any size with zeros or ones can be generated with the functions zeros and ones, respectively. >> eye(3,3) ans = 1 0 0 0 1 0 0 0 1 >> zeros(2,3) ans = 0 0 0 0 0 0 >> ones(2,3) ans = 1 1 1 1 1 1 Transposing a vector or a matrix is done either by the function transpose or by adding dot-prime after the matrix (without the dot, prime will perform conjugate transpose for complex arrays): >> A = [1 ; 2], B = A.', C = transpose(A) A = 1 2 B = 1 2 C = 1 2 >> D = [0, 3 ; 1, 5], D.' D = 0 3 1 5 ans = 0 1 3 5 Most functions accept arrays as input and operate element-wise on each element. For example, mod(2*J,n) will multiply every element in J by 2, and then reduce each element modulo n. MATLAB does include standard for and while loops, but (as in other similar applications such as APL and R), using the vectorized notation is encouraged and is often faster to execute. The following code, excerpted from the function magic.m, creates a magic square M for odd values of n (MATLAB function meshgrid is used here to generate square matrices I and J containing ⁠ 1 : n {\\displaystyle 1:n} ⁠): [J,I] = meshgrid(1:n); A = mod(I + J - (n + 3) / 2, n); B = mod(I + 2 * J - 2, n); M = n * A + B + 1;",
    "structures": "MATLAB supports structure data types. Since all variables in MATLAB are arrays, a more adequate name is structure array, where each element of the array has the same field names. In addition, MATLAB supports dynamic field names (field look-ups by name, field manipulations, etc.).",
    "functions": "When creating a MATLAB function, the name of the file should match the name of the first function in the file. Valid function names begin with an alphabetic character, and can contain letters, numbers, or underscores. Variables and functions are case sensitive. rgbImage = imread('ecg.png'); grayImage = rgb2gray(rgbImage); % for non-indexed images level = graythresh(grayImage); % threshold for converting image to binary, binaryImage = im2bw(grayImage, level); % Extract the individual red, green, and blue color channels. redChannel = rgbImage(:, :, 1); greenChannel = rgbImage(:, :, 2); blueChannel = rgbImage(:, :, 3); % Make the black parts pure red. redChannel(~binaryImage) = 255; greenChannel(~binaryImage) = 0; blueChannel(~binaryImage) = 0; % Now recombine to form the output image. rgbImageOut = cat(3, redChannel, greenChannel, blueChannel); imshow(rgbImageOut);",
    "function_handles": "MATLAB supports elements of lambda calculus by introducing function handles, or function references, which are implemented either in .m files or anonymous/nested functions.",
    "classes_and_object_oriented_programming": "MATLAB supports object-oriented programming including classes, inheritance, virtual dispatch, packages, pass-by-value semantics, and pass-by-reference semantics. However, the syntax and calling conventions are significantly different from other languages. MATLAB has value classes and reference classes, depending on whether the class has handle as a super-class (for reference classes) or not (for value classes). Method call behavior is different between value and reference classes. For example, a call to a method: object.method(); can alter any member of object only if object is an instance of a reference class, otherwise value class methods must return a new instance if it needs to modify the object. An example of a simple class is provided below: classdef Hello methods function greet(obj) disp('Hello!') end end end When put into a file named hello.m, this can be executed with the following commands: >> x = Hello(); >> x.greet(); Hello!",
    "graphics_and_graphical_user_interface_programming": "Graphs are unavailable due to technical issues. Updates on reimplementing the Graph extension, which will be known as the Chart extension, can be found on Phabricator and on MediaWiki.org. MATLAB has tightly integrated graph-plotting features. For example, the function plot can be used to produce a graph from two vectors x and y. The code: x = 0:pi/100:2*pi; y = sin(x); plot(x,y) produces the following figure of the sine function: MATLAB supports three-dimensional graphics as well: [X,Y] = meshgrid(-10:0.25:10,-10:0.25:10); f = sinc(sqrt((X/pi).^2+(Y/pi).^2)); mesh(X,Y,f); axis([-10 10 -10 10 -0.3 1]) xlabel('{\\bfx}') ylabel('{\\bfy}') zlabel('{\\bfsinc} ({\\bfR})') hidden off [X,Y] = meshgrid(-10:0.25:10,-10:0.25:10); f = sinc(sqrt((X/pi).^2+(Y/pi).^2)); surf(X,Y,f); axis([-10 10 -10 10 -0.3 1]) xlabel('{\\bfx}') ylabel('{\\bfy}') zlabel('{\\bfsinc} ({\\bfR})') This code produces a wireframe 3D plot of the two-dimensional unnormalized sinc function: This code produces a surface 3D plot of the two-dimensional unnormalized sinc function: MATLAB supports developing graphical user interface (GUI) applications. UIs can be generated either programmatically or using visual design environments such as GUIDE and App Designer.",
    "matlab_and_other_languages": "MATLAB can call functions and subroutines written in the programming languages C or Fortran. A wrapper function is created allowing MATLAB data types to be passed and returned. MEX files (MATLAB executables) are the dynamically loadable object files created by compiling such functions. Since 2014 increasing two-way interfacing with Python was being added. Libraries written in Perl, Java, ActiveX or .NET can be directly called from MATLAB, and many MATLAB libraries (for example XML or SQL support) are implemented as wrappers around Java or ActiveX libraries. Calling MATLAB from Java is more complicated, but can be done with a MATLAB toolbox which is sold separately by MathWorks, or using an undocumented mechanism called JMI (Java-to-MATLAB Interface), (which should not be confused with the unrelated Java Metadata Interface that is also called JMI). Official MATLAB API for Java was added in 2016. As alternatives to the MuPAD based Symbolic Math Toolbox available from MathWorks, MATLAB can be connected to Maple or Mathematica. Libraries also exist to import and export MathML.",
    "relations_to_us_sanctions": "In 2020, MATLAB withdrew services from two Chinese universities as a result of US sanctions. The universities said this will be responded to by increased use of open-source alternatives and by developing domestic alternatives.",
    "see_also": "Comparison of numerical-analysis software List of numerical-analysis software",
    "notes": "^ The L-Shaped Membrane. MathWorks. 2003. Retrieved February 7, 2014. ^ a b MathWorks Announces Release 2024b of MATLAB and Simulink. Retrieved September 15, 2024. ^ System Requirements and Platform Availability. MathWorks. Retrieved August 14, 2013. ^ Platform Road Map for MATLAB and Simulink Product Families. de.mathworks.com. Retrieved December 22, 2021. ^ Protect Your Source Code. MathWorks. Retrieved November 1, 2019. ^ MEX Platform Compatibility. MathWorks. Retrieved November 1, 2019. ^ MAT-File Versions. MathWorks. Retrieved November 1, 2019. ^ Save Figure to Reopen in MATLAB Later. MathWorks. Retrieved November 1, 2019. ^ Live Code File Format (.mlx). MathWorks. Retrieved November 1, 2019. ^ MATLAB App Designer. MathWorks. Retrieved November 1, 2019. ^ Toolbox Distribution. MathWorks. Retrieved November 1, 2019. ^ MATLAB App Installer File. MathWorks. Retrieved November 1, 2019. ^ Support Package Installation. MathWorks. Retrieved November 1, 2019. ^ An interview with CLEVE MOLER Conducted by Thomas Haigh On 8 and 9 March, 2004 Santa Barbara, California (PDF). Computer History Museum. Archived from the original (PDF) on December 27, 2014. Retrieved December 6, 2016. So APL, Speakeasy, LINPACK, EISPACK, and PL0 were the predecessors to MATLAB. ^ Bezanson, Jeff; Karpinski, Stefan; Shah, Viral; Edelman, Alan (February 14, 2012). Why We Created Julia. Julia Language. Retrieved December 1, 2016. ^ Eaton, John W. (May 21, 2001). Octave: Past, Present, and Future (PDF). Texas-Wisconsin Modeling and Control Consortium. Archived from the original (PDF) on August 9, 2017. Retrieved December 1, 2016. ^ History. Scilab. Archived from the original on December 1, 2016. Retrieved December 1, 2016. ^ Matrices and Arrays - MATLAB & Simulink. www.mathworks.com. Retrieved May 21, 2022. ^ The MathWorks (February 2020). Company Overview (PDF). ^ Current number of matlab users worldwide. Mathworks. November 9, 2017. Retrieved April 26, 2023. ^ a b c d e f g h Chonacky, N.; Winch, D. (2005). Reviews of Maple, Mathematica, and Matlab: Coming Soon to a Publication Near You. Computing in Science & Engineering. 7 (2). Institute of Electrical and Electronics Engineers (IEEE): 9–10. Bibcode:2005CSE.....7b...9C. doi:10.1109/mcse.2005.39. ISSN 1521-9615. S2CID 29660034. ^ a b c d e f g h Haigh, Thomas. Cleve Moler: Mathematical Software Pioneer and Creator of Matlab (PDF). IEEE Annals of the History of Computing. IEEE Computer Society. ^ A Brief History of MATLAB. www.mathworks.com. Retrieved September 4, 2021. ^ a b c d e f g Moler, Cleve; Little, Jack (June 12, 2020). A history of MATLAB. Proceedings of the ACM on Programming Languages. 4 (HOPL). Association for Computing Machinery (ACM): 1–67. doi:10.1145/3386331. ISSN 2475-1421. ^ a b Xue, D.; Press, T.U. (2020). MATLAB Programming: Mathematical Problem Solutions. De Gruyter STEM. De Gruyter. p. 21. ISBN 978-3-11-066370-9. Retrieved September 16, 2020. ^ a b Press, CRC (2008). Solving Applied Mathematical Problems with MATLAB. CRC Press. p. 6. ISBN 978-1-4200-8251-7. Retrieved September 16, 2020. ^ Woodford, C.; Phillips, C. (2011). Numerical Methods with Worked Examples: Matlab Edition. SpringerLink : Bücher. Springer Netherlands. p. 1. ISBN 978-94-007-1366-6. Retrieved September 16, 2020. ^ Tranquillo, J.V. (2011). MATLAB for Engineering and the Life Sciences. Synthesis digital library of engineering and computer science. Morgan & Claypool Publishers. ISBN 978-1-60845-710-6. Retrieved September 17, 2020. ^ LoTurco, Lori (January 28, 2020). Accelerating the pace of engineering. MIT News. Massachusetts Institute of Technology. Retrieved September 16, 2020. ^ Gatto, Marino; Rizzoli, Andrea (1993). Review of MATLAB, Version 4.0. Natural Resource Modeling. 7 (1). Wiley: 85–88. Bibcode:1993NRM.....7...85G. doi:10.1111/j.1939-7445.1993.tb00141.x. ISSN 0890-8575. ^ Cho, M.J.; Martinez, W.L. (2014). Statistics in MATLAB: A Primer. Chapman & Hall/CRC Computer Science & Data Analysis. CRC Press. ISBN 978-1-4665-9657-3. Retrieved September 17, 2020. ^ Xue, D.; Chen, Y. (2013). System Simulation Techniques with MATLAB and Simulink. No Longer used. Wiley. p. 17. ISBN 978-1-118-69437-4. Retrieved October 15, 2020. ^ MATLAB Previous releases. MathWorks. Retrieved December 3, 2024. ^ MATLAB Documentation. MathWorks. Retrieved August 14, 2013. ^ Comparing MATLAB with Other OO Languages. MATLAB. MathWorks. Retrieved August 14, 2013. ^ Create Symbolic Variables and Expressions. Symbolic Math Toolbox. MathWorks. Retrieved August 14, 2013. ^ Matrix Indexing. MathWorks. Retrieved August 14, 2013. ^ Structures. MathWorks. Retrieved August 14, 2013. ^ Generate Field Names from Variables. MathWorks. Retrieved August 14, 2013. ^ Case and Space Sensitivity. MathWorks. Retrieved November 1, 2019. ^ Function Handles. MathWorks. Retrieved August 14, 2013. ^ Anonymous Functions. MathWorks. Retrieved August 14, 2013. ^ Nested Functions. MathWorks. ^ Object-Oriented Programming. MathWorks. Retrieved August 14, 2013. ^ Comparing Handle and Value Classes. MathWorks. ^ MATLAB GUI. MathWorks. April 30, 2011. Retrieved August 14, 2013. ^ Create a Simple GUIDE GUI. MathWorks. Retrieved August 14, 2014. ^ MATLAB App Designer. MathWorks. Retrieved November 1, 2019. ^ Application Programming Interfaces to MATLAB. MathWorks. Archived from the original on September 15, 2017. Retrieved August 14, 2013. ^ Create MEX-Files. MathWorks. Archived from the original on March 3, 2014. Retrieved August 14, 2013. ^ Spielman, Dan (February 10, 2004). Connecting C and Matlab. Yale University, Computer Science Department. Retrieved May 20, 2008. ^ MATLAB Engine for Python. MathWorks. Retrieved June 13, 2015. ^ Call Python Libraries. MathWorks. Retrieved June 13, 2015. ^ External Programming Language Interfaces. MathWorks. Archived from the original on March 11, 2014. Retrieved August 14, 2013. ^ Call Perl script using appropriate operating system executable. MathWorks. Retrieved November 7, 2013. ^ MATLAB Builder JA. MathWorks. Retrieved June 7, 2010. ^ Altman, Yair (April 14, 2010). Java-to-Matlab Interface. Undocumented Matlab. Archived from the original on September 5, 2015. Retrieved June 7, 2010. ^ Kaplan, Joshua. matlabcontrol JMI. ^ MATLAB Engine API for Java. MathWorks. Retrieved September 15, 2016. ^ Germundsson, Roger (September 30, 1998). MaMa: Calling MATLAB from Mathematica with MathLink. Wolfram Research. Wolfram Library Archive. ^ rsmenon; szhorvat (2013). MATLink: Communicate with MATLAB from Mathematica. Retrieved August 14, 2013. ^ Weitzel, Michael (September 1, 2006). MathML import/export. MathWorks - File Exchange. Archived from the original on February 25, 2011. Retrieved August 14, 2013. ^ US military ban locks two Chinese universities out of popular software. South China Morning Post. June 12, 2020. Retrieved November 6, 2020.",
    "further_reading": "Gilat, Amos (2004). MATLAB: An Introduction with Applications 2nd Edition. John Wiley & Sons. ISBN 978-0-471-69420-5. Quarteroni, Alfio; Saleri, Fausto (2006). Scientific Computing with MATLAB and Octave. Springer. ISBN 978-3-540-32612-0. Ferreira, A.J.M. (2009). MATLAB Codes for Finite Element Analysis. Springer. ISBN 978-1-4020-9199-5. Lynch, Stephen (2004). Dynamical Systems with Applications using MATLAB. Birkhäuser. ISBN 978-0-8176-4321-8.",
    "external_links": "MATLAB at Wikipedia's sister projects Media from CommonsTextbooks from WikibooksResources from Wikiversity Official website vteNumerical-analysis softwareFree Advanced Simulation Library ADMB Chapel Euler Mathematical Toolbox FreeFem++ FreeMat Genius Gmsh GNU Octave gretl Julia Jupyter (Julia, Python, R; IPython) MFEM OpenFOAM Python R SageMath Salome ScicosLab Scilab X10 Weka Discontinued Fortress Proprietary DADiSP FEATool Multiphysics GAUSS LabVIEW Maple Mathcad Mathematica MATLAB MWorks SAS (SAS Viya) Speakeasy VisSim Comparison vteComputer algebra systemsOpen-source Axiom Cadabra CoCoA Fermat FriCAS FORM GAP GiNaC Macaulay2 Maxima Normaliz PARI/GP REDUCE SageMath Singular SymPy Xcas/Giac Yacas Proprietary ClassPad Manager KANT Magma Maple Mathcad Mathematica muPAD (MATLAB symbolic math toolbox) SMath Studio TI InterActive! Engineering Equation Solver Discontinued CAMAL Derive Erable LiveMath Macsyma Mathomatic muMATH ALTRAN Category List vteStatistical softwarePublic domain Dataplot Epi Info CSPro X-12-ARIMA Open-source ADMB DAP gretl jamovi JASP JAGS JMulTi Julia Jupyter (Julia, Python, R) GNU Octave OpenBUGS Orange PSPP Python (statsmodels, PyMC3, IPython, IDLE) R (RStudio) SageMath SimFiT SOFA Statistics Stan XLispStat Freeware BV4.1 CumFreq SegReg XploRe WinBUGS CommercialCross-platform Data Desk GAUSS GraphPad InStat GraphPad Prism IBM SPSS Statistics IBM SPSS Modeler JMP Maple Mathcad Mathematica MATLAB OxMetrics RATS Revolution Analytics SAS (SAS Viya) SmartPLS Stata StatView SUDAAN S-PLUS TSP World Programming System (WPS) Windows only BMDP EViews GenStat LIMDEP LISREL MedCalc Microfit Minitab MLwiN NCSS Shazam SigmaStat Statistica StatsDirect StatXact SYSTAT The Unscrambler Unistat Excel add-ons Analyse-it Unistat for Excel XLfit RExcel Comparison • Category vteImage processing softwareFree 3D Slicer AFNI CellCognition CellProfiler Dlib Endrov Fiji FMRIB Software Library FreeSurfer GemIdent GNU Octave ilastik ImageJ IMOD ITK InVesalius ITK-SNAP KNIME Mango OpenCV OsiriX VIGRA VXL Proprietary Amira Analyze Aphelion Avizo Bitplane IDL Mathematica MATLAB Mimics MountainsMap Tomviz Visage SDK vteLinear algebra Outline Glossary Basic concepts Scalar Vector Vector space Scalar multiplication Vector projection Linear span Linear map Linear projection Linear independence Linear combination Multilinear map Basis Change of basis Row and column vectors Row and column spaces Kernel Eigenvalues and eigenvectors Transpose Linear equations Matrices Block Decomposition Invertible Minor Multiplication Rank Transformation Cramer's rule Gaussian elimination Productive matrix Bilinear Orthogonality Dot product Hadamard product Inner product space Outer product Kronecker product Gram–Schmidt process Multilinear algebra Determinant Cross product Triple product Seven-dimensional cross product Geometric algebra Exterior algebra Bivector Multivector Tensor Outermorphism Vector space constructions Dual Direct sum Function space Quotient Subspace Tensor product Numerical Floating-point Numerical stability Basic Linear Algebra Subprograms Sparse matrix Comparison of linear algebra libraries Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category",
    "document": "MATLAB was invented by mathematician and computer programmer Cleve Moler. The idea for MATLAB was based on his 1960s PhD thesis. Moler became a math professor at the University of New Mexico and started developing MATLAB for his students as a hobby. He developed MATLAB's initial linear algebra programming in 1967 with his one-time thesis advisor, George Forsythe. This was followed by Fortran code for linear equations in 1971. Before version 1.0, MATLAB was not a programming language; it was a simple interactive matrix calculator. There were no programs, no toolboxes, no graphics. And no ODEs or FFTs. The first early version of MATLAB was completed in the late 1970s. The software was disclosed to the public for the first time in February 1979 at the Naval Postgraduate School in California. Early versions of MATLAB were simple matrix calculators with 71 pre-built functions. At the time, MATLAB was distributed for free to universities. Moler would leave copies at universities he visited and the software developed a strong following in the math departments of university campuses.: 5 In the 1980s, Cleve Moler met John N. Little. They decided to reprogram MATLAB in C and market it for the IBM desktops that were replacing mainframe computers at the time. John Little and programmer Steve Bangert re-programmed MATLAB in C, created the MATLAB programming language, and developed features for toolboxes. MATLAB was first released as a commercial product in 1984 at the Automatic Control Conference in Las Vegas. MathWorks, Inc. was founded to develop the software and the MATLAB programming language was released. The first MATLAB sale was the following year, when Nick Trefethen from the Massachusetts Institute of Technology bought ten copies. By the end of the 1980s, several hundred copies of MATLAB had been sold to universities for student use. The software was popularized largely thanks to toolboxes created by experts in various fields for performing specialized mathematical tasks. Many of the toolboxes were developed as a result of Stanford students that used MATLAB in academia, then brought the software with them to the private sector. Over time, MATLAB was re-written for early operating systems created by Digital Equipment Corporation, VAX, Sun Microsystems, and for Unix PCs. Version 3 was released in 1987. The first MATLAB compiler was developed by Stephen C. Johnson in the 1990s. In 2000, MathWorks added a Fortran-based library for linear algebra in MATLAB 6, replacing the software's original LINPACK and EISPACK subroutines that were in C. MATLAB's Parallel Computing Toolbox was released at the 2004 Supercomputing Conference and support for graphics processing units (GPUs) was added to it in 2010. Some especially large changes to the software were made with version 8 in 2012. The user interface was reworked[citation needed] and Simulink's functionality was expanded. By 2016, MATLAB had introduced several technical and user interface improvements, including the MATLAB Live Editor notebook, and other features. For a complete list of changes of both MATLAB an official toolboxes, check MATLAB previous releases. Versions of the MATLAB product family Name of release MATLAB Simulink, Stateflow (MATLAB attachments) Year Volume 8 5.0 1996 Volume 9 5.1 1997 R9.1 5.1.1 1997 R10 5.2 1998 R10.1 5.2.1 1998 R11 5.3 1999 R11.1 5.3.1 1999 R12 6.0 2000 R12.1 6.1 2001 R13 6.5 2002 R13SP1 6.5.1 2003 R13SP2 6.5.2 R14 7 6.0 2004 R14SP1 7.0.1 6.1 R14SP2 7.0.4 6.2 2005 R14SP3 7.1 6.3 R2006a 7.2 6.4 2006 R2006b 7.3 6.5 R2007a 7.4 6.6 2007 R2007b 7.5 7.0 R2008a 7.6 7.1 2008 R2008b 7.7 7.2 R2009a 7.8 7.3 2009 R2009b 7.9 7.4 R2010a 7.10 7.5 2010 R2010b 7.11 7.6 R2011a 7.12 7.7 2011 R2011b 7.13 7.8 R2012a 7.14 7.9 2012 R2012b 8.0 8.0 R2013a 8.1 8.1 2013 R2013b 8.2 8.2 R2014a 8.3 8.3 2014 R2014b 8.4 8.4 R2015a 8.5 8.5 2015 R2015b 8.6 8.6 R2016a 9.0 8.7 2016 R2016b 9.1 8.8 R2017a 9.2 8.9 2017 R2017b 9.3 9.0 R2018a 9.4 9.1 2018 R2018b 9.5 9.2 R2019a 9.6 9.3 2019 R2019b 9.7 10.0 R2020a 9.8 10.1 2020 R2020b 9.9 10.2 R2021a 9.10 10.3 2021 R2021b 9.11 10.4 R2022a 9.12 10.5 2022 R2022b 9.13 10.6 R2023a 9.14 10.7 2023 R2023b 23.2 23.2 R2024a 24.1 24.1 2024 R2024b 24.2 24.2 The MATLAB application is built around the MATLAB programming language. Common usage of the MATLAB application involves using the Command Window as an interactive mathematical shell or executing text files containing MATLAB code. Variables are defined using the assignment operator, =. MATLAB is a weakly typed programming language because types are implicitly converted. It is an inferred typed language because variables can be assigned without declaring their type, except if they are to be treated as symbolic objects, and that their type can change. Values can come from constants, from computation involving values of other variables, or from the output of a function. For example: >> x = 17 x = 17 >> x = 'hat' x = hat >> x = [3*4, pi/2] x = 12.0000 1.5708 >> y = 3*sin(x) y = -1.6097 3.0000 A simple array is defined using the colon syntax: initial:increment:terminator. For instance: >> array = 1:2:9 array = 1 3 5 7 9 defines a variable named array (or assigns a new value to an existing variable with the name array) which is an array consisting of the values 1, 3, 5, 7, and 9. That is, the array starts at 1 (the initial value), increments with each step from the previous value by 2 (the increment value), and stops once it reaches (or is about to exceed) 9 (the terminator value). The increment value can actually be left out of this syntax (along with one of the colons), to use a default value of 1. >> ari = 1:5 ari = 1 2 3 4 5 assigns to the variable named ari an array with the values 1, 2, 3, 4, and 5, since the default value of 1 is used as the increment. Indexing is one-based, which is the usual convention for matrices in mathematics, unlike zero-based indexing commonly used in other programming languages such as C, C++, and Java. Matrices can be defined by separating the elements of a row with blank space or comma and using a semicolon to separate the rows. The list of elements should be surrounded by square brackets []. Parentheses () are used to access elements and subarrays (they are also used to denote a function argument list). >> A = [16, 3, 2, 13 ; 5, 10, 11, 8 ; 9, 6, 7, 12 ; 4, 15, 14, 1] A = 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 >> A(2,3) ans = 11 Sets of indices can be specified by expressions such as 2:4, which evaluates to [2, 3, 4]. For example, a submatrix taken from rows 2 through 4 and columns 3 through 4 can be written as: >> A(2:4,3:4) ans = 11 8 7 12 14 1 A square identity matrix of size n can be generated using the function eye, and matrices of any size with zeros or ones can be generated with the functions zeros and ones, respectively. >> eye(3,3) ans = 1 0 0 0 1 0 0 0 1 >> zeros(2,3) ans = 0 0 0 0 0 0 >> ones(2,3) ans = 1 1 1 1 1 1 Transposing a vector or a matrix is done either by the function transpose or by adding dot-prime after the matrix (without the dot, prime will perform conjugate transpose for complex arrays): >> A = [1 ; 2], B = A.', C = transpose(A) A = 1 2 B = 1 2 C = 1 2 >> D = [0, 3 ; 1, 5], D.' D = 0 3 1 5 ans = 0 1 3 5 Most functions accept arrays as input and operate element-wise on each element. For example, mod(2*J,n) will multiply every element in J by 2, and then reduce each element modulo n. MATLAB does include standard for and while loops, but (as in other similar applications such as APL and R), using the vectorized notation is encouraged and is often faster to execute. The following code, excerpted from the function magic.m, creates a magic square M for odd values of n (MATLAB function meshgrid is used here to generate square matrices I and J containing ⁠ 1 : n {\\displaystyle 1:n} ⁠): [J,I] = meshgrid(1:n); A = mod(I + J - (n + 3) / 2, n); B = mod(I + 2 * J - 2, n); M = n * A + B + 1; MATLAB supports structure data types. Since all variables in MATLAB are arrays, a more adequate name is structure array, where each element of the array has the same field names. In addition, MATLAB supports dynamic field names (field look-ups by name, field manipulations, etc.). When creating a MATLAB function, the name of the file should match the name of the first function in the file. Valid function names begin with an alphabetic character, and can contain letters, numbers, or underscores. Variables and functions are case sensitive. rgbImage = imread('ecg.png'); grayImage = rgb2gray(rgbImage); % for non-indexed images level = graythresh(grayImage); % threshold for converting image to binary, binaryImage = im2bw(grayImage, level); % Extract the individual red, green, and blue color channels. redChannel = rgbImage(:, :, 1); greenChannel = rgbImage(:, :, 2); blueChannel = rgbImage(:, :, 3); % Make the black parts pure red. redChannel(~binaryImage) = 255; greenChannel(~binaryImage) = 0; blueChannel(~binaryImage) = 0; % Now recombine to form the output image. rgbImageOut = cat(3, redChannel, greenChannel, blueChannel); imshow(rgbImageOut); MATLAB supports elements of lambda calculus by introducing function handles, or function references, which are implemented either in .m files or anonymous/nested functions. MATLAB supports object-oriented programming including classes, inheritance, virtual dispatch, packages, pass-by-value semantics, and pass-by-reference semantics. However, the syntax and calling conventions are significantly different from other languages. MATLAB has value classes and reference classes, depending on whether the class has handle as a super-class (for reference classes) or not (for value classes). Method call behavior is different between value and reference classes. For example, a call to a method: object.method(); can alter any member of object only if object is an instance of a reference class, otherwise value class methods must return a new instance if it needs to modify the object. An example of a simple class is provided below: classdef Hello methods function greet(obj) disp('Hello!') end end end When put into a file named hello.m, this can be executed with the following commands: >> x = Hello(); >> x.greet(); Hello! Graphs are unavailable due to technical issues. Updates on reimplementing the Graph extension, which will be known as the Chart extension, can be found on Phabricator and on MediaWiki.org. MATLAB has tightly integrated graph-plotting features. For example, the function plot can be used to produce a graph from two vectors x and y. The code: x = 0:pi/100:2*pi; y = sin(x); plot(x,y) produces the following figure of the sine function: MATLAB supports three-dimensional graphics as well: [X,Y] = meshgrid(-10:0.25:10,-10:0.25:10); f = sinc(sqrt((X/pi).^2+(Y/pi).^2)); mesh(X,Y,f); axis([-10 10 -10 10 -0.3 1]) xlabel('{\\bfx}') ylabel('{\\bfy}') zlabel('{\\bfsinc} ({\\bfR})') hidden off [X,Y] = meshgrid(-10:0.25:10,-10:0.25:10); f = sinc(sqrt((X/pi).^2+(Y/pi).^2)); surf(X,Y,f); axis([-10 10 -10 10 -0.3 1]) xlabel('{\\bfx}') ylabel('{\\bfy}') zlabel('{\\bfsinc} ({\\bfR})') This code produces a wireframe 3D plot of the two-dimensional unnormalized sinc function: This code produces a surface 3D plot of the two-dimensional unnormalized sinc function: MATLAB supports developing graphical user interface (GUI) applications. UIs can be generated either programmatically or using visual design environments such as GUIDE and App Designer. MATLAB can call functions and subroutines written in the programming languages C or Fortran. A wrapper function is created allowing MATLAB data types to be passed and returned. MEX files (MATLAB executables) are the dynamically loadable object files created by compiling such functions. Since 2014 increasing two-way interfacing with Python was being added. Libraries written in Perl, Java, ActiveX or .NET can be directly called from MATLAB, and many MATLAB libraries (for example XML or SQL support) are implemented as wrappers around Java or ActiveX libraries. Calling MATLAB from Java is more complicated, but can be done with a MATLAB toolbox which is sold separately by MathWorks, or using an undocumented mechanism called JMI (Java-to-MATLAB Interface), (which should not be confused with the unrelated Java Metadata Interface that is also called JMI). Official MATLAB API for Java was added in 2016. As alternatives to the MuPAD based Symbolic Math Toolbox available from MathWorks, MATLAB can be connected to Maple or Mathematica. Libraries also exist to import and export MathML. In 2020, MATLAB withdrew services from two Chinese universities as a result of US sanctions. The universities said this will be responded to by increased use of open-source alternatives and by developing domestic alternatives. Comparison of numerical-analysis software List of numerical-analysis software ^ The L-Shaped Membrane. MathWorks. 2003. Retrieved February 7, 2014. ^ a b MathWorks Announces Release 2024b of MATLAB and Simulink. Retrieved September 15, 2024. ^ System Requirements and Platform Availability. MathWorks. Retrieved August 14, 2013. ^ Platform Road Map for MATLAB and Simulink Product Families. de.mathworks.com. Retrieved December 22, 2021. ^ Protect Your Source Code. MathWorks. Retrieved November 1, 2019. ^ MEX Platform Compatibility. MathWorks. Retrieved November 1, 2019. ^ MAT-File Versions. MathWorks. Retrieved November 1, 2019. ^ Save Figure to Reopen in MATLAB Later. MathWorks. Retrieved November 1, 2019. ^ Live Code File Format (.mlx). MathWorks. Retrieved November 1, 2019. ^ MATLAB App Designer. MathWorks. Retrieved November 1, 2019. ^ Toolbox Distribution. MathWorks. Retrieved November 1, 2019. ^ MATLAB App Installer File. MathWorks. Retrieved November 1, 2019. ^ Support Package Installation. MathWorks. Retrieved November 1, 2019. ^ An interview with CLEVE MOLER Conducted by Thomas Haigh On 8 and 9 March, 2004 Santa Barbara, California (PDF). Computer History Museum. Archived from the original (PDF) on December 27, 2014. Retrieved December 6, 2016. So APL, Speakeasy, LINPACK, EISPACK, and PL0 were the predecessors to MATLAB. ^ Bezanson, Jeff; Karpinski, Stefan; Shah, Viral; Edelman, Alan (February 14, 2012). Why We Created Julia. Julia Language. Retrieved December 1, 2016. ^ Eaton, John W. (May 21, 2001). Octave: Past, Present, and Future (PDF). Texas-Wisconsin Modeling and Control Consortium. Archived from the original (PDF) on August 9, 2017. Retrieved December 1, 2016. ^ History. Scilab. Archived from the original on December 1, 2016. Retrieved December 1, 2016. ^ Matrices and Arrays - MATLAB & Simulink. www.mathworks.com. Retrieved May 21, 2022. ^ The MathWorks (February 2020). Company Overview (PDF). ^ Current number of matlab users worldwide. Mathworks. November 9, 2017. Retrieved April 26, 2023. ^ a b c d e f g h Chonacky, N.; Winch, D. (2005). Reviews of Maple, Mathematica, and Matlab: Coming Soon to a Publication Near You. Computing in Science & Engineering. 7 (2). Institute of Electrical and Electronics Engineers (IEEE): 9–10. Bibcode:2005CSE.....7b...9C. doi:10.1109/mcse.2005.39. ISSN 1521-9615. S2CID 29660034. ^ a b c d e f g h Haigh, Thomas. Cleve Moler: Mathematical Software Pioneer and Creator of Matlab (PDF). IEEE Annals of the History of Computing. IEEE Computer Society. ^ A Brief History of MATLAB. www.mathworks.com. Retrieved September 4, 2021. ^ a b c d e f g Moler, Cleve; Little, Jack (June 12, 2020). A history of MATLAB. Proceedings of the ACM on Programming Languages. 4 (HOPL). Association for Computing Machinery (ACM): 1–67. doi:10.1145/3386331. ISSN 2475-1421. ^ a b Xue, D.; Press, T.U. (2020). MATLAB Programming: Mathematical Problem Solutions. De Gruyter STEM. De Gruyter. p. 21. ISBN 978-3-11-066370-9. Retrieved September 16, 2020. ^ a b Press, CRC (2008). Solving Applied Mathematical Problems with MATLAB. CRC Press. p. 6. ISBN 978-1-4200-8251-7. Retrieved September 16, 2020. ^ Woodford, C.; Phillips, C. (2011). Numerical Methods with Worked Examples: Matlab Edition. SpringerLink : Bücher. Springer Netherlands. p. 1. ISBN 978-94-007-1366-6. Retrieved September 16, 2020. ^ Tranquillo, J.V. (2011). MATLAB for Engineering and the Life Sciences. Synthesis digital library of engineering and computer science. Morgan & Claypool Publishers. ISBN 978-1-60845-710-6. Retrieved September 17, 2020. ^ LoTurco, Lori (January 28, 2020). Accelerating the pace of engineering. MIT News. Massachusetts Institute of Technology. Retrieved September 16, 2020. ^ Gatto, Marino; Rizzoli, Andrea (1993). Review of MATLAB, Version 4.0. Natural Resource Modeling. 7 (1). Wiley: 85–88. Bibcode:1993NRM.....7...85G. doi:10.1111/j.1939-7445.1993.tb00141.x. ISSN 0890-8575. ^ Cho, M.J.; Martinez, W.L. (2014). Statistics in MATLAB: A Primer. Chapman & Hall/CRC Computer Science & Data Analysis. CRC Press. ISBN 978-1-4665-9657-3. Retrieved September 17, 2020. ^ Xue, D.; Chen, Y. (2013). System Simulation Techniques with MATLAB and Simulink. No Longer used. Wiley. p. 17. ISBN 978-1-118-69437-4. Retrieved October 15, 2020. ^ MATLAB Previous releases. MathWorks. Retrieved December 3, 2024. ^ MATLAB Documentation. MathWorks. Retrieved August 14, 2013. ^ Comparing MATLAB with Other OO Languages. MATLAB. MathWorks. Retrieved August 14, 2013. ^ Create Symbolic Variables and Expressions. Symbolic Math Toolbox. MathWorks. Retrieved August 14, 2013. ^ Matrix Indexing. MathWorks. Retrieved August 14, 2013. ^ Structures. MathWorks. Retrieved August 14, 2013. ^ Generate Field Names from Variables. MathWorks. Retrieved August 14, 2013. ^ Case and Space Sensitivity. MathWorks. Retrieved November 1, 2019. ^ Function Handles. MathWorks. Retrieved August 14, 2013. ^ Anonymous Functions. MathWorks. Retrieved August 14, 2013. ^ Nested Functions. MathWorks. ^ Object-Oriented Programming. MathWorks. Retrieved August 14, 2013. ^ Comparing Handle and Value Classes. MathWorks. ^ MATLAB GUI. MathWorks. April 30, 2011. Retrieved August 14, 2013. ^ Create a Simple GUIDE GUI. MathWorks. Retrieved August 14, 2014. ^ MATLAB App Designer. MathWorks. Retrieved November 1, 2019. ^ Application Programming Interfaces to MATLAB. MathWorks. Archived from the original on September 15, 2017. Retrieved August 14, 2013. ^ Create MEX-Files. MathWorks. Archived from the original on March 3, 2014. Retrieved August 14, 2013. ^ Spielman, Dan (February 10, 2004). Connecting C and Matlab. Yale University, Computer Science Department. Retrieved May 20, 2008. ^ MATLAB Engine for Python. MathWorks. Retrieved June 13, 2015. ^ Call Python Libraries. MathWorks. Retrieved June 13, 2015. ^ External Programming Language Interfaces. MathWorks. Archived from the original on March 11, 2014. Retrieved August 14, 2013. ^ Call Perl script using appropriate operating system executable. MathWorks. Retrieved November 7, 2013. ^ MATLAB Builder JA. MathWorks. Retrieved June 7, 2010. ^ Altman, Yair (April 14, 2010). Java-to-Matlab Interface. Undocumented Matlab. Archived from the original on September 5, 2015. Retrieved June 7, 2010. ^ Kaplan, Joshua. matlabcontrol JMI. ^ MATLAB Engine API for Java. MathWorks. Retrieved September 15, 2016. ^ Germundsson, Roger (September 30, 1998). MaMa: Calling MATLAB from Mathematica with MathLink. Wolfram Research. Wolfram Library Archive. ^ rsmenon; szhorvat (2013). MATLink: Communicate with MATLAB from Mathematica. Retrieved August 14, 2013. ^ Weitzel, Michael (September 1, 2006). MathML import/export. MathWorks - File Exchange. Archived from the original on February 25, 2011. Retrieved August 14, 2013. ^ US military ban locks two Chinese universities out of popular software. South China Morning Post. June 12, 2020. Retrieved November 6, 2020. Gilat, Amos (2004). MATLAB: An Introduction with Applications 2nd Edition. John Wiley & Sons. ISBN 978-0-471-69420-5. Quarteroni, Alfio; Saleri, Fausto (2006). Scientific Computing with MATLAB and Octave. Springer. ISBN 978-3-540-32612-0. Ferreira, A.J.M. (2009). MATLAB Codes for Finite Element Analysis. Springer. ISBN 978-1-4020-9199-5. Lynch, Stephen (2004). Dynamical Systems with Applications using MATLAB. Birkhäuser. ISBN 978-0-8176-4321-8. MATLAB at Wikipedia's sister projects Media from CommonsTextbooks from WikibooksResources from Wikiversity Official website vteNumerical-analysis softwareFree Advanced Simulation Library ADMB Chapel Euler Mathematical Toolbox FreeFem++ FreeMat Genius Gmsh GNU Octave gretl Julia Jupyter (Julia, Python, R; IPython) MFEM OpenFOAM Python R SageMath Salome ScicosLab Scilab X10 Weka Discontinued Fortress Proprietary DADiSP FEATool Multiphysics GAUSS LabVIEW Maple Mathcad Mathematica MATLAB MWorks SAS (SAS Viya) Speakeasy VisSim Comparison vteComputer algebra systemsOpen-source Axiom Cadabra CoCoA Fermat FriCAS FORM GAP GiNaC Macaulay2 Maxima Normaliz PARI/GP REDUCE SageMath Singular SymPy Xcas/Giac Yacas Proprietary ClassPad Manager KANT Magma Maple Mathcad Mathematica muPAD (MATLAB symbolic math toolbox) SMath Studio TI InterActive! Engineering Equation Solver Discontinued CAMAL Derive Erable LiveMath Macsyma Mathomatic muMATH ALTRAN Category List vteStatistical softwarePublic domain Dataplot Epi Info CSPro X-12-ARIMA Open-source ADMB DAP gretl jamovi JASP JAGS JMulTi Julia Jupyter (Julia, Python, R) GNU Octave OpenBUGS Orange PSPP Python (statsmodels, PyMC3, IPython, IDLE) R (RStudio) SageMath SimFiT SOFA Statistics Stan XLispStat Freeware BV4.1 CumFreq SegReg XploRe WinBUGS CommercialCross-platform Data Desk GAUSS GraphPad InStat GraphPad Prism IBM SPSS Statistics IBM SPSS Modeler JMP Maple Mathcad Mathematica MATLAB OxMetrics RATS Revolution Analytics SAS (SAS Viya) SmartPLS Stata StatView SUDAAN S-PLUS TSP World Programming System (WPS) Windows only BMDP EViews GenStat LIMDEP LISREL MedCalc Microfit Minitab MLwiN NCSS Shazam SigmaStat Statistica StatsDirect StatXact SYSTAT The Unscrambler Unistat Excel add-ons Analyse-it Unistat for Excel XLfit RExcel Comparison • Category vteImage processing softwareFree 3D Slicer AFNI CellCognition CellProfiler Dlib Endrov Fiji FMRIB Software Library FreeSurfer GemIdent GNU Octave ilastik ImageJ IMOD ITK InVesalius ITK-SNAP KNIME Mango OpenCV OsiriX VIGRA VXL Proprietary Amira Analyze Aphelion Avizo Bitplane IDL Mathematica MATLAB Mimics MountainsMap Tomviz Visage SDK vteLinear algebra Outline Glossary Basic concepts Scalar Vector Vector space Scalar multiplication Vector projection Linear span Linear map Linear projection Linear independence Linear combination Multilinear map Basis Change of basis Row and column vectors Row and column spaces Kernel Eigenvalues and eigenvectors Transpose Linear equations Matrices Block Decomposition Invertible Minor Multiplication Rank Transformation Cramer's rule Gaussian elimination Productive matrix Bilinear Orthogonality Dot product Hadamard product Inner product space Outer product Kronecker product Gram–Schmidt process Multilinear algebra Determinant Cross product Triple product Seven-dimensional cross product Geometric algebra Exterior algebra Bivector Multivector Tensor Outermorphism Vector space constructions Dual Direct sum Function space Quotient Subspace Tensor product Numerical Floating-point Numerical stability Basic Linear Algebra Subprograms Sparse matrix Comparison of linear algebra libraries Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category",
    "paradigm": "multi-paradigm: functional, imperative, procedural, object-oriented, array",
    "first_appeared": "late 1970s",
    "stable_release": "R2024b[2] Edit this on Wikidata",
    "typing_discipline": "dynamic, weak",
    "influenced": "Julia, Octave, Scilab",
    "influenced_by": "APL, EISPACK, Fortran, LINPACK, PL/0, Speakeasy",
    "stable_release_date": "2024-09-12T00:00:00Z"
  },
  {
    "title": "Rust (programming language)",
    "url": "https://en.wikipedia.org/wiki/Rust_(programming_language)",
    "early_years_": "Mozilla Foundation headquarters in Mountain View, California Rust began as a personal project by Mozilla employee Graydon Hoare in 2006. Hoare has stated that Rust was named for the group of fungi that are over-engineered for survival. During the time period between 2006 and 2009, Rust was not publicized to others at Mozilla and was written in Hoare's free time;: 7:50 Hoare began speaking about the language around 2009 after a small group at Mozilla became interested in the project. Hoare emphasized prioritizing good ideas from old languages over new development, citing languages including CLU (1974), BETA (1975), Mesa (1977), NIL (1981), Erlang (1987), Newsqueak (1988), Napier (1988), Hermes (1990), Sather (1990), Alef (1992), and Limbo (1996) as influences, stating many older languages [are] better than new ones, and describing the language as technology from the past come to save the future from itself.: 8:17 Early Rust developer Manish Goregaokar similarly described Rust as being based on mostly decades-old research. During the early years, the Rust compiler was written in about 38,000 lines of OCaml.: 15:34 Early Rust contained features such as explicit object-oriented programming via an obj keyword (later removed),: 10:08 and a typestates system that would allow variables of a type to be tracked along with state changes (such as going from uninitialized to initialized).: 13:12",
    "mozilla_sponsorship_": "Mozilla officially sponsored the Rust project in 2009. Brendan Eich and other executives, intrigued by the possibility of using Rust for a safe web browser engine, placed engineers on the project including Patrick Walton, Niko Matsakis, Felix Klock, and Manish Goregaokar. A conference room taken by the project developers was dubbed the nerd cave, with a sign placed outside the door. During this time period, work had shifted from the initial OCaml compiler to a self-hosting compiler, i.e., written in Rust, based on LLVM.[note 4] The Rust ownership system was also in place by 2010. The Rust logo was developed in 2011 based on a bicycle chainring. The first public release, Rust 0.1 was released on January 20, 2012 for Windows, Linux, and MacOS. The early 2010s saw increasing involvement from open source volunteers outside of Mozilla and outside of the United States. At Mozilla, executives would eventually employ over a dozen engineers to work on Rust full time over the next decade.",
    "evolution_": "The years from 2012 to 2015 were marked by substantial changes to the Rust type system, especially, removal of the typestate system, consolidation of other language features, and the removal of the garbage collector.: 18:36 Memory management through the ownership system was gradually consolidated and expanded to prevent memory-related bugs. By 2013, the garbage collector feature was rarely used, and was removed by the team in favor of the ownership system. Other changes during this time included the removal of pure functions, which were declared by an explicit pure annotation, in March 2013. Specialized syntax support for channels and various pointer types were removed to simplify the language.: 22:32 Rust's expansion and consolidation was influenced by developers coming from C++ (e.g., low-level performance of features), scripting languages (e.g., Cargo and package management), and functional programming (e.g., type systems development).: 30:50 Graydon Hoare stepped down from Rust in 2013. This allowed it to evolve organically under a more federated governance structure, with a core team of initially six people,: 21:45 around 30-40 developers total across various other teams,: 22:22 and a Request for Comments (RFC) process for new language features added in March 2014.: 33:47 The core team would grow to nine people by 2016: 21:45 with over 1600 proposed RFCs.: 34:08 According to Andrew Binstock writing for Dr. Dobb's Journal in January 2014, while Rust was widely viewed as a remarkably elegant language, adoption slowed because it radically changed from version to version. Rust development at this time was focused on finalizing the language features and moving towards 1.0 so it could begin promising backward compatibility.: 41:26 Six years after Mozilla sponsored its development, the first stable release, Rust 1.0, was published on May 15, 2015. A year after the release, the Rust compiler had accumulated over 1,400 contributors and there were over 5,000 third-party libraries published on the Rust package management website Crates.io.: 43:15",
    "servo_and_early_adoption_": "Early homepage of Mozilla's Servo browser engine The development of the Servo browser engine continued in parallel with Rust, jointly funded by Mozilla and Samsung. The teams behind the two projects worked in close collaboration; new features in Rust were tested out by the Servo team, and new features in Servo were used to give feedback back to the Rust team.: 5:41 The first version of Servo was released in 2016. The Firefox web browser shipped with Rust code as of 2016 (version 45),: 53:30 but components of Servo did not appear in Firefox until September 2017 (version 57) as part of the Gecko and Quantum projects. Improvements were made to the Rust toolchain ecosystem during the years following 1.0 including Rustfmt, integrated development environment integration,: 44:56 a regular compiler testing and release cycle,: 46:48 a community code of conduct, and community discussion organized through an IRC chat.: 50:36 The earliest adoption outside of Mozilla was by individual projects at Samsung, Facebook (now Meta Platforms), Dropbox, and others including Tilde, Inc. (the company behind ember.js).: 55:44 Amazon Web Services followed in 2020. Engineers cited performance, lack of a garbage collector, safety, and pleasantness of working in the language as reasons for the adoption, while acknowledging that it was a risky bet as Rust was new technology. Amazon developers cited the fact that Rust uses half as much electricity as similar code written in Java, behind only C, as found by a study at the University of Minho, NOVA University Lisbon, and the University of Coimbra.[note 5]",
    "mozilla_layoffs_and_rust_foundation_present": "In August 2020, Mozilla laid off 250 of its 1,000 employees worldwide, as part of a corporate restructuring caused by the COVID-19 pandemic. The team behind Servo was disbanded. The event raised concerns about the future of Rust, due to the overlap between the two projects. In the following week, the Rust Core Team acknowledged the severe impact of the layoffs and announced that plans for a Rust foundation were underway. The first goal of the foundation would be to take ownership of all trademarks and domain names, and take financial responsibility for their costs. On February 8, 2021, the formation of the Rust Foundation was announced by five founding companies: Amazon Web Services, Google, Huawei, Microsoft, and Mozilla. The foundation, led by Shane Miller for its first two years, offered $20,000 grants and other support for programmers working on major Rust features. In a blog post published on April 6, 2021, Google announced support for Rust within the Android Open Source Project as an alternative to C/C++. On November 22, 2021, the Moderation Team, which was responsible for enforcing the community code of conduct, announced their resignation in protest of the Core Team placing themselves unaccountable to anyone but themselves. In May 2022, the Rust Core Team, other lead programmers, and certain members of the Rust Foundation board implemented governance reforms in response to the incident. The Rust Foundation posted a draft for a new trademark policy on April 6, 2023, including rules for how the Rust logo and name can be used, which resulted in negative reactions from Rust users and contributors. On February 26, 2024, the U.S. White House released a 19-page press report urging software development to move to memory-safe programming languages; specifically, moving away from C and C++ and encouraging languages like C#, Go, Java, Ruby, Swift, and Rust. The report was widely interpreted as increasing interest in Rust. The report was released through the Office of the National Cyber Director.",
    "syntax_and_features": "Rust's syntax is similar to that of C and C++, although many of its features were influenced by functional programming languages such as OCaml. Hoare has described Rust as targeted at frustrated C++ developers and emphasized features such as safety, control of memory layout, and concurrency. Safety in Rust includes the guarantees of memory safety, type safety, and lack of data races.",
    "hello_world_program": "Below is a Hello, World! program in Rust. The fn keyword denotes a function, and the println! macro (see § Macros) prints the message to standard output. Statements in Rust are separated by semicolons. fn main() { println!(Hello, World!); }",
    "variables": "Variables in Rust are defined through the let keyword. The example below assigns a value to the variable with name foo and outputs its value. fn main() { let foo = 10; println!(The value of foo is {foo}); } Variables are immutable by default, but adding the mut keyword allows the variable to be mutated. The following example uses //, which denotes the start of a comment. fn main() { // This code would not compile without adding mut. let mut foo = 10; println!(The value of foo is {foo}); foo = 20; println!(The value of foo is {foo}); } Multiple let expressions can define multiple variables with the same name, known as variable shadowing. Variable shadowing allows transforming variables without having to name the variables differently. The example below declares a new variable with the same name that is double the original value: fn main() { let foo = 10; // This will output The value of foo is 10 println!(The value of foo is {foo}); let foo = foo * 2; // This will output The value of foo is 20 println!(The value of foo is {foo}); } Variable shadowing is also possible for values of different types. For example, going from a string to its length: fn main() { let letters = abc; let letters = letters.len(); }",
    "block_expressions_and_control_flow": "A block expression is delimited by curly brackets. When the last expression inside a block does not end with a semicolon, the block evaluates to the value of that trailing expression: fn main() { let x = { println!(this is inside the block); 1 + 2 }; println!(1 + 2 = {x}); } Trailing expressions of function bodies are used as the return value: fn add_two(x: i32) -> i32 { x + 2 }",
    "if_expressions": "An if conditional expression executes code based on whether the given value is true. else can be used for when the value evaluates to false, and else if can be used for combining multiple expressions. fn main() { let x = 10; if x > 5 { println!(value is greater than five); } if x % 7 == 0 { println!(value is divisible by 7); } else if x % 5 == 0 { println!(value is divisible by 5); } else { println!(value is not divisible by 7 or 5); } } if and else blocks can evaluate to a value, which can then be assigned to a variable: fn main() { let x = 10; let new_x = if x % 2 == 0 { x / 2 } else { 3 * x + 1 }; println!({new_x}); }",
    "while_loops": "while can be used to repeat a block of code while a condition is met. fn main() { // Iterate over all integers from 4 to 10 let mut value = 4; while value <= 10 { println!(value = {value}); value += 1; } }",
    "for_loops_and_iterators": "For loops in Rust loop over elements of a collection. for expressions work over any iterator type. fn main() { // Using `for` with range syntax for the same functionality as above // The syntax 4..=10 means the range from 4 to 10, up to and including 10. for value in 4..=10 { println!(value = {value}); } } In the above code, 4..=10 is a value of type Range which implements the Iterator trait. The code within the curly braces is applied to each element returned by the iterator. Iterators can be combined with functions over iterators like map, filter, and sum. For example, the following adds up all numbers between 1 and 100 that are multiples of 3: (1..=100).filter(|&x| x % 3 == 0).sum()",
    "loop_and_break_statements": "More generally, the loop keyword allows repeating a portion of code until a break occurs. break may optionally exit the loop with a value. In the case of nested loops, labels denoted by 'label_name can be used to break an outer loop rather than the innermost loop. fn main() { let value = 456; let mut x = 1; let y = loop { x *= 10; if x > value { break x / 10; } }; println!(largest power of ten that is smaller than or equal to value: {y}); let mut up = 1; 'outer: loop { let mut down = 120; loop { if up > 100 { break 'outer; } if down < 4 { break; } down /= 2; up += 1; println!(up: {up}, down: {down}); } up *= 2; } }",
    "pattern_matching": "The match and if let expressions can be used for pattern matching. For example, match can be used to double an optional integer value if present, and return zero otherwise: fn double(x: Option<u64>) -> u64 { match x { Some(y) => y * 2, None => 0, } } Equivalently, this can be written with if let and else: fn double(x: Option<u64>) -> u64 { if let Some(y) = x { y * 2 } else { 0 } }",
    "types": "Rust is strongly typed and statically typed, meaning that the types of all variables must be known at compilation time. Assigning a value of a particular type to a differently typed variable causes a compilation error. Type inference is used to determine the type of variables if unspecified. The default integer type is i32, and the default floating point type is f64. If the type of a literal number is not explicitly provided, it is either inferred from the context or the default type is used.",
    "primitive_types": "Integer types in Rust are named based on the signedness and the number of bits the type takes. For example, i32 is a signed integer that takes 32 bits of storage, whereas u8 is unsigned and only takes 8 bits of storage. isize and usize take storage depending on the architecture of the computer that runs the code, for example, on computers with 32-bit architectures, both types will take up 32 bits of space. By default, integer literals are in base-10, but different radices are supported with prefixes, for example, 0b11 for binary numbers, 0o567 for octals, and 0xDB for hexadecimals. By default, integer literals default to i32 as its type. Suffixes such as 4u32 can be used to explicitly set the type of a literal. Byte literals such as b'X' are available to represent the ASCII value (as a u8) of a specific character. The Boolean type is referred to as bool which can take a value of either true or false. A char takes up 32 bits of space and represents a Unicode scalar value: a Unicode codepoint that is not a surrogate. IEEE 754 floating point numbers are supported with f32 for single precision floats and f64 for double precision floats.",
    "user_defined_types": "User-defined types are created with the struct or enum keywords. The struct keyword is used to denote a record type that groups multiple related values. enums can take on different variants at runtime, with its capabilities similar to algebraic data types found in functional programming languages. Both records and enum variants can contain fields with different types. Alternative names, or aliases, for the same type can be defined with the type keyword. The impl keyword can define methods for a user-defined type. Data and functions are defined separately. Implementations fulfill a role similar to that of classes within other languages.",
    "standard_library": "The Rust standard library defines and implements many widely used custom data types, including core data structures such as Vec, Option, and HashMap, as well as smart pointer types. Rust also provides a way to exclude most of the standard library using the attribute #![no_std]; this enables applications, such as embedded devices, which want to remove dependency code or provide their own core data structures. Internally, the standard library is divided into three parts, core, alloc, and std, where std and alloc are excluded by #![no_std]. Screenshot of crates.io in June 2022",
    "pointers": "Summary of Rust's pointer and reference primitive types Type Description Examples &T &mut T References (immutable and mutable) let x_ref = &x; let x_ref = &mut x; Option<&T> Option<&mut T> Option wrapped reference Possibly null reference None let x_ref = Some(&x); let x_ref = Some(&mut x); Box<T> Option<Box<T>> A pointer to heap-allocated value (or possibly null pointer if wrapped in option) let boxed = Box::new(0); let boxed = Some(Box::new(Hello World)); *const T *mut T Raw pointers (immutable and mutable) Possibly null; unsafe to dereference let x_ptr = &x as *const T; let x_ptr = &mut x as *mut T; Rust does not use null pointers to indicate a lack of data, as doing so can lead to null dereferencing. Accordingly, the basic & and &mut references are guaranteed to not be null. Rust instead uses Option for this purpose: Some(T) indicates that a value is present, and None is analogous to the null pointer. Option implements a null pointer optimization, avoiding any spatial overhead for types that cannot have a null value (references or the NonZero types, for example). Unlike references, the raw pointer types *const and *mut may be null; however, it is impossible to dereference them unless the code is explicitly declared unsafe through the use of an unsafe block. Unlike dereferencing, the creation of raw pointers is allowed inside of safe Rust code.",
    "type_conversion": "This section is an excerpt from Type conversion § Rust.[edit] Rust provides no implicit type conversion (coercion) between primitive types. But, explicit type conversion (casting) can be performed using the as keyword. let x = 1000; println!(1000 as a u16 is: {}, x as u16);",
    "ownership": "Rust's ownership system consists of rules that ensure memory safety without using a garbage collector. At compile time, each value must be attached to a variable called the owner of that value, and every value must have exactly one owner. Values are moved between different owners through assignment or passing a value as a function parameter. Values can also be borrowed, meaning they are temporarily passed to a different function before being returned to the owner. With these rules, Rust can prevent the creation and use of dangling pointers: fn print_string(s: String) { println!({}, s); } fn main() { let s = String::from(Hello, World); print_string(s); // s consumed by print_string // s has been moved, so cannot be used any more // another print_string(s); would result in a compile error } Because of these ownership rules, Rust types are known as linear or affine types, meaning each value can be used exactly once. This enforces a form of software fault isolation as the owner of a value is solely responsible for its correctness and deallocation. When a value goes out of scope, it is dropped by running its destructor. The destructor may be programmatically defined through implementing the Drop trait. This helps manage resources such as file handles, network sockets, and locks, since when objects are dropped, the resources associated with them are closed or released automatically.",
    "lifetimes": "Object lifetime refers to the period of time during which a reference is valid; that is, the time between the object creation and destruction. These lifetimes are implicitly associated with all Rust reference types. While often inferred, they can also be indicated explicitly with named lifetime parameters (often denoted 'a, 'b, and so on). Lifetimes in Rust can be thought of as lexically scoped, meaning that the duration of an object lifetime is inferred from the set of locations in the source code (i.e., function, line, and column numbers) for which a variable is valid. For example, a reference to a local variable has a lifetime corresponding to the block it is defined in: fn main() { let x = 5; // ------------------+- Lifetime 'a // | let r = &x; // -+-- Lifetime 'b | // | | println!(r: {}, r); // | | // | | // -+ | } // ------------------+ The borrow checker in the Rust compiler then enforces that references are only used in the locations of the source code where the associated lifetime is valid. In the example above, storing a reference to variable x in r is valid, as variable x has a longer lifetime ('a) than variable r ('b). However, when x has a shorter lifetime, the borrow checker would reject the program: fn main() { let r; // ------------------+- Lifetime 'a // | { // | let x = 5; // -+-- Lifetime 'b | r = &x; // | | // ERROR here: x does not live long enough } // -| | // | println!(r: {}, r); // | } // ------------------+ Since the lifetime of the referenced variable ('b) is shorter than the lifetime of the variable holding the reference ('a), the borrow checker errors, preventing x from being used from outside its scope. Lifetimes can be indicated using explicit lifetime parameters on function arguments. For example, the following code specifies that the reference returned by the function has the same lifetime as original (and not necessarily the same lifetime as prefix): fn remove_prefix<'a>(mut original: &'a str, prefix: &str) -> &'a str { if original.starts_with(prefix) { original = original[prefix.len()..]; } original } When user-defined types hold references to data, they also need to use lifetime parameters. The example below parses some configuration options from a string and creates a struct containing the options. The function parse_config also showcases lifetime elision, which reduces the need for explicitly defining lifetime parameters. use std::collections::HashMap; // This struct has one lifetime parameter, 'src. The name is only used within the struct's definition. #[derive(Debug)] struct Config<'src> { hostname: &'src str, username: &'src str, } // The '_ lifetime parameter, in this case, refers to the anonymous lifetime attached to the type // of the argument `config`. fn parse_config(config: &str) -> Config<'_> { let key_values: HashMap<_, _> = config .lines() .filter(|line| !line.starts_with('#')) .filter_map(|line| line.split_once('=')) .map(|(key, value)| (key.trim(), value.trim())) .collect(); Config { hostname: key_values[hostname], username: key_values[username], } } fn main() { let config = parse_config( r#hostname = foobar username=barfoo#, ); println!(Parsed config: {:#?}, config); } In the compiler, ownership and lifetimes work together to prevent memory safety issues such as dangling pointers. A presentation on Rust by Emily Dunham from Mozilla's Rust team (linux.conf.au conference, Hobart, 2017)",
    "generics": "Rust's more advanced features include the use of generic functions. A generic function is given generic parameters, which allow the same function to be applied to different variable types. This capability reduces duplicate code and is known as parametric polymorphism. The following program calculates the sum of two things, for which addition is implemented using a generic function: use std::ops::Add; // sum is a generic function with one type parameter, T fn sum<T>(num1: T, num2: T) -> T where T: Add<Output = T>, // T must implement the Add trait where addition returns another T { num1 + num2 // num1 + num2 is syntactic sugar for num1.add(num2) provided by the Add trait } fn main() { let result1 = sum(10, 20); println!(Sum is: {}, result1); // Sum is: 30 let result2 = sum(10.23, 20.45); println!(Sum is: {}, result2); // Sum is: 30.68 } At compile time, polymorphic functions like sum are instantiated with the specific types the code requires; in this case, sum of integers and sum of floats. Generics can be used in functions to allow implementing a behavior for different types without repeating the same code. Generic functions can be written in relation to other generics, without knowing the actual type.",
    "traits": "Excerpt from std::io Rust's type system supports a mechanism called traits, inspired by type classes in the Haskell language, to define shared behavior between different types. For example, the Add trait can be implemented for floats and integers, which can be added; and the Display or Debug traits can be implemented for any type that can be converted to a string. Traits can be used to provide a set of common behavior for different types without knowing the actual type. This facility is known as ad hoc polymorphism. Generic functions can constrain the generic type to implement a particular trait or traits; for example, an add_one function might require the type to implement Add. This means that a generic function can be type-checked as soon as it is defined. The implementation of generics is similar to the typical implementation of C++ templates: a separate copy of the code is generated for each instantiation. This is called monomorphization and contrasts with the type erasure scheme typically used in Java and Haskell. Type erasure is also available via the keyword dyn (short for dynamic). Because monomorphization duplicates the code for each type used, it can result in more optimized code for specific-use cases, but compile time and size of the output binary are also increased. In addition to defining methods for a user-defined type, the impl keyword can be used to implement a trait for a type. Traits can provide additional derived methods when implemented. For example, the trait Iterator requires that the next method be defined for the type. Once the next method is defined, the trait can provide common functional helper methods over the iterator, such as map or filter.",
    "trait_objects": "Rust traits are implemented using static dispatch, meaning that the type of all values is known at compile time; however, Rust also uses a feature known as trait objects to accomplish dynamic dispatch, a type of polymorphism where the implementation of a polymorphic operation is chosen at runtime. This allows for behavior similar to duck typing, where all data types that implement a given trait can be treated as functionally equivalent. Trait objects are declared using the syntax dyn Tr where Tr is a trait. Trait objects are dynamically sized, therefore they must be put behind a pointer, such as Box. The following example creates a list of objects where each object can be printed out using the Display trait: use std::fmt::Display; let v: Vec<Box<dyn Display>> = vec![ Box::new(3), Box::new(5.0), Box::new(hi), ]; for x in v { println!({x}); } If an element in the list does not implement the Display trait, it will cause a compile-time error.",
    "memory_safety": "Rust is designed to be memory safe. It does not permit null pointers, dangling pointers, or data races. Data values can be initialized only through a fixed set of forms, all of which require their inputs to be already initialized. Unsafe code can subvert some of these restrictions, using the unsafe keyword. Unsafe code may also be used for low-level functionality, such as volatile memory access, architecture-specific intrinsics, type punning, and inline assembly.",
    "memory_management": "Rust does not use garbage collection. Memory and other resources are instead managed through the resource acquisition is initialization convention, with optional reference counting. Rust provides deterministic management of resources, with very low overhead. Values are allocated on the stack by default, and all dynamic allocations must be explicit. The built-in reference types using the & symbol do not involve run-time reference counting. The safety and validity of the underlying pointers is verified at compile time, preventing dangling pointers and other forms of undefined behavior. Rust's type system separates shared, immutable references of the form &T from unique, mutable references of the form &mut T. A mutable reference can be coerced to an immutable reference, but not vice versa.",
    "macros": "Macros allow generation and transformation of Rust code to reduce repetition. Macros come in two forms, with declarative macros defined through macro_rules!, and procedural macros, which are defined in separate crates.",
    "declarative_macros": "A declarative macro (also called a macro by example) is a macro, defined using the macro_rules! keyword, that uses pattern matching to determine its expansion. Below is an example that sums over all its arguments: macro_rules! sum { ( $initial:expr $(, $expr:expr )* $(,)? ) => { $initial $(+ $expr)* } } fn main() { let x = sum!(1, 2, 3); println!({x}); // prints 6 }",
    "procedural_macros": "Procedural macros are Rust functions that run and modify the compiler's input token stream, before any other components are compiled. They are generally more flexible than declarative macros, but are more difficult to maintain due to their complexity. Procedural macros come in three flavors: Function-like macros custom!(...) Derive macros #[derive(CustomDerive)] Attribute macros #[custom_attribute]",
    "interface_with_c_and_c": "Rust has a foreign function interface (FFI) that can be used both to call code written in languages such as C from Rust and to call Rust code from those languages. As of 2024[update], an external library called CXX exists for calling to or from C++. Rust and C differ in how they lay out structs in memory, so Rust structs may be given a #[repr(C)] attribute, forcing the same layout as the equivalent C struct.",
    "ecosystem": "Compiling a Rust program with Cargo The Rust ecosystem includes its compiler, its standard library, and additional components for software development. Component installation is typically managed by rustup, a Rust toolchain installer developed by the Rust project.",
    "compiler": "The Rust compiler, rustc, translates Rust code into low-level LLVM IR. LLVM is then invoked as a subcomponent to apply optimizations and translate the resulting IR into object code. A linker is then used to combine the objects into a single executable image or binary file. Other than LLVM, the compiler also supports using alternative backends such as GCC and Cranelift for code generation. The intention of those alternative backends is to increase platform coverage of Rust or to improve compilation times.",
    "cargo": "Cargo is Rust's build system and package manager. It downloads, compiles, distributes, and uploads packages—called crates—that are maintained in an official registry. It also acts as a front-end for Clippy and other Rust components. By default, Cargo sources its dependencies from the user-contributed registry crates.io, but Git repositories, crates in the local filesystem, and other external sources can also be specified as dependencies.",
    "rustfmt": "Rustfmt is a code formatter for Rust. It formats whitespace and indentation to produce code in accordance with a common style, unless otherwise specified. It can be invoked as a standalone program, or from a Rust project through Cargo. Example output of Clippy on a hello world Rust program",
    "clippy": "Clippy is Rust's built-in linting tool to improve the correctness, performance, and readability of Rust code. As of 2024[update], it has more than 700 rules.",
    "versioning_system": "Following Rust 1.0, new features are developed in nightly versions which are released daily. During each six-week release cycle, changes to nightly versions are released to beta, while changes from the previous beta version are released to a new stable version. Every two or three years, a new edition is produced. Editions are released to allow making limited breaking changes, such as promoting await to a keyword to support async/await features. Crates targeting different editions can interoperate with each other, so a crate can upgrade to a new edition even if its callers or its dependencies still target older editions. Migration to a new edition can be assisted with automated tooling.",
    "ide_support": "rust-analyzer is a collection of utilities that provides Integrated development environments (IDEs) and text editors with information about a Rust project through the Language Server Protocol. This enables features including autocompletion, and the display of compilation errors while editing.",
    "performance": "Since it performs no garbage collection, Rust is often faster than other memory-safe languages. Most of Rust's memory safety guarantees impose no runtime overhead, with the exception of array indexing which is checked at runtime by default. Performance impact of array indexing bounds checks varies, but can be significant in some cases. Rust provides two modes: safe and unsafe. Safe mode is the normal one, in which most Rust is written. In unsafe mode, the developer is responsible for the code's memory safety, which is used by developers for cases where the compiler is too restrictive. Many of Rust's features are so-called zero-cost abstractions, meaning they are optimized away at compile time and incur no runtime penalty. The ownership and borrowing system permits zero-copy implementations for some performance-sensitive tasks, such as parsing. Static dispatch is used by default to eliminate method calls, except for methods called on dynamic trait objects. The compiler also uses inline expansion to eliminate function calls and statically-dispatched method invocations. Since Rust uses LLVM, all performance improvements in LLVM apply to Rust also. Unlike C and C++, Rust allows for reordering struct and enum elements to reduce the sizes of structures in memory, for better memory alignment, and to improve cache access efficiency.",
    "adoption": "See also: Category:Rust (programming language) software Firefox has components written in Rust as part of the underlying Gecko browser engine. Rust is used in software across different domains. Components from the Servo browser engine (funded by Mozilla and Samsung) were incorporated in the Gecko browser engine underlying Firefox. In January 2023, Google (Alphabet) announced support for using third party Rust libraries in Chromium. Rust is used in several backend software projects of large web services. OpenDNS, a DNS resolution service owned by Cisco, uses Rust internally. Amazon Web Services uses Rust in performance-sensitive components of its several services. In 2019, AWS open-sourced Firecracker, a virtualization solution primarily written in Rust. Microsoft Azure IoT Edge, a platform used to run Azure services on IoT devices, has components implemented in Rust. Microsoft also uses Rust to run containerized modules with WebAssembly and Kubernetes. Cloudflare, a company providing content delivery network services, used Rust to build a new web proxy named Pingora for increased performance and efficiency. The npm package manager used Rust for its production authentication service in 2019. The Rust for Linux project has been supported in the Linux kernel since 2022. In operating systems, the Rust for Linux project, launched in 2020, merged initial support into the Linux kernel version 6.1 in late 2022. The project is active with a team of 6–7 developers, and has added more Rust code with kernel releases from 2022 to 2024, aiming to demonstrate the minimum viability of the project and resolve key compatibility blockers. The first drivers written in Rust were merged into the kernel for version 6.8. The Android developers used Rust in 2021 to rewrite existing components. Microsoft has rewritten parts of Windows in Rust. The r9 project aims to re-implement Plan 9 from Bell Labs in Rust. Rust has been used in the development of new operating systems such as Redox, a Unix-like operating system and microkernel, Theseus, an experimental operating system with modular state management, and most of Fuchsia. Rust is also used for command-line tools and operating system components, including stratisd, a file system manager and COSMIC, a desktop environment by System76. In web development, Deno, a secure runtime for JavaScript and TypeScript, is built on top of V8 using Rust and Tokio. Other notable adoptions in this space include Ruffle, an open-source SWF emulator, and Polkadot, an open source blockchain and cryptocurrency platform. Discord, an instant messaging software company, rewrote parts of its system in Rust for increased performance in 2020. In the same year, Dropbox announced that its file synchronization had been rewritten in Rust. Facebook (Meta) used Rust to redesign its system that manages source code for internal projects. In the 2024 Stack Overflow Developer Survey, 12.6% of respondents had recently done extensive development in Rust. The survey named Rust the most admired programming language every year from 2016 to 2024 (inclusive), based on the number of existing developers interested in continuing to work in the same language.[note 7] In 2024, Rust was the 6th most wanted technology, with 28.7% of developers not currently working in Rust expressing an interest in doing so.",
    "in_academic_research": "Rust has been studied in academic research, both for properties of the language itself as well as the utility the language provides for writing software used for research. Its features around safety and performance have been examined. In a journal article published to Proceedings of the International Astronomical Union, astrophysicists Blanco-Cuaresma and Bolmont re-implemented programs responsible for simulating multi-planet systems in Rust, and found it to be a competitive programming language for its speed and accuracy. Likewise, an article published on Nature shared several stories of bioinformaticians using Rust for its performance and safety. However, both articles have cited Rust's unique concepts, including its ownership system, being difficult to learn as one of the main drawbacks to adopting Rust.",
    "community": "Some Rust users refer to themselves as Rustaceans (similar to the word crustacean) and have adopted an orange crab, Ferris, as their unofficial mascot. Rust has been cited as having an inclusive community. According to one MIT Technology Review article, the Rust community was seen as unusually friendly to newcomers and particularly attracted people from the queer community, partly due to its code of conduct which outlined a set of expectations for Rust community members to follow. According to the 2024 survey conducted by the Rust survey team and published on the official blog, about 8.3% of Rust developers identify as lesbian, gay, bisexual, queer, or non-heterosexual (54.1% of 15.5%) and 5.5% as transgender (35.8% of 15.5%). About 22.4% of Rust developers live in the United States, followed by 14.1% in Germany, 6.1% in the United Kingdom, 5.5% in France, and 5.3% in China. As of the 2023 survey, 93% of Rust developers use English for technical communication.",
    "rust_foundation": "Rust FoundationFormationFebruary 8, 2021; 4 years ago (2021-02-08)FoundersAmazon Web ServicesGoogleHuaweiMicrosoftMozilla FoundationTypeNonprofit organizationLocationUnited StatesChairpersonShane MillerExecutive DirectorRebecca RumbulWebsitefoundation.rust-lang.org The Rust Foundation is a non-profit membership organization incorporated in United States, with the primary purposes of backing the technical project as a legal entity and helping to manage the trademark and infrastructure assets. It was established on February 8, 2021, with five founding corporate members (Amazon Web Services, Huawei, Google, Microsoft, and Mozilla). The foundation's board is chaired by Shane Miller. Starting in late 2021, its Executive Director and CEO is Rebecca Rumbul. Prior to this, Ashley Williams was interim executive director.",
    "governance_teams": "The Rust project is composed of teams that are responsible for different subareas of the development. The compiler team develops, manages, and optimizes compiler internals; and the language team designs new language features and helps implement them. The Rust project website lists 6 top-level teams as of July 2024[update]. Representatives among teams form the Leadership council, which oversees the Rust project as a whole.",
    "see_also": "Comparison of programming languages History of programming languages List of programming languages List of programming languages by type",
    "notes": "^ Including build tools, host tools, and standard library support for x86-64, ARM, MIPS, RISC-V, WebAssembly, i686, AArch64, PowerPC, and s390x. ^ Including Windows, Linux, macOS, FreeBSD, NetBSD, and Illumos. Host build tools on Android, iOS, Haiku, Redox, and Fuchsia are not officially shipped; these operating systems are supported as targets. ^ Third-party dependencies, e.g., LLVM or MSVC, are subject to their own licenses. ^ The list of Rust compiler versions (referred to as a bootstrapping chain) has history going back to 2012. ^ Energy compared to C was 3% more for Rust and 34% more for C++; time was 4% more and 56% more, respectively. ^ On Unix systems, this is often UTF-8 strings without an internal 0 byte. On Windows, this is UTF-16 strings without an internal 0 byte. Unlike these, str and String are always valid UTF-8 and can contain internal zeros. ^ That is, among respondents who have done extensive development work [with Rust] in over the past year (12.6%), Rust had the largest percentage who also expressed interest to work in [Rust] over the next year (82.2%).",
    "book_sources": "Gjengset, Jon (2021). Rust for Rustaceans (1st ed.). No Starch Press. ISBN 9781718501850. OCLC 1277511986. Klabnik, Steve; Nichols, Carol (2019-08-12). The Rust Programming Language (Covers Rust 2018). No Starch Press. ISBN 978-1-7185-0044-0. Blandy, Jim; Orendorff, Jason; Tindall, Leonora F. S. (2021). Programming Rust: Fast, Safe Systems Development (2nd ed.). O'Reilly Media. ISBN 978-1-4920-5254-8. OCLC 1289839504. McNamara, Tim (2021). Rust in Action. Manning Publications. ISBN 978-1-6172-9455-6. OCLC 1153044639. Klabnik, Steve; Nichols, Carol (2023). The Rust programming language (2nd ed.). No Starch Press. ISBN 978-1-7185-0310-6. OCLC 1363816350.",
    "others": "^ Announcing Rust 1.86.0. 2025-04-03. Retrieved 2025-04-04. ^ a b Platform Support. The rustc book. Archived from the original on 2022-06-30. Retrieved 2022-06-27. ^ Copyright. GitHub. The Rust Programming Language. 2022-10-19. Archived from the original on 2023-07-22. Retrieved 2022-10-19. ^ Licenses. The Rust Programming Language. Archived from the original on 2025-02-23. Retrieved 2025-03-07. ^ Uniqueness Types. Rust Blog. Archived from the original on 2016-09-15. Retrieved 2016-10-08. Those of you familiar with the Elm style may recognize that the updated --explain messages draw heavy inspiration from the Elm approach. ^ a b Influences. The Rust Reference. Archived from the original on 2023-11-26. Retrieved 2023-12-31. ^ Uniqueness Types. Idris 1.3.3 documentation. Archived from the original on 2018-11-21. Retrieved 2022-07-14. They are inspired by ... ownership types and borrowed pointers in the Rust programming language. ^ Microsoft opens up Rust-inspired Project Verona programming language on GitHub. ZDNET. Archived from the original on 2020-01-17. Retrieved 2020-01-17. ^ Jaloyan, Georges-Axel (2017-10-19). Safe Pointers in SPARK 2014. arXiv:1710.07047 [cs.PL]. ^ Lattner, Chris. Chris Lattner's Homepage. Nondot. Archived from the original on 2018-12-25. Retrieved 2019-05-14. ^ V documentation (Introduction). GitHub. The V Programming Language. Retrieved 2023-11-04. ^ Yegulalp, Serdar (2016-08-29). New challenger joins Rust to topple C language. InfoWorld. Archived from the original on 2021-11-25. Retrieved 2022-10-19. ^ Eshwarla, Prabhu (2020-12-24). Practical System Programming for Rust Developers: Build fast and secure software for Linux/Unix systems with the help of practical examples. Packt Publishing Ltd. ISBN 978-1-80056-201-1. ^ a b Blanco-Cuaresma, Sergi; Bolmont, Emeline (2017-05-30). What can the programming language Rust do for astrophysics?. Proceedings of the International Astronomical Union. 12 (S325): 341–344. arXiv:1702.02951. Bibcode:2017IAUS..325..341B. doi:10.1017/S1743921316013168. ISSN 1743-9213. S2CID 7857871. Archived from the original on 2022-06-25. Retrieved 2022-06-25. ^ Blandy, Orendorff & Tindall 2021. ^ a b c d e f g h i j k l m n o p q r s t Thompson, Clive (2023-02-14). How Rust went from a side project to the world's most-loved programming language. MIT Technology Review. Archived from the original on 2024-09-19. Retrieved 2023-02-23. ^ a b c d e f g h i j k l m n o p q r s t u Klabnik, Steve (2016-06-02). The History of Rust. Applicative 2016. New York, NY, USA: Association for Computing Machinery. p. 80. doi:10.1145/2959689.2960081. ISBN 978-1-4503-4464-7. ^ a b c Hoare, Graydon (July 2010). Project Servo: Technology from the past come to save the future from itself (PDF). Mozilla Annual Summit. Archived from the original (PDF) on 2021-12-26. Retrieved 2024-10-29. ^ Hoare, Graydon (November 2016). Rust Prehistory (Archive of the original Rust OCaml compiler source code). GitHub. Retrieved 2024-10-29. ^ 0.1 first supported public release Milestone · rust-lang/rust. GitHub. Retrieved 2024-10-29. ^ Nelson, Jynn (2022-08-05). RustConf 2022 - Bootstrapping: The once and future compiler. Portland, Oregon: Rust Team. Retrieved 2024-10-29 – via YouTube. ^ Rust logo. Bugzilla. Archived from the original on 2024-02-02. Retrieved 2024-02-02. ^ Anderson, Brian (2012-01-24). [rust-dev] The Rust compiler 0.1 is unleashed. rust-dev (Mailing list). Archived from the original on 2012-01-24. Retrieved 2025-01-07. ^ Anthony, Sebastian (2012-01-24). Mozilla releases Rust 0.1, the language that will eventually usurp Firefox's C++. ExtremeTech. Retrieved 2025-01-07. ^ Purity by pcwalton · Pull Request #5412 · rust-lang/rust. GitHub. Retrieved 2024-10-29. ^ Binstock, Andrew (2014-01-07). The Rise And Fall of Languages in 2013. Dr. Dobb's Journal. Archived from the original on 2016-08-07. Retrieved 2022-11-20. ^ Lardinois, Frederic (2015-04-03). Mozilla And Samsung Team Up To Develop Servo, Mozilla's Next-Gen Browser Engine For Multicore Processors. TechCrunch. Archived from the original on 2016-09-10. Retrieved 2017-06-25. ^ Firefox 45.0, See All New Features, Updates and Fixes. Mozilla. Archived from the original on 2016-03-17. Retrieved 2024-10-31. ^ Lardinois, Frederic (2017-09-29). It's time to give Firefox another chance. TechCrunch. Archived from the original on 2023-08-15. Retrieved 2023-08-15. ^ Pereira, Rui; Couto, Marco; Ribeiro, Francisco; Rua, Rui; Cunha, Jácome; Fernandes, João Paulo; Saraiva, João (2017-10-23). Energy efficiency across programming languages: How do energy, time, and memory relate?. Proceedings of the 10th ACM SIGPLAN International Conference on Software Language Engineering. SLE 2017. New York, NY, USA: Association for Computing Machinery. pp. 256–267. doi:10.1145/3136014.3136031. hdl:1822/65359. ISBN 978-1-4503-5525-4. ^ Cimpanu, Catalin (2020-08-11). Mozilla lays off 250 employees while it refocuses on commercial products. ZDNET. Archived from the original on 2022-03-18. Retrieved 2020-12-02. ^ Cooper, Daniel (2020-08-11). Mozilla lays off 250 employees due to the pandemic. Engadget. Archived from the original on 2020-12-13. Retrieved 2020-12-02. ^ Tung, Liam (2020-08-21). Programming language Rust: Mozilla job cuts have hit us badly but here's how we'll survive. ZDNET. Archived from the original on 2022-04-21. Retrieved 2022-04-21. ^ Laying the foundation for Rust's future. Rust Blog. 2020-08-18. Archived from the original on 2020-12-02. Retrieved 2020-12-02. ^ Hello World!. Rust Foundation. 2020-02-08. Archived from the original on 2022-04-19. Retrieved 2022-06-04. ^ Mozilla Welcomes the Rust Foundation. Mozilla Blog. 2021-02-09. Archived from the original on 2021-02-08. Retrieved 2021-02-09. ^ Amadeo, Ron (2021-04-07). Google is now writing low-level Android code in Rust. Ars Technica. Archived from the original on 2021-04-08. Retrieved 2021-04-08. ^ Anderson, Tim (2021-11-23). Entire Rust moderation team resigns. The Register. Archived from the original on 2022-07-14. Retrieved 2022-08-04. ^ Governance Update. Inside Rust Blog. Archived from the original on 2022-10-27. Retrieved 2022-10-27. ^ Claburn, Thomas (2023-04-17). Rust Foundation apologizes for trademark policy confusion. The Register. Archived from the original on 2023-05-07. Retrieved 2023-05-07. ^ a b Gross, Grant (2024-02-27). White House urges developers to dump C and C++. InfoWorld. Retrieved 2025-01-26. ^ Warminsky, Joe (2024-02-27). After decades of memory-related software bugs, White House calls on industry to act. The Record. Retrieved 2025-01-26. ^ Jack, Bobby (2024-02-29). The White House Wants Memory-Safe Programming, but What Is That?. MakeUseOf. Retrieved 2025-01-26. ^ Donovan, Ryan (2024-12-30). In Rust we trust? White House Office urges memory safety. The Stack Overflow Blog. Retrieved 2025-01-26. ^ Press Release: Future Software Should Be Memory Safe. The White House. 2024-02-26. Archived from the original on 2025-01-18. Retrieved 2025-01-26. ^ Proven, Liam (2019-11-27). Rebecca Rumbul named new CEO of The Rust Foundation. The Register. Archived from the original on 2022-07-14. Retrieved 2022-07-14. Both are curly bracket languages, with C-like syntax that makes them unintimidating for C programmers. ^ a b c Vigliarolo, Brandon (2021-02-10). The Rust programming language now has its own independent foundation. TechRepublic. Archived from the original on 2023-03-20. Retrieved 2022-07-14. ^ Klabnik & Nichols 2019, p. 263. ^ Klabnik & Nichols 2019, pp. 5–6. ^ Klabnik & Nichols 2023, p. 32. ^ Klabnik & Nichols 2023, pp. 32–33. ^ Klabnik & Nichols 2023, pp. 49–50. ^ Klabnik & Nichols 2023, pp. 34–36. ^ Klabnik & Nichols 2023, pp. 6, 47, 53. ^ Klabnik & Nichols 2023, pp. 47–48. ^ a b Klabnik & Nichols 2023, pp. 50–53. ^ Klabnik & Nichols 2023, p. 56. ^ Klabnik & Nichols 2023, pp. 57–58. ^ Klabnik & Nichols 2023, pp. 54–56. ^ Klabnik & Nichols 2019, pp. 104–109. ^ Klabnik & Nichols 2019, pp. 24. ^ Klabnik & Nichols 2019, pp. 36–38. ^ Klabnik & Nichols 2023, pp. 36–38. ^ Klabnik & Nichols 2023, p. 502. ^ Glossary of Unicode Terms. Unicode Consortium. Archived from the original on 2018-09-24. Retrieved 2024-07-30. ^ Klabnik & Nichols 2019, pp. 38–40. ^ Klabnik & Nichols 2019, p. 83. ^ Klabnik & Nichols 2019, p. 97. ^ Klabnik & Nichols 2019, pp. 98–101. ^ Klabnik & Nichols 2019, pp. 438–440. ^ a b Klabnik & Nichols 2019, pp. 93. ^ OsStr in std::ffi. The Rust Standard Library documentation. Archived from the original on 2023-06-23. Retrieved 2023-10-02. ^ OsString in std::ffi. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-10-02. ^ Path in std::path. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-10-02. ^ PathBuf in std::path. The Rust Standard Library documentation. Archived from the original on 2023-06-27. Retrieved 2023-10-02. ^ a b c d std::boxed. The Rust Standard Library documentation. Archived from the original on 2023-06-23. Retrieved 2023-06-23. ^ Rc in std::rc. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Arc in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Cell in std::cell. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Mutex in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ RwLock in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Condvar in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Duration in std::time. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ HashMap in std::collections. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ BTreeMap in std::collections. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ McNamara 2021. ^ Klabnik & Nichols 2019, pp. 101–104. ^ std::option. The Rust Standard Library documentation. Retrieved 2023-11-12. ^ a b Klabnik & Nichols 2019, pp. 418–427. ^ Casting. Rust by Example. Retrieved 2025-04-01. ^ Klabnik & Nichols 2019, pp. 59–61. ^ a b Klabnik & Nichols 2019, pp. 63–68. ^ Klabnik & Nichols 2019, pp. 74–75. ^ a b Balasubramanian, Abhiram; Baranowski, Marek S.; Burtsev, Anton; Panda, Aurojit; Rakamarić, Zvonimir; Ryzhyk, Leonid (2017-05-07). System Programming in Rust. Proceedings of the 16th Workshop on Hot Topics in Operating Systems. HotOS '17. New York, NY, US: Association for Computing Machinery. pp. 156–161. doi:10.1145/3102980.3103006. ISBN 978-1-4503-5068-6. S2CID 24100599. Archived from the original on 2022-06-11. Retrieved 2022-06-01. ^ Klabnik & Nichols 2023, pp. 327–30. ^ Lifetimes. Rust by Example. Archived from the original on 2024-11-16. Retrieved 2024-10-29. ^ Explicit annotation. Rust by Example. Retrieved 2024-10-29. ^ a b Klabnik & Nichols 2019, p. 194. ^ Klabnik & Nichols 2019, pp. 75, 134. ^ Shamrell-Harrington, Nell (2022-04-15). The Rust Borrow Checker – a Deep Dive. InfoQ. Archived from the original on 2022-06-25. Retrieved 2022-06-25. ^ Klabnik & Nichols 2019, pp. 194–195. ^ Klabnik & Nichols 2023, pp. 208–12. ^ Klabnik & Nichols 2019, pp. 201–203. ^ Klabnik & Nichols 2023, 4.2. References and Borrowing. ^ Pearce, David (2021-04-17). A Lightweight Formalism for Reference Lifetimes and Borrowing in Rust. ACM Transactions on Programming Languages and Systems. 43: 1–73. doi:10.1145/3443420. Archived from the original on 2024-04-15. Retrieved 2024-12-11. ^ Klabnik & Nichols 2019, pp. 171–172. ^ Klabnik & Nichols 2019, pp. 171–172, 205. ^ Klabnik & Nichols 2019, pp. 181, 182. ^ Gjengset 2021, p. 25. ^ Klabnik & Nichols 2019, pp. 182–184. ^ Klabnik & Nichols 2019, pp. 281–283. ^ Klabnik & Nichols 2023, 18.2. Using Trait Objects That Allow for Values of Different Types. ^ Klabnik & Nichols 2019, pp. 441–442. ^ Klabnik & Nichols 2019, pp. 379–380. ^ Rosenblatt, Seth (2013-04-03). Samsung joins Mozilla's quest for Rust. CNET. Archived from the original on 2013-04-04. Retrieved 2013-04-05. ^ Brown, Neil (2013-04-17). A taste of Rust. LWN.net. Archived from the original on 2013-04-26. Retrieved 2013-04-25. ^ Races. The Rustonomicon. Archived from the original on 2017-07-10. Retrieved 2017-07-03. ^ Vandervelden, Thibaut; De Smet, Ruben; Deac, Diana; Steenhaut, Kris; Braeken, An (2024-09-07). Overview of Embedded Rust Operating Systems and Frameworks. Sensors. 24 (17): 5818. Bibcode:2024Senso..24.5818V. doi:10.3390/s24175818. PMC 11398098. PMID 39275729. ^ The Rust Language FAQ. The Rust Programming Language. 2015. Archived from the original on 2015-04-20. Retrieved 2017-04-24. ^ McNamara 2021, p. 139, 376–379, 395. ^ RAII. Rust by Example. Archived from the original on 2019-04-21. Retrieved 2020-11-22. ^ Abstraction without overhead: traits in Rust. Rust Blog. Archived from the original on 2021-09-23. Retrieved 2021-10-19. ^ Box, stack and heap. Rust by Example. Archived from the original on 2022-05-31. Retrieved 2022-06-13. ^ Klabnik & Nichols 2019, pp. 70–75. ^ Klabnik & Nichols 2019, p. 323. ^ Klabnik & Nichols 2023, pp. 449–455. ^ Gjengset 2021, pp. 101–102. ^ Macros By Example. The Rust Reference. Archived from the original on 2023-04-21. Retrieved 2023-04-21. ^ Klabnik & Nichols 2019, pp. 446–448. ^ Procedural Macros. The Rust Programming Language Reference. Archived from the original on 2020-11-07. Retrieved 2021-03-23. ^ Klabnik & Nichols 2019, pp. 449–455. ^ Safe Interoperability between Rust and C++ with CXX. InfoQ. 2020-12-06. Archived from the original on 2021-01-22. Retrieved 2021-01-03. ^ a b Type layout. The Rust Reference. Archived from the original on 2022-07-16. Retrieved 2022-07-15. ^ Blandy, Orendorff & Tindall 2021, pp. 6–8. ^ Overview of the compiler. Rust Compiler Development Guide. Rust project contributors. Archived from the original on 2023-05-31. Retrieved 2024-11-07. ^ Code Generation. Rust Compiler Development Guide. Rust project contributors. Retrieved 2024-03-03. ^ rust-lang/rustc_codegen_gcc. GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03. ^ rust-lang/rustc_codegen_cranelift. GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03. ^ Gjengset 2021, p. 213-215. ^ a b c Perkel, Jeffrey M. (2020-12-01). Why scientists are turning to Rust. Nature. 588 (7836): 185–186. Bibcode:2020Natur.588..185P. doi:10.1038/d41586-020-03382-2. PMID 33262490. S2CID 227251258. Archived from the original on 2022-05-06. Retrieved 2022-05-15. ^ Simone, Sergio De (2019-04-18). Rust 1.34 Introduces Alternative Registries for Non-Public Crates. InfoQ. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Klabnik & Nichols 2019, pp. 511–512. ^ Clippy. GitHub. The Rust Programming Language. 2023-11-30. Archived from the original on 2021-05-23. Retrieved 2023-11-30. ^ Clippy Lints. The Rust Programming Language. Retrieved 2023-11-30. ^ Klabnik & Nichols 2019, Appendix G – How Rust is Made and Nightly Rust ^ Blandy, Orendorff & Tindall 2021, pp. 176–177. ^ Klabnik & Nichols 2023, p. 623. ^ Anderson, Tim (2021-11-30). Can Rust save the planet? Why, and why not. The Register. Archived from the original on 2022-07-11. Retrieved 2022-07-11. ^ Yegulalp, Serdar (2021-10-06). What is the Rust language? Safe, fast, and easy software development. InfoWorld. Archived from the original on 2022-06-24. Retrieved 2022-06-25. ^ McNamara 2021, p. 11. ^ a b Popescu, Natalie; Xu, Ziyang; Apostolakis, Sotiris; August, David I.; Levy, Amit (2021-10-15). Safer at any speed: automatic context-aware safety enhancement for Rust. Proceedings of the ACM on Programming Languages. 5 (OOPSLA). Section 2. doi:10.1145/3485480. S2CID 238212612. p. 5: We observe a large variance in the overheads of checked indexing: 23.6% of benchmarks do report significant performance hits from checked indexing, but 64.5% report little-to-no impact and, surprisingly, 11.8% report improved performance ... Ultimately, while unchecked indexing can improve performance, most of the time it does not. ^ a b Astrauskas, Vytautas; Matheja, Christoph; Poli, Federico; Müller, Peter; Summers, Alexander J. (2020-11-13). How do programmers use unsafe rust?. Proceedings of the ACM on Programming Languages. 4 (OOPSLA): 1–27. doi:10.1145/3428204. hdl:20.500.11850/465785. ISSN 2475-1421. ^ McNamara 2021, p. 19, 27. ^ Couprie, Geoffroy (2015). Nom, A Byte oriented, streaming, Zero copy, Parser Combinators Library in Rust. 2015 IEEE Security and Privacy Workshops. pp. 142–148. doi:10.1109/SPW.2015.31. ISBN 978-1-4799-9933-0. S2CID 16608844. Archived from the original on 2022-10-09. Retrieved 2022-10-09. ^ McNamara 2021, p. 20. ^ Code generation. The Rust Reference. Archived from the original on 2022-10-09. Retrieved 2022-10-09. ^ How Fast Is Rust?. The Rust Programming Language FAQ. Archived from the original on 2020-10-28. Retrieved 2019-04-11. ^ Farshin, Alireza; Barbette, Tom; Roozbeh, Amir; Maguire Jr, Gerald Q.; Kostić, Dejan (2021). PacketMill: Toward per-Core 100-GBPS networking. Proceedings of the 26th ACM International Conference on Architectural Support for Programming Languages and Operating Systems. pp. 1–17. doi:10.1145/3445814.3446724. ISBN 9781450383172. S2CID 231949599. Archived from the original on 2022-07-12. Retrieved 2022-07-12. ... While some compilers (e.g., Rust) support structure reordering , C & C++ compilers are forbidden to reorder data structures (e.g., struct or class) ... ^ Keizer, Gregg (2016-10-31). Mozilla plans to rejuvenate Firefox in 2017. Computerworld. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Claburn, Thomas (2023-01-12). Google polishes Chromium code with a layer of Rust. The Register. Retrieved 2024-07-17. ^ Jansens, Dana (2023-01-12). Supporting the Use of Rust in the Chromium Project. Google Online Security Blog. Archived from the original on 2023-01-13. Retrieved 2023-11-12. ^ Shankland, Stephen (2016-07-12). Firefox will get overhaul in bid to get you interested again. CNET. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Security Research Team (2013-10-04). ZeroMQ: Helping us Block Malicious Domains in Real Time. Cisco Umbrella. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Cimpanu, Catalin (2019-10-15). AWS to sponsor Rust project. ZDNET. Retrieved 2024-07-17. ^ Nichols, Shaun (2018-06-27). Microsoft's next trick? Kicking things out of the cloud to Azure IoT Edge. The Register. Archived from the original on 2019-09-27. Retrieved 2019-09-27. ^ Tung, Liam (2020-04-30). Microsoft: Why we used programming language Rust over Go for WebAssembly on Kubernetes app. ZDNET. Archived from the original on 2022-04-21. Retrieved 2022-04-21. ^ Claburn, Thomas (2022-09-20). In Rust We Trust: Microsoft Azure CTO shuns C and C++. The Register. Retrieved 2024-07-07. ^ Simone, Sergio De (2019-03-10). NPM Adopted Rust to Remove Performance Bottlenecks. InfoQ. Archived from the original on 2023-11-19. Retrieved 2023-11-20. ^ Lyu, Shing (2020). Welcome to the World of Rust. In Lyu, Shing (ed.). Practical Rust Projects: Building Game, Physical Computing, and Machine Learning Applications. Berkeley, CA: Apress. pp. 1–8. doi:10.1007/978-1-4842-5599-5_1. ISBN 978-1-4842-5599-5. Retrieved 2023-11-29. ^ Lyu, Shing (2021). Rust in the Web World. In Lyu, Shing (ed.). Practical Rust Web Projects: Building Cloud and Web-Based Applications. Berkeley, CA: Apress. pp. 1–7. doi:10.1007/978-1-4842-6589-5_1. ISBN 978-1-4842-6589-5. Retrieved 2023-11-29. ^ a b c Li, Hongyu; Guo, Liwei; Yang, Yexuan; Wang, Shangguang; Xu, Mengwei (2024-06-30). An Empirical Study of Rust-for-Linux: The Success, Dissatisfaction, and Compromise. USENIX. Retrieved 2024-11-28. ^ Corbet, Jonathan (2022-10-13). A first look at Rust in the 6.1 kernel. LWN.net. Archived from the original on 2023-11-17. Retrieved 2023-11-11. ^ Vaughan-Nichols, Steven (2021-12-07). Rust takes a major step forward as Linux's second official language. ZDNET. Retrieved 2024-11-27. ^ Corbet, Jonathan (2022-11-17). Rust in the 6.2 kernel. LWN.net. Retrieved 2024-11-28. ^ Corbet, Jonathan (2024-09-24). Committing to Rust in the kernel. LWN.net. Retrieved 2024-11-28. ^ Amadeo, Ron (2021-04-07). Google is now writing low-level Android code in Rust. Ars Technica. Archived from the original on 2021-04-08. Retrieved 2022-04-21. ^ Darkcrizt (2021-04-02). Google Develops New Bluetooth Stack for Android, Written in Rust. Desde Linux. Archived from the original on 2021-08-25. Retrieved 2024-08-31. ^ Claburn, Thomas (2023-04-27). Microsoft is rewriting core Windows libraries in Rust. The Register. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Proven, Liam (2023-12-01). Small but mighty, 9Front's 'Humanbiologics' is here for the truly curious. The Register. Retrieved 2024-03-07. ^ Yegulalp, Serdar (2016-03-21). Rust's Redox OS could show Linux a few new tricks. InfoWorld. Archived from the original on 2016-03-21. Retrieved 2016-03-21. ^ Anderson, Tim (2021-01-14). Another Rust-y OS: Theseus joins Redox in pursuit of safer, more resilient systems. The Register. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Boos, Kevin; Liyanage, Namitha; Ijaz, Ramla; Zhong, Lin (2020). Theseus: an Experiment in Operating System Structure and State Management. pp. 1–19. ISBN 978-1-939133-19-9. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Zhang, HanDong (2023-01-31). 2022 Review | The adoption of Rust in Business. Rust Magazine. Retrieved 2023-02-07. ^ Sei, Mark (2018-10-10). Fedora 29 new features: Startis now officially in Fedora. Marksei, Weekly sysadmin pills. Archived from the original on 2019-04-13. Retrieved 2019-05-13. ^ Proven, Liam (2022-07-12). Oracle Linux 9 released, with some interesting additions. The Register. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Proven, Liam (2023-02-02). System76 teases features coming in homegrown Rust-based desktop COSMIC. The Register. Archived from the original on 2024-07-17. Retrieved 2024-07-17. ^ Hu, Vivian (2020-06-12). Deno Is Ready for Production. InfoQ. Archived from the original on 2020-07-01. Retrieved 2022-07-14. ^ Abrams, Lawrence (2021-02-06). This Flash Player emulator lets you securely play your old games. Bleeping Computer. Archived from the original on 2021-12-25. Retrieved 2021-12-25. ^ Kharif, Olga (2020-10-17). Ethereum Blockchain Killer Goes By Unassuming Name of Polkadot. Bloomberg News. Bloomberg L.P. Archived from the original on 2020-10-17. Retrieved 2021-07-14. ^ a b c 2024 Stack Overflow Developer Survey – Technology. Stack Overflow. Retrieved 2024-11-28. ^ Claburn, Thomas (2022-06-23). Linus Torvalds says Rust is coming to the Linux kernel. The Register. Archived from the original on 2022-07-28. Retrieved 2022-07-15. ^ Jung, Ralf; Jourdan, Jacques-Henri; Krebbers, Robbert; Dreyer, Derek (2017-12-27). RustBelt: securing the foundations of the Rust programming language. Proceedings of the ACM on Programming Languages. 2 (POPL): 1–34. doi:10.1145/3158154. hdl:21.11116/0000-0003-34C6-3. ISSN 2475-1421. ^ Popescu, Natalie; Xu, Ziyang; Apostolakis, Sotiris; August, David I.; Levy, Amit (2021-10-20). Safer at any speed: automatic context-aware safety enhancement for Rust. Proceedings of the ACM on Programming Languages. 5 (OOPSLA): 1–23. doi:10.1145/3485480. ISSN 2475-1421. ^ Klabnik & Nichols 2019, p. 4. ^ Getting Started. The Rust Programming Language. Archived from the original on 2020-11-01. Retrieved 2020-10-11. ^ a b 2024 State of Rust Survey Results | Rust Blog. blog.rust-lang.org. Retrieved 2025-04-06. ^ 2023 Annual Rust Survey Results | Rust Blog. blog.rust-lang.org. Retrieved 2025-04-06. ^ Tung, Liam (2021-02-08). The Rust programming language just took a huge step forwards. ZDNET. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Krill, Paul (2021-02-09). Rust language moves to independent foundation. InfoWorld. Archived from the original on 2021-04-10. Retrieved 2021-04-10. ^ Vaughan-Nichols, Steven J. (2021-04-09). AWS's Shane Miller to head the newly created Rust Foundation. ZDNET. Archived from the original on 2021-04-10. Retrieved 2021-04-10. ^ Vaughan-Nichols, Steven J. (2021-11-17). Rust Foundation appoints Rebecca Rumbul as executive director. ZDNET. Archived from the original on 2021-11-18. Retrieved 2021-11-18. ^ Governance. The Rust Programming Language. Archived from the original on 2022-05-10. Retrieved 2024-07-18. ^ Introducing the Rust Leadership Council. Rust Blog. Retrieved 2024-01-12.",
    "external_links": "Rust at Wikipedia's sister projects Media from CommonsResources from WikiversityData from Wikidata Official website Source code on GitHub vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteMozillaProjectsMozillaLabs Bugzilla ChatZilla Jetpack Lightning Persona Prism Raindrop Skywriter Sunbird PDF.js Ubiquity MozillaResearch Open Media Rust Shumway WebAssembly WebXR asm.js Daala Firefox OS OpenFlint MozillaFoundation Mozilla Location Service SeaMonkey Mozilla Monitor Thunderbird Mozilla VPN List of products Firefox Firefox Browser Early version history 2 3 3.5 3.6 4 Version history for Android Focus Sync Pocket Origins Mozilla Application Suite Netscape Navigator Netscape Communicator Netscape Communications Beonex Communicator Frameworks Add-on Gecko Necko NPAPI Components Composer NSPR NSS Rhino SpiderMonkey Tamarin Features Typefaces Fira Zilla Slab Discontinued Calendar Project Camino Firefox Lockwise Firefox Send Minimo XUL XBL XPCOM XPInstall XULRunner Forks Basilisk Classilla Flock Floorp Goanna IceCat LibreWolf Miro Netscape 9 Pale Moon Portable Edition Swiftfox Swiftweasel Waterfox xB Browser Zen Browser Discontinued projects are in italics. Some projects abandoned by Mozilla that are still maintained by third parties are in underline.OrganizationFoundation Mozilla Foundation Mozilla Corporation Mozilla Messaging Official affiliates Mozilla China Mozilla Europe (defunct) Mozilla Japan People Mitchell Baker David Baron Tantek Çelik Laura Chambers Brendan Eich John Hammink Johnny Stenbäck Doug Turner Community mozdev.org MDN Web Docs MozillaZine Other topics Mozilla Manifesto The Book of Mozilla Code Rush Mozilla Public License Mascot Debian–Mozilla trademark dispute Common Voice Mozilla Corp. v. FCC (2019) Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataSpainIsrael Portal: Computer programming",
    "document": "Mozilla Foundation headquarters in Mountain View, California Rust began as a personal project by Mozilla employee Graydon Hoare in 2006. Hoare has stated that Rust was named for the group of fungi that are over-engineered for survival. During the time period between 2006 and 2009, Rust was not publicized to others at Mozilla and was written in Hoare's free time;: 7:50 Hoare began speaking about the language around 2009 after a small group at Mozilla became interested in the project. Hoare emphasized prioritizing good ideas from old languages over new development, citing languages including CLU (1974), BETA (1975), Mesa (1977), NIL (1981), Erlang (1987), Newsqueak (1988), Napier (1988), Hermes (1990), Sather (1990), Alef (1992), and Limbo (1996) as influences, stating many older languages [are] better than new ones, and describing the language as technology from the past come to save the future from itself.: 8:17 Early Rust developer Manish Goregaokar similarly described Rust as being based on mostly decades-old research. During the early years, the Rust compiler was written in about 38,000 lines of OCaml.: 15:34 Early Rust contained features such as explicit object-oriented programming via an obj keyword (later removed),: 10:08 and a typestates system that would allow variables of a type to be tracked along with state changes (such as going from uninitialized to initialized).: 13:12 Mozilla officially sponsored the Rust project in 2009. Brendan Eich and other executives, intrigued by the possibility of using Rust for a safe web browser engine, placed engineers on the project including Patrick Walton, Niko Matsakis, Felix Klock, and Manish Goregaokar. A conference room taken by the project developers was dubbed the nerd cave, with a sign placed outside the door. During this time period, work had shifted from the initial OCaml compiler to a self-hosting compiler, i.e., written in Rust, based on LLVM.[note 4] The Rust ownership system was also in place by 2010. The Rust logo was developed in 2011 based on a bicycle chainring. The first public release, Rust 0.1 was released on January 20, 2012 for Windows, Linux, and MacOS. The early 2010s saw increasing involvement from open source volunteers outside of Mozilla and outside of the United States. At Mozilla, executives would eventually employ over a dozen engineers to work on Rust full time over the next decade. The years from 2012 to 2015 were marked by substantial changes to the Rust type system, especially, removal of the typestate system, consolidation of other language features, and the removal of the garbage collector.: 18:36 Memory management through the ownership system was gradually consolidated and expanded to prevent memory-related bugs. By 2013, the garbage collector feature was rarely used, and was removed by the team in favor of the ownership system. Other changes during this time included the removal of pure functions, which were declared by an explicit pure annotation, in March 2013. Specialized syntax support for channels and various pointer types were removed to simplify the language.: 22:32 Rust's expansion and consolidation was influenced by developers coming from C++ (e.g., low-level performance of features), scripting languages (e.g., Cargo and package management), and functional programming (e.g., type systems development).: 30:50 Graydon Hoare stepped down from Rust in 2013. This allowed it to evolve organically under a more federated governance structure, with a core team of initially six people,: 21:45 around 30-40 developers total across various other teams,: 22:22 and a Request for Comments (RFC) process for new language features added in March 2014.: 33:47 The core team would grow to nine people by 2016: 21:45 with over 1600 proposed RFCs.: 34:08 According to Andrew Binstock writing for Dr. Dobb's Journal in January 2014, while Rust was widely viewed as a remarkably elegant language, adoption slowed because it radically changed from version to version. Rust development at this time was focused on finalizing the language features and moving towards 1.0 so it could begin promising backward compatibility.: 41:26 Six years after Mozilla sponsored its development, the first stable release, Rust 1.0, was published on May 15, 2015. A year after the release, the Rust compiler had accumulated over 1,400 contributors and there were over 5,000 third-party libraries published on the Rust package management website Crates.io.: 43:15 Early homepage of Mozilla's Servo browser engine The development of the Servo browser engine continued in parallel with Rust, jointly funded by Mozilla and Samsung. The teams behind the two projects worked in close collaboration; new features in Rust were tested out by the Servo team, and new features in Servo were used to give feedback back to the Rust team.: 5:41 The first version of Servo was released in 2016. The Firefox web browser shipped with Rust code as of 2016 (version 45),: 53:30 but components of Servo did not appear in Firefox until September 2017 (version 57) as part of the Gecko and Quantum projects. Improvements were made to the Rust toolchain ecosystem during the years following 1.0 including Rustfmt, integrated development environment integration,: 44:56 a regular compiler testing and release cycle,: 46:48 a community code of conduct, and community discussion organized through an IRC chat.: 50:36 The earliest adoption outside of Mozilla was by individual projects at Samsung, Facebook (now Meta Platforms), Dropbox, and others including Tilde, Inc. (the company behind ember.js).: 55:44 Amazon Web Services followed in 2020. Engineers cited performance, lack of a garbage collector, safety, and pleasantness of working in the language as reasons for the adoption, while acknowledging that it was a risky bet as Rust was new technology. Amazon developers cited the fact that Rust uses half as much electricity as similar code written in Java, behind only C, as found by a study at the University of Minho, NOVA University Lisbon, and the University of Coimbra.[note 5] In August 2020, Mozilla laid off 250 of its 1,000 employees worldwide, as part of a corporate restructuring caused by the COVID-19 pandemic. The team behind Servo was disbanded. The event raised concerns about the future of Rust, due to the overlap between the two projects. In the following week, the Rust Core Team acknowledged the severe impact of the layoffs and announced that plans for a Rust foundation were underway. The first goal of the foundation would be to take ownership of all trademarks and domain names, and take financial responsibility for their costs. On February 8, 2021, the formation of the Rust Foundation was announced by five founding companies: Amazon Web Services, Google, Huawei, Microsoft, and Mozilla. The foundation, led by Shane Miller for its first two years, offered $20,000 grants and other support for programmers working on major Rust features. In a blog post published on April 6, 2021, Google announced support for Rust within the Android Open Source Project as an alternative to C/C++. On November 22, 2021, the Moderation Team, which was responsible for enforcing the community code of conduct, announced their resignation in protest of the Core Team placing themselves unaccountable to anyone but themselves. In May 2022, the Rust Core Team, other lead programmers, and certain members of the Rust Foundation board implemented governance reforms in response to the incident. The Rust Foundation posted a draft for a new trademark policy on April 6, 2023, including rules for how the Rust logo and name can be used, which resulted in negative reactions from Rust users and contributors. On February 26, 2024, the U.S. White House released a 19-page press report urging software development to move to memory-safe programming languages; specifically, moving away from C and C++ and encouraging languages like C#, Go, Java, Ruby, Swift, and Rust. The report was widely interpreted as increasing interest in Rust. The report was released through the Office of the National Cyber Director. Rust's syntax is similar to that of C and C++, although many of its features were influenced by functional programming languages such as OCaml. Hoare has described Rust as targeted at frustrated C++ developers and emphasized features such as safety, control of memory layout, and concurrency. Safety in Rust includes the guarantees of memory safety, type safety, and lack of data races. Below is a Hello, World! program in Rust. The fn keyword denotes a function, and the println! macro (see § Macros) prints the message to standard output. Statements in Rust are separated by semicolons. fn main() { println!(Hello, World!); } Variables in Rust are defined through the let keyword. The example below assigns a value to the variable with name foo and outputs its value. fn main() { let foo = 10; println!(The value of foo is {foo}); } Variables are immutable by default, but adding the mut keyword allows the variable to be mutated. The following example uses //, which denotes the start of a comment. fn main() { // This code would not compile without adding mut. let mut foo = 10; println!(The value of foo is {foo}); foo = 20; println!(The value of foo is {foo}); } Multiple let expressions can define multiple variables with the same name, known as variable shadowing. Variable shadowing allows transforming variables without having to name the variables differently. The example below declares a new variable with the same name that is double the original value: fn main() { let foo = 10; // This will output The value of foo is 10 println!(The value of foo is {foo}); let foo = foo * 2; // This will output The value of foo is 20 println!(The value of foo is {foo}); } Variable shadowing is also possible for values of different types. For example, going from a string to its length: fn main() { let letters = abc; let letters = letters.len(); } A block expression is delimited by curly brackets. When the last expression inside a block does not end with a semicolon, the block evaluates to the value of that trailing expression: fn main() { let x = { println!(this is inside the block); 1 + 2 }; println!(1 + 2 = {x}); } Trailing expressions of function bodies are used as the return value: fn add_two(x: i32) -> i32 { x + 2 } An if conditional expression executes code based on whether the given value is true. else can be used for when the value evaluates to false, and else if can be used for combining multiple expressions. fn main() { let x = 10; if x > 5 { println!(value is greater than five); } if x % 7 == 0 { println!(value is divisible by 7); } else if x % 5 == 0 { println!(value is divisible by 5); } else { println!(value is not divisible by 7 or 5); } } if and else blocks can evaluate to a value, which can then be assigned to a variable: fn main() { let x = 10; let new_x = if x % 2 == 0 { x / 2 } else { 3 * x + 1 }; println!({new_x}); } while can be used to repeat a block of code while a condition is met. fn main() { // Iterate over all integers from 4 to 10 let mut value = 4; while value <= 10 { println!(value = {value}); value += 1; } } For loops in Rust loop over elements of a collection. for expressions work over any iterator type. fn main() { // Using `for` with range syntax for the same functionality as above // The syntax 4..=10 means the range from 4 to 10, up to and including 10. for value in 4..=10 { println!(value = {value}); } } In the above code, 4..=10 is a value of type Range which implements the Iterator trait. The code within the curly braces is applied to each element returned by the iterator. Iterators can be combined with functions over iterators like map, filter, and sum. For example, the following adds up all numbers between 1 and 100 that are multiples of 3: (1..=100).filter(|&x| x % 3 == 0).sum() More generally, the loop keyword allows repeating a portion of code until a break occurs. break may optionally exit the loop with a value. In the case of nested loops, labels denoted by 'label_name can be used to break an outer loop rather than the innermost loop. fn main() { let value = 456; let mut x = 1; let y = loop { x *= 10; if x > value { break x / 10; } }; println!(largest power of ten that is smaller than or equal to value: {y}); let mut up = 1; 'outer: loop { let mut down = 120; loop { if up > 100 { break 'outer; } if down < 4 { break; } down /= 2; up += 1; println!(up: {up}, down: {down}); } up *= 2; } } The match and if let expressions can be used for pattern matching. For example, match can be used to double an optional integer value if present, and return zero otherwise: fn double(x: Option<u64>) -> u64 { match x { Some(y) => y * 2, None => 0, } } Equivalently, this can be written with if let and else: fn double(x: Option<u64>) -> u64 { if let Some(y) = x { y * 2 } else { 0 } } Rust is strongly typed and statically typed, meaning that the types of all variables must be known at compilation time. Assigning a value of a particular type to a differently typed variable causes a compilation error. Type inference is used to determine the type of variables if unspecified. The default integer type is i32, and the default floating point type is f64. If the type of a literal number is not explicitly provided, it is either inferred from the context or the default type is used. Integer types in Rust are named based on the signedness and the number of bits the type takes. For example, i32 is a signed integer that takes 32 bits of storage, whereas u8 is unsigned and only takes 8 bits of storage. isize and usize take storage depending on the architecture of the computer that runs the code, for example, on computers with 32-bit architectures, both types will take up 32 bits of space. By default, integer literals are in base-10, but different radices are supported with prefixes, for example, 0b11 for binary numbers, 0o567 for octals, and 0xDB for hexadecimals. By default, integer literals default to i32 as its type. Suffixes such as 4u32 can be used to explicitly set the type of a literal. Byte literals such as b'X' are available to represent the ASCII value (as a u8) of a specific character. The Boolean type is referred to as bool which can take a value of either true or false. A char takes up 32 bits of space and represents a Unicode scalar value: a Unicode codepoint that is not a surrogate. IEEE 754 floating point numbers are supported with f32 for single precision floats and f64 for double precision floats. User-defined types are created with the struct or enum keywords. The struct keyword is used to denote a record type that groups multiple related values. enums can take on different variants at runtime, with its capabilities similar to algebraic data types found in functional programming languages. Both records and enum variants can contain fields with different types. Alternative names, or aliases, for the same type can be defined with the type keyword. The impl keyword can define methods for a user-defined type. Data and functions are defined separately. Implementations fulfill a role similar to that of classes within other languages. The Rust standard library defines and implements many widely used custom data types, including core data structures such as Vec, Option, and HashMap, as well as smart pointer types. Rust also provides a way to exclude most of the standard library using the attribute #![no_std]; this enables applications, such as embedded devices, which want to remove dependency code or provide their own core data structures. Internally, the standard library is divided into three parts, core, alloc, and std, where std and alloc are excluded by #![no_std]. Screenshot of crates.io in June 2022 Summary of Rust's pointer and reference primitive types Type Description Examples &T &mut T References (immutable and mutable) let x_ref = &x; let x_ref = &mut x; Option<&T> Option<&mut T> Option wrapped reference Possibly null reference None let x_ref = Some(&x); let x_ref = Some(&mut x); Box<T> Option<Box<T>> A pointer to heap-allocated value (or possibly null pointer if wrapped in option) let boxed = Box::new(0); let boxed = Some(Box::new(Hello World)); *const T *mut T Raw pointers (immutable and mutable) Possibly null; unsafe to dereference let x_ptr = &x as *const T; let x_ptr = &mut x as *mut T; Rust does not use null pointers to indicate a lack of data, as doing so can lead to null dereferencing. Accordingly, the basic & and &mut references are guaranteed to not be null. Rust instead uses Option for this purpose: Some(T) indicates that a value is present, and None is analogous to the null pointer. Option implements a null pointer optimization, avoiding any spatial overhead for types that cannot have a null value (references or the NonZero types, for example). Unlike references, the raw pointer types *const and *mut may be null; however, it is impossible to dereference them unless the code is explicitly declared unsafe through the use of an unsafe block. Unlike dereferencing, the creation of raw pointers is allowed inside of safe Rust code. This section is an excerpt from Type conversion § Rust.[edit] Rust provides no implicit type conversion (coercion) between primitive types. But, explicit type conversion (casting) can be performed using the as keyword. let x = 1000; println!(1000 as a u16 is: {}, x as u16); Rust's ownership system consists of rules that ensure memory safety without using a garbage collector. At compile time, each value must be attached to a variable called the owner of that value, and every value must have exactly one owner. Values are moved between different owners through assignment or passing a value as a function parameter. Values can also be borrowed, meaning they are temporarily passed to a different function before being returned to the owner. With these rules, Rust can prevent the creation and use of dangling pointers: fn print_string(s: String) { println!({}, s); } fn main() { let s = String::from(Hello, World); print_string(s); // s consumed by print_string // s has been moved, so cannot be used any more // another print_string(s); would result in a compile error } Because of these ownership rules, Rust types are known as linear or affine types, meaning each value can be used exactly once. This enforces a form of software fault isolation as the owner of a value is solely responsible for its correctness and deallocation. When a value goes out of scope, it is dropped by running its destructor. The destructor may be programmatically defined through implementing the Drop trait. This helps manage resources such as file handles, network sockets, and locks, since when objects are dropped, the resources associated with them are closed or released automatically. Object lifetime refers to the period of time during which a reference is valid; that is, the time between the object creation and destruction. These lifetimes are implicitly associated with all Rust reference types. While often inferred, they can also be indicated explicitly with named lifetime parameters (often denoted 'a, 'b, and so on). Lifetimes in Rust can be thought of as lexically scoped, meaning that the duration of an object lifetime is inferred from the set of locations in the source code (i.e., function, line, and column numbers) for which a variable is valid. For example, a reference to a local variable has a lifetime corresponding to the block it is defined in: fn main() { let x = 5; // ------------------+- Lifetime 'a // | let r = &x; // -+-- Lifetime 'b | // | | println!(r: {}, r); // | | // | | // -+ | } // ------------------+ The borrow checker in the Rust compiler then enforces that references are only used in the locations of the source code where the associated lifetime is valid. In the example above, storing a reference to variable x in r is valid, as variable x has a longer lifetime ('a) than variable r ('b). However, when x has a shorter lifetime, the borrow checker would reject the program: fn main() { let r; // ------------------+- Lifetime 'a // | { // | let x = 5; // -+-- Lifetime 'b | r = &x; // | | // ERROR here: x does not live long enough } // -| | // | println!(r: {}, r); // | } // ------------------+ Since the lifetime of the referenced variable ('b) is shorter than the lifetime of the variable holding the reference ('a), the borrow checker errors, preventing x from being used from outside its scope. Lifetimes can be indicated using explicit lifetime parameters on function arguments. For example, the following code specifies that the reference returned by the function has the same lifetime as original (and not necessarily the same lifetime as prefix): fn remove_prefix<'a>(mut original: &'a str, prefix: &str) -> &'a str { if original.starts_with(prefix) { original = original[prefix.len()..]; } original } When user-defined types hold references to data, they also need to use lifetime parameters. The example below parses some configuration options from a string and creates a struct containing the options. The function parse_config also showcases lifetime elision, which reduces the need for explicitly defining lifetime parameters. use std::collections::HashMap; // This struct has one lifetime parameter, 'src. The name is only used within the struct's definition. #[derive(Debug)] struct Config<'src> { hostname: &'src str, username: &'src str, } // The '_ lifetime parameter, in this case, refers to the anonymous lifetime attached to the type // of the argument `config`. fn parse_config(config: &str) -> Config<'_> { let key_values: HashMap<_, _> = config .lines() .filter(|line| !line.starts_with('#')) .filter_map(|line| line.split_once('=')) .map(|(key, value)| (key.trim(), value.trim())) .collect(); Config { hostname: key_values[hostname], username: key_values[username], } } fn main() { let config = parse_config( r#hostname = foobar username=barfoo#, ); println!(Parsed config: {:#?}, config); } In the compiler, ownership and lifetimes work together to prevent memory safety issues such as dangling pointers. A presentation on Rust by Emily Dunham from Mozilla's Rust team (linux.conf.au conference, Hobart, 2017) Rust's more advanced features include the use of generic functions. A generic function is given generic parameters, which allow the same function to be applied to different variable types. This capability reduces duplicate code and is known as parametric polymorphism. The following program calculates the sum of two things, for which addition is implemented using a generic function: use std::ops::Add; // sum is a generic function with one type parameter, T fn sum<T>(num1: T, num2: T) -> T where T: Add<Output = T>, // T must implement the Add trait where addition returns another T { num1 + num2 // num1 + num2 is syntactic sugar for num1.add(num2) provided by the Add trait } fn main() { let result1 = sum(10, 20); println!(Sum is: {}, result1); // Sum is: 30 let result2 = sum(10.23, 20.45); println!(Sum is: {}, result2); // Sum is: 30.68 } At compile time, polymorphic functions like sum are instantiated with the specific types the code requires; in this case, sum of integers and sum of floats. Generics can be used in functions to allow implementing a behavior for different types without repeating the same code. Generic functions can be written in relation to other generics, without knowing the actual type. Excerpt from std::io Rust's type system supports a mechanism called traits, inspired by type classes in the Haskell language, to define shared behavior between different types. For example, the Add trait can be implemented for floats and integers, which can be added; and the Display or Debug traits can be implemented for any type that can be converted to a string. Traits can be used to provide a set of common behavior for different types without knowing the actual type. This facility is known as ad hoc polymorphism. Generic functions can constrain the generic type to implement a particular trait or traits; for example, an add_one function might require the type to implement Add. This means that a generic function can be type-checked as soon as it is defined. The implementation of generics is similar to the typical implementation of C++ templates: a separate copy of the code is generated for each instantiation. This is called monomorphization and contrasts with the type erasure scheme typically used in Java and Haskell. Type erasure is also available via the keyword dyn (short for dynamic). Because monomorphization duplicates the code for each type used, it can result in more optimized code for specific-use cases, but compile time and size of the output binary are also increased. In addition to defining methods for a user-defined type, the impl keyword can be used to implement a trait for a type. Traits can provide additional derived methods when implemented. For example, the trait Iterator requires that the next method be defined for the type. Once the next method is defined, the trait can provide common functional helper methods over the iterator, such as map or filter. Rust traits are implemented using static dispatch, meaning that the type of all values is known at compile time; however, Rust also uses a feature known as trait objects to accomplish dynamic dispatch, a type of polymorphism where the implementation of a polymorphic operation is chosen at runtime. This allows for behavior similar to duck typing, where all data types that implement a given trait can be treated as functionally equivalent. Trait objects are declared using the syntax dyn Tr where Tr is a trait. Trait objects are dynamically sized, therefore they must be put behind a pointer, such as Box. The following example creates a list of objects where each object can be printed out using the Display trait: use std::fmt::Display; let v: Vec<Box<dyn Display>> = vec![ Box::new(3), Box::new(5.0), Box::new(hi), ]; for x in v { println!({x}); } If an element in the list does not implement the Display trait, it will cause a compile-time error. Rust is designed to be memory safe. It does not permit null pointers, dangling pointers, or data races. Data values can be initialized only through a fixed set of forms, all of which require their inputs to be already initialized. Unsafe code can subvert some of these restrictions, using the unsafe keyword. Unsafe code may also be used for low-level functionality, such as volatile memory access, architecture-specific intrinsics, type punning, and inline assembly. Rust does not use garbage collection. Memory and other resources are instead managed through the resource acquisition is initialization convention, with optional reference counting. Rust provides deterministic management of resources, with very low overhead. Values are allocated on the stack by default, and all dynamic allocations must be explicit. The built-in reference types using the & symbol do not involve run-time reference counting. The safety and validity of the underlying pointers is verified at compile time, preventing dangling pointers and other forms of undefined behavior. Rust's type system separates shared, immutable references of the form &T from unique, mutable references of the form &mut T. A mutable reference can be coerced to an immutable reference, but not vice versa. Macros allow generation and transformation of Rust code to reduce repetition. Macros come in two forms, with declarative macros defined through macro_rules!, and procedural macros, which are defined in separate crates. A declarative macro (also called a macro by example) is a macro, defined using the macro_rules! keyword, that uses pattern matching to determine its expansion. Below is an example that sums over all its arguments: macro_rules! sum { ( $initial:expr $(, $expr:expr )* $(,)? ) => { $initial $(+ $expr)* } } fn main() { let x = sum!(1, 2, 3); println!({x}); // prints 6 } Procedural macros are Rust functions that run and modify the compiler's input token stream, before any other components are compiled. They are generally more flexible than declarative macros, but are more difficult to maintain due to their complexity. Procedural macros come in three flavors: Function-like macros custom!(...) Derive macros #[derive(CustomDerive)] Attribute macros #[custom_attribute] Rust has a foreign function interface (FFI) that can be used both to call code written in languages such as C from Rust and to call Rust code from those languages. As of 2024[update], an external library called CXX exists for calling to or from C++. Rust and C differ in how they lay out structs in memory, so Rust structs may be given a #[repr(C)] attribute, forcing the same layout as the equivalent C struct. Compiling a Rust program with Cargo The Rust ecosystem includes its compiler, its standard library, and additional components for software development. Component installation is typically managed by rustup, a Rust toolchain installer developed by the Rust project. The Rust compiler, rustc, translates Rust code into low-level LLVM IR. LLVM is then invoked as a subcomponent to apply optimizations and translate the resulting IR into object code. A linker is then used to combine the objects into a single executable image or binary file. Other than LLVM, the compiler also supports using alternative backends such as GCC and Cranelift for code generation. The intention of those alternative backends is to increase platform coverage of Rust or to improve compilation times. Cargo is Rust's build system and package manager. It downloads, compiles, distributes, and uploads packages—called crates—that are maintained in an official registry. It also acts as a front-end for Clippy and other Rust components. By default, Cargo sources its dependencies from the user-contributed registry crates.io, but Git repositories, crates in the local filesystem, and other external sources can also be specified as dependencies. Rustfmt is a code formatter for Rust. It formats whitespace and indentation to produce code in accordance with a common style, unless otherwise specified. It can be invoked as a standalone program, or from a Rust project through Cargo. Example output of Clippy on a hello world Rust program Clippy is Rust's built-in linting tool to improve the correctness, performance, and readability of Rust code. As of 2024[update], it has more than 700 rules. Following Rust 1.0, new features are developed in nightly versions which are released daily. During each six-week release cycle, changes to nightly versions are released to beta, while changes from the previous beta version are released to a new stable version. Every two or three years, a new edition is produced. Editions are released to allow making limited breaking changes, such as promoting await to a keyword to support async/await features. Crates targeting different editions can interoperate with each other, so a crate can upgrade to a new edition even if its callers or its dependencies still target older editions. Migration to a new edition can be assisted with automated tooling. rust-analyzer is a collection of utilities that provides Integrated development environments (IDEs) and text editors with information about a Rust project through the Language Server Protocol. This enables features including autocompletion, and the display of compilation errors while editing. Since it performs no garbage collection, Rust is often faster than other memory-safe languages. Most of Rust's memory safety guarantees impose no runtime overhead, with the exception of array indexing which is checked at runtime by default. Performance impact of array indexing bounds checks varies, but can be significant in some cases. Rust provides two modes: safe and unsafe. Safe mode is the normal one, in which most Rust is written. In unsafe mode, the developer is responsible for the code's memory safety, which is used by developers for cases where the compiler is too restrictive. Many of Rust's features are so-called zero-cost abstractions, meaning they are optimized away at compile time and incur no runtime penalty. The ownership and borrowing system permits zero-copy implementations for some performance-sensitive tasks, such as parsing. Static dispatch is used by default to eliminate method calls, except for methods called on dynamic trait objects. The compiler also uses inline expansion to eliminate function calls and statically-dispatched method invocations. Since Rust uses LLVM, all performance improvements in LLVM apply to Rust also. Unlike C and C++, Rust allows for reordering struct and enum elements to reduce the sizes of structures in memory, for better memory alignment, and to improve cache access efficiency. See also: Category:Rust (programming language) software Firefox has components written in Rust as part of the underlying Gecko browser engine. Rust is used in software across different domains. Components from the Servo browser engine (funded by Mozilla and Samsung) were incorporated in the Gecko browser engine underlying Firefox. In January 2023, Google (Alphabet) announced support for using third party Rust libraries in Chromium. Rust is used in several backend software projects of large web services. OpenDNS, a DNS resolution service owned by Cisco, uses Rust internally. Amazon Web Services uses Rust in performance-sensitive components of its several services. In 2019, AWS open-sourced Firecracker, a virtualization solution primarily written in Rust. Microsoft Azure IoT Edge, a platform used to run Azure services on IoT devices, has components implemented in Rust. Microsoft also uses Rust to run containerized modules with WebAssembly and Kubernetes. Cloudflare, a company providing content delivery network services, used Rust to build a new web proxy named Pingora for increased performance and efficiency. The npm package manager used Rust for its production authentication service in 2019. The Rust for Linux project has been supported in the Linux kernel since 2022. In operating systems, the Rust for Linux project, launched in 2020, merged initial support into the Linux kernel version 6.1 in late 2022. The project is active with a team of 6–7 developers, and has added more Rust code with kernel releases from 2022 to 2024, aiming to demonstrate the minimum viability of the project and resolve key compatibility blockers. The first drivers written in Rust were merged into the kernel for version 6.8. The Android developers used Rust in 2021 to rewrite existing components. Microsoft has rewritten parts of Windows in Rust. The r9 project aims to re-implement Plan 9 from Bell Labs in Rust. Rust has been used in the development of new operating systems such as Redox, a Unix-like operating system and microkernel, Theseus, an experimental operating system with modular state management, and most of Fuchsia. Rust is also used for command-line tools and operating system components, including stratisd, a file system manager and COSMIC, a desktop environment by System76. In web development, Deno, a secure runtime for JavaScript and TypeScript, is built on top of V8 using Rust and Tokio. Other notable adoptions in this space include Ruffle, an open-source SWF emulator, and Polkadot, an open source blockchain and cryptocurrency platform. Discord, an instant messaging software company, rewrote parts of its system in Rust for increased performance in 2020. In the same year, Dropbox announced that its file synchronization had been rewritten in Rust. Facebook (Meta) used Rust to redesign its system that manages source code for internal projects. In the 2024 Stack Overflow Developer Survey, 12.6% of respondents had recently done extensive development in Rust. The survey named Rust the most admired programming language every year from 2016 to 2024 (inclusive), based on the number of existing developers interested in continuing to work in the same language.[note 7] In 2024, Rust was the 6th most wanted technology, with 28.7% of developers not currently working in Rust expressing an interest in doing so. Rust has been studied in academic research, both for properties of the language itself as well as the utility the language provides for writing software used for research. Its features around safety and performance have been examined. In a journal article published to Proceedings of the International Astronomical Union, astrophysicists Blanco-Cuaresma and Bolmont re-implemented programs responsible for simulating multi-planet systems in Rust, and found it to be a competitive programming language for its speed and accuracy. Likewise, an article published on Nature shared several stories of bioinformaticians using Rust for its performance and safety. However, both articles have cited Rust's unique concepts, including its ownership system, being difficult to learn as one of the main drawbacks to adopting Rust. Some Rust users refer to themselves as Rustaceans (similar to the word crustacean) and have adopted an orange crab, Ferris, as their unofficial mascot. Rust has been cited as having an inclusive community. According to one MIT Technology Review article, the Rust community was seen as unusually friendly to newcomers and particularly attracted people from the queer community, partly due to its code of conduct which outlined a set of expectations for Rust community members to follow. According to the 2024 survey conducted by the Rust survey team and published on the official blog, about 8.3% of Rust developers identify as lesbian, gay, bisexual, queer, or non-heterosexual (54.1% of 15.5%) and 5.5% as transgender (35.8% of 15.5%). About 22.4% of Rust developers live in the United States, followed by 14.1% in Germany, 6.1% in the United Kingdom, 5.5% in France, and 5.3% in China. As of the 2023 survey, 93% of Rust developers use English for technical communication. Rust FoundationFormationFebruary 8, 2021; 4 years ago (2021-02-08)FoundersAmazon Web ServicesGoogleHuaweiMicrosoftMozilla FoundationTypeNonprofit organizationLocationUnited StatesChairpersonShane MillerExecutive DirectorRebecca RumbulWebsitefoundation.rust-lang.org The Rust Foundation is a non-profit membership organization incorporated in United States, with the primary purposes of backing the technical project as a legal entity and helping to manage the trademark and infrastructure assets. It was established on February 8, 2021, with five founding corporate members (Amazon Web Services, Huawei, Google, Microsoft, and Mozilla). The foundation's board is chaired by Shane Miller. Starting in late 2021, its Executive Director and CEO is Rebecca Rumbul. Prior to this, Ashley Williams was interim executive director. The Rust project is composed of teams that are responsible for different subareas of the development. The compiler team develops, manages, and optimizes compiler internals; and the language team designs new language features and helps implement them. The Rust project website lists 6 top-level teams as of July 2024[update]. Representatives among teams form the Leadership council, which oversees the Rust project as a whole. Comparison of programming languages History of programming languages List of programming languages List of programming languages by type ^ Including build tools, host tools, and standard library support for x86-64, ARM, MIPS, RISC-V, WebAssembly, i686, AArch64, PowerPC, and s390x. ^ Including Windows, Linux, macOS, FreeBSD, NetBSD, and Illumos. Host build tools on Android, iOS, Haiku, Redox, and Fuchsia are not officially shipped; these operating systems are supported as targets. ^ Third-party dependencies, e.g., LLVM or MSVC, are subject to their own licenses. ^ The list of Rust compiler versions (referred to as a bootstrapping chain) has history going back to 2012. ^ Energy compared to C was 3% more for Rust and 34% more for C++; time was 4% more and 56% more, respectively. ^ On Unix systems, this is often UTF-8 strings without an internal 0 byte. On Windows, this is UTF-16 strings without an internal 0 byte. Unlike these, str and String are always valid UTF-8 and can contain internal zeros. ^ That is, among respondents who have done extensive development work [with Rust] in over the past year (12.6%), Rust had the largest percentage who also expressed interest to work in [Rust] over the next year (82.2%). Gjengset, Jon (2021). Rust for Rustaceans (1st ed.). No Starch Press. ISBN 9781718501850. OCLC 1277511986. Klabnik, Steve; Nichols, Carol (2019-08-12). The Rust Programming Language (Covers Rust 2018). No Starch Press. ISBN 978-1-7185-0044-0. Blandy, Jim; Orendorff, Jason; Tindall, Leonora F. S. (2021). Programming Rust: Fast, Safe Systems Development (2nd ed.). O'Reilly Media. ISBN 978-1-4920-5254-8. OCLC 1289839504. McNamara, Tim (2021). Rust in Action. Manning Publications. ISBN 978-1-6172-9455-6. OCLC 1153044639. Klabnik, Steve; Nichols, Carol (2023). The Rust programming language (2nd ed.). No Starch Press. ISBN 978-1-7185-0310-6. OCLC 1363816350. ^ Announcing Rust 1.86.0. 2025-04-03. Retrieved 2025-04-04. ^ a b Platform Support. The rustc book. Archived from the original on 2022-06-30. Retrieved 2022-06-27. ^ Copyright. GitHub. The Rust Programming Language. 2022-10-19. Archived from the original on 2023-07-22. Retrieved 2022-10-19. ^ Licenses. The Rust Programming Language. Archived from the original on 2025-02-23. Retrieved 2025-03-07. ^ Uniqueness Types. Rust Blog. Archived from the original on 2016-09-15. Retrieved 2016-10-08. Those of you familiar with the Elm style may recognize that the updated --explain messages draw heavy inspiration from the Elm approach. ^ a b Influences. The Rust Reference. Archived from the original on 2023-11-26. Retrieved 2023-12-31. ^ Uniqueness Types. Idris 1.3.3 documentation. Archived from the original on 2018-11-21. Retrieved 2022-07-14. They are inspired by ... ownership types and borrowed pointers in the Rust programming language. ^ Microsoft opens up Rust-inspired Project Verona programming language on GitHub. ZDNET. Archived from the original on 2020-01-17. Retrieved 2020-01-17. ^ Jaloyan, Georges-Axel (2017-10-19). Safe Pointers in SPARK 2014. arXiv:1710.07047 [cs.PL]. ^ Lattner, Chris. Chris Lattner's Homepage. Nondot. Archived from the original on 2018-12-25. Retrieved 2019-05-14. ^ V documentation (Introduction). GitHub. The V Programming Language. Retrieved 2023-11-04. ^ Yegulalp, Serdar (2016-08-29). New challenger joins Rust to topple C language. InfoWorld. Archived from the original on 2021-11-25. Retrieved 2022-10-19. ^ Eshwarla, Prabhu (2020-12-24). Practical System Programming for Rust Developers: Build fast and secure software for Linux/Unix systems with the help of practical examples. Packt Publishing Ltd. ISBN 978-1-80056-201-1. ^ a b Blanco-Cuaresma, Sergi; Bolmont, Emeline (2017-05-30). What can the programming language Rust do for astrophysics?. Proceedings of the International Astronomical Union. 12 (S325): 341–344. arXiv:1702.02951. Bibcode:2017IAUS..325..341B. doi:10.1017/S1743921316013168. ISSN 1743-9213. S2CID 7857871. Archived from the original on 2022-06-25. Retrieved 2022-06-25. ^ Blandy, Orendorff & Tindall 2021. ^ a b c d e f g h i j k l m n o p q r s t Thompson, Clive (2023-02-14). How Rust went from a side project to the world's most-loved programming language. MIT Technology Review. Archived from the original on 2024-09-19. Retrieved 2023-02-23. ^ a b c d e f g h i j k l m n o p q r s t u Klabnik, Steve (2016-06-02). The History of Rust. Applicative 2016. New York, NY, USA: Association for Computing Machinery. p. 80. doi:10.1145/2959689.2960081. ISBN 978-1-4503-4464-7. ^ a b c Hoare, Graydon (July 2010). Project Servo: Technology from the past come to save the future from itself (PDF). Mozilla Annual Summit. Archived from the original (PDF) on 2021-12-26. Retrieved 2024-10-29. ^ Hoare, Graydon (November 2016). Rust Prehistory (Archive of the original Rust OCaml compiler source code). GitHub. Retrieved 2024-10-29. ^ 0.1 first supported public release Milestone · rust-lang/rust. GitHub. Retrieved 2024-10-29. ^ Nelson, Jynn (2022-08-05). RustConf 2022 - Bootstrapping: The once and future compiler. Portland, Oregon: Rust Team. Retrieved 2024-10-29 – via YouTube. ^ Rust logo. Bugzilla. Archived from the original on 2024-02-02. Retrieved 2024-02-02. ^ Anderson, Brian (2012-01-24). [rust-dev] The Rust compiler 0.1 is unleashed. rust-dev (Mailing list). Archived from the original on 2012-01-24. Retrieved 2025-01-07. ^ Anthony, Sebastian (2012-01-24). Mozilla releases Rust 0.1, the language that will eventually usurp Firefox's C++. ExtremeTech. Retrieved 2025-01-07. ^ Purity by pcwalton · Pull Request #5412 · rust-lang/rust. GitHub. Retrieved 2024-10-29. ^ Binstock, Andrew (2014-01-07). The Rise And Fall of Languages in 2013. Dr. Dobb's Journal. Archived from the original on 2016-08-07. Retrieved 2022-11-20. ^ Lardinois, Frederic (2015-04-03). Mozilla And Samsung Team Up To Develop Servo, Mozilla's Next-Gen Browser Engine For Multicore Processors. TechCrunch. Archived from the original on 2016-09-10. Retrieved 2017-06-25. ^ Firefox 45.0, See All New Features, Updates and Fixes. Mozilla. Archived from the original on 2016-03-17. Retrieved 2024-10-31. ^ Lardinois, Frederic (2017-09-29). It's time to give Firefox another chance. TechCrunch. Archived from the original on 2023-08-15. Retrieved 2023-08-15. ^ Pereira, Rui; Couto, Marco; Ribeiro, Francisco; Rua, Rui; Cunha, Jácome; Fernandes, João Paulo; Saraiva, João (2017-10-23). Energy efficiency across programming languages: How do energy, time, and memory relate?. Proceedings of the 10th ACM SIGPLAN International Conference on Software Language Engineering. SLE 2017. New York, NY, USA: Association for Computing Machinery. pp. 256–267. doi:10.1145/3136014.3136031. hdl:1822/65359. ISBN 978-1-4503-5525-4. ^ Cimpanu, Catalin (2020-08-11). Mozilla lays off 250 employees while it refocuses on commercial products. ZDNET. Archived from the original on 2022-03-18. Retrieved 2020-12-02. ^ Cooper, Daniel (2020-08-11). Mozilla lays off 250 employees due to the pandemic. Engadget. Archived from the original on 2020-12-13. Retrieved 2020-12-02. ^ Tung, Liam (2020-08-21). Programming language Rust: Mozilla job cuts have hit us badly but here's how we'll survive. ZDNET. Archived from the original on 2022-04-21. Retrieved 2022-04-21. ^ Laying the foundation for Rust's future. Rust Blog. 2020-08-18. Archived from the original on 2020-12-02. Retrieved 2020-12-02. ^ Hello World!. Rust Foundation. 2020-02-08. Archived from the original on 2022-04-19. Retrieved 2022-06-04. ^ Mozilla Welcomes the Rust Foundation. Mozilla Blog. 2021-02-09. Archived from the original on 2021-02-08. Retrieved 2021-02-09. ^ Amadeo, Ron (2021-04-07). Google is now writing low-level Android code in Rust. Ars Technica. Archived from the original on 2021-04-08. Retrieved 2021-04-08. ^ Anderson, Tim (2021-11-23). Entire Rust moderation team resigns. The Register. Archived from the original on 2022-07-14. Retrieved 2022-08-04. ^ Governance Update. Inside Rust Blog. Archived from the original on 2022-10-27. Retrieved 2022-10-27. ^ Claburn, Thomas (2023-04-17). Rust Foundation apologizes for trademark policy confusion. The Register. Archived from the original on 2023-05-07. Retrieved 2023-05-07. ^ a b Gross, Grant (2024-02-27). White House urges developers to dump C and C++. InfoWorld. Retrieved 2025-01-26. ^ Warminsky, Joe (2024-02-27). After decades of memory-related software bugs, White House calls on industry to act. The Record. Retrieved 2025-01-26. ^ Jack, Bobby (2024-02-29). The White House Wants Memory-Safe Programming, but What Is That?. MakeUseOf. Retrieved 2025-01-26. ^ Donovan, Ryan (2024-12-30). In Rust we trust? White House Office urges memory safety. The Stack Overflow Blog. Retrieved 2025-01-26. ^ Press Release: Future Software Should Be Memory Safe. The White House. 2024-02-26. Archived from the original on 2025-01-18. Retrieved 2025-01-26. ^ Proven, Liam (2019-11-27). Rebecca Rumbul named new CEO of The Rust Foundation. The Register. Archived from the original on 2022-07-14. Retrieved 2022-07-14. Both are curly bracket languages, with C-like syntax that makes them unintimidating for C programmers. ^ a b c Vigliarolo, Brandon (2021-02-10). The Rust programming language now has its own independent foundation. TechRepublic. Archived from the original on 2023-03-20. Retrieved 2022-07-14. ^ Klabnik & Nichols 2019, p. 263. ^ Klabnik & Nichols 2019, pp. 5–6. ^ Klabnik & Nichols 2023, p. 32. ^ Klabnik & Nichols 2023, pp. 32–33. ^ Klabnik & Nichols 2023, pp. 49–50. ^ Klabnik & Nichols 2023, pp. 34–36. ^ Klabnik & Nichols 2023, pp. 6, 47, 53. ^ Klabnik & Nichols 2023, pp. 47–48. ^ a b Klabnik & Nichols 2023, pp. 50–53. ^ Klabnik & Nichols 2023, p. 56. ^ Klabnik & Nichols 2023, pp. 57–58. ^ Klabnik & Nichols 2023, pp. 54–56. ^ Klabnik & Nichols 2019, pp. 104–109. ^ Klabnik & Nichols 2019, pp. 24. ^ Klabnik & Nichols 2019, pp. 36–38. ^ Klabnik & Nichols 2023, pp. 36–38. ^ Klabnik & Nichols 2023, p. 502. ^ Glossary of Unicode Terms. Unicode Consortium. Archived from the original on 2018-09-24. Retrieved 2024-07-30. ^ Klabnik & Nichols 2019, pp. 38–40. ^ Klabnik & Nichols 2019, p. 83. ^ Klabnik & Nichols 2019, p. 97. ^ Klabnik & Nichols 2019, pp. 98–101. ^ Klabnik & Nichols 2019, pp. 438–440. ^ a b Klabnik & Nichols 2019, pp. 93. ^ OsStr in std::ffi. The Rust Standard Library documentation. Archived from the original on 2023-06-23. Retrieved 2023-10-02. ^ OsString in std::ffi. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-10-02. ^ Path in std::path. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-10-02. ^ PathBuf in std::path. The Rust Standard Library documentation. Archived from the original on 2023-06-27. Retrieved 2023-10-02. ^ a b c d std::boxed. The Rust Standard Library documentation. Archived from the original on 2023-06-23. Retrieved 2023-06-23. ^ Rc in std::rc. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Arc in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Cell in std::cell. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Mutex in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ RwLock in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Condvar in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Duration in std::time. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ HashMap in std::collections. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ BTreeMap in std::collections. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ McNamara 2021. ^ Klabnik & Nichols 2019, pp. 101–104. ^ std::option. The Rust Standard Library documentation. Retrieved 2023-11-12. ^ a b Klabnik & Nichols 2019, pp. 418–427. ^ Casting. Rust by Example. Retrieved 2025-04-01. ^ Klabnik & Nichols 2019, pp. 59–61. ^ a b Klabnik & Nichols 2019, pp. 63–68. ^ Klabnik & Nichols 2019, pp. 74–75. ^ a b Balasubramanian, Abhiram; Baranowski, Marek S.; Burtsev, Anton; Panda, Aurojit; Rakamarić, Zvonimir; Ryzhyk, Leonid (2017-05-07). System Programming in Rust. Proceedings of the 16th Workshop on Hot Topics in Operating Systems. HotOS '17. New York, NY, US: Association for Computing Machinery. pp. 156–161. doi:10.1145/3102980.3103006. ISBN 978-1-4503-5068-6. S2CID 24100599. Archived from the original on 2022-06-11. Retrieved 2022-06-01. ^ Klabnik & Nichols 2023, pp. 327–30. ^ Lifetimes. Rust by Example. Archived from the original on 2024-11-16. Retrieved 2024-10-29. ^ Explicit annotation. Rust by Example. Retrieved 2024-10-29. ^ a b Klabnik & Nichols 2019, p. 194. ^ Klabnik & Nichols 2019, pp. 75, 134. ^ Shamrell-Harrington, Nell (2022-04-15). The Rust Borrow Checker – a Deep Dive. InfoQ. Archived from the original on 2022-06-25. Retrieved 2022-06-25. ^ Klabnik & Nichols 2019, pp. 194–195. ^ Klabnik & Nichols 2023, pp. 208–12. ^ Klabnik & Nichols 2019, pp. 201–203. ^ Klabnik & Nichols 2023, 4.2. References and Borrowing. ^ Pearce, David (2021-04-17). A Lightweight Formalism for Reference Lifetimes and Borrowing in Rust. ACM Transactions on Programming Languages and Systems. 43: 1–73. doi:10.1145/3443420. Archived from the original on 2024-04-15. Retrieved 2024-12-11. ^ Klabnik & Nichols 2019, pp. 171–172. ^ Klabnik & Nichols 2019, pp. 171–172, 205. ^ Klabnik & Nichols 2019, pp. 181, 182. ^ Gjengset 2021, p. 25. ^ Klabnik & Nichols 2019, pp. 182–184. ^ Klabnik & Nichols 2019, pp. 281–283. ^ Klabnik & Nichols 2023, 18.2. Using Trait Objects That Allow for Values of Different Types. ^ Klabnik & Nichols 2019, pp. 441–442. ^ Klabnik & Nichols 2019, pp. 379–380. ^ Rosenblatt, Seth (2013-04-03). Samsung joins Mozilla's quest for Rust. CNET. Archived from the original on 2013-04-04. Retrieved 2013-04-05. ^ Brown, Neil (2013-04-17). A taste of Rust. LWN.net. Archived from the original on 2013-04-26. Retrieved 2013-04-25. ^ Races. The Rustonomicon. Archived from the original on 2017-07-10. Retrieved 2017-07-03. ^ Vandervelden, Thibaut; De Smet, Ruben; Deac, Diana; Steenhaut, Kris; Braeken, An (2024-09-07). Overview of Embedded Rust Operating Systems and Frameworks. Sensors. 24 (17): 5818. Bibcode:2024Senso..24.5818V. doi:10.3390/s24175818. PMC 11398098. PMID 39275729. ^ The Rust Language FAQ. The Rust Programming Language. 2015. Archived from the original on 2015-04-20. Retrieved 2017-04-24. ^ McNamara 2021, p. 139, 376–379, 395. ^ RAII. Rust by Example. Archived from the original on 2019-04-21. Retrieved 2020-11-22. ^ Abstraction without overhead: traits in Rust. Rust Blog. Archived from the original on 2021-09-23. Retrieved 2021-10-19. ^ Box, stack and heap. Rust by Example. Archived from the original on 2022-05-31. Retrieved 2022-06-13. ^ Klabnik & Nichols 2019, pp. 70–75. ^ Klabnik & Nichols 2019, p. 323. ^ Klabnik & Nichols 2023, pp. 449–455. ^ Gjengset 2021, pp. 101–102. ^ Macros By Example. The Rust Reference. Archived from the original on 2023-04-21. Retrieved 2023-04-21. ^ Klabnik & Nichols 2019, pp. 446–448. ^ Procedural Macros. The Rust Programming Language Reference. Archived from the original on 2020-11-07. Retrieved 2021-03-23. ^ Klabnik & Nichols 2019, pp. 449–455. ^ Safe Interoperability between Rust and C++ with CXX. InfoQ. 2020-12-06. Archived from the original on 2021-01-22. Retrieved 2021-01-03. ^ a b Type layout. The Rust Reference. Archived from the original on 2022-07-16. Retrieved 2022-07-15. ^ Blandy, Orendorff & Tindall 2021, pp. 6–8. ^ Overview of the compiler. Rust Compiler Development Guide. Rust project contributors. Archived from the original on 2023-05-31. Retrieved 2024-11-07. ^ Code Generation. Rust Compiler Development Guide. Rust project contributors. Retrieved 2024-03-03. ^ rust-lang/rustc_codegen_gcc. GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03. ^ rust-lang/rustc_codegen_cranelift. GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03. ^ Gjengset 2021, p. 213-215. ^ a b c Perkel, Jeffrey M. (2020-12-01). Why scientists are turning to Rust. Nature. 588 (7836): 185–186. Bibcode:2020Natur.588..185P. doi:10.1038/d41586-020-03382-2. PMID 33262490. S2CID 227251258. Archived from the original on 2022-05-06. Retrieved 2022-05-15. ^ Simone, Sergio De (2019-04-18). Rust 1.34 Introduces Alternative Registries for Non-Public Crates. InfoQ. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Klabnik & Nichols 2019, pp. 511–512. ^ Clippy. GitHub. The Rust Programming Language. 2023-11-30. Archived from the original on 2021-05-23. Retrieved 2023-11-30. ^ Clippy Lints. The Rust Programming Language. Retrieved 2023-11-30. ^ Klabnik & Nichols 2019, Appendix G – How Rust is Made and Nightly Rust ^ Blandy, Orendorff & Tindall 2021, pp. 176–177. ^ Klabnik & Nichols 2023, p. 623. ^ Anderson, Tim (2021-11-30). Can Rust save the planet? Why, and why not. The Register. Archived from the original on 2022-07-11. Retrieved 2022-07-11. ^ Yegulalp, Serdar (2021-10-06). What is the Rust language? Safe, fast, and easy software development. InfoWorld. Archived from the original on 2022-06-24. Retrieved 2022-06-25. ^ McNamara 2021, p. 11. ^ a b Popescu, Natalie; Xu, Ziyang; Apostolakis, Sotiris; August, David I.; Levy, Amit (2021-10-15). Safer at any speed: automatic context-aware safety enhancement for Rust. Proceedings of the ACM on Programming Languages. 5 (OOPSLA). Section 2. doi:10.1145/3485480. S2CID 238212612. p. 5: We observe a large variance in the overheads of checked indexing: 23.6% of benchmarks do report significant performance hits from checked indexing, but 64.5% report little-to-no impact and, surprisingly, 11.8% report improved performance ... Ultimately, while unchecked indexing can improve performance, most of the time it does not. ^ a b Astrauskas, Vytautas; Matheja, Christoph; Poli, Federico; Müller, Peter; Summers, Alexander J. (2020-11-13). How do programmers use unsafe rust?. Proceedings of the ACM on Programming Languages. 4 (OOPSLA): 1–27. doi:10.1145/3428204. hdl:20.500.11850/465785. ISSN 2475-1421. ^ McNamara 2021, p. 19, 27. ^ Couprie, Geoffroy (2015). Nom, A Byte oriented, streaming, Zero copy, Parser Combinators Library in Rust. 2015 IEEE Security and Privacy Workshops. pp. 142–148. doi:10.1109/SPW.2015.31. ISBN 978-1-4799-9933-0. S2CID 16608844. Archived from the original on 2022-10-09. Retrieved 2022-10-09. ^ McNamara 2021, p. 20. ^ Code generation. The Rust Reference. Archived from the original on 2022-10-09. Retrieved 2022-10-09. ^ How Fast Is Rust?. The Rust Programming Language FAQ. Archived from the original on 2020-10-28. Retrieved 2019-04-11. ^ Farshin, Alireza; Barbette, Tom; Roozbeh, Amir; Maguire Jr, Gerald Q.; Kostić, Dejan (2021). PacketMill: Toward per-Core 100-GBPS networking. Proceedings of the 26th ACM International Conference on Architectural Support for Programming Languages and Operating Systems. pp. 1–17. doi:10.1145/3445814.3446724. ISBN 9781450383172. S2CID 231949599. Archived from the original on 2022-07-12. Retrieved 2022-07-12. ... While some compilers (e.g., Rust) support structure reordering , C & C++ compilers are forbidden to reorder data structures (e.g., struct or class) ... ^ Keizer, Gregg (2016-10-31). Mozilla plans to rejuvenate Firefox in 2017. Computerworld. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Claburn, Thomas (2023-01-12). Google polishes Chromium code with a layer of Rust. The Register. Retrieved 2024-07-17. ^ Jansens, Dana (2023-01-12). Supporting the Use of Rust in the Chromium Project. Google Online Security Blog. Archived from the original on 2023-01-13. Retrieved 2023-11-12. ^ Shankland, Stephen (2016-07-12). Firefox will get overhaul in bid to get you interested again. CNET. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Security Research Team (2013-10-04). ZeroMQ: Helping us Block Malicious Domains in Real Time. Cisco Umbrella. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Cimpanu, Catalin (2019-10-15). AWS to sponsor Rust project. ZDNET. Retrieved 2024-07-17. ^ Nichols, Shaun (2018-06-27). Microsoft's next trick? Kicking things out of the cloud to Azure IoT Edge. The Register. Archived from the original on 2019-09-27. Retrieved 2019-09-27. ^ Tung, Liam (2020-04-30). Microsoft: Why we used programming language Rust over Go for WebAssembly on Kubernetes app. ZDNET. Archived from the original on 2022-04-21. Retrieved 2022-04-21. ^ Claburn, Thomas (2022-09-20). In Rust We Trust: Microsoft Azure CTO shuns C and C++. The Register. Retrieved 2024-07-07. ^ Simone, Sergio De (2019-03-10). NPM Adopted Rust to Remove Performance Bottlenecks. InfoQ. Archived from the original on 2023-11-19. Retrieved 2023-11-20. ^ Lyu, Shing (2020). Welcome to the World of Rust. In Lyu, Shing (ed.). Practical Rust Projects: Building Game, Physical Computing, and Machine Learning Applications. Berkeley, CA: Apress. pp. 1–8. doi:10.1007/978-1-4842-5599-5_1. ISBN 978-1-4842-5599-5. Retrieved 2023-11-29. ^ Lyu, Shing (2021). Rust in the Web World. In Lyu, Shing (ed.). Practical Rust Web Projects: Building Cloud and Web-Based Applications. Berkeley, CA: Apress. pp. 1–7. doi:10.1007/978-1-4842-6589-5_1. ISBN 978-1-4842-6589-5. Retrieved 2023-11-29. ^ a b c Li, Hongyu; Guo, Liwei; Yang, Yexuan; Wang, Shangguang; Xu, Mengwei (2024-06-30). An Empirical Study of Rust-for-Linux: The Success, Dissatisfaction, and Compromise. USENIX. Retrieved 2024-11-28. ^ Corbet, Jonathan (2022-10-13). A first look at Rust in the 6.1 kernel. LWN.net. Archived from the original on 2023-11-17. Retrieved 2023-11-11. ^ Vaughan-Nichols, Steven (2021-12-07). Rust takes a major step forward as Linux's second official language. ZDNET. Retrieved 2024-11-27. ^ Corbet, Jonathan (2022-11-17). Rust in the 6.2 kernel. LWN.net. Retrieved 2024-11-28. ^ Corbet, Jonathan (2024-09-24). Committing to Rust in the kernel. LWN.net. Retrieved 2024-11-28. ^ Amadeo, Ron (2021-04-07). Google is now writing low-level Android code in Rust. Ars Technica. Archived from the original on 2021-04-08. Retrieved 2022-04-21. ^ Darkcrizt (2021-04-02). Google Develops New Bluetooth Stack for Android, Written in Rust. Desde Linux. Archived from the original on 2021-08-25. Retrieved 2024-08-31. ^ Claburn, Thomas (2023-04-27). Microsoft is rewriting core Windows libraries in Rust. The Register. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Proven, Liam (2023-12-01). Small but mighty, 9Front's 'Humanbiologics' is here for the truly curious. The Register. Retrieved 2024-03-07. ^ Yegulalp, Serdar (2016-03-21). Rust's Redox OS could show Linux a few new tricks. InfoWorld. Archived from the original on 2016-03-21. Retrieved 2016-03-21. ^ Anderson, Tim (2021-01-14). Another Rust-y OS: Theseus joins Redox in pursuit of safer, more resilient systems. The Register. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Boos, Kevin; Liyanage, Namitha; Ijaz, Ramla; Zhong, Lin (2020). Theseus: an Experiment in Operating System Structure and State Management. pp. 1–19. ISBN 978-1-939133-19-9. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Zhang, HanDong (2023-01-31). 2022 Review | The adoption of Rust in Business. Rust Magazine. Retrieved 2023-02-07. ^ Sei, Mark (2018-10-10). Fedora 29 new features: Startis now officially in Fedora. Marksei, Weekly sysadmin pills. Archived from the original on 2019-04-13. Retrieved 2019-05-13. ^ Proven, Liam (2022-07-12). Oracle Linux 9 released, with some interesting additions. The Register. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Proven, Liam (2023-02-02). System76 teases features coming in homegrown Rust-based desktop COSMIC. The Register. Archived from the original on 2024-07-17. Retrieved 2024-07-17. ^ Hu, Vivian (2020-06-12). Deno Is Ready for Production. InfoQ. Archived from the original on 2020-07-01. Retrieved 2022-07-14. ^ Abrams, Lawrence (2021-02-06). This Flash Player emulator lets you securely play your old games. Bleeping Computer. Archived from the original on 2021-12-25. Retrieved 2021-12-25. ^ Kharif, Olga (2020-10-17). Ethereum Blockchain Killer Goes By Unassuming Name of Polkadot. Bloomberg News. Bloomberg L.P. Archived from the original on 2020-10-17. Retrieved 2021-07-14. ^ a b c 2024 Stack Overflow Developer Survey – Technology. Stack Overflow. Retrieved 2024-11-28. ^ Claburn, Thomas (2022-06-23). Linus Torvalds says Rust is coming to the Linux kernel. The Register. Archived from the original on 2022-07-28. Retrieved 2022-07-15. ^ Jung, Ralf; Jourdan, Jacques-Henri; Krebbers, Robbert; Dreyer, Derek (2017-12-27). RustBelt: securing the foundations of the Rust programming language. Proceedings of the ACM on Programming Languages. 2 (POPL): 1–34. doi:10.1145/3158154. hdl:21.11116/0000-0003-34C6-3. ISSN 2475-1421. ^ Popescu, Natalie; Xu, Ziyang; Apostolakis, Sotiris; August, David I.; Levy, Amit (2021-10-20). Safer at any speed: automatic context-aware safety enhancement for Rust. Proceedings of the ACM on Programming Languages. 5 (OOPSLA): 1–23. doi:10.1145/3485480. ISSN 2475-1421. ^ Klabnik & Nichols 2019, p. 4. ^ Getting Started. The Rust Programming Language. Archived from the original on 2020-11-01. Retrieved 2020-10-11. ^ a b 2024 State of Rust Survey Results | Rust Blog. blog.rust-lang.org. Retrieved 2025-04-06. ^ 2023 Annual Rust Survey Results | Rust Blog. blog.rust-lang.org. Retrieved 2025-04-06. ^ Tung, Liam (2021-02-08). The Rust programming language just took a huge step forwards. ZDNET. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Krill, Paul (2021-02-09). Rust language moves to independent foundation. InfoWorld. Archived from the original on 2021-04-10. Retrieved 2021-04-10. ^ Vaughan-Nichols, Steven J. (2021-04-09). AWS's Shane Miller to head the newly created Rust Foundation. ZDNET. Archived from the original on 2021-04-10. Retrieved 2021-04-10. ^ Vaughan-Nichols, Steven J. (2021-11-17). Rust Foundation appoints Rebecca Rumbul as executive director. ZDNET. Archived from the original on 2021-11-18. Retrieved 2021-11-18. ^ Governance. The Rust Programming Language. Archived from the original on 2022-05-10. Retrieved 2024-07-18. ^ Introducing the Rust Leadership Council. Rust Blog. Retrieved 2024-01-12. Rust at Wikipedia's sister projects Media from CommonsResources from WikiversityData from Wikidata Official website Source code on GitHub vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteMozillaProjectsMozillaLabs Bugzilla ChatZilla Jetpack Lightning Persona Prism Raindrop Skywriter Sunbird PDF.js Ubiquity MozillaResearch Open Media Rust Shumway WebAssembly WebXR asm.js Daala Firefox OS OpenFlint MozillaFoundation Mozilla Location Service SeaMonkey Mozilla Monitor Thunderbird Mozilla VPN List of products Firefox Firefox Browser Early version history 2 3 3.5 3.6 4 Version history for Android Focus Sync Pocket Origins Mozilla Application Suite Netscape Navigator Netscape Communicator Netscape Communications Beonex Communicator Frameworks Add-on Gecko Necko NPAPI Components Composer NSPR NSS Rhino SpiderMonkey Tamarin Features Typefaces Fira Zilla Slab Discontinued Calendar Project Camino Firefox Lockwise Firefox Send Minimo XUL XBL XPCOM XPInstall XULRunner Forks Basilisk Classilla Flock Floorp Goanna IceCat LibreWolf Miro Netscape 9 Pale Moon Portable Edition Swiftfox Swiftweasel Waterfox xB Browser Zen Browser Discontinued projects are in italics. Some projects abandoned by Mozilla that are still maintained by third parties are in underline.OrganizationFoundation Mozilla Foundation Mozilla Corporation Mozilla Messaging Official affiliates Mozilla China Mozilla Europe (defunct) Mozilla Japan People Mitchell Baker David Baron Tantek Çelik Laura Chambers Brendan Eich John Hammink Johnny Stenbäck Doug Turner Community mozdev.org MDN Web Docs MozillaZine Other topics Mozilla Manifesto The Book of Mozilla Code Rush Mozilla Public License Mascot Debian–Mozilla trademark dispute Common Voice Mozilla Corp. v. FCC (2019) Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataSpainIsrael Portal: Computer programming",
    "paradigm": "Concurrent functional generic imperative structured",
    "first_appeared": "January 19, 2012 ; 13 years ago ( 2012-01-19 )",
    "stable_release": "1.87.0",
    "typing_discipline": "Affine inferred nominal static strong",
    "influenced_by": "Alef, BETA, CLU, C#, C++, Cyclone, Elm, Erlang, Haskell, Hermes, Limbo, Mesa, Napier, Newsqueak, NIL, OCaml, Ruby, Sather, Scheme, Standard ML, Swift",
    "influenced": "Idris Project Verona SPARK Swift V Zig",
    "stable_release_date": "2025-05-15T00:00:00Z"
  },
  {
    "title": "Python (programming language)",
    "url": "https://en.wikipedia.org/wiki/Python_(programming_language)",
    "history": "Main article: History of Python The designer of Python, Guido van Rossum, at PyCon US 2024 Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands; it was conceived as a successor to the ABC programming language, which was inspired by SETL, capable of exception handling and interfacing with the Amoeba operating system. Python implementation began in December 1989. Van Rossum assumed sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his permanent vacation from responsibilities as Python's benevolent dictator for life (BDFL); this title was bestowed on him by the Python community to reflect his long-term commitment as the project's chief decision-maker. (He has since come out of retirement and is self-titled BDFL-emeritus.) In January 2019, active Python core developers elected a five-member Steering Council to lead the project. The name Python is said to derive from the British comedy series Monty Python's Flying Circus. Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support. Python 2.7's end-of-life was initially set for 2015, and then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3. It no longer receives security patches or updates. While Python 2.7 and older versions are officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e., 2.7.18+ (plus 3.10), with the plus signifying (at least some) backported security updates. Python 3.0 was released on 3 December 2008, with some new semantics and changed syntax. At least every Python release since (the now unsupported) 3.5 has added some syntax to the language; a few later releases have removed outdated modules and have changed semantics, at least in a minor way. As of 8 April 2025[update], Python 3.13.3 is the latest stable release (it's highly recommended to upgrade to it, or upgrade any other older 3.x release). This version currently receives full bug-fix and security updates, while Python 3.12—released in October 2023—had active bug-fix support only until April 2025, and since then only security fixes. Python 3.9 is the oldest supported version of Python (albeit in the 'security support' phase), because Python 3.8 has become an end-of-life product. Starting with Python 3.13, this and later versions receive two years of full support (which has increased from one and a half years), followed by three years of security support; this is the same total duration of support as previously. Security updates were expedited in 2021 and again twice in 2022. More issues were fixed in 2023 and in September 2024 (for Python versions 3.8.20 through 3.12.6)—all versions (including 2.7) had been insecure because of issues leading to possible remote code execution and web-cache poisoning. Python 3.10 added the | union type operator and the match and case keywords (for structural pattern matching statements). Python 3.11 expanded exception handling functionality. Python 3.12 added the new keyword type. Notable changes from version 3.10 to 3.11 include increased program execution speed and improved error reporting. Python 3.11 is claimed to be 10%–60% faster than Python 3.10, and Python 3.12 increases by an additional 5% . Python 3.12 also includes improved error messages (again improved in 3.14) and many other changes. Python 3.13 introduces more syntax for types; a new and improved interactive interpreter (REPL), featuring multi-line editing and color support; an incremental garbage collector, which results in shorter pauses for collection in programs that have many objects, as well as increasing the improved speed in 3.11 and 3.12); an experimental just-in-time (JIT) compiler (such features, can/needs to be enabled specifically for the increase in speed); and an experimental free-threaded build mode, which disables the global interpreter lock (GIL), allowing threads to run more concurrently, as enabled inpython3.13t or python3.13t.exe. Python 3.13 introduces some changes in behavior, i.e., new well-defined semantics, fixing bugs, and removing many deprecated classes, functions and methods (as well as some of the Python/C API and outdated modules). The old implementation of locals() and frame.f_locals was slow, inconsistent and buggy, and it had many corner cases and oddities. Code that works around those may need revising; code that uses locals() for simple templating or print debugging should continue to work correctly. Python 3.13 introduces the experimental free-threaded build mode, which disables the Global Interpreter Lock (GIL); the GIL is a feature of CPython that previously prevented multiple threads from executing Python bytecode simultaneously. This optional build, introduced through PEP 703, enables better exploitation of multi-core CPUs. By allowing multiple threads to run Python code in parallel, the free-threaded mode addresses long-standing performance bottlenecks associated with the GIL. This change offers a new path for parallelism in Python, without resorting to multiprocessing or external concurrency frameworks. Some additional standard-library modules will be removed in Python 3.15 or 3.16, as will be many deprecated classes, functions and methods. Python 3.11 adds Sigstore digital verification signatures for all CPython artifacts (in addition to PGP). Because the use of PGP has been criticized by security practitioners, Python is transitioning to Sigstore exclusively and dropping PGP from 3.14. Python 3.12 removed wstr meaning Python extensions need to be modified, and 3.10 added pattern matching to the language. Python 3.12 dropped some outdated modules, and more will be dropped in the future, deprecated as of 3.13; already deprecated array 'u' format code will emit DeprecationWarning since 3.13 and will be removed in Python 3.16. The 'w' format code should be used instead. Part of ctypes is also deprecated and http.server.CGIHTTPRequestHandler will emit a DeprecationWarning, and will be removed in 3.15. Using that code already has a high potential for both security and functionality bugs. Parts of the typing module are deprecated, e.g. creating a typing.NamedTuple class using keyword arguments to denote the fields and such (and more) will be disallowed in Python 3.15. Python 3.14 is now in the alpha 3 phase. With regard to possible change to annotations, In Python 3.14, from __future__ import annotations will continue to work as it did before, converting annotations into strings. Python Enhancement Proposal (PEP) 711 proposes PyBI—a standard format for distributing Python binaries. Python 3.15 will Make UTF-8 mode default; This mode is supported in all current Python versions, but it currently must be opted into. UTF-8 is already used by default on Windows (and other operating systems) for most purposes; an exception is opening files. Enabling UTF-8 also makes code fully cross-platform.",
    "design_philosophy_and_features": "Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming and metaobjects). Many other paradigms are supported via extensions, including design by contract and logic programming. Python is often referred to as a 'glue language' because it can seamlessly integrate components written in other languages. Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. It uses dynamic name resolution (late binding), which binds method and variable names during program execution. Python's design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions. The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML. Python's core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as these: Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Readability counts. However, Python features regularly violate these principles and have received criticism for adding unnecessary language bloat. Responses to these criticisms note that the Zen of Python is a guideline rather than a rule. The addition of some new features had been controversial: Guido van Rossum resigned as Benevolent Dictator for Life after conflict about adding the assignment expression operator in Python 3.8. Nevertheless, rather than building all functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which represented the opposite approach. Python claims to strive for a simpler, less-cluttered syntax and grammar, while giving developers a choice in their coding methodology. In contrast to Perl's motto there is more than one way to do it, Python advocates an approach where there should be one—and preferably only one—obvious way to do it.. In practice, however, Python provides many ways to achieve a given goal. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use. Alex Martelli is a Fellow at the Python Software Foundation and Python book author; he wrote that To describe something as 'clever' is not considered a compliment in the Python culture. Python's developers usually try to avoid premature optimization; they also reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity. Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages; but this approach either fails to achieve the expected speed-up, since Python is a very dynamic language, or only a restricted subset of Python is compiled (with potential minor semantic changes). Python's developers aim for the language to be fun to use. This goal is reflected in the name—a tribute to the British comedy group Monty Python—and in playful approaches to some tutorials and reference materials. For instance, some code examples use the terms spam and eggs (in reference to a Monty Python sketch), rather than the typical terms foo and bar. A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. Pythonic code may use Python idioms well; be natural or show fluency in the language; or conform with Python's minimalist philosophy and emphasis on readability.",
    "syntax_and_semantics": "Main article: Python syntax and semantics An example of Python code and indentation Example of C# code with curly braces and semicolons Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.",
    "indentation": "Main article: Python syntax and semantics § Indentation Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block. Thus, the program's visual structure accurately represents its semantic structure. This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.",
    "statements_and_control_flow": "Python's statements include the following: The assignment statement, using a single equals sign = The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else if) The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block The while statement, which executes a block of code as long as its condition is true The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups); the try statement also ensures that clean-up code in a finally block is always run regardless of how the block exits The raise statement, used to raise a specified exception or re-raise a caught exception The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming The def statement, which defines a function or method The with statement, which encloses a code block within a context manager, allowing resource-acquisition-is-initialization (RAII)-like behavior and replacing a common try/finally idiom Examples of a context include acquiring a lock before some code is run, and then releasing the lock; or opening and then closing a file) The break statement, which exits a loop The continue statement, which skips the rest of the current iteration and continues with the next The del statement, which removes a variable—deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined [a] The pass statement, serving as a NOP (i.e., no operation), which is syntactically needed to create an empty code block The assert statement, used in debugging to check for conditions that should apply The yield statement, which returns a value from a generator function (and also an operator); used to implement coroutines The return statement, used to return a value from a function The import and from statements, used to import modules whose functions or variables can be used in the current program The match and case statements, analogous to a switch statement construct, which compares an expression against one or more cases as a control-flow measure. The assignment statement (=) binds a name as a reference to a separate, dynamically allocated object. Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed data type; however, it always refers to some object with a type. This is called dynamic typing—in contrast to statically-typed languages, where each variable may contain only a value of a certain type. Python does not support tail call optimization or first-class continuations; according to Van Rossum, the language never will. However, better support for coroutine-like functionality is provided by extending Python's generators. Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, data can be passed through multiple stack levels.",
    "expressions": "Python's expressions include the following: The +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of division in Python: floor division (or integer division) //, and floating-point division /. Python uses the ** operator for exponentiation. Python uses the + operator for string concatenation. The language uses the * operator for duplicating a string a specified number of times. The @ infix operator is intended to be used by libraries such as NumPy for matrix multiplication. The syntax :=, called the walrus operator, was introduced in Python 3.8. This operator assigns values to variables as part of a larger expression. In Python, == compares two objects by value. Python's is operator may be used to compare object identities (i.e., comparison by reference), and comparisons may be chained—for example, a <= b <= c. Python uses and, or, and not as Boolean operators. Python has a type of expression called a list comprehension, and a more general expression called a generator expression. Anonymous functions are implemented using lambda expressions; however, there may be only one expression in each body. Conditional expressions are written as x if c else y. (This is different in operand order from the c ? x : y operator common to many other languages.) Python makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (since dictionary keys must be immutable in Python). Tuples, written as (1, 2, 3), are immutable and thus can be used as the keys of dictionaries, provided that all of the tuple's elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a new tuple containing the elements of both. For example, given the variable t initially equal to (1, 2, 3), executing t = t + (4, 5) first evaluates t + (4, 5), which yields (1, 2, 3, 4, 5); this result is then assigned back to t—thereby effectively modifying the contents of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts. Python features sequence unpacking where multiple expressions, each evaluating to something assignable (e.g., a variable or a writable property) are associated just as in forming tuple literal; as a whole, the results are then put on the left-hand side of the equal sign in an assignment statement. This statement expects an iterable object on the right-hand side of the equal sign to produce the same number of values as the writable expressions on the left-hand side; while iterating, the statement assigns each of the values produced on the right to the corresponding expression on the left. Python has a string format operator % that functions analogously to printf format strings in the C language—e.g. spam=%s eggs=%d % (blah, 2) evaluates to spam=blah eggs=2. In Python 2.6+ and 3+, this operator was supplemented by the format() method of the str class, e.g., spam={0} eggs={1}.format(blah, 2). Python 3.6 added f-strings: spam = blah; eggs = 2; f'spam={spam} eggs={eggs}'. Strings in Python can be concatenated by adding them (using the same operator as for adding integers and floats); e.g., spam + eggs returns spameggs. If strings contain numbers, they are concatenated as strings rather than as integers, e.g. 2 + 2 returns 22. Python supports string literals in several ways: Delimited by single or double quotation marks; single and double quotation marks have equivalent functionality (unlike in Unix shells, Perl, and Perl-influenced languages). Both marks use the backslash (\\) as an escape character. String interpolation became available in Python 3.6 as formatted string literals. Triple-quoted, i.e., starting and ending with three single or double quotation marks; this may span multiple lines and function like here documents in shells, Perl, and Ruby. Raw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as in regular expressions and Windows-style paths. (Compare @-quoting in C#.) Python has array index and array slicing expressions in lists, which are written as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The (optional) third slice parameter, called step or stride, allows elements to be skipped or reversed. Slice indexes may be omitted—for example, a[:] returns a copy of the entire list. Each element of a slice is a shallow copy. In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This distinction leads to duplicating some functionality, for example: List comprehensions vs. for-loops Conditional expressions vs. if blocks The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former function is for expressions, while the latter is for statements A statement cannot be part of an expression; because of this restriction, expressions such as list and dict comprehensions (and lambda expressions) cannot contain statements. As a particular case, an assignment statement such as a = 1 cannot be part of the conditional expression of a conditional statement.",
    "methods": "Methods of objects are functions attached to the object's class; the syntax for normal methods and functions, instance.method(argument), is syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) parameter in some object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby). Python also provides methods, often called dunder methods (because their names begin and end with double underscores); these methods allow user-defined classes to modify how they are handled by native operations including length, comparison, arithmetic , and type conversion.",
    "typing": "The standard type hierarchy in Python 3 Python uses duck typing, and it has typed objects but untyped variable names. Type constraints are not checked at definition time; rather, operations on an object may fail at usage time, indicating that the object is not of an appropriate type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are poorly defined (e.g., adding a number and a string) rather than quietly attempting to interpret them. Python allows programmers to define their own types using classes, most often for object-oriented programming. New instances of classes are constructed by calling the class, for example, SpamClass() or EggsClass()); the classes are instances of the metaclass type (which is an instance of itself), thereby allowing metaprogramming and reflection. Before version 3.0, Python had two kinds of classes, both using the same syntax: old-style and new-style. Current Python versions support the semantics of only the new style. Python supports optional type annotations. These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors. Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization. Summary of Python 3's built-in types Type Mutability Description Syntax examples bool immutable Boolean value TrueFalse bytearray mutable Sequence of bytes bytearray(b'Some ASCII')bytearray(bSome ASCII)bytearray([119, 105, 107, 105]) bytes immutable Sequence of bytes b'Some ASCII'bSome ASCIIbytes([119, 105, 107, 105]) complex immutable Complex number with real and imaginary parts 3+2.7j3 + 2.7j dict mutable Associative array (or dictionary) of key and value pairs; can contain mixed types (keys and values); keys must be a hashable type {'key1': 1.0, 3: False}{} types.EllipsisType immutable An ellipsis placeholder to be used as an index in NumPy arrays ...Ellipsis float immutable Double-precision floating-point number. The precision is machine-dependent, but in practice it is generally implemented as a 64-bit IEEE 754 number with 53 bits of precision. 1.33333 frozenset immutable Unordered set, contains no duplicates; can contain mixed types, if hashable frozenset([4.0, 'string', True]) int immutable Integer of unlimited magnitude 42 list mutable List, can contain mixed types [4.0, 'string', True][] types.NoneType immutable An object representing the absence of a value, often called null in other languages None types.NotImplementedType immutable A placeholder that can be returned from overloaded operators to indicate unsupported operand types. NotImplemented range immutable An immutable sequence of numbers, commonly used for iterating a specific number of times in for loops range(−1, 10)range(10, −5, −2) set mutable Unordered set, contains no duplicates; can contain mixed types, if hashable {4.0, 'string', True}set() str immutable A character string: sequence of Unicode codepoints 'Wikipedia'WikipediaSpanning multiple lines Spanning multiple lines tuple immutable Tuple, can contain mixed types (4.0, 'string', True)('single element',)()",
    "arithmetic_operations": "Python includes conventional symbols for arithmetic operators (+, -, *, /), the floor-division operator //, and the modulo operator %. (With the module operator, a remainder can be negative, e.g., 4 % -3 == -2.) Python also offers the ** symbol for exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0; it also offers the matrix‑multiplication operator @ . These operators work as in traditional mathematics; with the same precedence rules, the infix operators + and - can also be unary, to represent positive and negative numbers respectively. Division between integers produces floating-point results. The behavior of division has changed significantly over time: The current version of Python (i.e., since 3.0) changed the / operator to always represent floating-point division, e.g., 5/2 == 2.5. The floor division // operator was introduced. Thus 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 ,and -7.5//3 == -3.0. Adding the from __future__ import division statement causes a module in Python 2.7 to use Python 3.0 rules for division instead (see above). In Python terms, the / operator represents true division (or simply division), while the // operator represents floor division. Before version 3.0, the / operator represents classic division. Rounding towards negative infinity, though a different method than in most languages, adds consistency to Python. For instance, this rounding implies that the equation (a + b)//b == a//b + 1 is always true. The rounding also implies that the equation b*(a//b) + a%b == a is valid for both positive and negative values of a. As expected, the result of a%b lies in the half-open interval [0, b), where b is a positive integer; however, maintaining the validity of the equation requires that the result must lie in the interval (b, 0] when b is negative. Python provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses the round to even method: round(1.5) and round(2.5) both produce 2. Python versions before 3 used the round-away-from-zero method: round(0.5) is 1.0, and round(-0.5) is −1.0. Python allows Boolean expressions that contain multiple equality relations to be consistent with general usage in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c. C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c. Python uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision with several rounding modes. The Fraction class in the fractions module provides arbitrary precision for rational numbers. Due to Python's extensive mathematics library and the third-party library NumPy, the language is frequently used for scientific scripting in tasks such as numerical data processing and manipulation.",
    "function_syntax": "Functions are created in Python by using the def keyword. A function is defined similarly to how it is called, by first providing the function name and then the required parameters. Here is an example of a function that prints its inputs: def printer(input1, input2=already there): print(input1) print(input2) printer(hello) # Example output: # hello # already there To assign a default value to a function parameter in case no actual value is provided at run time, variable-definition syntax can be used inside the function header.",
    "code_examples": "Hello, World! program: print('Hello, world!') Program to calculate the factorial of a positive integer: n = int(input('Type a number, and its factorial will be printed: ')) if n < 0: raise ValueError('You must enter a non-negative integer') factorial = 1 for i in range(2, n + 1): factorial *= i print(factorial)",
    "libraries": "Python's large standard library is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. The language includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals, manipulating regular expressions, and unit testing. Some parts of the standard library are covered by specifications—for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333—but most parts are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules must be altered or rewritten for variant implementations. As of 13 March 2025,[update] the Python Package Index (PyPI), the official repository for third-party Python software, contains over 614,339 packages. These have a wide range of functionality, including the following: Automation Data analytics Databases Documentation Graphical user interfaces Image processing Machine learning Mobile apps Multimedia Computer networking Scientific computing System administration Test frameworks Text processing Web frameworks Web scraping",
    "development_environments": "See also: Comparison of integrated development environments § Python Most Python implementations (including CPython) include a read–eval–print loop (REPL); this permits the environment to function as a command line interpreter, with which users enter statements sequentially and receive results immediately. Python is also bundled with an Integrated development environment (IDE) called IDLE, which is oriented toward beginners. Other shells, including IDLE and IPython, add additional capabilities such as improved auto-completion, session-state retention, and syntax highlighting. Standard desktop IDEs include PyCharm, IntelliJ Idea, Visual Studio Code; there are also web browser-based IDEs, such as the following environments: SageMath, for developing science- and math-related programs; Jupyter Notebooks, an open-source interactive computing platform; PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE that emphasizes scientific computing.",
    "implementations": "See also: List of Python software § Python implementations",
    "reference_implementation": "CPython is the reference implementation of Python. This implementation is written in C, meeting the C89 standard with several select C99 features (Python 3.11 uses C11). CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g., they can be implemented using C11 or C++. CPython compiles Python programs into an intermediate bytecode, which is then executed by a virtual machine. CPython is distributed with a large standard library written in a combination of C and native Python. CPython is available for many platforms, including Windows and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, using an experimental installer). Starting with Python 3.9, the Python installer intentionally fails to install on Windows 7 and 8; Windows XP was supported until Python 3.5, with unofficial support for VMS. Platform portability was one of Python's earliest priorities. During development of Python 1 and 2, even OS/2 and Solaris were supported; since that time, support has been dropped for many platforms. All current Python versions (i.e., since 3.7) support only operating systems that feature multi-threading.",
    "other_implementations": "All alternative implementations have at least slightly different semantic. For example, an alternative may include unordered dictionaries, in contrast to other current Python versions. As another example in the larger Python ecosystem, PyPy does not support the full C Python API. Alternative implementations include the following: PyPy is a fast, compliant interpreter of Python 2.7 and 3.10. PyPy's just-in-time compiler often improves speed significantly relative to CPython, but PyPy does not support some libraries written in C. PyPy offers support for the RISC-V instruction-set architecture, for example. Codon is an implentation with an ahead-of-time (AOT) compiler, which compiles a statically-typed Python-like language whose syntax and semantics are nearly identical to Python's, there are some notable differences For example, Codon uses 64-bit machine integers for speed, not arbitrarily as with Python; Codon developers claim that speedups over CPython are usually on the order of ten to a hundred times. Codon compiles to machine code (via LLVM) and supports native multithreading. Codon can also compile to Python extension modules that can be imported and used from Python. Stackless Python is a significant fork of CPython that implements microthreads. This implementation uses the call stack differently, thus allowing massively concurrent programs. PyPy also offers a stackless version. MicroPython and CircuitPython are Python 3 variants that are optimized for microcontrollers, including the Lego Mindstorms EV3. Pyston is a variant of the Python runtime that uses just-in-time compilation to speed up execution of Python programs. Cinder is a performance-oriented fork of CPython 3.8 that features a number of optimizations, including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time JIT, and an experimental bytecode compiler. The Snek embedded computing language is Python-inspired, but it is not Python. It is possible to write Snek programs that run under a full Python system, but most Python programs will not run under Snek. Snek is compatible with 8-bit AVR microcontrollers such as ATmega 328P-based Arduino, as well as larger microcontrollers that are compatible with MicroPython. Snek is an imperative language that (unlike Python) omits object-oriented programming. Snek supports only one numeric data type, which features 32-bit single precision (resembling JavaScript numbers, though smaller).",
    "unsupported_implementations": "Other just-in-time Python compilers have been developed, but are now unsupported: Google began a project named Unladen Swallow in 2009: this project aimed to speed up the Python interpreter five-fold by using LLVM, and improve multithreading capability for scaling to thousands of cores, while typical implementations are limited by the global interpreter lock. Psyco is a discontinued just-in-time specializing compiler, which integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain data types and is faster than standard Python code. Psyco does not support Python 2.7 or later. PyS60 was a Python 2 interpreter for Series 60 mobile phones, which was released by Nokia in 2005. The interpreter implemented many modules from Python's standard library, as well as additional modules for integration with the Symbian operating system. The Nokia N900 also supports Python through the GTK widget library, allowing programs to be written and run on the target device.",
    "cross_compilers_to_other_languages": "There are several compilers/transpilers to high-level object languages; the source language is unrestricted Python, a subset of Python, or a language similar to Python: Brython, Transcrypt, and Pyjs compile Python to JavaScript. (The latest release of Pyjs was in 2012.) Cython compiles a superset of Python to C. The resulting code can be used with Python via direct C-level API calls into the Python interpreter. PyJL compiles/transpiles a subset of Python to human-readable, maintainable, and high-performance Julia source code. Despite the developers' performance claims, this is not possible for arbitrary Python code; that is, compiling to a faster language or machine code is known to be impossible in the general case. The semantics of Python might potentially be changed, but in many cases speedup is possible with few or no changes in the Python code. The faster Julia source code can then be used from Python or compiled to machine code. Nuitka compiles Python into C. This compiler works with Python 3.4 to 3.12 (and 2.6 and 2.7) for Python's main supported platforms (and Windows 7 or even Windows XP) and for Android. The compiler developers claim full support for Python 3.10, partial support for Python 3.11 and 3.12, and experimental support for Python 3.13. Nuitka supports macOS including Apple Silicon-based versions. The compiler is free of cost, though it has commercial add-ons (e.g., for hiding source code). Numba is a JIT compiler that is used from Python; the compiler translates a subset of Python and NumPy code into fast machine code. This tool is enabled by adding a decorator to the relevant Python code. Pythran compiles a subset of Python 3 to C++ (C++11). RPython can be compiled to C, and it is used to build the PyPy interpreter for Python. The Python → 11l → C++ transpiler compiles a subset of Python 3 to C++ (C++17). There are also specialized compilers: MyHDL is a Python-based hardware description language (HDL) that converts MyHDL code to Verilog or VHDL code. Some older projects existed, as well as compilers not designed for use with Python 3.x and related syntax: Google's Grumpy transpiles Python 2 to Go. The latest release was in 2017. IronPython allows running Python 2.7 programs with the .NET Common Language Runtime. An alpha version (released in 2021), is available for Python 3.4, although features and behaviors from later versions may be included. Jython compiles Python 2.7 to Java bytecode, allowing the use of Java libraries from a Python program. Pyrex (last released in 2010) and Shed Skin (last released in 2013) compile to C and C++ respectively.",
    "performance": "A perforance comparison among various Python implementations, using a non-numerical (combinatorial) workload, was presented at EuroSciPy '13. In addition, Python's performance relative to other programming languages is benchmarked by The Computer Language Benchmarks Game. There are several approaches to optimizing Python performance, given the inherent slowness of an interpreted language. These approaches include the following strategies or tools: Just-in-time compilation: Dynamically compiling Python code just before it is executed. This technique is used in libraries such as Numba and PyPy. Static compilation: Python code is compiled into machine code sometime before execution. An example of this approach is Cython, which compiles Python into C. Concurrency and parallelism: Multiple tasks can be run simultaneously. Python contains modules such as `multiprocessing` to support this form of parallelism. Moreover, this approach helps to overcome limitations of the Global Interpreter Lock (GIL) in CPU tasks. Efficient data structures: Performance can also be improved by using data types such as Set for membership tests, or deque from collections for queue operations.",
    "language_development": "Python's development is conducted largely through the Python Enhancement Proposal (PEP) process; this process is the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions. Python coding style is covered in PEP 8. Outstanding PEPs are reviewed and commented on by the Python community and the steering council. Enhancement of the language corresponds with development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug tracker hosted by the foundation. In 2022, all issues and discussions were migrated to GitHub. Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017. CPython's public releases have three types, distinguished by which part of the version number is incremented: Backward-incompatible versions, where code is expected to break and must be manually ported. The first part of the version number is incremented. These releases happen infrequently—version 3.0 was released 8 years after 2.0. According to Guido van Rossum, a version 4.0 will probably never exist. Major or feature releases are largely compatible with the previous version but introduce new features. The second part of the version number is incremented. Starting with Python 3.9, these releases are expected to occur annually. Each major version is supported by bug fixes for several years after its release. Bug fix releases, which introduce no new features, occur approximately every three months; these releases are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented. Many alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for releases, they are often delayed if the code is not ready yet. Python's development team monitors the state of the code by running a large unit test suite during development. The major academic conference on Python is PyCon. There are also special Python mentoring programs, such as PyLadies.",
    "api_documentation_generators": "Tools that can generate documentation for Python API include pydoc (available as part of the standard library); Sphinx; and Pdoc and its forks, Doxygen and Graphviz.",
    "naming": "Python's name is inspired by the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture; for example, the metasyntactic variables often used in Python literature are spam and eggs, rather than the traditional foo and bar. The official Python documentation also contains various references to Monty Python routines. Python users are sometimes referred to as Pythonistas. The affix Py- is often used when naming Python applications or libraries. Some examples include the following: Pygame, a binding of Simple DirectMedia Layer to Python (commonly used to create games); PyQt and PyGTK, which bind Qt and GTK to Python respectively; PyPy, a Python implementation originally written in Python; NumPy, a Python library for numerical processing.",
    "popularity": "Since 2003, Python has consistently ranked in the top ten of the most popular programming languages in the TIOBE Programming Community Index; as of December 2022[update], Python was the most popular language. Python was selected as Programming Language of the Year (for the highest rise in ratings in a year) in 2007, 2010, 2018, and 2020—the only language to have done so four times as of 2020[update]). In the TIOBE Index, monthly rankings are based on the volume of searches for programming languages on Google, Amazon, Wikipedia, Bing, and 20 other platforms. According to the accompanying graph, Python has shown a marked upward trend since the early 2000s, eventually passing more established languages such as C, C++, and Java. This trend can be attributed to Python's readable syntax, comprehensive standard library, and application in data science and machine learning fields. TIOBE Index Chart showing Python's popularity compared to other programming languages. Large organizations that use Python include Wikipedia, Google, Yahoo!, CERN, NASA, Facebook, Amazon, Instagram, Spotify, and some smaller entities such as Industrial Light & Magic and ITA. The social news networking site Reddit was developed mostly in Python. Organizations that partly use Python include Discord and Baidu.",
    "types_of_use": "Main article: List of Python software Software that is powered by Python Python has many uses, including the following: Scripting for web applications Scientific computing Artificial-intelligence and machine-learning projects Graphical user interfaces and desktop environments Embedded scripting in software and hardware products Operating systems Information security Python can serve as a scripting language for web applications, e.g., via the mod_wsgi module for the Apache web server. With Web Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks such as Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program communication between computers; this framework is used by Dropbox, for example. Libraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing, with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface that is programmable in Python; the SageMath library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus. OpenCV has Python bindings with a rich set of features for computer vision and image processing. Python is commonly used in artificial-intelligence and machine-learning projects, with support from libraries such as TensorFlow, Keras, Pytorch, scikit-learn and ProbLog (a logic language). As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing. The combination of Python and Prolog has proven useful for AI applications, with Prolog providing knowledge representation and reasoning capabilities. The Janus system, in particular, exploits similarities between these two languages, in part because of their dynamic typing and their simple, recursive data structures. This combination is typically applied natural language processing, visual query answering, geospatial reasoning, and handling semantic web data. The Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) to create prompts for two types of generators: text-to-text generators such as GPT3, and text-to-image generators such as DALL-E or Stable Diffusion. Python can be used for graphical user interfaces (GUIs), by using libraries such as Tkinter. Similarly, for the One Laptop per Child XO computer, most of the Sugar desktop environment is written in Python (as of 2008). Python is embedded in many software products (and some hardware products) as a scripting language. These products include the following: finite element method software such as Abaqus, 3D parametric modelers such as FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs such as GIMP, Inkscape, Scribus and Paint Shop Pro, and musical notation programs such as scorewriter and capella. Similarly, GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS. Python has also been used in several video games, and it has been adopted as first of the three programming languages available in Google App Engine (the other two being Java and Go). LibreOffice includes Python, and its developers plan to replace Java with Python; LibreOffice's Python Scripting Provider is a core feature since version 4.0 (from 7 February 2013). Among hardware products, the Raspberry Pi single-board computer project has adopted Python as its main user-programming language. Many operating systems include Python as a standard component. Python ships with most Linux distributions, AmigaOS 4 (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package); it can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage. Python is used extensively in the information security industry, including in exploit development.",
    "languages_influenced_by_python": "Python's design and philosophy have influenced many other programming languages: Boo uses indentation, a similar syntax, and a similar object model. Cobra uses indentation and a similar syntax; its Acknowledgements document lists Python first among influencing languages. CoffeeScript, a programming language that cross-compiles to JavaScript, has a Python-inspired syntax. ECMAScript–JavaScript borrowed iterators and generators from Python. GDScript, a Python-like scripting language that is built in to the Godot game engine. Go is designed for speed of working in a dynamic language like Python; Go shares Python's syntax for slicing arrays. Groovy was motivated by a desire to incorporate the Python design philosophy into Java. Julia was designed to be as usable for general programming as Python. Mojo is a non-strict superset of Python (e.g., omitting classes, and adding struct). Nim uses indentation and a similar syntax. Ruby's creator, Yukihiro Matsumoto, said that I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language. Swift, a programming language developed by Apple, has some Python-inspired syntax. Kotlin blends Python and Java features, which minimizes boilerplate code and enhances developer efficiency. Python's development practices have also been emulated by other languages. For example, Python requires a document that describes the rationale and context for any language change; this document is known as a Python Enhancement Proposal or PEP. This practice is also used by the developers of Tcl, Erlang, and Swift.",
    "see_also": "Computer programming portalFree and open-source software portal Python syntax and semantics pip (package manager) List of programming languages History of programming languages Comparison of programming languages",
    "notes": "^ del in Python does not behave the same way delete in languages such as C++ does, where such a word is used to call the destructor and deallocate heap memory.",
    "references": "^ General Python FAQ – Python 3 documentation. docs.python.org. Retrieved 7 July 2024. ^ Python 0.9.1 part 01/21. alt.sources archives. Archived from the original on 11 August 2021. Retrieved 11 August 2021. ^ Why is Python a dynamic language and also a strongly typed language. Python Wiki. Archived from the original on 14 March 2021. Retrieved 27 January 2021. ^ a b PEP 483 – The Theory of Type Hints. Python.org. Archived from the original on 14 June 2020. Retrieved 14 June 2018. ^ PEP 11 – CPython platform support | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 22 April 2024. ^ PEP 738 – Adding Android as a supported platform | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 19 May 2024. ^ Download Python for Other Platforms. Python.org. Archived from the original on 27 November 2020. Retrieved 18 August 2023. ^ test – Regression tests package for Python – Python 3.7.13 documentation. docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. ^ platform – Access to underlying platform's identifying data – Python 3.10.4 documentation. docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. ^ Holth, Moore (30 March 2014). PEP 0441 – Improving Python ZIP Application Support. Archived from the original on 26 December 2018. Retrieved 12 November 2015. ^ Starlark Language. Archived from the original on 15 June 2020. Retrieved 25 May 2019. ^ a b Why was Python created in the first place?. General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 22 March 2007. I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python). ^ Ada 83 Reference Manual (raise statement). Archived from the original on 22 October 2019. Retrieved 7 January 2020. ^ a b Kuchling, Andrew M. (22 December 2006). Interview with Guido van Rossum (July 1998). amk.ca. Archived from the original on 1 May 2007. Retrieved 12 March 2012. I'd spent a summer at DEC's Systems Research Center, which introduced me to Modula-2+; the Modula-3 final report was being written there at about the same time. What I learned there later showed up in Python's exception handling, modules, and the fact that methods explicitly contain 'self' in their parameter list. String slicing came from Algol-68 and Icon. ^ a b c itertools – Functions creating iterators for efficient looping – Python 3.7.1 documentation. docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. ^ van Rossum, Guido (1993). An Introduction to Python for UNIX/C Programmers. Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable. ^ a b Classes. The Python Tutorial. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 20 February 2012. It is a mixture of the class mechanisms found in C++ and Modula-3 ^ Lundh, Fredrik. Call By Object. effbot.org. Archived from the original on 23 November 2019. Retrieved 21 November 2017. replace CLU with Python, record with instance, and procedure with function or method, and you get a pretty accurate description of Python's object model. ^ Simionato, Michele. The Python 2.3 Method Resolution Order. Python Software Foundation. Archived from the original on 20 August 2020. Retrieved 29 July 2014. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers ^ Kuchling, A. M. Functional Programming HOWTO. Python v2.7.2 documentation. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 9 February 2012. List comprehensions and generator expressions [...] are a concise notation for such operations, borrowed from the functional programming language Haskell. ^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). PEP 255 – Simple Generators. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 9 February 2012. ^ More Control Flow Tools. Python 3 documentation. Python Software Foundation. Archived from the original on 4 June 2016. Retrieved 24 July 2015. By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python. With the lambda keyword, small anonymous functions can be created. ^ re – Regular expression operations – Python 3.10.6 documentation. docs.python.org. Archived from the original on 18 July 2018. Retrieved 6 September 2022. This module provides regular expression matching operations similar to those found in Perl. ^ CoffeeScript. coffeescript.org. Archived from the original on 12 June 2020. Retrieved 3 July 2018. ^ Perl and Python influences in JavaScript. www.2ality.com. 24 February 2013. Archived from the original on 26 December 2018. Retrieved 15 May 2015. ^ Rauschmayer, Axel. Chapter 3: The Nature of JavaScript; Influences. O'Reilly, Speaking JavaScript. Archived from the original on 26 December 2018. Retrieved 15 May 2015. ^ a b Why We Created Julia. Julia website. February 2012. Archived from the original on 2 May 2020. Retrieved 5 June 2014. We want something as usable for general programming as Python [...] ^ a b Krill, Paul (4 May 2023). Mojo language marries Python and MLIR for AI development. InfoWorld. Archived from the original on 5 May 2023. Retrieved 5 May 2023. ^ Ring Team (4 December 2017). Ring and other languages. ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 4 December 2017. ^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. ^ Lattner, Chris (3 June 2014). Chris Lattner's Homepage. Chris Lattner. Archived from the original on 25 December 2018. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ V documentation (Introduction). GitHub. Retrieved 24 December 2024. ^ Kuhlman, Dave. A Python Book: Beginning Python, Advanced Python, and Python Exercises. Section 1.1. Archived from the original (PDF) on 23 June 2012. ^ About Python. Python Software Foundation. Archived from the original on 20 April 2012. Retrieved 24 April 2012., second section Fans of Python use the phrase batteries included to describe the standard library, which covers everything from asynchronous processing to zip files. ^ PEP 206 – Python Advanced Library. Python.org. Archived from the original on 5 May 2021. Retrieved 11 October 2021. ^ Rossum, Guido Van (20 January 2009). The History of Python: A Brief Timeline of Python. The History of Python. Archived from the original on 5 June 2020. Retrieved 5 March 2021. ^ Peterson, Benjamin (20 April 2020). Python 2.7.18, the last release of Python 2. Python Insider. Archived from the original on 26 April 2020. Retrieved 27 April 2020. ^ Stack Overflow Developer Survey 2022. Stack Overflow. Archived from the original on 27 June 2022. Retrieved 12 August 2022. ^ The State of Developer Ecosystem in 2020 Infographic. JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 1 March 2021. Retrieved 5 March 2021. ^ a b TIOBE Index. TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required. ^ PYPL PopularitY of Programming Language index. pypl.github.io. Archived from the original on 14 March 2017. Retrieved 26 March 2021. ^ a b Venners, Bill (13 January 2003). The Making of Python. Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007. ^ van Rossum, Guido (29 August 2000). SETL (was: Lukewarm about range literals). Python-Dev (Mailing list). Archived from the original on 14 July 2018. Retrieved 13 March 2011. ^ van Rossum, Guido (20 January 2009). A Brief Timeline of Python. The History of Python. Archived from the original on 5 June 2020. Retrieved 20 January 2009. ^ Fairchild, Carlie (12 July 2018). Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life. Linux Journal. Archived from the original on 13 July 2018. Retrieved 13 July 2018. ^ PEP 8100. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 4 May 2019. ^ PEP 13 – Python Language Governance. Python.org. Archived from the original on 27 May 2021. Retrieved 25 August 2021. ^ Briggs, Jason R.; Lipovača, Miran (2013). Python for kids: a playful introduction to programming. San Francisco, Calif: No Starch Press. ISBN 978-1-59327-407-8. ^ Kuchling, A. M.; Zadka, Moshe (16 October 2000). What's New in Python 2.0. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 11 February 2012. ^ PEP 373 – Python 2.7 Release Schedule. python.org. Archived from the original on 19 May 2020. Retrieved 9 January 2017. ^ PEP 466 – Network Security Enhancements for Python 2.7.x. python.org. Archived from the original on 4 June 2020. Retrieved 9 January 2017. ^ Sunsetting Python 2. Python.org. Archived from the original on 12 January 2020. Retrieved 22 September 2019. ^ PEP 373 – Python 2.7 Release Schedule. Python.org. Archived from the original on 13 January 2020. Retrieved 22 September 2019. ^ mattip (25 December 2023). PyPy v7.3.14 release. PyPy. Archived from the original on 5 January 2024. Retrieved 5 January 2024. ^ Langa, Łukasz (17 May 2022). Python 3.9.13 is now available. Python Insider. Archived from the original on 17 May 2022. Retrieved 21 May 2022. ^ Status of Python versions. Python Developer's Guide. Retrieved 7 October 2024. ^ Python. endoflife.date. 8 October 2024. Retrieved 20 November 2024. ^ CVE-2021-3177. Red Hat Customer Portal. Archived from the original on 6 March 2021. Retrieved 26 February 2021. ^ CVE-2021-3177. CVE. Archived from the original on 27 February 2021. Retrieved 26 February 2021. ^ CVE-2021-23336. CVE. Archived from the original on 24 February 2021. Retrieved 26 February 2021. ^ Built-in Types. ^ corbet (24 October 2022). Python 3.11 released [LWN.net]. lwn.net. Retrieved 15 November 2022. ^ What's New In Python 3.13. Python documentation. Retrieved 30 April 2024. ^ PEP 667 – Consistent views of namespaces | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 7 October 2024. ^ PEP 703 – Making the GIL Optional in CPython. Python Enhancement Proposals (PEPs). Retrieved 30 March 2025. ^ Wouters, Thomas (9 April 2024). Python Insider: Python 3.12.3 and 3.13.0a6 released. Python Insider. Retrieved 29 April 2024. ^ PEP 594 – Removing dead batteries from the standard library. Python Enhancement Proposals. Python Softtware Foundation. 20 May 2019. ^ PEP 761 – Deprecating PGP signatures for CPython artifacts | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 6 January 2025. ^ 1. Extending Python with C or C++ – Python 3.9.1 documentation. docs.python.org. Archived from the original on 23 June 2020. Retrieved 14 February 2021. ^ PEP 623 – Remove wstr from Unicode. Python.org. Archived from the original on 5 March 2021. Retrieved 14 February 2021. ^ PEP 634 – Structural Pattern Matching: Specification. Python.org. Archived from the original on 6 May 2021. Retrieved 14 February 2021. ^ PEP 749 – Implementing PEP 649 | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. ^ PEP 711: PyBI: a standard format for distributing Python Binaries. Discussions on Python.org. 7 April 2023. Retrieved 20 November 2024. ^ PEP 686 – Make UTF-8 mode default | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. ^ The Cain Gang Ltd. Python Metaclasses: Who? Why? When? (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009. ^ 3.3. Special method names. The Python Language Reference. Python Software Foundation. Archived from the original on 15 December 2018. Retrieved 27 June 2009. ^ PyDBC: method preconditions, method postconditions and class invariants for Python. Archived from the original on 23 November 2019. Retrieved 24 September 2011. ^ Contracts for Python. Archived from the original on 15 June 2020. Retrieved 24 September 2011. ^ PyDatalog. Archived from the original on 13 June 2020. Retrieved 22 July 2012. ^ Glue It All Together With Python. Python.org. Retrieved 30 September 2024. ^ Extending and Embedding the Python Interpreter: Reference Counts. Docs.python.org. Archived from the original on 18 October 2012. Retrieved 5 June 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting. ^ a b Hettinger, Raymond (30 January 2002). PEP 289 – Generator Expressions. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. ^ 6.5 itertools – Functions creating iterators for efficient looping. Docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. ^ a b Peters, Tim (19 August 2004). PEP 20 – The Zen of Python. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008. ^ Lutz, Mark (January 2022). Python Changes 2014+. Learning Python. Archived from the original on 15 March 2024. Retrieved 25 February 2024. ^ Confusion regarding a rule in The Zen of Python. Python Help - Discussions on Python.org. 3 May 2022. Archived from the original on 25 February 2024. Retrieved 25 February 2024. ^ Ambi, Chetan (4 July 2021). The Most Controversial Python Walrus Operator. Python Simplified. Archived from the original on 27 August 2023. Retrieved 5 February 2024. ^ Grifski, Jeremy (24 May 2020). The Controversy Behind The Walrus Operator in Python. The Renegade Coder. Archived from the original on 28 December 2023. Retrieved 25 February 2024. ^ Bader, Dan. Python String Formatting Best Practices. Real Python. Archived from the original on 18 February 2024. Retrieved 25 February 2024. ^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition. O'Reilly Media. p. 230. ISBN 978-0-596-00797-3. Archived from the original on 23 February 2020. Retrieved 14 November 2015. ^ Python Culture. ebeab. 21 January 2014. Archived from the original on 30 January 2014. ^ a b Transpiling Python to Julia using PyJL (PDF). Archived (PDF) from the original on 19 November 2023. Retrieved 20 September 2023. After manually modifying one line of code by specifying the necessary type information, we obtained a speedup of 52.6×, making the translated Julia code 19.5× faster than the original Python code. ^ Why is it called Python?. General Python FAQ. Docs.python.org. Archived from the original on 24 October 2012. Retrieved 3 January 2023. ^ 15 Ways Python Is a Powerful Force on the Web. Archived from the original on 11 May 2019. Retrieved 3 July 2018. ^ pprint – Data pretty printer – Python 3.11.0 documentation. docs.python.org. Archived from the original on 22 January 2021. Retrieved 5 November 2022. stuff=['spam', 'eggs', 'lumberjack', 'knights', 'ni'] ^ Code Style – The Hitchhiker's Guide to Python. docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021. ^ Is Python a good language for beginning programmers?. General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 21 March 2007. ^ Myths about indentation in Python. Secnetix.de. Archived from the original on 18 February 2018. Retrieved 19 April 2011. ^ Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4. ^ PEP 8 – Style Guide for Python Code. Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. ^ 8. Errors and Exceptions – Python 3.12.0a0 documentation. docs.python.org. Archived from the original on 9 May 2022. Retrieved 9 May 2022. ^ Highlights: Python 2.5. Python.org. Archived from the original on 4 August 2019. Retrieved 20 March 2018. ^ van Rossum, Guido (22 April 2009). Tail Recursion Elimination. Neopythonic.blogspot.be. Archived from the original on 19 May 2018. Retrieved 3 December 2012. ^ van Rossum, Guido (9 February 2006). Language Design Is Not Just Solving Puzzles. Artima forums. Artima. Archived from the original on 17 January 2020. Retrieved 21 March 2007. ^ van Rossum, Guido; Eby, Phillip J. (10 May 2005). PEP 342 – Coroutines via Enhanced Generators. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 29 May 2020. Retrieved 19 February 2012. ^ PEP 380. Python.org. Archived from the original on 4 June 2020. Retrieved 3 December 2012. ^ division. python.org. Archived from the original on 20 July 2006. Retrieved 30 July 2014. ^ PEP 0465 – A dedicated infix operator for matrix multiplication. python.org. Archived from the original on 4 June 2020. Retrieved 1 January 2016. ^ Python 3.5.1 Release and Changelog. python.org. Archived from the original on 14 May 2020. Retrieved 1 January 2016. ^ What's New in Python 3.8. Archived from the original on 8 June 2020. Retrieved 14 October 2019. ^ van Rossum, Guido; Hettinger, Raymond (7 February 2003). PEP 308 – Conditional Expressions. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 13 March 2016. Retrieved 13 July 2011. ^ 4. Built-in Types – Python 3.6.3rc1 documentation. python.org. Archived from the original on 14 June 2020. Retrieved 1 October 2017. ^ 5.3. Tuples and Sequences – Python 3.7.1rc2 documentation. python.org. Archived from the original on 10 June 2020. Retrieved 17 October 2018. ^ a b PEP 498 – Literal String Interpolation. python.org. Archived from the original on 15 June 2020. Retrieved 8 March 2017. ^ Why must 'self' be used explicitly in method definitions and calls?. Design and History FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 19 February 2012. ^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code. No Starch Press. p. 322. ISBN 978-1-59327-966-0. Archived from the original on 13 August 2021. Retrieved 7 July 2021. ^ The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1. Archived from the original on 26 October 2012. Retrieved 12 January 2011. ^ PEP 484 – Type Hints | peps.python.org. peps.python.org. Archived from the original on 27 November 2023. Retrieved 29 November 2023. ^ typing — Support for type hints. Python documentation. Python Software Foundation. Archived from the original on 21 February 2020. Retrieved 22 December 2023. ^ mypy – Optional Static Typing for Python. Archived from the original on 6 June 2020. Retrieved 28 January 2017. ^ Introduction. mypyc.readthedocs.io. Archived from the original on 22 December 2023. Retrieved 22 December 2023. ^ 15. Floating Point Arithmetic: Issues and Limitations – Python 3.8.3 documentation. docs.python.org. Archived from the original on 6 June 2020. Retrieved 6 June 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 double precision. ^ Zadka, Moshe; van Rossum, Guido (11 March 2001). PEP 237 – Unifying Long Integers and Integers. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 24 September 2011. ^ Built-in Types. Archived from the original on 14 June 2020. Retrieved 3 October 2019. ^ PEP 465 – A dedicated infix operator for matrix multiplication. python.org. Archived from the original on 29 May 2020. Retrieved 3 July 2018. ^ a b Zadka, Moshe; van Rossum, Guido (11 March 2001). PEP 238 – Changing the Division Operator. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013. ^ Why Python's Integer Division Floors. 24 August 2010. Archived from the original on 5 June 2020. Retrieved 25 August 2010. ^ round, The Python standard library, release 3.2, §2: Built-in functions, archived from the original on 25 October 2012, retrieved 14 August 2011 ^ round, The Python standard library, release 2.7, §2: Built-in functions, archived from the original on 27 October 2012, retrieved 14 August 2011 ^ Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. p. 66. ISBN 9780672329784. ^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206. ^ a b Batista, Facundo (17 October 2003). PEP 327 – Decimal Data Type. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008. ^ What's New in Python 2.6. Python v2.6.9 documentation. 29 October 2013. Archived from the original on 23 December 2019. Retrieved 26 September 2015. ^ 10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke. University of Washington Department of Statistics. Archived from the original on 31 May 2020. Retrieved 3 February 2019. ^ Shell, Scott (17 June 2014). An introduction to Python for scientific computing (PDF). Archived (PDF) from the original on 4 February 2019. Retrieved 3 February 2019. ^ Piotrowski, Przemyslaw (July 2006). Build a Rapid Web Development Environment for Python Server Pages and Oracle. Oracle Technology Network. Oracle. Archived from the original on 2 April 2019. Retrieved 12 March 2012. ^ Eby, Phillip J. (7 December 2003). PEP 333 – Python Web Server Gateway Interface v1.0. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. ^ PyPI. PyPI. 13 March 2025. Archived from the original on 22 February 2025. ^ Enthought, Canopy. Canopy. www.enthought.com. Archived from the original on 15 July 2017. Retrieved 20 August 2016. ^ Project Jupyter. Jupyter.org. Archived from the original on 12 October 2023. Retrieved 2 April 2025. ^ PEP 7 – Style Guide for C Code | peps.python.org. peps.python.org. Archived from the original on 24 April 2022. Retrieved 28 April 2022. ^ 4. Building C and C++ Extensions – Python 3.9.2 documentation. docs.python.org. Archived from the original on 3 March 2021. Retrieved 1 March 2021. ^ van Rossum, Guido (5 June 2001). PEP 7 – Style Guide for C Code. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 1 June 2020. Retrieved 24 November 2008. ^ CPython byte code. Docs.python.org. Archived from the original on 5 June 2020. Retrieved 16 February 2016. ^ Python 2.5 internals (PDF). Archived (PDF) from the original on 6 August 2012. Retrieved 19 April 2011. ^ Changelog – Python 3.9.0 documentation. docs.python.org. Archived from the original on 7 February 2021. Retrieved 8 February 2021. ^ Download Python. Python.org. Archived from the original on 8 December 2020. Retrieved 13 December 2020. ^ history [vmspython]. www.vmspython.org. Archived from the original on 2 December 2020. Retrieved 4 December 2020. ^ An Interview with Guido van Rossum. Oreilly.com. Archived from the original on 16 July 2014. Retrieved 24 November 2008. ^ Download Python for Other Platforms. Python.org. Archived from the original on 27 November 2020. Retrieved 4 December 2020. ^ PyPy compatibility. Pypy.org. Archived from the original on 6 June 2020. Retrieved 3 December 2012. ^ Team, The PyPy (28 December 2019). Download and Install. PyPy. Archived from the original on 8 January 2022. Retrieved 8 January 2022. ^ speed comparison between CPython and Pypy. Speed.pypy.org. Archived from the original on 10 May 2021. Retrieved 3 December 2012. ^ Codon: Differences with Python. Archived from the original on 25 May 2023. Retrieved 28 August 2023. ^ Lawson, Loraine (14 March 2023). MIT-Created Compiler Speeds up Python Code. The New Stack. Archived from the original on 6 April 2023. Retrieved 28 August 2023. ^ Application-level Stackless features – PyPy 2.0.2 documentation. Doc.pypy.org. Archived from the original on 4 June 2020. Retrieved 17 July 2013. ^ Python-for-EV3. LEGO Education. Archived from the original on 7 June 2020. Retrieved 17 April 2019. ^ Yegulalp, Serdar (29 October 2020). Pyston returns from the dead to speed Python. InfoWorld. Archived from the original on 27 January 2021. Retrieved 26 January 2021. ^ cinder: Instagram's performance-oriented fork of CPython. GitHub. Archived from the original on 4 May 2021. Retrieved 4 May 2021. ^ Aroca, Rafael (7 August 2021). Snek Lang: feels like Python on Arduinos. Yet Another Technology Blog. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ Aufranc (CNXSoft), Jean-Luc (16 January 2020). Snekboard Controls LEGO Power Functions with CircuitPython or Snek Programming Languages (Crowdfunding) – CNX Software. CNX Software – Embedded Systems News. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ Kennedy (@mkennedy), Michael. Ready to find out if you're git famous?. pythonbytes.fm. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ Packard, Keith (20 December 2022). The Snek Programming Language: A Python-inspired Embedded Computing Language (PDF). Archived (PDF) from the original on 4 January 2024. Retrieved 4 January 2024. ^ Plans for optimizing Python. Google Project Hosting. 15 December 2009. Archived from the original on 11 April 2016. Retrieved 24 September 2011. ^ Python on the Nokia N900. Stochastic Geometry. 29 April 2010. Archived from the original on 20 June 2019. Retrieved 9 July 2015. ^ Brython. brython.info. Archived from the original on 3 August 2018. Retrieved 21 January 2021. ^ Transcrypt – Python in the browser. transcrypt.org. Archived from the original on 19 August 2018. Retrieved 22 December 2020. ^ Transcrypt: Anatomy of a Python to JavaScript Compiler. InfoQ. Archived from the original on 5 December 2020. Retrieved 20 January 2021. ^ Nuitka Home | Nuitka Home. nuitka.net. Archived from the original on 30 May 2020. Retrieved 18 August 2017. ^ Guelton, Serge; Brunet, Pierrick; Amini, Mehdi; Merlini, Adrien; Corbillon, Xavier; Raynaud, Alan (16 March 2015). Pythran: enabling static optimization of scientific Python programs. Computational Science & Discovery. 8 (1). IOP Publishing: 014001. Bibcode:2015CS&D....8a4001G. doi:10.1088/1749-4680/8/1/014001. ISSN 1749-4699. ^ The Python → 11l → C++ transpiler. Archived from the original on 24 September 2022. Retrieved 17 July 2022. ^ google/grumpy. 10 April 2020. Archived from the original on 15 April 2020. Retrieved 25 March 2020 – via GitHub. ^ Projects. opensource.google. Archived from the original on 24 April 2020. Retrieved 25 March 2020. ^ Francisco, Thomas Claburn in San. Google's Grumpy code makes Python Go. www.theregister.com. Archived from the original on 7 March 2021. Retrieved 20 January 2021. ^ IronPython.net /. ironpython.net. Archived from the original on 17 April 2021. ^ GitHub – IronLanguages/ironpython3: Implementation of Python 3.x for .NET Framework that is built on top of the Dynamic Language Runtime. GitHub. Archived from the original on 28 September 2021. ^ Jython FAQ. www.jython.org. Archived from the original on 22 April 2021. Retrieved 22 April 2021. ^ Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M. ^ The Computer Language Benchmarks Game. Archived from the original on 14 June 2020. Retrieved 30 April 2020. ^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). PEP 1 – PEP Purpose and Guidelines. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011. ^ PEP 8 – Style Guide for Python Code. Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. ^ Cannon, Brett. Guido, Some Guys, and a Mailing List: How Python is Developed. python.org. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009. ^ Moving Python's bugs to GitHub [LWN.net]. Archived from the original on 2 October 2022. Retrieved 2 October 2022. ^ Python Developer's Guide – Python Developer's Guide. devguide.python.org. Archived from the original on 9 November 2020. Retrieved 17 December 2019. ^ Hughes, Owen (24 May 2021). Programming languages: Why Python 4.0 might never arrive, according to its creator. TechRepublic. Archived from the original on 14 July 2022. Retrieved 16 May 2022. ^ PEP 602 – Annual Release Cycle for Python. Python.org. Archived from the original on 14 June 2020. Retrieved 6 November 2019. ^ Changing the Python release cadence [LWN.net]. lwn.net. Archived from the original on 6 November 2019. Retrieved 6 November 2019. ^ Norwitz, Neal (8 April 2002). [Python-Dev] Release Schedules (was Stability & change). Archived from the original on 15 December 2018. Retrieved 27 June 2009. ^ a b Aahz; Baxter, Anthony (15 March 2001). PEP 6 – Bug Fix Releases. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 27 June 2009. ^ Python Buildbot. Python Developer's Guide. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 September 2011. ^ Documentation Tools. Python.org. Archived from the original on 11 November 2020. Retrieved 22 March 2021. ^ a b Whetting Your Appetite. The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012. ^ In Python, should I use else after a return in an if block?. Stack Overflow. Stack Exchange. 17 February 2011. Archived from the original on 20 June 2019. Retrieved 6 May 2011. ^ Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming. O'Reilly Media, Inc. p. 17. ISBN 9781449379322. Archived from the original on 17 July 2017. Retrieved 9 May 2017. ^ Fehily, Chris (2002). Python. Peachpit Press. p. xv. ISBN 9780201748840. Archived from the original on 17 July 2017. Retrieved 9 May 2017. ^ Lubanovic, Bill (2014). Introducing Python. Sebastopol, CA : O'Reilly Media. p. 305. ISBN 978-1-4493-5936-2. Retrieved 31 July 2023. ^ Blake, Troy (18 January 2021). TIOBE Index for January 2021. Technology News and Information by SeniorDBA. Archived from the original on 21 March 2021. Retrieved 26 February 2021. ^ TIOBE Index. TIOBE. Retrieved 31 March 2025. ^ Quotes about Python. Python Software Foundation. Archived from the original on 3 June 2020. Retrieved 8 January 2012. ^ Organizations Using Python. Python Software Foundation. Archived from the original on 21 August 2018. Retrieved 15 January 2009. ^ Python : the holy grail of programming. CERN Bulletin (31/2006). CERN Publications. 31 July 2006. Archived from the original on 15 January 2013. Retrieved 11 February 2012. ^ Shafer, Daniel G. (17 January 2003). Python Streamlines Space Shuttle Mission Design. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 November 2008. ^ Tornado: Facebook's Real-Time Web Framework for Python – Facebook for Developers. Facebook for Developers. Archived from the original on 19 February 2019. Retrieved 19 June 2018. ^ What Powers Instagram: Hundreds of Instances, Dozens of Techno",
    "sources": "Python for Artificial Intelligence. Python Wiki. 19 July 2012. Archived from the original on 1 November 2012. Retrieved 3 December 2012. Paine, Jocelyn, ed. (August 2005). AI in Python. AI Expert Newsletter. Amzi!. Archived from the original on 26 March 2012. Retrieved 11 February 2012. PyAIML 0.8.5 : Python Package Index. Pypi.python.org. Retrieved 17 July 2013. Russell, Stuart J. & Norvig, Peter (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 978-0-13-604259-4.",
    "further_reading": "Downey, Allen (July 2024). Think Python: How to Think Like a Computer Scientist (3rd ed.). O'Reilly Media. ISBN 978-1098155438. Lutz, Mark (2013). Learning Python (5th ed.). O'Reilly Media. ISBN 978-0-596-15806-4. Summerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN 978-0-321-68056-3. Ramalho, Luciano (May 2022). Fluent Python. O'Reilly Media. ISBN 978-1-4920-5632-4.",
    "external_links": "Python at Wikipedia's sister projects Media from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from WikiversityData from Wikidata Official website The Python Tutorial vtePythonImplementations CircuitPython CLPython CPython Cython MicroPython Numba IronPython Jython Psyco PyPy Python for S60 Shed Skin Stackless Python Unladen Swallow more... IDEs eric IDLE Ninja-IDE PyCharm PyDev Spyder more... Topics WSGI ASGI Designer Guido van Rossum Software (list) Python Software Foundation Python Conference (PyCon) vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vtePython web frameworks CherryPy CubicWeb Django FastAPI Flask Grok Nevow Pylons Pyramid Quixote Tornado TurboGears TwistedWeb web2py Zope 2 more... Comparison vteDifferentiable computingGeneral Differentiable programming Information geometry Statistical manifold Automatic differentiation Neuromorphic computing Pattern recognition Ricci calculus Computational learning theory Inductive bias Hardware IPU TPU VPU Memristor SpiNNaker Software libraries TensorFlow PyTorch Keras scikit-learn Theano JAX Flux.jl MindSpore Portals Computer programming Technology vteFree and open-source softwareGeneral Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Softwarepackages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category vteStatistical softwarePublic domain Dataplot Epi Info CSPro X-12-ARIMA Open-source ADMB DAP gretl jamovi JASP JAGS JMulTi Julia Jupyter (Julia, Python, R) GNU Octave OpenBUGS Orange PSPP Python (statsmodels, PyMC3, IPython, IDLE) R (RStudio) SageMath SimFiT SOFA Statistics Stan XLispStat Freeware BV4.1 CumFreq SegReg XploRe WinBUGS CommercialCross-platform Data Desk GAUSS GraphPad InStat GraphPad Prism IBM SPSS Statistics IBM SPSS Modeler JMP Maple Mathcad Mathematica MATLAB OxMetrics RATS Revolution Analytics SAS (SAS Viya) SmartPLS Stata StatView SUDAAN S-PLUS TSP World Programming System (WPS) Windows only BMDP EViews GenStat LIMDEP LISREL MedCalc Microfit Minitab MLwiN NCSS Shazam SigmaStat Statistica StatsDirect StatXact SYSTAT The Unscrambler Unistat Excel add-ons Analyse-it Unistat for Excel XLfit RExcel Comparison • Category vteNumerical-analysis softwareFree Advanced Simulation Library ADMB Chapel Euler Mathematical Toolbox FreeFem++ FreeMat Genius Gmsh GNU Octave gretl Julia Jupyter (Julia, Python, R; IPython) MFEM OpenFOAM Python R SageMath Salome ScicosLab Scilab X10 Weka Discontinued Fortress Proprietary DADiSP FEATool Multiphysics GAUSS LabVIEW Maple Mathcad Mathematica MATLAB MWorks SAS (SAS Viya) Speakeasy VisSim Comparison Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef",
    "document": "Main article: History of Python The designer of Python, Guido van Rossum, at PyCon US 2024 Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands; it was conceived as a successor to the ABC programming language, which was inspired by SETL, capable of exception handling and interfacing with the Amoeba operating system. Python implementation began in December 1989. Van Rossum assumed sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his permanent vacation from responsibilities as Python's benevolent dictator for life (BDFL); this title was bestowed on him by the Python community to reflect his long-term commitment as the project's chief decision-maker. (He has since come out of retirement and is self-titled BDFL-emeritus.) In January 2019, active Python core developers elected a five-member Steering Council to lead the project. The name Python is said to derive from the British comedy series Monty Python's Flying Circus. Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support. Python 2.7's end-of-life was initially set for 2015, and then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3. It no longer receives security patches or updates. While Python 2.7 and older versions are officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e., 2.7.18+ (plus 3.10), with the plus signifying (at least some) backported security updates. Python 3.0 was released on 3 December 2008, with some new semantics and changed syntax. At least every Python release since (the now unsupported) 3.5 has added some syntax to the language; a few later releases have removed outdated modules and have changed semantics, at least in a minor way. As of 8 April 2025[update], Python 3.13.3 is the latest stable release (it's highly recommended to upgrade to it, or upgrade any other older 3.x release). This version currently receives full bug-fix and security updates, while Python 3.12—released in October 2023—had active bug-fix support only until April 2025, and since then only security fixes. Python 3.9 is the oldest supported version of Python (albeit in the 'security support' phase), because Python 3.8 has become an end-of-life product. Starting with Python 3.13, this and later versions receive two years of full support (which has increased from one and a half years), followed by three years of security support; this is the same total duration of support as previously. Security updates were expedited in 2021 and again twice in 2022. More issues were fixed in 2023 and in September 2024 (for Python versions 3.8.20 through 3.12.6)—all versions (including 2.7) had been insecure because of issues leading to possible remote code execution and web-cache poisoning. Python 3.10 added the | union type operator and the match and case keywords (for structural pattern matching statements). Python 3.11 expanded exception handling functionality. Python 3.12 added the new keyword type. Notable changes from version 3.10 to 3.11 include increased program execution speed and improved error reporting. Python 3.11 is claimed to be 10%–60% faster than Python 3.10, and Python 3.12 increases by an additional 5% . Python 3.12 also includes improved error messages (again improved in 3.14) and many other changes. Python 3.13 introduces more syntax for types; a new and improved interactive interpreter (REPL), featuring multi-line editing and color support; an incremental garbage collector, which results in shorter pauses for collection in programs that have many objects, as well as increasing the improved speed in 3.11 and 3.12); an experimental just-in-time (JIT) compiler (such features, can/needs to be enabled specifically for the increase in speed); and an experimental free-threaded build mode, which disables the global interpreter lock (GIL), allowing threads to run more concurrently, as enabled inpython3.13t or python3.13t.exe. Python 3.13 introduces some changes in behavior, i.e., new well-defined semantics, fixing bugs, and removing many deprecated classes, functions and methods (as well as some of the Python/C API and outdated modules). The old implementation of locals() and frame.f_locals was slow, inconsistent and buggy, and it had many corner cases and oddities. Code that works around those may need revising; code that uses locals() for simple templating or print debugging should continue to work correctly. Python 3.13 introduces the experimental free-threaded build mode, which disables the Global Interpreter Lock (GIL); the GIL is a feature of CPython that previously prevented multiple threads from executing Python bytecode simultaneously. This optional build, introduced through PEP 703, enables better exploitation of multi-core CPUs. By allowing multiple threads to run Python code in parallel, the free-threaded mode addresses long-standing performance bottlenecks associated with the GIL. This change offers a new path for parallelism in Python, without resorting to multiprocessing or external concurrency frameworks. Some additional standard-library modules will be removed in Python 3.15 or 3.16, as will be many deprecated classes, functions and methods. Python 3.11 adds Sigstore digital verification signatures for all CPython artifacts (in addition to PGP). Because the use of PGP has been criticized by security practitioners, Python is transitioning to Sigstore exclusively and dropping PGP from 3.14. Python 3.12 removed wstr meaning Python extensions need to be modified, and 3.10 added pattern matching to the language. Python 3.12 dropped some outdated modules, and more will be dropped in the future, deprecated as of 3.13; already deprecated array 'u' format code will emit DeprecationWarning since 3.13 and will be removed in Python 3.16. The 'w' format code should be used instead. Part of ctypes is also deprecated and http.server.CGIHTTPRequestHandler will emit a DeprecationWarning, and will be removed in 3.15. Using that code already has a high potential for both security and functionality bugs. Parts of the typing module are deprecated, e.g. creating a typing.NamedTuple class using keyword arguments to denote the fields and such (and more) will be disallowed in Python 3.15. Python 3.14 is now in the alpha 3 phase. With regard to possible change to annotations, In Python 3.14, from __future__ import annotations will continue to work as it did before, converting annotations into strings. Python Enhancement Proposal (PEP) 711 proposes PyBI—a standard format for distributing Python binaries. Python 3.15 will Make UTF-8 mode default; This mode is supported in all current Python versions, but it currently must be opted into. UTF-8 is already used by default on Windows (and other operating systems) for most purposes; an exception is opening files. Enabling UTF-8 also makes code fully cross-platform. Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming and metaobjects). Many other paradigms are supported via extensions, including design by contract and logic programming. Python is often referred to as a 'glue language' because it can seamlessly integrate components written in other languages. Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. It uses dynamic name resolution (late binding), which binds method and variable names during program execution. Python's design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions. The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML. Python's core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as these: Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Readability counts. However, Python features regularly violate these principles and have received criticism for adding unnecessary language bloat. Responses to these criticisms note that the Zen of Python is a guideline rather than a rule. The addition of some new features had been controversial: Guido van Rossum resigned as Benevolent Dictator for Life after conflict about adding the assignment expression operator in Python 3.8. Nevertheless, rather than building all functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which represented the opposite approach. Python claims to strive for a simpler, less-cluttered syntax and grammar, while giving developers a choice in their coding methodology. In contrast to Perl's motto there is more than one way to do it, Python advocates an approach where there should be one—and preferably only one—obvious way to do it.. In practice, however, Python provides many ways to achieve a given goal. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use. Alex Martelli is a Fellow at the Python Software Foundation and Python book author; he wrote that To describe something as 'clever' is not considered a compliment in the Python culture. Python's developers usually try to avoid premature optimization; they also reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity. Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages; but this approach either fails to achieve the expected speed-up, since Python is a very dynamic language, or only a restricted subset of Python is compiled (with potential minor semantic changes). Python's developers aim for the language to be fun to use. This goal is reflected in the name—a tribute to the British comedy group Monty Python—and in playful approaches to some tutorials and reference materials. For instance, some code examples use the terms spam and eggs (in reference to a Monty Python sketch), rather than the typical terms foo and bar. A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. Pythonic code may use Python idioms well; be natural or show fluency in the language; or conform with Python's minimalist philosophy and emphasis on readability. Main article: Python syntax and semantics An example of Python code and indentation Example of C# code with curly braces and semicolons Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal. Main article: Python syntax and semantics § Indentation Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block. Thus, the program's visual structure accurately represents its semantic structure. This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces. Python's statements include the following: The assignment statement, using a single equals sign = The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else if) The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block The while statement, which executes a block of code as long as its condition is true The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups); the try statement also ensures that clean-up code in a finally block is always run regardless of how the block exits The raise statement, used to raise a specified exception or re-raise a caught exception The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming The def statement, which defines a function or method The with statement, which encloses a code block within a context manager, allowing resource-acquisition-is-initialization (RAII)-like behavior and replacing a common try/finally idiom Examples of a context include acquiring a lock before some code is run, and then releasing the lock; or opening and then closing a file) The break statement, which exits a loop The continue statement, which skips the rest of the current iteration and continues with the next The del statement, which removes a variable—deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined [a] The pass statement, serving as a NOP (i.e., no operation), which is syntactically needed to create an empty code block The assert statement, used in debugging to check for conditions that should apply The yield statement, which returns a value from a generator function (and also an operator); used to implement coroutines The return statement, used to return a value from a function The import and from statements, used to import modules whose functions or variables can be used in the current program The match and case statements, analogous to a switch statement construct, which compares an expression against one or more cases as a control-flow measure. The assignment statement (=) binds a name as a reference to a separate, dynamically allocated object. Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed data type; however, it always refers to some object with a type. This is called dynamic typing—in contrast to statically-typed languages, where each variable may contain only a value of a certain type. Python does not support tail call optimization or first-class continuations; according to Van Rossum, the language never will. However, better support for coroutine-like functionality is provided by extending Python's generators. Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, data can be passed through multiple stack levels. Python's expressions include the following: The +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of division in Python: floor division (or integer division) //, and floating-point division /. Python uses the ** operator for exponentiation. Python uses the + operator for string concatenation. The language uses the * operator for duplicating a string a specified number of times. The @ infix operator is intended to be used by libraries such as NumPy for matrix multiplication. The syntax :=, called the walrus operator, was introduced in Python 3.8. This operator assigns values to variables as part of a larger expression. In Python, == compares two objects by value. Python's is operator may be used to compare object identities (i.e., comparison by reference), and comparisons may be chained—for example, a <= b <= c. Python uses and, or, and not as Boolean operators. Python has a type of expression called a list comprehension, and a more general expression called a generator expression. Anonymous functions are implemented using lambda expressions; however, there may be only one expression in each body. Conditional expressions are written as x if c else y. (This is different in operand order from the c ? x : y operator common to many other languages.) Python makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (since dictionary keys must be immutable in Python). Tuples, written as (1, 2, 3), are immutable and thus can be used as the keys of dictionaries, provided that all of the tuple's elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a new tuple containing the elements of both. For example, given the variable t initially equal to (1, 2, 3), executing t = t + (4, 5) first evaluates t + (4, 5), which yields (1, 2, 3, 4, 5); this result is then assigned back to t—thereby effectively modifying the contents of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts. Python features sequence unpacking where multiple expressions, each evaluating to something assignable (e.g., a variable or a writable property) are associated just as in forming tuple literal; as a whole, the results are then put on the left-hand side of the equal sign in an assignment statement. This statement expects an iterable object on the right-hand side of the equal sign to produce the same number of values as the writable expressions on the left-hand side; while iterating, the statement assigns each of the values produced on the right to the corresponding expression on the left. Python has a string format operator % that functions analogously to printf format strings in the C language—e.g. spam=%s eggs=%d % (blah, 2) evaluates to spam=blah eggs=2. In Python 2.6+ and 3+, this operator was supplemented by the format() method of the str class, e.g., spam={0} eggs={1}.format(blah, 2). Python 3.6 added f-strings: spam = blah; eggs = 2; f'spam={spam} eggs={eggs}'. Strings in Python can be concatenated by adding them (using the same operator as for adding integers and floats); e.g., spam + eggs returns spameggs. If strings contain numbers, they are concatenated as strings rather than as integers, e.g. 2 + 2 returns 22. Python supports string literals in several ways: Delimited by single or double quotation marks; single and double quotation marks have equivalent functionality (unlike in Unix shells, Perl, and Perl-influenced languages). Both marks use the backslash (\\) as an escape character. String interpolation became available in Python 3.6 as formatted string literals. Triple-quoted, i.e., starting and ending with three single or double quotation marks; this may span multiple lines and function like here documents in shells, Perl, and Ruby. Raw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as in regular expressions and Windows-style paths. (Compare @-quoting in C#.) Python has array index and array slicing expressions in lists, which are written as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The (optional) third slice parameter, called step or stride, allows elements to be skipped or reversed. Slice indexes may be omitted—for example, a[:] returns a copy of the entire list. Each element of a slice is a shallow copy. In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This distinction leads to duplicating some functionality, for example: List comprehensions vs. for-loops Conditional expressions vs. if blocks The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former function is for expressions, while the latter is for statements A statement cannot be part of an expression; because of this restriction, expressions such as list and dict comprehensions (and lambda expressions) cannot contain statements. As a particular case, an assignment statement such as a = 1 cannot be part of the conditional expression of a conditional statement. Methods of objects are functions attached to the object's class; the syntax for normal methods and functions, instance.method(argument), is syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) parameter in some object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby). Python also provides methods, often called dunder methods (because their names begin and end with double underscores); these methods allow user-defined classes to modify how they are handled by native operations including length, comparison, arithmetic , and type conversion. The standard type hierarchy in Python 3 Python uses duck typing, and it has typed objects but untyped variable names. Type constraints are not checked at definition time; rather, operations on an object may fail at usage time, indicating that the object is not of an appropriate type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are poorly defined (e.g., adding a number and a string) rather than quietly attempting to interpret them. Python allows programmers to define their own types using classes, most often for object-oriented programming. New instances of classes are constructed by calling the class, for example, SpamClass() or EggsClass()); the classes are instances of the metaclass type (which is an instance of itself), thereby allowing metaprogramming and reflection. Before version 3.0, Python had two kinds of classes, both using the same syntax: old-style and new-style. Current Python versions support the semantics of only the new style. Python supports optional type annotations. These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors. Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization. Summary of Python 3's built-in types Type Mutability Description Syntax examples bool immutable Boolean value TrueFalse bytearray mutable Sequence of bytes bytearray(b'Some ASCII')bytearray(bSome ASCII)bytearray([119, 105, 107, 105]) bytes immutable Sequence of bytes b'Some ASCII'bSome ASCIIbytes([119, 105, 107, 105]) complex immutable Complex number with real and imaginary parts 3+2.7j3 + 2.7j dict mutable Associative array (or dictionary) of key and value pairs; can contain mixed types (keys and values); keys must be a hashable type {'key1': 1.0, 3: False}{} types.EllipsisType immutable An ellipsis placeholder to be used as an index in NumPy arrays ...Ellipsis float immutable Double-precision floating-point number. The precision is machine-dependent, but in practice it is generally implemented as a 64-bit IEEE 754 number with 53 bits of precision. 1.33333 frozenset immutable Unordered set, contains no duplicates; can contain mixed types, if hashable frozenset([4.0, 'string', True]) int immutable Integer of unlimited magnitude 42 list mutable List, can contain mixed types [4.0, 'string', True][] types.NoneType immutable An object representing the absence of a value, often called null in other languages None types.NotImplementedType immutable A placeholder that can be returned from overloaded operators to indicate unsupported operand types. NotImplemented range immutable An immutable sequence of numbers, commonly used for iterating a specific number of times in for loops range(−1, 10)range(10, −5, −2) set mutable Unordered set, contains no duplicates; can contain mixed types, if hashable {4.0, 'string', True}set() str immutable A character string: sequence of Unicode codepoints 'Wikipedia'WikipediaSpanning multiple lines Spanning multiple lines tuple immutable Tuple, can contain mixed types (4.0, 'string', True)('single element',)() Python includes conventional symbols for arithmetic operators (+, -, *, /), the floor-division operator //, and the modulo operator %. (With the module operator, a remainder can be negative, e.g., 4 % -3 == -2.) Python also offers the ** symbol for exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0; it also offers the matrix‑multiplication operator @ . These operators work as in traditional mathematics; with the same precedence rules, the infix operators + and - can also be unary, to represent positive and negative numbers respectively. Division between integers produces floating-point results. The behavior of division has changed significantly over time: The current version of Python (i.e., since 3.0) changed the / operator to always represent floating-point division, e.g., 5/2 == 2.5. The floor division // operator was introduced. Thus 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 ,and -7.5//3 == -3.0. Adding the from __future__ import division statement causes a module in Python 2.7 to use Python 3.0 rules for division instead (see above). In Python terms, the / operator represents true division (or simply division), while the // operator represents floor division. Before version 3.0, the / operator represents classic division. Rounding towards negative infinity, though a different method than in most languages, adds consistency to Python. For instance, this rounding implies that the equation (a + b)//b == a//b + 1 is always true. The rounding also implies that the equation b*(a//b) + a%b == a is valid for both positive and negative values of a. As expected, the result of a%b lies in the half-open interval [0, b), where b is a positive integer; however, maintaining the validity of the equation requires that the result must lie in the interval (b, 0] when b is negative. Python provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses the round to even method: round(1.5) and round(2.5) both produce 2. Python versions before 3 used the round-away-from-zero method: round(0.5) is 1.0, and round(-0.5) is −1.0. Python allows Boolean expressions that contain multiple equality relations to be consistent with general usage in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c. C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c. Python uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision with several rounding modes. The Fraction class in the fractions module provides arbitrary precision for rational numbers. Due to Python's extensive mathematics library and the third-party library NumPy, the language is frequently used for scientific scripting in tasks such as numerical data processing and manipulation. Functions are created in Python by using the def keyword. A function is defined similarly to how it is called, by first providing the function name and then the required parameters. Here is an example of a function that prints its inputs: def printer(input1, input2=already there): print(input1) print(input2) printer(hello) # Example output: # hello # already there To assign a default value to a function parameter in case no actual value is provided at run time, variable-definition syntax can be used inside the function header. Hello, World! program: print('Hello, world!') Program to calculate the factorial of a positive integer: n = int(input('Type a number, and its factorial will be printed: ')) if n < 0: raise ValueError('You must enter a non-negative integer') factorial = 1 for i in range(2, n + 1): factorial *= i print(factorial) Python's large standard library is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. The language includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals, manipulating regular expressions, and unit testing. Some parts of the standard library are covered by specifications—for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333—but most parts are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules must be altered or rewritten for variant implementations. As of 13 March 2025,[update] the Python Package Index (PyPI), the official repository for third-party Python software, contains over 614,339 packages. These have a wide range of functionality, including the following: Automation Data analytics Databases Documentation Graphical user interfaces Image processing Machine learning Mobile apps Multimedia Computer networking Scientific computing System administration Test frameworks Text processing Web frameworks Web scraping See also: Comparison of integrated development environments § Python Most Python implementations (including CPython) include a read–eval–print loop (REPL); this permits the environment to function as a command line interpreter, with which users enter statements sequentially and receive results immediately. Python is also bundled with an Integrated development environment (IDE) called IDLE, which is oriented toward beginners. Other shells, including IDLE and IPython, add additional capabilities such as improved auto-completion, session-state retention, and syntax highlighting. Standard desktop IDEs include PyCharm, IntelliJ Idea, Visual Studio Code; there are also web browser-based IDEs, such as the following environments: SageMath, for developing science- and math-related programs; Jupyter Notebooks, an open-source interactive computing platform; PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE that emphasizes scientific computing. See also: List of Python software § Python implementations CPython is the reference implementation of Python. This implementation is written in C, meeting the C89 standard with several select C99 features (Python 3.11 uses C11). CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g., they can be implemented using C11 or C++. CPython compiles Python programs into an intermediate bytecode, which is then executed by a virtual machine. CPython is distributed with a large standard library written in a combination of C and native Python. CPython is available for many platforms, including Windows and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, using an experimental installer). Starting with Python 3.9, the Python installer intentionally fails to install on Windows 7 and 8; Windows XP was supported until Python 3.5, with unofficial support for VMS. Platform portability was one of Python's earliest priorities. During development of Python 1 and 2, even OS/2 and Solaris were supported; since that time, support has been dropped for many platforms. All current Python versions (i.e., since 3.7) support only operating systems that feature multi-threading. All alternative implementations have at least slightly different semantic. For example, an alternative may include unordered dictionaries, in contrast to other current Python versions. As another example in the larger Python ecosystem, PyPy does not support the full C Python API. Alternative implementations include the following: PyPy is a fast, compliant interpreter of Python 2.7 and 3.10. PyPy's just-in-time compiler often improves speed significantly relative to CPython, but PyPy does not support some libraries written in C. PyPy offers support for the RISC-V instruction-set architecture, for example. Codon is an implentation with an ahead-of-time (AOT) compiler, which compiles a statically-typed Python-like language whose syntax and semantics are nearly identical to Python's, there are some notable differences For example, Codon uses 64-bit machine integers for speed, not arbitrarily as with Python; Codon developers claim that speedups over CPython are usually on the order of ten to a hundred times. Codon compiles to machine code (via LLVM) and supports native multithreading. Codon can also compile to Python extension modules that can be imported and used from Python. Stackless Python is a significant fork of CPython that implements microthreads. This implementation uses the call stack differently, thus allowing massively concurrent programs. PyPy also offers a stackless version. MicroPython and CircuitPython are Python 3 variants that are optimized for microcontrollers, including the Lego Mindstorms EV3. Pyston is a variant of the Python runtime that uses just-in-time compilation to speed up execution of Python programs. Cinder is a performance-oriented fork of CPython 3.8 that features a number of optimizations, including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time JIT, and an experimental bytecode compiler. The Snek embedded computing language is Python-inspired, but it is not Python. It is possible to write Snek programs that run under a full Python system, but most Python programs will not run under Snek. Snek is compatible with 8-bit AVR microcontrollers such as ATmega 328P-based Arduino, as well as larger microcontrollers that are compatible with MicroPython. Snek is an imperative language that (unlike Python) omits object-oriented programming. Snek supports only one numeric data type, which features 32-bit single precision (resembling JavaScript numbers, though smaller). Other just-in-time Python compilers have been developed, but are now unsupported: Google began a project named Unladen Swallow in 2009: this project aimed to speed up the Python interpreter five-fold by using LLVM, and improve multithreading capability for scaling to thousands of cores, while typical implementations are limited by the global interpreter lock. Psyco is a discontinued just-in-time specializing compiler, which integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain data types and is faster than standard Python code. Psyco does not support Python 2.7 or later. PyS60 was a Python 2 interpreter for Series 60 mobile phones, which was released by Nokia in 2005. The interpreter implemented many modules from Python's standard library, as well as additional modules for integration with the Symbian operating system. The Nokia N900 also supports Python through the GTK widget library, allowing programs to be written and run on the target device. There are several compilers/transpilers to high-level object languages; the source language is unrestricted Python, a subset of Python, or a language similar to Python: Brython, Transcrypt, and Pyjs compile Python to JavaScript. (The latest release of Pyjs was in 2012.) Cython compiles a superset of Python to C. The resulting code can be used with Python via direct C-level API calls into the Python interpreter. PyJL compiles/transpiles a subset of Python to human-readable, maintainable, and high-performance Julia source code. Despite the developers' performance claims, this is not possible for arbitrary Python code; that is, compiling to a faster language or machine code is known to be impossible in the general case. The semantics of Python might potentially be changed, but in many cases speedup is possible with few or no changes in the Python code. The faster Julia source code can then be used from Python or compiled to machine code. Nuitka compiles Python into C. This compiler works with Python 3.4 to 3.12 (and 2.6 and 2.7) for Python's main supported platforms (and Windows 7 or even Windows XP) and for Android. The compiler developers claim full support for Python 3.10, partial support for Python 3.11 and 3.12, and experimental support for Python 3.13. Nuitka supports macOS including Apple Silicon-based versions. The compiler is free of cost, though it has commercial add-ons (e.g., for hiding source code). Numba is a JIT compiler that is used from Python; the compiler translates a subset of Python and NumPy code into fast machine code. This tool is enabled by adding a decorator to the relevant Python code. Pythran compiles a subset of Python 3 to C++ (C++11). RPython can be compiled to C, and it is used to build the PyPy interpreter for Python. The Python → 11l → C++ transpiler compiles a subset of Python 3 to C++ (C++17). There are also specialized compilers: MyHDL is a Python-based hardware description language (HDL) that converts MyHDL code to Verilog or VHDL code. Some older projects existed, as well as compilers not designed for use with Python 3.x and related syntax: Google's Grumpy transpiles Python 2 to Go. The latest release was in 2017. IronPython allows running Python 2.7 programs with the .NET Common Language Runtime. An alpha version (released in 2021), is available for Python 3.4, although features and behaviors from later versions may be included. Jython compiles Python 2.7 to Java bytecode, allowing the use of Java libraries from a Python program. Pyrex (last released in 2010) and Shed Skin (last released in 2013) compile to C and C++ respectively. A perforance comparison among various Python implementations, using a non-numerical (combinatorial) workload, was presented at EuroSciPy '13. In addition, Python's performance relative to other programming languages is benchmarked by The Computer Language Benchmarks Game. There are several approaches to optimizing Python performance, given the inherent slowness of an interpreted language. These approaches include the following strategies or tools: Just-in-time compilation: Dynamically compiling Python code just before it is executed. This technique is used in libraries such as Numba and PyPy. Static compilation: Python code is compiled into machine code sometime before execution. An example of this approach is Cython, which compiles Python into C. Concurrency and parallelism: Multiple tasks can be run simultaneously. Python contains modules such as `multiprocessing` to support this form of parallelism. Moreover, this approach helps to overcome limitations of the Global Interpreter Lock (GIL) in CPU tasks. Efficient data structures: Performance can also be improved by using data types such as Set for membership tests, or deque from collections for queue operations. Python's development is conducted largely through the Python Enhancement Proposal (PEP) process; this process is the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions. Python coding style is covered in PEP 8. Outstanding PEPs are reviewed and commented on by the Python community and the steering council. Enhancement of the language corresponds with development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug tracker hosted by the foundation. In 2022, all issues and discussions were migrated to GitHub. Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017. CPython's public releases have three types, distinguished by which part of the version number is incremented: Backward-incompatible versions, where code is expected to break and must be manually ported. The first part of the version number is incremented. These releases happen infrequently—version 3.0 was released 8 years after 2.0. According to Guido van Rossum, a version 4.0 will probably never exist. Major or feature releases are largely compatible with the previous version but introduce new features. The second part of the version number is incremented. Starting with Python 3.9, these releases are expected to occur annually. Each major version is supported by bug fixes for several years after its release. Bug fix releases, which introduce no new features, occur approximately every three months; these releases are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented. Many alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for releases, they are often delayed if the code is not ready yet. Python's development team monitors the state of the code by running a large unit test suite during development. The major academic conference on Python is PyCon. There are also special Python mentoring programs, such as PyLadies. Tools that can generate documentation for Python API include pydoc (available as part of the standard library); Sphinx; and Pdoc and its forks, Doxygen and Graphviz. Python's name is inspired by the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture; for example, the metasyntactic variables often used in Python literature are spam and eggs, rather than the traditional foo and bar. The official Python documentation also contains various references to Monty Python routines. Python users are sometimes referred to as Pythonistas. The affix Py- is often used when naming Python applications or libraries. Some examples include the following: Pygame, a binding of Simple DirectMedia Layer to Python (commonly used to create games); PyQt and PyGTK, which bind Qt and GTK to Python respectively; PyPy, a Python implementation originally written in Python; NumPy, a Python library for numerical processing. Since 2003, Python has consistently ranked in the top ten of the most popular programming languages in the TIOBE Programming Community Index; as of December 2022[update], Python was the most popular language. Python was selected as Programming Language of the Year (for the highest rise in ratings in a year) in 2007, 2010, 2018, and 2020—the only language to have done so four times as of 2020[update]). In the TIOBE Index, monthly rankings are based on the volume of searches for programming languages on Google, Amazon, Wikipedia, Bing, and 20 other platforms. According to the accompanying graph, Python has shown a marked upward trend since the early 2000s, eventually passing more established languages such as C, C++, and Java. This trend can be attributed to Python's readable syntax, comprehensive standard library, and application in data science and machine learning fields. TIOBE Index Chart showing Python's popularity compared to other programming languages. Large organizations that use Python include Wikipedia, Google, Yahoo!, CERN, NASA, Facebook, Amazon, Instagram, Spotify, and some smaller entities such as Industrial Light & Magic and ITA. The social news networking site Reddit was developed mostly in Python. Organizations that partly use Python include Discord and Baidu. Main article: List of Python software Software that is powered by Python Python has many uses, including the following: Scripting for web applications Scientific computing Artificial-intelligence and machine-learning projects Graphical user interfaces and desktop environments Embedded scripting in software and hardware products Operating systems Information security Python can serve as a scripting language for web applications, e.g., via the mod_wsgi module for the Apache web server. With Web Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks such as Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program communication between computers; this framework is used by Dropbox, for example. Libraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing, with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface that is programmable in Python; the SageMath library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus. OpenCV has Python bindings with a rich set of features for computer vision and image processing. Python is commonly used in artificial-intelligence and machine-learning projects, with support from libraries such as TensorFlow, Keras, Pytorch, scikit-learn and ProbLog (a logic language). As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing. The combination of Python and Prolog has proven useful for AI applications, with Prolog providing knowledge representation and reasoning capabilities. The Janus system, in particular, exploits similarities between these two languages, in part because of their dynamic typing and their simple, recursive data structures. This combination is typically applied natural language processing, visual query answering, geospatial reasoning, and handling semantic web data. The Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) to create prompts for two types of generators: text-to-text generators such as GPT3, and text-to-image generators such as DALL-E or Stable Diffusion. Python can be used for graphical user interfaces (GUIs), by using libraries such as Tkinter. Similarly, for the One Laptop per Child XO computer, most of the Sugar desktop environment is written in Python (as of 2008). Python is embedded in many software products (and some hardware products) as a scripting language. These products include the following: finite element method software such as Abaqus, 3D parametric modelers such as FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs such as GIMP, Inkscape, Scribus and Paint Shop Pro, and musical notation programs such as scorewriter and capella. Similarly, GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS. Python has also been used in several video games, and it has been adopted as first of the three programming languages available in Google App Engine (the other two being Java and Go). LibreOffice includes Python, and its developers plan to replace Java with Python; LibreOffice's Python Scripting Provider is a core feature since version 4.0 (from 7 February 2013). Among hardware products, the Raspberry Pi single-board computer project has adopted Python as its main user-programming language. Many operating systems include Python as a standard component. Python ships with most Linux distributions, AmigaOS 4 (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package); it can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage. Python is used extensively in the information security industry, including in exploit development. Python's design and philosophy have influenced many other programming languages: Boo uses indentation, a similar syntax, and a similar object model. Cobra uses indentation and a similar syntax; its Acknowledgements document lists Python first among influencing languages. CoffeeScript, a programming language that cross-compiles to JavaScript, has a Python-inspired syntax. ECMAScript–JavaScript borrowed iterators and generators from Python. GDScript, a Python-like scripting language that is built in to the Godot game engine. Go is designed for speed of working in a dynamic language like Python; Go shares Python's syntax for slicing arrays. Groovy was motivated by a desire to incorporate the Python design philosophy into Java. Julia was designed to be as usable for general programming as Python. Mojo is a non-strict superset of Python (e.g., omitting classes, and adding struct). Nim uses indentation and a similar syntax. Ruby's creator, Yukihiro Matsumoto, said that I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language. Swift, a programming language developed by Apple, has some Python-inspired syntax. Kotlin blends Python and Java features, which minimizes boilerplate code and enhances developer efficiency. Python's development practices have also been emulated by other languages. For example, Python requires a document that describes the rationale and context for any language change; this document is known as a Python Enhancement Proposal or PEP. This practice is also used by the developers of Tcl, Erlang, and Swift. Computer programming portalFree and open-source software portal Python syntax and semantics pip (package manager) List of programming languages History of programming languages Comparison of programming languages ^ del in Python does not behave the same way delete in languages such as C++ does, where such a word is used to call the destructor and deallocate heap memory. ^ General Python FAQ – Python 3 documentation. docs.python.org. Retrieved 7 July 2024. ^ Python 0.9.1 part 01/21. alt.sources archives. Archived from the original on 11 August 2021. Retrieved 11 August 2021. ^ Why is Python a dynamic language and also a strongly typed language. Python Wiki. Archived from the original on 14 March 2021. Retrieved 27 January 2021. ^ a b PEP 483 – The Theory of Type Hints. Python.org. Archived from the original on 14 June 2020. Retrieved 14 June 2018. ^ PEP 11 – CPython platform support | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 22 April 2024. ^ PEP 738 – Adding Android as a supported platform | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 19 May 2024. ^ Download Python for Other Platforms. Python.org. Archived from the original on 27 November 2020. Retrieved 18 August 2023. ^ test – Regression tests package for Python – Python 3.7.13 documentation. docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. ^ platform – Access to underlying platform's identifying data – Python 3.10.4 documentation. docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. ^ Holth, Moore (30 March 2014). PEP 0441 – Improving Python ZIP Application Support. Archived from the original on 26 December 2018. Retrieved 12 November 2015. ^ Starlark Language. Archived from the original on 15 June 2020. Retrieved 25 May 2019. ^ a b Why was Python created in the first place?. General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 22 March 2007. I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python). ^ Ada 83 Reference Manual (raise statement). Archived from the original on 22 October 2019. Retrieved 7 January 2020. ^ a b Kuchling, Andrew M. (22 December 2006). Interview with Guido van Rossum (July 1998). amk.ca. Archived from the original on 1 May 2007. Retrieved 12 March 2012. I'd spent a summer at DEC's Systems Research Center, which introduced me to Modula-2+; the Modula-3 final report was being written there at about the same time. What I learned there later showed up in Python's exception handling, modules, and the fact that methods explicitly contain 'self' in their parameter list. String slicing came from Algol-68 and Icon. ^ a b c itertools – Functions creating iterators for efficient looping – Python 3.7.1 documentation. docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. ^ van Rossum, Guido (1993). An Introduction to Python for UNIX/C Programmers. Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable. ^ a b Classes. The Python Tutorial. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 20 February 2012. It is a mixture of the class mechanisms found in C++ and Modula-3 ^ Lundh, Fredrik. Call By Object. effbot.org. Archived from the original on 23 November 2019. Retrieved 21 November 2017. replace CLU with Python, record with instance, and procedure with function or method, and you get a pretty accurate description of Python's object model. ^ Simionato, Michele. The Python 2.3 Method Resolution Order. Python Software Foundation. Archived from the original on 20 August 2020. Retrieved 29 July 2014. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers ^ Kuchling, A. M. Functional Programming HOWTO. Python v2.7.2 documentation. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 9 February 2012. List comprehensions and generator expressions [...] are a concise notation for such operations, borrowed from the functional programming language Haskell. ^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). PEP 255 – Simple Generators. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 9 February 2012. ^ More Control Flow Tools. Python 3 documentation. Python Software Foundation. Archived from the original on 4 June 2016. Retrieved 24 July 2015. By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python. With the lambda keyword, small anonymous functions can be created. ^ re – Regular expression operations – Python 3.10.6 documentation. docs.python.org. Archived from the original on 18 July 2018. Retrieved 6 September 2022. This module provides regular expression matching operations similar to those found in Perl. ^ CoffeeScript. coffeescript.org. Archived from the original on 12 June 2020. Retrieved 3 July 2018. ^ Perl and Python influences in JavaScript. www.2ality.com. 24 February 2013. Archived from the original on 26 December 2018. Retrieved 15 May 2015. ^ Rauschmayer, Axel. Chapter 3: The Nature of JavaScript; Influences. O'Reilly, Speaking JavaScript. Archived from the original on 26 December 2018. Retrieved 15 May 2015. ^ a b Why We Created Julia. Julia website. February 2012. Archived from the original on 2 May 2020. Retrieved 5 June 2014. We want something as usable for general programming as Python [...] ^ a b Krill, Paul (4 May 2023). Mojo language marries Python and MLIR for AI development. InfoWorld. Archived from the original on 5 May 2023. Retrieved 5 May 2023. ^ Ring Team (4 December 2017). Ring and other languages. ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 4 December 2017. ^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. ^ Lattner, Chris (3 June 2014). Chris Lattner's Homepage. Chris Lattner. Archived from the original on 25 December 2018. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ V documentation (Introduction). GitHub. Retrieved 24 December 2024. ^ Kuhlman, Dave. A Python Book: Beginning Python, Advanced Python, and Python Exercises. Section 1.1. Archived from the original (PDF) on 23 June 2012. ^ About Python. Python Software Foundation. Archived from the original on 20 April 2012. Retrieved 24 April 2012., second section Fans of Python use the phrase batteries included to describe the standard library, which covers everything from asynchronous processing to zip files. ^ PEP 206 – Python Advanced Library. Python.org. Archived from the original on 5 May 2021. Retrieved 11 October 2021. ^ Rossum, Guido Van (20 January 2009). The History of Python: A Brief Timeline of Python. The History of Python. Archived from the original on 5 June 2020. Retrieved 5 March 2021. ^ Peterson, Benjamin (20 April 2020). Python 2.7.18, the last release of Python 2. Python Insider. Archived from the original on 26 April 2020. Retrieved 27 April 2020. ^ Stack Overflow Developer Survey 2022. Stack Overflow. Archived from the original on 27 June 2022. Retrieved 12 August 2022. ^ The State of Developer Ecosystem in 2020 Infographic. JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 1 March 2021. Retrieved 5 March 2021. ^ a b TIOBE Index. TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required. ^ PYPL PopularitY of Programming Language index. pypl.github.io. Archived from the original on 14 March 2017. Retrieved 26 March 2021. ^ a b Venners, Bill (13 January 2003). The Making of Python. Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007. ^ van Rossum, Guido (29 August 2000). SETL (was: Lukewarm about range literals). Python-Dev (Mailing list). Archived from the original on 14 July 2018. Retrieved 13 March 2011. ^ van Rossum, Guido (20 January 2009). A Brief Timeline of Python. The History of Python. Archived from the original on 5 June 2020. Retrieved 20 January 2009. ^ Fairchild, Carlie (12 July 2018). Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life. Linux Journal. Archived from the original on 13 July 2018. Retrieved 13 July 2018. ^ PEP 8100. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 4 May 2019. ^ PEP 13 – Python Language Governance. Python.org. Archived from the original on 27 May 2021. Retrieved 25 August 2021. ^ Briggs, Jason R.; Lipovača, Miran (2013). Python for kids: a playful introduction to programming. San Francisco, Calif: No Starch Press. ISBN 978-1-59327-407-8. ^ Kuchling, A. M.; Zadka, Moshe (16 October 2000). What's New in Python 2.0. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 11 February 2012. ^ PEP 373 – Python 2.7 Release Schedule. python.org. Archived from the original on 19 May 2020. Retrieved 9 January 2017. ^ PEP 466 – Network Security Enhancements for Python 2.7.x. python.org. Archived from the original on 4 June 2020. Retrieved 9 January 2017. ^ Sunsetting Python 2. Python.org. Archived from the original on 12 January 2020. Retrieved 22 September 2019. ^ PEP 373 – Python 2.7 Release Schedule. Python.org. Archived from the original on 13 January 2020. Retrieved 22 September 2019. ^ mattip (25 December 2023). PyPy v7.3.14 release. PyPy. Archived from the original on 5 January 2024. Retrieved 5 January 2024. ^ Langa, Łukasz (17 May 2022). Python 3.9.13 is now available. Python Insider. Archived from the original on 17 May 2022. Retrieved 21 May 2022. ^ Status of Python versions. Python Developer's Guide. Retrieved 7 October 2024. ^ Python. endoflife.date. 8 October 2024. Retrieved 20 November 2024. ^ CVE-2021-3177. Red Hat Customer Portal. Archived from the original on 6 March 2021. Retrieved 26 February 2021. ^ CVE-2021-3177. CVE. Archived from the original on 27 February 2021. Retrieved 26 February 2021. ^ CVE-2021-23336. CVE. Archived from the original on 24 February 2021. Retrieved 26 February 2021. ^ Built-in Types. ^ corbet (24 October 2022). Python 3.11 released [LWN.net]. lwn.net. Retrieved 15 November 2022. ^ What's New In Python 3.13. Python documentation. Retrieved 30 April 2024. ^ PEP 667 – Consistent views of namespaces | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 7 October 2024. ^ PEP 703 – Making the GIL Optional in CPython. Python Enhancement Proposals (PEPs). Retrieved 30 March 2025. ^ Wouters, Thomas (9 April 2024). Python Insider: Python 3.12.3 and 3.13.0a6 released. Python Insider. Retrieved 29 April 2024. ^ PEP 594 – Removing dead batteries from the standard library. Python Enhancement Proposals. Python Softtware Foundation. 20 May 2019. ^ PEP 761 – Deprecating PGP signatures for CPython artifacts | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 6 January 2025. ^ 1. Extending Python with C or C++ – Python 3.9.1 documentation. docs.python.org. Archived from the original on 23 June 2020. Retrieved 14 February 2021. ^ PEP 623 – Remove wstr from Unicode. Python.org. Archived from the original on 5 March 2021. Retrieved 14 February 2021. ^ PEP 634 – Structural Pattern Matching: Specification. Python.org. Archived from the original on 6 May 2021. Retrieved 14 February 2021. ^ PEP 749 – Implementing PEP 649 | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. ^ PEP 711: PyBI: a standard format for distributing Python Binaries. Discussions on Python.org. 7 April 2023. Retrieved 20 November 2024. ^ PEP 686 – Make UTF-8 mode default | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. ^ The Cain Gang Ltd. Python Metaclasses: Who? Why? When? (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009. ^ 3.3. Special method names. The Python Language Reference. Python Software Foundation. Archived from the original on 15 December 2018. Retrieved 27 June 2009. ^ PyDBC: method preconditions, method postconditions and class invariants for Python. Archived from the original on 23 November 2019. Retrieved 24 September 2011. ^ Contracts for Python. Archived from the original on 15 June 2020. Retrieved 24 September 2011. ^ PyDatalog. Archived from the original on 13 June 2020. Retrieved 22 July 2012. ^ Glue It All Together With Python. Python.org. Retrieved 30 September 2024. ^ Extending and Embedding the Python Interpreter: Reference Counts. Docs.python.org. Archived from the original on 18 October 2012. Retrieved 5 June 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting. ^ a b Hettinger, Raymond (30 January 2002). PEP 289 – Generator Expressions. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. ^ 6.5 itertools – Functions creating iterators for efficient looping. Docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. ^ a b Peters, Tim (19 August 2004). PEP 20 – The Zen of Python. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008. ^ Lutz, Mark (January 2022). Python Changes 2014+. Learning Python. Archived from the original on 15 March 2024. Retrieved 25 February 2024. ^ Confusion regarding a rule in The Zen of Python. Python Help - Discussions on Python.org. 3 May 2022. Archived from the original on 25 February 2024. Retrieved 25 February 2024. ^ Ambi, Chetan (4 July 2021). The Most Controversial Python Walrus Operator. Python Simplified. Archived from the original on 27 August 2023. Retrieved 5 February 2024. ^ Grifski, Jeremy (24 May 2020). The Controversy Behind The Walrus Operator in Python. The Renegade Coder. Archived from the original on 28 December 2023. Retrieved 25 February 2024. ^ Bader, Dan. Python String Formatting Best Practices. Real Python. Archived from the original on 18 February 2024. Retrieved 25 February 2024. ^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition. O'Reilly Media. p. 230. ISBN 978-0-596-00797-3. Archived from the original on 23 February 2020. Retrieved 14 November 2015. ^ Python Culture. ebeab. 21 January 2014. Archived from the original on 30 January 2014. ^ a b Transpiling Python to Julia using PyJL (PDF). Archived (PDF) from the original on 19 November 2023. Retrieved 20 September 2023. After manually modifying one line of code by specifying the necessary type information, we obtained a speedup of 52.6×, making the translated Julia code 19.5× faster than the original Python code. ^ Why is it called Python?. General Python FAQ. Docs.python.org. Archived from the original on 24 October 2012. Retrieved 3 January 2023. ^ 15 Ways Python Is a Powerful Force on the Web. Archived from the original on 11 May 2019. Retrieved 3 July 2018. ^ pprint – Data pretty printer – Python 3.11.0 documentation. docs.python.org. Archived from the original on 22 January 2021. Retrieved 5 November 2022. stuff=['spam', 'eggs', 'lumberjack', 'knights', 'ni'] ^ Code Style – The Hitchhiker's Guide to Python. docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021. ^ Is Python a good language for beginning programmers?. General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 21 March 2007. ^ Myths about indentation in Python. Secnetix.de. Archived from the original on 18 February 2018. Retrieved 19 April 2011. ^ Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4. ^ PEP 8 – Style Guide for Python Code. Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. ^ 8. Errors and Exceptions – Python 3.12.0a0 documentation. docs.python.org. Archived from the original on 9 May 2022. Retrieved 9 May 2022. ^ Highlights: Python 2.5. Python.org. Archived from the original on 4 August 2019. Retrieved 20 March 2018. ^ van Rossum, Guido (22 April 2009). Tail Recursion Elimination. Neopythonic.blogspot.be. Archived from the original on 19 May 2018. Retrieved 3 December 2012. ^ van Rossum, Guido (9 February 2006). Language Design Is Not Just Solving Puzzles. Artima forums. Artima. Archived from the original on 17 January 2020. Retrieved 21 March 2007. ^ van Rossum, Guido; Eby, Phillip J. (10 May 2005). PEP 342 – Coroutines via Enhanced Generators. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 29 May 2020. Retrieved 19 February 2012. ^ PEP 380. Python.org. Archived from the original on 4 June 2020. Retrieved 3 December 2012. ^ division. python.org. Archived from the original on 20 July 2006. Retrieved 30 July 2014. ^ PEP 0465 – A dedicated infix operator for matrix multiplication. python.org. Archived from the original on 4 June 2020. Retrieved 1 January 2016. ^ Python 3.5.1 Release and Changelog. python.org. Archived from the original on 14 May 2020. Retrieved 1 January 2016. ^ What's New in Python 3.8. Archived from the original on 8 June 2020. Retrieved 14 October 2019. ^ van Rossum, Guido; Hettinger, Raymond (7 February 2003). PEP 308 – Conditional Expressions. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 13 March 2016. Retrieved 13 July 2011. ^ 4. Built-in Types – Python 3.6.3rc1 documentation. python.org. Archived from the original on 14 June 2020. Retrieved 1 October 2017. ^ 5.3. Tuples and Sequences – Python 3.7.1rc2 documentation. python.org. Archived from the original on 10 June 2020. Retrieved 17 October 2018. ^ a b PEP 498 – Literal String Interpolation. python.org. Archived from the original on 15 June 2020. Retrieved 8 March 2017. ^ Why must 'self' be used explicitly in method definitions and calls?. Design and History FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 19 February 2012. ^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code. No Starch Press. p. 322. ISBN 978-1-59327-966-0. Archived from the original on 13 August 2021. Retrieved 7 July 2021. ^ The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1. Archived from the original on 26 October 2012. Retrieved 12 January 2011. ^ PEP 484 – Type Hints | peps.python.org. peps.python.org. Archived from the original on 27 November 2023. Retrieved 29 November 2023. ^ typing — Support for type hints. Python documentation. Python Software Foundation. Archived from the original on 21 February 2020. Retrieved 22 December 2023. ^ mypy – Optional Static Typing for Python. Archived from the original on 6 June 2020. Retrieved 28 January 2017. ^ Introduction. mypyc.readthedocs.io. Archived from the original on 22 December 2023. Retrieved 22 December 2023. ^ 15. Floating Point Arithmetic: Issues and Limitations – Python 3.8.3 documentation. docs.python.org. Archived from the original on 6 June 2020. Retrieved 6 June 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 double precision. ^ Zadka, Moshe; van Rossum, Guido (11 March 2001). PEP 237 – Unifying Long Integers and Integers. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 24 September 2011. ^ Built-in Types. Archived from the original on 14 June 2020. Retrieved 3 October 2019. ^ PEP 465 – A dedicated infix operator for matrix multiplication. python.org. Archived from the original on 29 May 2020. Retrieved 3 July 2018. ^ a b Zadka, Moshe; van Rossum, Guido (11 March 2001). PEP 238 – Changing the Division Operator. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013. ^ Why Python's Integer Division Floors. 24 August 2010. Archived from the original on 5 June 2020. Retrieved 25 August 2010. ^ round, The Python standard library, release 3.2, §2: Built-in functions, archived from the original on 25 October 2012, retrieved 14 August 2011 ^ round, The Python standard library, release 2.7, §2: Built-in functions, archived from the original on 27 October 2012, retrieved 14 August 2011 ^ Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. p. 66. ISBN 9780672329784. ^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206. ^ a b Batista, Facundo (17 October 2003). PEP 327 – Decimal Data Type. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008. ^ What's New in Python 2.6. Python v2.6.9 documentation. 29 October 2013. Archived from the original on 23 December 2019. Retrieved 26 September 2015. ^ 10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke. University of Washington Department of Statistics. Archived from the original on 31 May 2020. Retrieved 3 February 2019. ^ Shell, Scott (17 June 2014). An introduction to Python for scientific computing (PDF). Archived (PDF) from the original on 4 February 2019. Retrieved 3 February 2019. ^ Piotrowski, Przemyslaw (July 2006). Build a Rapid Web Development Environment for Python Server Pages and Oracle. Oracle Technology Network. Oracle. Archived from the original on 2 April 2019. Retrieved 12 March 2012. ^ Eby, Phillip J. (7 December 2003). PEP 333 – Python Web Server Gateway Interface v1.0. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. ^ PyPI. PyPI. 13 March 2025. Archived from the original on 22 February 2025. ^ Enthought, Canopy. Canopy. www.enthought.com. Archived from the original on 15 July 2017. Retrieved 20 August 2016. ^ Project Jupyter. Jupyter.org. Archived from the original on 12 October 2023. Retrieved 2 April 2025. ^ PEP 7 – Style Guide for C Code | peps.python.org. peps.python.org. Archived from the original on 24 April 2022. Retrieved 28 April 2022. ^ 4. Building C and C++ Extensions – Python 3.9.2 documentation. docs.python.org. Archived from the original on 3 March 2021. Retrieved 1 March 2021. ^ van Rossum, Guido (5 June 2001). PEP 7 – Style Guide for C Code. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 1 June 2020. Retrieved 24 November 2008. ^ CPython byte code. Docs.python.org. Archived from the original on 5 June 2020. Retrieved 16 February 2016. ^ Python 2.5 internals (PDF). Archived (PDF) from the original on 6 August 2012. Retrieved 19 April 2011. ^ Changelog – Python 3.9.0 documentation. docs.python.org. Archived from the original on 7 February 2021. Retrieved 8 February 2021. ^ Download Python. Python.org. Archived from the original on 8 December 2020. Retrieved 13 December 2020. ^ history [vmspython]. www.vmspython.org. Archived from the original on 2 December 2020. Retrieved 4 December 2020. ^ An Interview with Guido van Rossum. Oreilly.com. Archived from the original on 16 July 2014. Retrieved 24 November 2008. ^ Download Python for Other Platforms. Python.org. Archived from the original on 27 November 2020. Retrieved 4 December 2020. ^ PyPy compatibility. Pypy.org. Archived from the original on 6 June 2020. Retrieved 3 December 2012. ^ Team, The PyPy (28 December 2019). Download and Install. PyPy. Archived from the original on 8 January 2022. Retrieved 8 January 2022. ^ speed comparison between CPython and Pypy. Speed.pypy.org. Archived from the original on 10 May 2021. Retrieved 3 December 2012. ^ Codon: Differences with Python. Archived from the original on 25 May 2023. Retrieved 28 August 2023. ^ Lawson, Loraine (14 March 2023). MIT-Created Compiler Speeds up Python Code. The New Stack. Archived from the original on 6 April 2023. Retrieved 28 August 2023. ^ Application-level Stackless features – PyPy 2.0.2 documentation. Doc.pypy.org. Archived from the original on 4 June 2020. Retrieved 17 July 2013. ^ Python-for-EV3. LEGO Education. Archived from the original on 7 June 2020. Retrieved 17 April 2019. ^ Yegulalp, Serdar (29 October 2020). Pyston returns from the dead to speed Python. InfoWorld. Archived from the original on 27 January 2021. Retrieved 26 January 2021. ^ cinder: Instagram's performance-oriented fork of CPython. GitHub. Archived from the original on 4 May 2021. Retrieved 4 May 2021. ^ Aroca, Rafael (7 August 2021). Snek Lang: feels like Python on Arduinos. Yet Another Technology Blog. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ Aufranc (CNXSoft), Jean-Luc (16 January 2020). Snekboard Controls LEGO Power Functions with CircuitPython or Snek Programming Languages (Crowdfunding) – CNX Software. CNX Software – Embedded Systems News. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ Kennedy (@mkennedy), Michael. Ready to find out if you're git famous?. pythonbytes.fm. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ Packard, Keith (20 December 2022). The Snek Programming Language: A Python-inspired Embedded Computing Language (PDF). Archived (PDF) from the original on 4 January 2024. Retrieved 4 January 2024. ^ Plans for optimizing Python. Google Project Hosting. 15 December 2009. Archived from the original on 11 April 2016. Retrieved 24 September 2011. ^ Python on the Nokia N900. Stochastic Geometry. 29 April 2010. Archived from the original on 20 June 2019. Retrieved 9 July 2015. ^ Brython. brython.info. Archived from the original on 3 August 2018. Retrieved 21 January 2021. ^ Transcrypt – Python in the browser. transcrypt.org. Archived from the original on 19 August 2018. Retrieved 22 December 2020. ^ Transcrypt: Anatomy of a Python to JavaScript Compiler. InfoQ. Archived from the original on 5 December 2020. Retrieved 20 January 2021. ^ Nuitka Home | Nuitka Home. nuitka.net. Archived from the original on 30 May 2020. Retrieved 18 August 2017. ^ Guelton, Serge; Brunet, Pierrick; Amini, Mehdi; Merlini, Adrien; Corbillon, Xavier; Raynaud, Alan (16 March 2015). Pythran: enabling static optimization of scientific Python programs. Computational Science & Discovery. 8 (1). IOP Publishing: 014001. Bibcode:2015CS&D....8a4001G. doi:10.1088/1749-4680/8/1/014001. ISSN 1749-4699. ^ The Python → 11l → C++ transpiler. Archived from the original on 24 September 2022. Retrieved 17 July 2022. ^ google/grumpy. 10 April 2020. Archived from the original on 15 April 2020. Retrieved 25 March 2020 – via GitHub. ^ Projects. opensource.google. Archived from the original on 24 April 2020. Retrieved 25 March 2020. ^ Francisco, Thomas Claburn in San. Google's Grumpy code makes Python Go. www.theregister.com. Archived from the original on 7 March 2021. Retrieved 20 January 2021. ^ IronPython.net /. ironpython.net. Archived from the original on 17 April 2021. ^ GitHub – IronLanguages/ironpython3: Implementation of Python 3.x for .NET Framework that is built on top of the Dynamic Language Runtime. GitHub. Archived from the original on 28 September 2021. ^ Jython FAQ. www.jython.org. Archived from the original on 22 April 2021. Retrieved 22 April 2021. ^ Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M. ^ The Computer Language Benchmarks Game. Archived from the original on 14 June 2020. Retrieved 30 April 2020. ^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). PEP 1 – PEP Purpose and Guidelines. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011. ^ PEP 8 – Style Guide for Python Code. Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. ^ Cannon, Brett. Guido, Some Guys, and a Mailing List: How Python is Developed. python.org. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009. ^ Moving Python's bugs to GitHub [LWN.net]. Archived from the original on 2 October 2022. Retrieved 2 October 2022. ^ Python Developer's Guide – Python Developer's Guide. devguide.python.org. Archived from the original on 9 November 2020. Retrieved 17 December 2019. ^ Hughes, Owen (24 May 2021). Programming languages: Why Python 4.0 might never arrive, according to its creator. TechRepublic. Archived from the original on 14 July 2022. Retrieved 16 May 2022. ^ PEP 602 – Annual Release Cycle for Python. Python.org. Archived from the original on 14 June 2020. Retrieved 6 November 2019. ^ Changing the Python release cadence [LWN.net]. lwn.net. Archived from the original on 6 November 2019. Retrieved 6 November 2019. ^ Norwitz, Neal (8 April 2002). [Python-Dev] Release Schedules (was Stability & change). Archived from the original on 15 December 2018. Retrieved 27 June 2009. ^ a b Aahz; Baxter, Anthony (15 March 2001). PEP 6 – Bug Fix Releases. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 27 June 2009. ^ Python Buildbot. Python Developer's Guide. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 September 2011. ^ Documentation Tools. Python.org. Archived from the original on 11 November 2020. Retrieved 22 March 2021. ^ a b Whetting Your Appetite. The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012. ^ In Python, should I use else after a return in an if block?. Stack Overflow. Stack Exchange. 17 February 2011. Archived from the original on 20 June 2019. Retrieved 6 May 2011. ^ Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming. O'Reilly Media, Inc. p. 17. ISBN 9781449379322. Archived from the original on 17 July 2017. Retrieved 9 May 2017. ^ Fehily, Chris (2002). Python. Peachpit Press. p. xv. ISBN 9780201748840. Archived from the original on 17 July 2017. Retrieved 9 May 2017. ^ Lubanovic, Bill (2014). Introducing Python. Sebastopol, CA : O'Reilly Media. p. 305. ISBN 978-1-4493-5936-2. Retrieved 31 July 2023. ^ Blake, Troy (18 January 2021). TIOBE Index for January 2021. Technology News and Information by SeniorDBA. Archived from the original on 21 March 2021. Retrieved 26 February 2021. ^ TIOBE Index. TIOBE. Retrieved 31 March 2025. ^ Quotes about Python. Python Software Foundation. Archived from the original on 3 June 2020. Retrieved 8 January 2012. ^ Organizations Using Python. Python Software Foundation. Archived from the original on 21 August 2018. Retrieved 15 January 2009. ^ Python : the holy grail of programming. CERN Bulletin (31/2006). CERN Publications. 31 July 2006. Archived from the original on 15 January 2013. Retrieved 11 February 2012. ^ Shafer, Daniel G. (17 January 2003). Python Streamlines Space Shuttle Mission Design. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 November 2008. ^ Tornado: Facebook's Real-Time Web Framework for Python – Facebook for Developers. Facebook for Developers. Archived from the original on 19 February 2019. Retrieved 19 June 2018. ^ What Powers Instagram: Hundreds of Instances, Dozens of Techno Python for Artificial Intelligence. Python Wiki. 19 July 2012. Archived from the original on 1 November 2012. Retrieved 3 December 2012. Paine, Jocelyn, ed. (August 2005). AI in Python. AI Expert Newsletter. Amzi!. Archived from the original on 26 March 2012. Retrieved 11 February 2012. PyAIML 0.8.5 : Python Package Index. Pypi.python.org. Retrieved 17 July 2013. Russell, Stuart J. & Norvig, Peter (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 978-0-13-604259-4. Downey, Allen (July 2024). Think Python: How to Think Like a Computer Scientist (3rd ed.). O'Reilly Media. ISBN 978-1098155438. Lutz, Mark (2013). Learning Python (5th ed.). O'Reilly Media. ISBN 978-0-596-15806-4. Summerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN 978-0-321-68056-3. Ramalho, Luciano (May 2022). Fluent Python. O'Reilly Media. ISBN 978-1-4920-5632-4. Python at Wikipedia's sister projects Media from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from WikiversityData from Wikidata Official website The Python Tutorial vtePythonImplementations CircuitPython CLPython CPython Cython MicroPython Numba IronPython Jython Psyco PyPy Python for S60 Shed Skin Stackless Python Unladen Swallow more... IDEs eric IDLE Ninja-IDE PyCharm PyDev Spyder more... Topics WSGI ASGI Designer Guido van Rossum Software (list) Python Software Foundation Python Conference (PyCon) vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vtePython web frameworks CherryPy CubicWeb Django FastAPI Flask Grok Nevow Pylons Pyramid Quixote Tornado TurboGears TwistedWeb web2py Zope 2 more... Comparison vteDifferentiable computingGeneral Differentiable programming Information geometry Statistical manifold Automatic differentiation Neuromorphic computing Pattern recognition Ricci calculus Computational learning theory Inductive bias Hardware IPU TPU VPU Memristor SpiNNaker Software libraries TensorFlow PyTorch Keras scikit-learn Theano JAX Flux.jl MindSpore Portals Computer programming Technology vteFree and open-source softwareGeneral Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Softwarepackages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category vteStatistical softwarePublic domain Dataplot Epi Info CSPro X-12-ARIMA Open-source ADMB DAP gretl jamovi JASP JAGS JMulTi Julia Jupyter (Julia, Python, R) GNU Octave OpenBUGS Orange PSPP Python (statsmodels, PyMC3, IPython, IDLE) R (RStudio) SageMath SimFiT SOFA Statistics Stan XLispStat Freeware BV4.1 CumFreq SegReg XploRe WinBUGS CommercialCross-platform Data Desk GAUSS GraphPad InStat GraphPad Prism IBM SPSS Statistics IBM SPSS Modeler JMP Maple Mathcad Mathematica MATLAB OxMetrics RATS Revolution Analytics SAS (SAS Viya) SmartPLS Stata StatView SUDAAN S-PLUS TSP World Programming System (WPS) Windows only BMDP EViews GenStat LIMDEP LISREL MedCalc Microfit Minitab MLwiN NCSS Shazam SigmaStat Statistica StatsDirect StatXact SYSTAT The Unscrambler Unistat Excel add-ons Analyse-it Unistat for Excel XLfit RExcel Comparison • Category vteNumerical-analysis softwareFree Advanced Simulation Library ADMB Chapel Euler Mathematical Toolbox FreeFem++ FreeMat Genius Gmsh GNU Octave gretl Julia Jupyter (Julia, Python, R; IPython) MFEM OpenFOAM Python R SageMath Salome ScicosLab Scilab X10 Weka Discontinued Fortress Proprietary DADiSP FEATool Multiphysics GAUSS LabVIEW Maple Mathcad Mathematica MATLAB MWorks SAS (SAS Viya) Speakeasy VisSim Comparison Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef",
    "paradigm": "Multi-paradigm : object-oriented , procedural ( imperative ), functional , structured , reflective",
    "first_appeared": "20 February 1991 ; 34 years ago ( 1991-02-20 )",
    "stable_release": "3.13.4",
    "typing_discipline": "duck , dynamic , strong ; optional type annotations (since 3.5, but those hints are ignored, except with unofficial tools)",
    "influenced_by": "ABC , Ada , ALGOL 68 , APL , C , C++ , CLU , Dylan , Haskell , Icon , Lisp , Modula-3 , Perl , Standard ML",
    "influenced": "Apache Groovy , Boo , Cobra , CoffeeScript , D , F# , GDScript , Go , JavaScript , Julia , Mojo , Nim , Ring , Ruby , Swift , V",
    "stable_release_date": "2025-06-03T00:00:00Z"
  },
  {
    "title": "R (programming language)",
    "url": "https://en.wikipedia.org/wiki/R_(programming_language)",
    "history": "Ross Ihaka, co-originator of R Robert Gentleman, co-originator of R R was started by professors Ross Ihaka and Robert Gentleman as a programming language to teach introductory statistics at the University of Auckland. The language was inspired by the S programming language, with most S programs able to run unaltered in R. The language was also inspired by Scheme's lexical scoping, allowing for local variables. The name of the language, R, comes from being both an S language successor as well as the shared first letter of the authors, Ross and Robert. In August 1993, Ihaka and Gentleman posted a binary of R on StatLib — a data archive website. At the same time, they announced the posting on the s-news mailing list. On 5 December 1997, R became a GNU project when version 0.60 was released. On 29 February 2000, the 1.0 version was released.",
    "packages": "Main article: R package Violin plot created from the R visualization package ggplot2 R packages are collections of functions, documentation, and data that expand R. For example, packages add report features such as RMarkdown, Quarto, knitr and Sweave. Packages also add the capability to implement various statistical techniques such as linear, generalized linear and nonlinear modeling, classical statistical tests, spatial analysis, time-series analysis, and clustering. Easy package installation and use have contributed to the language's adoption in data science. Base packages are immediately available when starting R and provide the necessary syntax and commands for programming, computing, graphics production, basic arithmetic, and statistical functionality. The Comprehensive R Archive Network (CRAN) was founded in 1997 by Kurt Hornik and Friedrich Leisch to host R's source code, executable files, documentation, and user-created packages. Its name and scope mimic the Comprehensive TeX Archive Network and the Comprehensive Perl Archive Network. CRAN originally had three mirrors and 12 contributed packages. As of 16 October 2024[update], it has 99 mirrors and 21,513 contributed packages. Packages are also available on repositories R-Forge, Omegahat, and GitHub. The Task Views on the CRAN web site list packages in fields such as causal inference, finance, genetics, high-performance computing, machine learning, medical imaging, meta-analysis, social sciences, and spatial statistics. The Bioconductor project provides packages for genomic data analysis, complementary DNA, microarray, and high-throughput sequencing methods. The tidyverse package bundles several subsidiary packages that provide a common interface for tasks related to accessing and processing tidy data, data contained in a two-dimensional table with a single row for each observation and a single column for each variable. Installing a package occurs only once. For example, to install the tidyverse package: > install.packages(tidyverse) To load the functions, data, and documentation of a package, one executes the library() function. To load tidyverse:[a] > # Package name can be enclosed in quotes > library(tidyverse) > # But also the package name can be called without quotes > library(tidyverse)",
    "interfaces": "R comes installed with a command line console. Available for installation are various integrated development environments (IDE). IDEs for R include R.app (OSX/macOS only), Rattle GUI, R Commander, RKWard, RStudio, and Tinn-R. General purpose IDEs that support R include Eclipse via the StatET plugin and Visual Studio via R Tools for Visual Studio. Editors that support R include Emacs, Vim via the Nvim-R plugin, Kate, LyX via Sweave, WinEdt (website), and Jupyter (website). Scripting languages that support R include Python (website), Perl (website), Ruby (source code), F# (website), and Julia (source code). General purpose programming languages that support R include Java via the Rserve socket server, and .NET C# (website). Statistical frameworks which use R in the background include Jamovi and JASP.[citation needed]",
    "community": "The R Core Team was founded in 1997 to maintain the R source code. The R Foundation for Statistical Computing was founded in April 2003 to provide financial support. The R Consortium is a Linux Foundation project to develop R infrastructure. The R Journal is an open access, academic journal which features short to medium-length articles on the use and development of R. It includes articles on packages, programming tips, CRAN news, and foundation news. The R community hosts many conferences and in-person meetups - see the community maintained GitHub list. These groups include: UseR!: an annual international R user conference (website) Directions in Statistical Computing (DSC) (website) R-Ladies: an organization to promote gender diversity in the R community (website) SatRdays: R-focused conferences held on Saturdays (website) R Conference (website) posit::conf (formerly known as rstudio::conf) (website)",
    "implementations": "The main R implementation is written primarily in C, Fortran, and R itself. Other implementations include: pretty quick R (pqR), by Radford M. Neal, attempts to improve memory management. Renjin is an implementation of R for the Java Virtual Machine. CXXR and Riposte are implementations of R written in C++. Oracle's FastR is an implementation of R, built on GraalVM. TIBCO Software, creator of S-PLUS, wrote TERR — an R implementation to integrate with Spotfire. Microsoft R Open (MRO) was an R implementation. As of 30 June 2021, Microsoft started to phase out MRO in favor of the CRAN distribution.",
    "commercial_support": "Although R is an open-source project, some companies provide commercial support: Oracle provides commercial support for the Big Data Appliance, which integrates R into its other products. IBM provides commercial support for in-Hadoop execution of R.",
    "hello_world": "Hello, World! program: > print(Hello, World!) Hello, World!",
    "basic_syntax": "The following examples illustrate the basic syntax of the language and use of the command-line interface. (An expanded list of standard language features can be found in the R manual, An Introduction to R.) In R, the generally preferred assignment operator is an arrow made from two characters <-, although = can be used in some cases. > x <- 1:6 # Create a numeric vector in the current environment > y <- x^2 # Create vector based on the values in x. > print(y) # Print the vector’s contents. 1 4 9 16 25 36 > z <- x + y # Create a new vector that is the sum of x and y > z # Return the contents of z to the current environment. 2 6 12 20 30 42 > z_matrix <- matrix(z, nrow = 3) # Create a new matrix that turns the vector z into a 3x2 matrix object > z_matrix [,1] [,2] [1,] 2 20 [2,] 6 30 [3,] 12 42 > 2 * t(z_matrix) - 2 # Transpose the matrix, multiply every element by 2, subtract 2 from each element in the matrix, and return the results to the terminal. [,1] [,2] [,3] [1,] 2 10 22 [2,] 38 58 82 > new_df <- data.frame(t(z_matrix), row.names = c(A, B)) # Create a new data.frame object that contains the data from a transposed z_matrix, with row names 'A' and 'B' > names(new_df) <- c(X, Y, Z) # Set the column names of new_df as X, Y, and Z. > print(new_df) # Print the current results. X Y Z A 2 6 12 B 20 30 42 > new_df$Z # Output the Z column 12 42 > new_df$Z == new_df['Z'] && new_df == new_df$Z # The data.frame column Z can be accessed using $Z, ['Z'], or syntax and the values are the same. TRUE > attributes(new_df) # Print attributes information about the new_df object $names X Y Z $row.names A B $class data.frame > attributes(new_df)$row.names <- c(one, two) # Access and then change the row.names attribute; can also be done using rownames() > new_df X Y Z one 2 6 12 two 20 30 42",
    "structure_of_a_function": "One of R's strengths is the ease of creating new functions. Objects in the function body remain local to the function, and any data type may be returned. In R, almost all functions and all user-defined functions are closures. Create a function: # The input parameters are x and y. # The function returns a linear combination of x and y. f <- function(x, y) { z <- 3 * x + 4 * y # An explicit return() statement is optional, could be replaced with simply `z`. return(z) } # Alternatively, the last statement executed is implicitly returned. f <- function(x, y) 3 * x + 4 * y Usage output: > f(1, 2) 11 > f(c(1, 2, 3), c(5, 3, 4)) 23 18 25 > f(1:3, 4) 19 22 25 It is possible to define functions to be used as infix operators with the special syntax `%name%` where name is the function variable name: > `%sumx2y2%` <- function(e1, e2) {e1 ^ 2 + e2 ^ 2} > 1:3 %sumx2y2% -(1:3) 2 8 18 Since version 4.1.0 functions can be written in a short notation, which is useful for passing anonymous functions to higher-order functions: > sapply(1:5, \\(i) i^2) # here \\(i) is the same as function(i) 1 4 9 16 25",
    "native_pipe_operator": "In R version 4.1.0, a native pipe operator, |>, was introduced. This operator allows users to chain functions together one after another, instead of a nested function call. > nrow(subset(mtcars, cyl == 4)) # Nested without the pipe character 11 > mtcars |> subset(cyl == 4) |> nrow() # Using the pipe character 11 Another alternative to nested functions, in contrast to using the pipe character, is using intermediate objects: > mtcars_subset_rows <- subset(mtcars, cyl == 4) > num_mtcars_subset <- nrow(mtcars_subset_rows) > print(num_mtcars_subset) 11 While the pipe operator can produce code that is easier to read, it has been advised to pipe together at most 10 to 15 lines and chunk code into sub-tasks which are saved into objects with meaningful names. Here is an example with fewer than 10 lines that some readers may still struggle to grasp without intermediate named steps: (\\(x, n = 42, key = c(letters, LETTERS,  , :, ))) strsplit(x, )[] |> (Vectorize(\\(chr) which(chr == key) - 1))() |> (`+`)(n) |> (`%%`)(length(key)) |> (\\(i) key[i + 1])() |> paste(collapse = ) )(duvFkvFksnvEyLkHAErnqnoyr)",
    "object_oriented_programming": "The R language has native support for object-oriented programming. There are two native frameworks, the so-called S3 and S4 systems. The former, being more informal, supports single dispatch on the first argument and objects are assigned to a class by just setting a class attribute in each object. The latter is a Common Lisp Object System (CLOS)-like system of formal classes (also derived from S) and generic methods that supports multiple dispatch and multiple inheritance In the example, summary is a generic function that dispatches to different methods depending on whether its argument is a numeric vector or a factor: > data <- c(a, b, c, a, NA) > summary(data) Length Class Mode 5 character character > summary(as.factor(data)) a b c NA's 2 1 1 1",
    "modeling_and_plotting": "Diagnostic plots from plotting model (q.v. plot.lm() function). Notice the mathematical notation allowed in labels (lower left plot). The R language has built-in support for data modeling and graphics. The following example shows how R can generate and plot a linear model with residuals. # Create x and y values x <- 1:6 y <- x^2 # Linear regression model y = A + B * x model <- lm(y ~ x) # Display an in-depth summary of the model summary(model) # Create a 2 by 2 layout for figures par(mfrow = c(2, 2)) # Output diagnostic plots of the model plot(model) Output: Residuals: 1 2 3 4 5 6 7 8 9 10 3.3333 -0.6667 -2.6667 -2.6667 -0.6667 3.3333 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) -9.3333 2.8441 -3.282 0.030453 * x 7.0000 0.7303 9.585 0.000662 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 3.055 on 4 degrees of freedom Multiple R-squared: 0.9583, Adjusted R-squared: 0.9478 F-statistic: 91.88 on 1 and 4 DF, p-value: 0.000662",
    "mandelbrot_set": "Mandelbrot.gif graphic created in R. (Note: Colors differ from actual output.) This Mandelbrot set example highlights the use of complex numbers. It models the first 20 iterations of the equation z = z2 + c, where c represents different complex constants. Install the package that provides the write.gif() function beforehand: install.packages(caTools) R Source code: library(caTools) jet.colors <- colorRampPalette( c(green, pink, #007FFF, cyan, #7FFF7F, white, #FF7F00, red, #7F0000)) dx <- 1500 # define width dy <- 1400 # define height C <- complex( real = rep(seq(-2.2, 1.0, length.out = dx), each = dy), imag = rep(seq(-1.2, 1.2, length.out = dy), times = dx) ) # reshape as matrix of complex numbers C <- matrix(C, dy, dx) # initialize output 3D array X <- array(0, c(dy, dx, 20)) Z <- 0 # loop with 20 iterations for (k in 1:20) { # the central difference equation Z <- Z^2 + C # capture the results X[, , k] <- exp(-abs(Z)) } write.gif( X, Mandelbrot.gif, col = jet.colors, delay = 100)",
    "version_names": "CD of R Version 1.0.0, autographed by the core team of R, photographed R in Quebec City in 2019 All R version releases from 2.14.0 onward have codenames that make reference to Peanuts comics and films. In 2018, core R developer Peter Dalgaard presented a history of R releases since 1997. Some notable early releases before the named releases include: Version 1.0.0 released on 29 February 2000 (2000-02-29), a leap day Version 2.0.0 released on 4 October 2004 (2004-10-04), which at least had a nice ring to it The idea of naming R version releases was inspired by the Debian and Ubuntu version naming system. Dalgaard also noted that another reason for the use of Peanuts references for R codenames is because, everyone in statistics is a P-nut. R release codenames Version Release date Name Peanuts reference Reference 4.5.0 2025-04-11 How About a Twenty-Six 4.4.3 2025-02-28 Trophy Case 4.4.2 2024-10-31 Pile of Leaves 4.4.1 2024-06-14 Race for Your Life 4.4.0 2024-04-24 Puppy Cup 4.3.3 2024-02-29 Angel Food Cake 4.3.2 2023-10-31 Eye Holes 4.3.1 2023-06-16 Beagle Scouts 4.3.0 2023-04-21 Already Tomorrow 4.2.3 2023-03-15 Shortstop Beagle 4.2.2 2022-10-31 Innocent and Trusting 4.2.1 2022-06-23 Funny-Looking Kid 4.2.0 2022-04-22 Vigorous Calisthenics 4.1.3 2022-03-10 One Push-Up 4.1.2 2021-11-01 Bird Hippie 4.1.1 2021-08-10 Kick Things 4.1.0 2021-05-18 Camp Pontanezen 4.0.5 2021-03-31 Shake and Throw 4.0.4 2021-02-15 Lost Library Book 4.0.3 2020-10-10 Bunny-Wunnies Freak Out 4.0.2 2020-06-22 Taking Off Again 4.0.1 2020-06-06 See Things Now 4.0.0 2020-04-24 Arbor Day 3.6.3 2020-02-29 Holding the Windsock 3.6.2 2019-12-12 Dark and Stormy Night See It was a dark and stormy night#Literature 3.6.1 2019-07-05 Action of the Toes 3.6.0 2019-04-26 Planting of a Tree 3.5.3 2019-03-11 Great Truth 3.5.2 2018-12-20 Eggshell Igloos 3.5.1 2018-07-02 Feather Spray 3.5.0 2018-04-23 Joy in Playing 3.4.4 2018-03-15 Someone to Lean On 3.4.3 2017-11-30 Kite-Eating Tree See Kite-Eating Tree 3.4.2 2017-09-28 Short Summer See It Was a Short Summer, Charlie Brown 3.4.1 2017-06-30 Single Candle 3.4.0 2017-04-21 You Stupid Darkness 3.3.3 2017-03-06 Another Canoe 3.3.2 2016-10-31 Sincere Pumpkin Patch 3.3.1 2016-06-21 Bug in Your Hair 3.3.0 2016-05-03 Supposedly Educational 3.2.5 2016-04-11 Very, Very Secure Dishes 3.2.4 2016-03-11 Very Secure Dishes 3.2.3 2015-12-10 Wooden Christmas-Tree See A Charlie Brown Christmas 3.2.2 2015-08-14 Fire Safety 3.2.1 2015-06-18 World-Famous Astronaut 3.2.0 2015-04-16 Full of Ingredients 3.1.3 2015-03-09 Smooth Sidewalk [page needed] 3.1.2 2014-10-31 Pumpkin Helmet See You're a Good Sport, Charlie Brown 3.1.1 2014-07-10 Sock it to Me 3.1.0 2014-04-10 Spring Dance 3.0.3 2014-03-06 Warm Puppy 3.0.2 2013-09-25 Frisbee Sailing 3.0.1 2013-05-16 Good Sport 3.0.0 2013-04-03 Masked Marvel 2.15.3 2013-03-01 Security Blanket 2.15.2 2012-10-26 Trick or Treat 2.15.1 2012-06-22 Roasted Marshmallows 2.15.0 2012-03-30 Easter Beagle 2.14.2 2012-02-29 Gift-Getting Season See It's the Easter Beagle, Charlie Brown 2.14.1 2011-12-22 December Snowflakes 2.14.0 2011-10-31 Great Pumpkin See It's the Great Pumpkin, Charlie Brown r-devel N/A Unsuffered Consequences",
    "see_also": "Comparison of numerical-analysis software Comparison of statistical packages List of numerical-analysis software List of statistical software Rmetrics",
    "notes": "^ This displays to standard error a listing of all the packages that tidyverse depends upon. It may also display warnings showing namespace conflicts, which may typically be ignored.",
    "references": "^ a b c Morandat, Frances; Hill, Brandon; Osvald, Leo; Vitek, Jan (11 June 2012). Evaluating the design of the R language: objects and functions for data analysis. European Conference on Object-Oriented Programming. 2012: 104–131. doi:10.1007/978-3-642-31057-7_6. Retrieved 17 May 2016 – via SpringerLink. ^ Peter Dalgaard (11 April 2025). R 4.5.0 is released. Retrieved 11 April 2025. ^ a b R - Free Software Directory. directory.fsf.org. Retrieved 26 January 2024. ^ R scripts. mercury.webster.edu. Retrieved 17 July 2021. ^ R Data Format Family (.rdata, .rda). Loc.gov. 9 June 2017. Retrieved 17 July 2021. ^ a b Hornik, Kurt; The R Core Team (12 April 2022). R FAQ. The Comprehensive R Archive Network. 3.3 What are the differences between R and S?. Archived from the original on 28 December 2022. Retrieved 27 December 2022. ^ Introduction. The Julia Manual. Archived from the original on 20 June 2018. Retrieved 5 August 2018. ^ Comparison with R. pandas Getting started. Retrieved 15 July 2024. ^ Giorgi, Federico M.; Ceraolo, Carmine; Mercatelli, Daniele (27 April 2022). The R Language: An Engine for Bioinformatics and Data Science. Life. 12 (5): 648. Bibcode:2022Life...12..648G. doi:10.3390/life12050648. PMC 9148156. PMID 35629316. ^ Ihaka, Ross. The R Project: A Brief History and Thoughts About the Future (PDF). p. 12. Archived (PDF) from the original on 28 December 2022. Retrieved 27 December 2022. We set a goal of developing enough of a language to teach introductory statistics courses at Auckland. ^ Hornik, Kurt; The R Core Team (12 April 2022). R FAQ. The Comprehensive R Archive Network. 2.13 What is the R Foundation?. Archived from the original on 28 December 2022. Retrieved 28 December 2022. ^ Index of /datasets. lib.stat.cmu.edu. Retrieved 5 September 2024. ^ Ihaka, Ross. R: Past and Future History (PDF). p. 4. Archived (PDF) from the original on 28 December 2022. Retrieved 28 December 2022. ^ Ihaka, Ross (5 December 1997). New R Version for Unix. stat.ethz.ch. Archived from the original on 12 February 2023. Retrieved 12 February 2023. ^ Ihaka, Ross. The R Project: A Brief History and Thoughts About the Future (PDF). p. 18. Archived (PDF) from the original on 28 December 2022. Retrieved 27 December 2022. ^ Wickham, Hadley; Cetinkaya-Rundel, Mine; Grolemund, Garrett (2023). R for Data Science, Second Edition. O'Reilly. p. xvii. ISBN 978-1-492-09740-2. ^ Quarto. Quarto. Retrieved 5 September 2024. ^ Chambers, John M. (2020). S, R, and Data Science. The R Journal. 12 (1): 462–476. doi:10.32614/RJ-2020-028. ISSN 2073-4859. The R language and related software play a major role in computing for data science. ... R packages provide tools for a wide range of purposes and users. ^ Davies, Tilman M. (2016). Installing R and Contributed Packages. The Book of R: A First Course in Programming and Statistics. San Francisco, California: No Starch Press. p. 739. ISBN 9781593276515. ^ a b Hornik, Kurt (2012). The Comprehensive R Archive Network. WIREs Computational Statistics. 4 (4): 394–398. doi:10.1002/wics.1212. ISSN 1939-5108. S2CID 62231320. ^ Kurt Hornik (23 April 1997). Announce: CRAN. r-help. Wikidata Q101068595.. ^ The Status of CRAN Mirrors. cran.r-project.org. Retrieved 16 October 2024. ^ CRAN - Contributed Packages. cran.r-project.org. Retrieved 16 October 2024. ^ R-Forge: Welcome. r-forge.r-project.org. Retrieved 5 September 2024. ^ The Omega Project for Statistical Computing. www.omegahat.net. Retrieved 5 September 2024. ^ Build software better, together. GitHub. Retrieved 5 September 2024. ^ Wickham, Hadley (2014). Tidy Data (PDF). Journal of Statistical Software. 59 (10). doi:10.18637/jss.v059.i10. ^ a b Wickham, Hadley; Cetinkaya-Rundel, Mine; Grolemund, Garrett (2023). R for Data Science, Second Edition. O'Reilly. ISBN 978-1-492-09740-2. ^ R for macOS. cran.r-project.org. Retrieved 5 September 2024. ^ IDE/Editor para Linguagem R | Tinn-R - Home. Tinn-R (in Brazilian Portuguese). Retrieved 5 September 2024. ^ Talbot, Justin; DeVito, Zachary; Hanrahan, Pat (1 January 2012). Riposte: A trace-driven compiler and parallel VM for vector code in R. Proceedings of the 21st international conference on Parallel architectures and compilation techniques. ACM. pp. 43–52. doi:10.1145/2370816.2370825. ISBN 9781450311823. S2CID 1989369. ^ Jackson, Joab (16 May 2013). TIBCO offers free R to the enterprise. PC World. Retrieved 20 July 2015. ^ Looking to the future for R in Azure SQL and SQL Server. 30 June 2021. Retrieved 7 November 2021. ^ An Introduction to R. Notes on R: A Programming Environment for Data Analysis and Graphics (PDF). Retrieved 3 January 2021. ^ R Development Core Team. Assignments with the = Operator. Retrieved 11 September 2018. ^ Kabacoff, Robert (2012). Quick-R: User-Defined Functions. statmethods.net. Retrieved 28 September 2018. ^ Wickham, Hadley. Advanced R - Functional programming - Closures. adv-r.had.co.nz. ^ NEWS. r-project.org. ^ R: R News. cran.r-project.org. Retrieved 14 March 2024. ^ Wickham, Hadley; Çetinkaya-Rundel, Mine; Grolemund, Garrett (2023). 4 Workflow: code style. R for data science: import, tidy, transform, visualize, and model data (2nd ed.). Beijing; Sebastopol, CA: O'Reilly. ISBN 978-1-4920-9740-2. OCLC 1390607935. ^ Class Methods. Retrieved 25 April 2024. ^ Monkman, Martin. Chapter 5 R Release Names | Data Science with R: A Resource Compendium. ^ McGowan, Lucy D’Agostino (28 September 2017). R release names. livefreeordichotomize.com. Retrieved 7 April 2024. ^ r-hub/rversions, The R-hub project of the R Consortium, 29 February 2024, retrieved 7 April 2024 ^ a b c d Dalgaard, Peter (15 July 2018). What's in a name? 20 years of R release management (video). YouTube. Retrieved 9 April 2024. ^ Read Peanuts by Charles Schulz on GoComics. www.gocomics.com. Retrieved 17 April 2025. ^ [Rd] R 4.5.0 is released. hypatia.math.ethz.ch. Retrieved 17 April 2025. ^ Read Peanuts by Charles Schulz on GoComics. www.gocomics.com. Retrieved 17 April 2025. ^ [Rd] R 4.4.3 is released. hypatia.math.ethz.ch. Retrieved 17 April 2025. ^ Schulz, Charles (15 November 1957). Peanuts by Charles Schulz for November 15, 1957 | GoComics.com. GoComics. Retrieved 6 January 2025. ^ [Rd] R 4.4.2 is released. stat.ethz.ch. Retrieved 26 December 2024. ^ Race for Your Life, Charlie Brown. IMDB. 3 August 1977. Retrieved 18 June 2024. ^ R 4.4.1 is released. stat.ethz.ch. Retrieved 18 June 2024. ^ Schulz, Charles (29 June 1980). Peanuts by Charles Schulz for June 29, 1980 | GoComics.com. GoComics. Retrieved 24 April 2024. ^ R 4.4.0 is released. stat.ethz.ch. Retrieved 24 April 2024. ^ Schulz, Charles (29 June 1980). Peanuts by Charles Schulz for June 29, 1980 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ R 4.3.3 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (31 October 1996). Peanuts by Charles Schulz for October 31, 1996 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.3.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (28 April 1979). Peanuts by Charles Schulz for April 28, 1979 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.3.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (13 June 1980). Peanuts by Charles Schulz for June 13, 1980 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (16 June 1980). Peanuts by Charles Schulz for June 16, 1980 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (26 November 1964). Peanuts by Charles Schulz for November 26, 1964 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.3.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (30 March 2001). Peanuts by Charles Schulz for March 30, 2001 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.2.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (30 October 1962). Peanuts by Charles Schulz for October 30, 1962 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.2.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (22 November 1970). Peanuts by Charles Schulz for November 22, 1970 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (29 July 1971). Peanuts by Charles Schulz for July 29, 1971 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (25 September 1969). Peanuts by Charles Schulz for September 25, 1969 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (13 October 1973). Peanuts by Charles Schulz for October 13, 1973 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (8 February 1974). Peanuts by Charles Schulz for February 08, 1974 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (8 January 1970). Peanuts by Charles Schulz for January 08, 1970 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.2.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ a b Schulz, Charles (6 March 1967). Peanuts by Charles Schulz for March 06, 1967 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.2.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ a b [Rd] R 4.1.2 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (1 November 1967). Peanuts by Charles Schulz for November 01, 1967 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (12 July 1967). Peanuts by Charles Schulz for July 12, 1967 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (17 May 1978). Peanuts by Charles Schulz for May 17, 1978 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.1.1 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (12 February 1986). Peanuts by Charles Schulz for February 12, 1986 | GoComics.com. GoComics. Retrieved 8 April 2024. ^ [Rd] R 4.1.0 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (30 July 1978). Peanuts by Charles Schulz for July 30, 1978 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [Rd] R 4.0.5 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (2 March 1959). Peanuts by Charles Schulz for March 02, 1959 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ Schulz, Charles (27 February 2006). Peanuts by Charles Schulz for February 27, 2006 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ Schulz, Charles (13 March 1959). Peanuts by Charles Schulz for March 13, 1959 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [Rd] R 4.0.4 scheduled for February 15. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (23 October 1972). Peanuts by Charles Schulz for October 23, 1972 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [Rd] R 4.0.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (14 April 1962). Peanuts by Charles Schulz for April 14, 1962 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 4.0.2 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (6 February 1962). Peanuts by Charles Schulz for February 06, 1962 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 4.0.1 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (24 April 1970). Peanuts by Charles Schulz for April 24, 1970 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 4.0.0 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (29 February 2000). Peanuts by Charles Schulz for February 29, 2000 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.6.3 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (12 July 1965). Peanuts by Charles Schulz for July 12, 1965 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.6.2 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ a b Schulz, Charles (22 March 1971). Peanuts by Charles Schulz for March 22, 1971 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.6.1 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (3 March 1963). Peanuts by Charles Schulz for March 03, 1963 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.6.0 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (11 March 1959). Peanuts by Charles Schulz for March 11, 1959 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.5.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (25 January 1960). Peanuts by Charles Schulz for January 25, 1960 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.5.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (9 March 1972). Peanuts by Charles Schulz for March 09, 1972 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.5.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (27 January 1973). Peanuts by Charles Schulz for January 27, 1973 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.5.0 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ It's nice to have a friend you can lean on. Archived from the original on 7 April 2024. ^ Peanuts Snoopy Charlie Brown A Friend is Someone you can lean on metal tin sign. Retrieved 17 April 2025. ^ Peanuts Snoopy & Charlie Brown Friend Is Someone You Can Lean On Fire-King Mug. Retrieved 17 April 2025. ^ R 3.4.4 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (19 February 1967). Peanuts by Charles Schulz for February 19, 1967 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.4.3 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ R 3.4.2 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ a b Schulz, Charles (9 September 1965). Peanuts by Charles Schulz for September 09, 1965 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.4.1 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ R 3.4.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (29 June 1966). Peanuts by Charles Schulz for June 29, 1966 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.3.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (30 October 1968). Peanuts by Charles Schulz for October 30, 1968 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.3.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (15 June 1967). Peanuts by Charles Schulz for June 15, 1967 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.3.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (7 May 1971). Peanuts by Charles Schulz for May 07, 1971 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.3.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ a b Schulz, Charles (20 February 1964). Peanuts by Charles Schulz for February 20, 1964 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ VERSION-NICK. Retrieved 7 April 2024. ^ R 3.2.5 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ R 3.2.4-revised is released. stat.ethz.ch. Retrieved 7 April 2024. ^ R 3.2.4 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (18 December 1980). Peanuts by Charles Schulz for December 18, 1980 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ R 3.2.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ MarketScreener (7 October 2008). METLIFE : Brush Up on Fire Safety Basics -October 07, 2008 at 04:03 pm EDT | MarketScreener. www.marketscreener.com. Retrieved 7 April 2024. ^ MetLife Advises People to Brush Up on Fire Safety Basics to Stay Safe. Claims Journal. 12 October 2005. Retrieved 7 April 2024. ^ R 3.2.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (10 March 1969). Peanuts by Charles Schulz for March 10, 1969 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.2.1 liftoff. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (7 April 1966). Peanuts by Charles Schulz for April 07, 1966 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.2.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles M. (2019). Happiness is a warm puppy. New York : Penguin Workshop. ISBN 978-1-5247-8995-4.{{cite book}}: CS1 maint: publisher location (link) ^ R 3.1.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ [R] R 3.1.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Sock it to me. Archived from the original on 9 April 2024. ^ Sock it to me. Archived from the original on 9 April 2024. ^ Sock it to me puzzle. Archived from the original on 9 April 2024. ^ Peanuts Springbok Puzzles. ^ [R] R 3.1.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ [R] R 3.1.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (11 January 1965). Peanuts by Charles Schulz for January 11, 1965 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.0.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (3 September 1971). Peanuts by Charles Schulz for September 03, 1971 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.0.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (22 November 1953). Peanuts by Charles Schulz for November 22, 1953 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.0.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (23 June 1981). Peanuts by Charles Schulz for June 23, 1981 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.0.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (23 October 1965). Peanuts by Charles Schulz for October 23, 1965 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.15.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (31 October 1969). Peanuts by Charles Schulz for October 31, 1969 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.15.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (6 June 1987). Peanuts by Charles Schulz for June 06, 1987 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.15.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (11 April 1971). Peanuts by Charles Schulz for April 11, 1971 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.15.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ It's the Easter Beagle, Charlie Brown! (TV Short 1974) - Quotes - IMDb. Retrieved 8 April 2024 – via www.imdb.com. ^ R 2.14.2 is released + R anniversary. stat.ethz.ch. Retrieved 7 April 2024. ^ McGough, Nellah Bailey (20 January 2023). Our Favorite Quotes and Sayings from A Charlie Brown Christmas. Southern Living. Retrieved 8 April 2024. ^ R 2.14.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (29 October 1973). Peanuts by Charles Schulz for October 29, 1973 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.14.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (17 August 1967). Peanuts by Charles Schulz for August 17, 1967 | GoComics.com. GoComics. Retrieved 7 April 2024.",
    "further_reading": "Wickham, Hadley; Çetinkaya-Rundel, Mine; Grolemund, Garrett (2023). R for data science: import, tidy, transform, visualize, and model data (2nd ed.). Beijing Boston Farnham Sebastopol Tokyo: O'Reilly. ISBN 978-1-4920-9740-2. Gagolewski, Marek (2024). Deep R Programming. doi:10.5281/ZENODO.7490464. ISBN 978-0-6455719-2-9.",
    "external_links": "R Technical Papers Big Book of R, curated list of R-related programming books Books Related to R - R Project, partially annotated curated list of books relating to R or S. vteR (programming language)Features Sweave Implementations Distributed R Microsoft R Open (Revolution R Open) Renjin Packages Bibliometrix easystats qdap lumi RGtk2 Rhea Rmetrics rnn RQDA Shiny SimpleITK Statcheck tidyverse ggplot2 dplyr knitr Interfaces Emacs Speaks Statistics Java GUI for R KH Coder Rattle GUI R Commander RExcel RKWard RStudio People Roger Bivand Jenny Bryan John Chambers Peter Dalgaard Dirk Eddelbuettel Robert Gentleman Ross Ihaka Friedrich Leisch Thomas Lumley Brian D. Ripley Julia Silge Luke Tierney Hadley Wickham Yihui Xie Organisations R Consortium Revolution Analytics R-Ladies Posit PBC (formerly RStudio PBC) Publications The R Journal vteGNU ProjectHistory GNU Manifesto Free Software Foundation Europe India Latin America History of free software Licenses GNU General Public License linking exception font exception GNU Lesser General Public License GNU Affero General Public License GNU Free Documentation License GNAT Modified General Public License Software GNU (variants) Hurd Linux-libre glibc Bash coreutils findutils Build system GCC binutils GDB GRUB GNUstep GIMP Jami GNU Emacs GNU TeXmacs GNU Octave GNU Taler GNU R GSL GMP GNU Electric GNU Archimedes GNUnet GNU Privacy Guard Gnuzilla (IceCat) GNU Health GNUmed GNU LilyPond GNU Go GNU Chess Gnash Guix more... Contributors Benjamin Mako Hill Bradley M. Kuhn Brian Fox Federico Heinz John Sullivan Nagarjuna G. Richard M. Stallman Other topics GNU/Linux naming controversy Revolution OS Free Software Foundation anti-Windows campaigns Defective by Design vteNumerical-analysis softwareFree Advanced Simulation Library ADMB Chapel Euler Mathematical Toolbox FreeFem++ FreeMat Genius Gmsh GNU Octave gretl Julia Jupyter (Julia, Python, R; IPython) MFEM OpenFOAM Python R SageMath Salome ScicosLab Scilab X10 Weka Discontinued Fortress Proprietary DADiSP FEATool Multiphysics GAUSS LabVIEW Maple Mathcad Mathematica MATLAB MWorks SAS (SAS Viya) Speakeasy VisSim Comparison vteStatistical softwarePublic domain Dataplot Epi Info CSPro X-12-ARIMA Open-source ADMB DAP gretl jamovi JASP JAGS JMulTi Julia Jupyter (Julia, Python, R) GNU Octave OpenBUGS Orange PSPP Python (statsmodels, PyMC3, IPython, IDLE) R (RStudio) SageMath SimFiT SOFA Statistics Stan XLispStat Freeware BV4.1 CumFreq SegReg XploRe WinBUGS CommercialCross-platform Data Desk GAUSS GraphPad InStat GraphPad Prism IBM SPSS Statistics IBM SPSS Modeler JMP Maple Mathcad Mathematica MATLAB OxMetrics RATS Revolution Analytics SAS (SAS Viya) SmartPLS Stata StatView SUDAAN S-PLUS TSP World Programming System (WPS) Windows only BMDP EViews GenStat LIMDEP LISREL MedCalc Microfit Minitab MLwiN NCSS Shazam SigmaStat Statistica StatsDirect StatXact SYSTAT The Unscrambler Unistat Excel add-ons Analyse-it Unistat for Excel XLfit RExcel Comparison • Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Portal: Computer programming Authority control databases InternationalVIAFFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef",
    "document": "Ross Ihaka, co-originator of R Robert Gentleman, co-originator of R R was started by professors Ross Ihaka and Robert Gentleman as a programming language to teach introductory statistics at the University of Auckland. The language was inspired by the S programming language, with most S programs able to run unaltered in R. The language was also inspired by Scheme's lexical scoping, allowing for local variables. The name of the language, R, comes from being both an S language successor as well as the shared first letter of the authors, Ross and Robert. In August 1993, Ihaka and Gentleman posted a binary of R on StatLib — a data archive website. At the same time, they announced the posting on the s-news mailing list. On 5 December 1997, R became a GNU project when version 0.60 was released. On 29 February 2000, the 1.0 version was released. Main article: R package Violin plot created from the R visualization package ggplot2 R packages are collections of functions, documentation, and data that expand R. For example, packages add report features such as RMarkdown, Quarto, knitr and Sweave. Packages also add the capability to implement various statistical techniques such as linear, generalized linear and nonlinear modeling, classical statistical tests, spatial analysis, time-series analysis, and clustering. Easy package installation and use have contributed to the language's adoption in data science. Base packages are immediately available when starting R and provide the necessary syntax and commands for programming, computing, graphics production, basic arithmetic, and statistical functionality. The Comprehensive R Archive Network (CRAN) was founded in 1997 by Kurt Hornik and Friedrich Leisch to host R's source code, executable files, documentation, and user-created packages. Its name and scope mimic the Comprehensive TeX Archive Network and the Comprehensive Perl Archive Network. CRAN originally had three mirrors and 12 contributed packages. As of 16 October 2024[update], it has 99 mirrors and 21,513 contributed packages. Packages are also available on repositories R-Forge, Omegahat, and GitHub. The Task Views on the CRAN web site list packages in fields such as causal inference, finance, genetics, high-performance computing, machine learning, medical imaging, meta-analysis, social sciences, and spatial statistics. The Bioconductor project provides packages for genomic data analysis, complementary DNA, microarray, and high-throughput sequencing methods. The tidyverse package bundles several subsidiary packages that provide a common interface for tasks related to accessing and processing tidy data, data contained in a two-dimensional table with a single row for each observation and a single column for each variable. Installing a package occurs only once. For example, to install the tidyverse package: > install.packages(tidyverse) To load the functions, data, and documentation of a package, one executes the library() function. To load tidyverse:[a] > # Package name can be enclosed in quotes > library(tidyverse) > # But also the package name can be called without quotes > library(tidyverse) R comes installed with a command line console. Available for installation are various integrated development environments (IDE). IDEs for R include R.app (OSX/macOS only), Rattle GUI, R Commander, RKWard, RStudio, and Tinn-R. General purpose IDEs that support R include Eclipse via the StatET plugin and Visual Studio via R Tools for Visual Studio. Editors that support R include Emacs, Vim via the Nvim-R plugin, Kate, LyX via Sweave, WinEdt (website), and Jupyter (website). Scripting languages that support R include Python (website), Perl (website), Ruby (source code), F# (website), and Julia (source code). General purpose programming languages that support R include Java via the Rserve socket server, and .NET C# (website). Statistical frameworks which use R in the background include Jamovi and JASP.[citation needed] The R Core Team was founded in 1997 to maintain the R source code. The R Foundation for Statistical Computing was founded in April 2003 to provide financial support. The R Consortium is a Linux Foundation project to develop R infrastructure. The R Journal is an open access, academic journal which features short to medium-length articles on the use and development of R. It includes articles on packages, programming tips, CRAN news, and foundation news. The R community hosts many conferences and in-person meetups - see the community maintained GitHub list. These groups include: UseR!: an annual international R user conference (website) Directions in Statistical Computing (DSC) (website) R-Ladies: an organization to promote gender diversity in the R community (website) SatRdays: R-focused conferences held on Saturdays (website) R Conference (website) posit::conf (formerly known as rstudio::conf) (website) The main R implementation is written primarily in C, Fortran, and R itself. Other implementations include: pretty quick R (pqR), by Radford M. Neal, attempts to improve memory management. Renjin is an implementation of R for the Java Virtual Machine. CXXR and Riposte are implementations of R written in C++. Oracle's FastR is an implementation of R, built on GraalVM. TIBCO Software, creator of S-PLUS, wrote TERR — an R implementation to integrate with Spotfire. Microsoft R Open (MRO) was an R implementation. As of 30 June 2021, Microsoft started to phase out MRO in favor of the CRAN distribution. Although R is an open-source project, some companies provide commercial support: Oracle provides commercial support for the Big Data Appliance, which integrates R into its other products. IBM provides commercial support for in-Hadoop execution of R. Hello, World! program: > print(Hello, World!) Hello, World! The following examples illustrate the basic syntax of the language and use of the command-line interface. (An expanded list of standard language features can be found in the R manual, An Introduction to R.) In R, the generally preferred assignment operator is an arrow made from two characters <-, although = can be used in some cases. > x <- 1:6 # Create a numeric vector in the current environment > y <- x^2 # Create vector based on the values in x. > print(y) # Print the vector’s contents. 1 4 9 16 25 36 > z <- x + y # Create a new vector that is the sum of x and y > z # Return the contents of z to the current environment. 2 6 12 20 30 42 > z_matrix <- matrix(z, nrow = 3) # Create a new matrix that turns the vector z into a 3x2 matrix object > z_matrix [,1] [,2] [1,] 2 20 [2,] 6 30 [3,] 12 42 > 2 * t(z_matrix) - 2 # Transpose the matrix, multiply every element by 2, subtract 2 from each element in the matrix, and return the results to the terminal. [,1] [,2] [,3] [1,] 2 10 22 [2,] 38 58 82 > new_df <- data.frame(t(z_matrix), row.names = c(A, B)) # Create a new data.frame object that contains the data from a transposed z_matrix, with row names 'A' and 'B' > names(new_df) <- c(X, Y, Z) # Set the column names of new_df as X, Y, and Z. > print(new_df) # Print the current results. X Y Z A 2 6 12 B 20 30 42 > new_df$Z # Output the Z column 12 42 > new_df$Z == new_df['Z'] && new_df == new_df$Z # The data.frame column Z can be accessed using $Z, ['Z'], or syntax and the values are the same. TRUE > attributes(new_df) # Print attributes information about the new_df object $names X Y Z $row.names A B $class data.frame > attributes(new_df)$row.names <- c(one, two) # Access and then change the row.names attribute; can also be done using rownames() > new_df X Y Z one 2 6 12 two 20 30 42 One of R's strengths is the ease of creating new functions. Objects in the function body remain local to the function, and any data type may be returned. In R, almost all functions and all user-defined functions are closures. Create a function: # The input parameters are x and y. # The function returns a linear combination of x and y. f <- function(x, y) { z <- 3 * x + 4 * y # An explicit return() statement is optional, could be replaced with simply `z`. return(z) } # Alternatively, the last statement executed is implicitly returned. f <- function(x, y) 3 * x + 4 * y Usage output: > f(1, 2) 11 > f(c(1, 2, 3), c(5, 3, 4)) 23 18 25 > f(1:3, 4) 19 22 25 It is possible to define functions to be used as infix operators with the special syntax `%name%` where name is the function variable name: > `%sumx2y2%` <- function(e1, e2) {e1 ^ 2 + e2 ^ 2} > 1:3 %sumx2y2% -(1:3) 2 8 18 Since version 4.1.0 functions can be written in a short notation, which is useful for passing anonymous functions to higher-order functions: > sapply(1:5, \\(i) i^2) # here \\(i) is the same as function(i) 1 4 9 16 25 In R version 4.1.0, a native pipe operator, |>, was introduced. This operator allows users to chain functions together one after another, instead of a nested function call. > nrow(subset(mtcars, cyl == 4)) # Nested without the pipe character 11 > mtcars |> subset(cyl == 4) |> nrow() # Using the pipe character 11 Another alternative to nested functions, in contrast to using the pipe character, is using intermediate objects: > mtcars_subset_rows <- subset(mtcars, cyl == 4) > num_mtcars_subset <- nrow(mtcars_subset_rows) > print(num_mtcars_subset) 11 While the pipe operator can produce code that is easier to read, it has been advised to pipe together at most 10 to 15 lines and chunk code into sub-tasks which are saved into objects with meaningful names. Here is an example with fewer than 10 lines that some readers may still struggle to grasp without intermediate named steps: (\\(x, n = 42, key = c(letters, LETTERS,  , :, ))) strsplit(x, )[] |> (Vectorize(\\(chr) which(chr == key) - 1))() |> (`+`)(n) |> (`%%`)(length(key)) |> (\\(i) key[i + 1])() |> paste(collapse = ) )(duvFkvFksnvEyLkHAErnqnoyr) The R language has native support for object-oriented programming. There are two native frameworks, the so-called S3 and S4 systems. The former, being more informal, supports single dispatch on the first argument and objects are assigned to a class by just setting a class attribute in each object. The latter is a Common Lisp Object System (CLOS)-like system of formal classes (also derived from S) and generic methods that supports multiple dispatch and multiple inheritance In the example, summary is a generic function that dispatches to different methods depending on whether its argument is a numeric vector or a factor: > data <- c(a, b, c, a, NA) > summary(data) Length Class Mode 5 character character > summary(as.factor(data)) a b c NA's 2 1 1 1 Diagnostic plots from plotting model (q.v. plot.lm() function). Notice the mathematical notation allowed in labels (lower left plot). The R language has built-in support for data modeling and graphics. The following example shows how R can generate and plot a linear model with residuals. # Create x and y values x <- 1:6 y <- x^2 # Linear regression model y = A + B * x model <- lm(y ~ x) # Display an in-depth summary of the model summary(model) # Create a 2 by 2 layout for figures par(mfrow = c(2, 2)) # Output diagnostic plots of the model plot(model) Output: Residuals: 1 2 3 4 5 6 7 8 9 10 3.3333 -0.6667 -2.6667 -2.6667 -0.6667 3.3333 Coefficients: Estimate Std. Error t value Pr(>|t|) (Intercept) -9.3333 2.8441 -3.282 0.030453 * x 7.0000 0.7303 9.585 0.000662 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 3.055 on 4 degrees of freedom Multiple R-squared: 0.9583, Adjusted R-squared: 0.9478 F-statistic: 91.88 on 1 and 4 DF, p-value: 0.000662 Mandelbrot.gif graphic created in R. (Note: Colors differ from actual output.) This Mandelbrot set example highlights the use of complex numbers. It models the first 20 iterations of the equation z = z2 + c, where c represents different complex constants. Install the package that provides the write.gif() function beforehand: install.packages(caTools) R Source code: library(caTools) jet.colors <- colorRampPalette( c(green, pink, #007FFF, cyan, #7FFF7F, white, #FF7F00, red, #7F0000)) dx <- 1500 # define width dy <- 1400 # define height C <- complex( real = rep(seq(-2.2, 1.0, length.out = dx), each = dy), imag = rep(seq(-1.2, 1.2, length.out = dy), times = dx) ) # reshape as matrix of complex numbers C <- matrix(C, dy, dx) # initialize output 3D array X <- array(0, c(dy, dx, 20)) Z <- 0 # loop with 20 iterations for (k in 1:20) { # the central difference equation Z <- Z^2 + C # capture the results X[, , k] <- exp(-abs(Z)) } write.gif( X, Mandelbrot.gif, col = jet.colors, delay = 100) CD of R Version 1.0.0, autographed by the core team of R, photographed R in Quebec City in 2019 All R version releases from 2.14.0 onward have codenames that make reference to Peanuts comics and films. In 2018, core R developer Peter Dalgaard presented a history of R releases since 1997. Some notable early releases before the named releases include: Version 1.0.0 released on 29 February 2000 (2000-02-29), a leap day Version 2.0.0 released on 4 October 2004 (2004-10-04), which at least had a nice ring to it The idea of naming R version releases was inspired by the Debian and Ubuntu version naming system. Dalgaard also noted that another reason for the use of Peanuts references for R codenames is because, everyone in statistics is a P-nut. R release codenames Version Release date Name Peanuts reference Reference 4.5.0 2025-04-11 How About a Twenty-Six 4.4.3 2025-02-28 Trophy Case 4.4.2 2024-10-31 Pile of Leaves 4.4.1 2024-06-14 Race for Your Life 4.4.0 2024-04-24 Puppy Cup 4.3.3 2024-02-29 Angel Food Cake 4.3.2 2023-10-31 Eye Holes 4.3.1 2023-06-16 Beagle Scouts 4.3.0 2023-04-21 Already Tomorrow 4.2.3 2023-03-15 Shortstop Beagle 4.2.2 2022-10-31 Innocent and Trusting 4.2.1 2022-06-23 Funny-Looking Kid 4.2.0 2022-04-22 Vigorous Calisthenics 4.1.3 2022-03-10 One Push-Up 4.1.2 2021-11-01 Bird Hippie 4.1.1 2021-08-10 Kick Things 4.1.0 2021-05-18 Camp Pontanezen 4.0.5 2021-03-31 Shake and Throw 4.0.4 2021-02-15 Lost Library Book 4.0.3 2020-10-10 Bunny-Wunnies Freak Out 4.0.2 2020-06-22 Taking Off Again 4.0.1 2020-06-06 See Things Now 4.0.0 2020-04-24 Arbor Day 3.6.3 2020-02-29 Holding the Windsock 3.6.2 2019-12-12 Dark and Stormy Night See It was a dark and stormy night#Literature 3.6.1 2019-07-05 Action of the Toes 3.6.0 2019-04-26 Planting of a Tree 3.5.3 2019-03-11 Great Truth 3.5.2 2018-12-20 Eggshell Igloos 3.5.1 2018-07-02 Feather Spray 3.5.0 2018-04-23 Joy in Playing 3.4.4 2018-03-15 Someone to Lean On 3.4.3 2017-11-30 Kite-Eating Tree See Kite-Eating Tree 3.4.2 2017-09-28 Short Summer See It Was a Short Summer, Charlie Brown 3.4.1 2017-06-30 Single Candle 3.4.0 2017-04-21 You Stupid Darkness 3.3.3 2017-03-06 Another Canoe 3.3.2 2016-10-31 Sincere Pumpkin Patch 3.3.1 2016-06-21 Bug in Your Hair 3.3.0 2016-05-03 Supposedly Educational 3.2.5 2016-04-11 Very, Very Secure Dishes 3.2.4 2016-03-11 Very Secure Dishes 3.2.3 2015-12-10 Wooden Christmas-Tree See A Charlie Brown Christmas 3.2.2 2015-08-14 Fire Safety 3.2.1 2015-06-18 World-Famous Astronaut 3.2.0 2015-04-16 Full of Ingredients 3.1.3 2015-03-09 Smooth Sidewalk [page needed] 3.1.2 2014-10-31 Pumpkin Helmet See You're a Good Sport, Charlie Brown 3.1.1 2014-07-10 Sock it to Me 3.1.0 2014-04-10 Spring Dance 3.0.3 2014-03-06 Warm Puppy 3.0.2 2013-09-25 Frisbee Sailing 3.0.1 2013-05-16 Good Sport 3.0.0 2013-04-03 Masked Marvel 2.15.3 2013-03-01 Security Blanket 2.15.2 2012-10-26 Trick or Treat 2.15.1 2012-06-22 Roasted Marshmallows 2.15.0 2012-03-30 Easter Beagle 2.14.2 2012-02-29 Gift-Getting Season See It's the Easter Beagle, Charlie Brown 2.14.1 2011-12-22 December Snowflakes 2.14.0 2011-10-31 Great Pumpkin See It's the Great Pumpkin, Charlie Brown r-devel N/A Unsuffered Consequences Comparison of numerical-analysis software Comparison of statistical packages List of numerical-analysis software List of statistical software Rmetrics ^ This displays to standard error a listing of all the packages that tidyverse depends upon. It may also display warnings showing namespace conflicts, which may typically be ignored. ^ a b c Morandat, Frances; Hill, Brandon; Osvald, Leo; Vitek, Jan (11 June 2012). Evaluating the design of the R language: objects and functions for data analysis. European Conference on Object-Oriented Programming. 2012: 104–131. doi:10.1007/978-3-642-31057-7_6. Retrieved 17 May 2016 – via SpringerLink. ^ Peter Dalgaard (11 April 2025). R 4.5.0 is released. Retrieved 11 April 2025. ^ a b R - Free Software Directory. directory.fsf.org. Retrieved 26 January 2024. ^ R scripts. mercury.webster.edu. Retrieved 17 July 2021. ^ R Data Format Family (.rdata, .rda). Loc.gov. 9 June 2017. Retrieved 17 July 2021. ^ a b Hornik, Kurt; The R Core Team (12 April 2022). R FAQ. The Comprehensive R Archive Network. 3.3 What are the differences between R and S?. Archived from the original on 28 December 2022. Retrieved 27 December 2022. ^ Introduction. The Julia Manual. Archived from the original on 20 June 2018. Retrieved 5 August 2018. ^ Comparison with R. pandas Getting started. Retrieved 15 July 2024. ^ Giorgi, Federico M.; Ceraolo, Carmine; Mercatelli, Daniele (27 April 2022). The R Language: An Engine for Bioinformatics and Data Science. Life. 12 (5): 648. Bibcode:2022Life...12..648G. doi:10.3390/life12050648. PMC 9148156. PMID 35629316. ^ Ihaka, Ross. The R Project: A Brief History and Thoughts About the Future (PDF). p. 12. Archived (PDF) from the original on 28 December 2022. Retrieved 27 December 2022. We set a goal of developing enough of a language to teach introductory statistics courses at Auckland. ^ Hornik, Kurt; The R Core Team (12 April 2022). R FAQ. The Comprehensive R Archive Network. 2.13 What is the R Foundation?. Archived from the original on 28 December 2022. Retrieved 28 December 2022. ^ Index of /datasets. lib.stat.cmu.edu. Retrieved 5 September 2024. ^ Ihaka, Ross. R: Past and Future History (PDF). p. 4. Archived (PDF) from the original on 28 December 2022. Retrieved 28 December 2022. ^ Ihaka, Ross (5 December 1997). New R Version for Unix. stat.ethz.ch. Archived from the original on 12 February 2023. Retrieved 12 February 2023. ^ Ihaka, Ross. The R Project: A Brief History and Thoughts About the Future (PDF). p. 18. Archived (PDF) from the original on 28 December 2022. Retrieved 27 December 2022. ^ Wickham, Hadley; Cetinkaya-Rundel, Mine; Grolemund, Garrett (2023). R for Data Science, Second Edition. O'Reilly. p. xvii. ISBN 978-1-492-09740-2. ^ Quarto. Quarto. Retrieved 5 September 2024. ^ Chambers, John M. (2020). S, R, and Data Science. The R Journal. 12 (1): 462–476. doi:10.32614/RJ-2020-028. ISSN 2073-4859. The R language and related software play a major role in computing for data science. ... R packages provide tools for a wide range of purposes and users. ^ Davies, Tilman M. (2016). Installing R and Contributed Packages. The Book of R: A First Course in Programming and Statistics. San Francisco, California: No Starch Press. p. 739. ISBN 9781593276515. ^ a b Hornik, Kurt (2012). The Comprehensive R Archive Network. WIREs Computational Statistics. 4 (4): 394–398. doi:10.1002/wics.1212. ISSN 1939-5108. S2CID 62231320. ^ Kurt Hornik (23 April 1997). Announce: CRAN. r-help. Wikidata Q101068595.. ^ The Status of CRAN Mirrors. cran.r-project.org. Retrieved 16 October 2024. ^ CRAN - Contributed Packages. cran.r-project.org. Retrieved 16 October 2024. ^ R-Forge: Welcome. r-forge.r-project.org. Retrieved 5 September 2024. ^ The Omega Project for Statistical Computing. www.omegahat.net. Retrieved 5 September 2024. ^ Build software better, together. GitHub. Retrieved 5 September 2024. ^ Wickham, Hadley (2014). Tidy Data (PDF). Journal of Statistical Software. 59 (10). doi:10.18637/jss.v059.i10. ^ a b Wickham, Hadley; Cetinkaya-Rundel, Mine; Grolemund, Garrett (2023). R for Data Science, Second Edition. O'Reilly. ISBN 978-1-492-09740-2. ^ R for macOS. cran.r-project.org. Retrieved 5 September 2024. ^ IDE/Editor para Linguagem R | Tinn-R - Home. Tinn-R (in Brazilian Portuguese). Retrieved 5 September 2024. ^ Talbot, Justin; DeVito, Zachary; Hanrahan, Pat (1 January 2012). Riposte: A trace-driven compiler and parallel VM for vector code in R. Proceedings of the 21st international conference on Parallel architectures and compilation techniques. ACM. pp. 43–52. doi:10.1145/2370816.2370825. ISBN 9781450311823. S2CID 1989369. ^ Jackson, Joab (16 May 2013). TIBCO offers free R to the enterprise. PC World. Retrieved 20 July 2015. ^ Looking to the future for R in Azure SQL and SQL Server. 30 June 2021. Retrieved 7 November 2021. ^ An Introduction to R. Notes on R: A Programming Environment for Data Analysis and Graphics (PDF). Retrieved 3 January 2021. ^ R Development Core Team. Assignments with the = Operator. Retrieved 11 September 2018. ^ Kabacoff, Robert (2012). Quick-R: User-Defined Functions. statmethods.net. Retrieved 28 September 2018. ^ Wickham, Hadley. Advanced R - Functional programming - Closures. adv-r.had.co.nz. ^ NEWS. r-project.org. ^ R: R News. cran.r-project.org. Retrieved 14 March 2024. ^ Wickham, Hadley; Çetinkaya-Rundel, Mine; Grolemund, Garrett (2023). 4 Workflow: code style. R for data science: import, tidy, transform, visualize, and model data (2nd ed.). Beijing; Sebastopol, CA: O'Reilly. ISBN 978-1-4920-9740-2. OCLC 1390607935. ^ Class Methods. Retrieved 25 April 2024. ^ Monkman, Martin. Chapter 5 R Release Names | Data Science with R: A Resource Compendium. ^ McGowan, Lucy D’Agostino (28 September 2017). R release names. livefreeordichotomize.com. Retrieved 7 April 2024. ^ r-hub/rversions, The R-hub project of the R Consortium, 29 February 2024, retrieved 7 April 2024 ^ a b c d Dalgaard, Peter (15 July 2018). What's in a name? 20 years of R release management (video). YouTube. Retrieved 9 April 2024. ^ Read Peanuts by Charles Schulz on GoComics. www.gocomics.com. Retrieved 17 April 2025. ^ [Rd] R 4.5.0 is released. hypatia.math.ethz.ch. Retrieved 17 April 2025. ^ Read Peanuts by Charles Schulz on GoComics. www.gocomics.com. Retrieved 17 April 2025. ^ [Rd] R 4.4.3 is released. hypatia.math.ethz.ch. Retrieved 17 April 2025. ^ Schulz, Charles (15 November 1957). Peanuts by Charles Schulz for November 15, 1957 | GoComics.com. GoComics. Retrieved 6 January 2025. ^ [Rd] R 4.4.2 is released. stat.ethz.ch. Retrieved 26 December 2024. ^ Race for Your Life, Charlie Brown. IMDB. 3 August 1977. Retrieved 18 June 2024. ^ R 4.4.1 is released. stat.ethz.ch. Retrieved 18 June 2024. ^ Schulz, Charles (29 June 1980). Peanuts by Charles Schulz for June 29, 1980 | GoComics.com. GoComics. Retrieved 24 April 2024. ^ R 4.4.0 is released. stat.ethz.ch. Retrieved 24 April 2024. ^ Schulz, Charles (29 June 1980). Peanuts by Charles Schulz for June 29, 1980 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ R 4.3.3 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (31 October 1996). Peanuts by Charles Schulz for October 31, 1996 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.3.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (28 April 1979). Peanuts by Charles Schulz for April 28, 1979 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.3.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (13 June 1980). Peanuts by Charles Schulz for June 13, 1980 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (16 June 1980). Peanuts by Charles Schulz for June 16, 1980 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (26 November 1964). Peanuts by Charles Schulz for November 26, 1964 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.3.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (30 March 2001). Peanuts by Charles Schulz for March 30, 2001 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.2.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (30 October 1962). Peanuts by Charles Schulz for October 30, 1962 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.2.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (22 November 1970). Peanuts by Charles Schulz for November 22, 1970 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (29 July 1971). Peanuts by Charles Schulz for July 29, 1971 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (25 September 1969). Peanuts by Charles Schulz for September 25, 1969 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (13 October 1973). Peanuts by Charles Schulz for October 13, 1973 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (8 February 1974). Peanuts by Charles Schulz for February 08, 1974 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (8 January 1970). Peanuts by Charles Schulz for January 08, 1970 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.2.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ a b Schulz, Charles (6 March 1967). Peanuts by Charles Schulz for March 06, 1967 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.2.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ a b [Rd] R 4.1.2 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (1 November 1967). Peanuts by Charles Schulz for November 01, 1967 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (12 July 1967). Peanuts by Charles Schulz for July 12, 1967 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ Schulz, Charles (17 May 1978). Peanuts by Charles Schulz for May 17, 1978 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ [Rd] R 4.1.1 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (12 February 1986). Peanuts by Charles Schulz for February 12, 1986 | GoComics.com. GoComics. Retrieved 8 April 2024. ^ [Rd] R 4.1.0 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (30 July 1978). Peanuts by Charles Schulz for July 30, 1978 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [Rd] R 4.0.5 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (2 March 1959). Peanuts by Charles Schulz for March 02, 1959 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ Schulz, Charles (27 February 2006). Peanuts by Charles Schulz for February 27, 2006 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ Schulz, Charles (13 March 1959). Peanuts by Charles Schulz for March 13, 1959 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [Rd] R 4.0.4 scheduled for February 15. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (23 October 1972). Peanuts by Charles Schulz for October 23, 1972 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [Rd] R 4.0.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (14 April 1962). Peanuts by Charles Schulz for April 14, 1962 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 4.0.2 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (6 February 1962). Peanuts by Charles Schulz for February 06, 1962 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 4.0.1 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (24 April 1970). Peanuts by Charles Schulz for April 24, 1970 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 4.0.0 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (29 February 2000). Peanuts by Charles Schulz for February 29, 2000 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.6.3 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (12 July 1965). Peanuts by Charles Schulz for July 12, 1965 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.6.2 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ a b Schulz, Charles (22 March 1971). Peanuts by Charles Schulz for March 22, 1971 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.6.1 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (3 March 1963). Peanuts by Charles Schulz for March 03, 1963 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.6.0 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (11 March 1959). Peanuts by Charles Schulz for March 11, 1959 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.5.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (25 January 1960). Peanuts by Charles Schulz for January 25, 1960 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.5.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (9 March 1972). Peanuts by Charles Schulz for March 09, 1972 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.5.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (27 January 1973). Peanuts by Charles Schulz for January 27, 1973 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.5.0 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ It's nice to have a friend you can lean on. Archived from the original on 7 April 2024. ^ Peanuts Snoopy Charlie Brown A Friend is Someone you can lean on metal tin sign. Retrieved 17 April 2025. ^ Peanuts Snoopy & Charlie Brown Friend Is Someone You Can Lean On Fire-King Mug. Retrieved 17 April 2025. ^ R 3.4.4 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (19 February 1967). Peanuts by Charles Schulz for February 19, 1967 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.4.3 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ R 3.4.2 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ a b Schulz, Charles (9 September 1965). Peanuts by Charles Schulz for September 09, 1965 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.4.1 is released. hypatia.math.ethz.ch. Retrieved 7 April 2024. ^ R 3.4.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (29 June 1966). Peanuts by Charles Schulz for June 29, 1966 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.3.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (30 October 1968). Peanuts by Charles Schulz for October 30, 1968 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.3.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (15 June 1967). Peanuts by Charles Schulz for June 15, 1967 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.3.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (7 May 1971). Peanuts by Charles Schulz for May 07, 1971 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.3.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ a b Schulz, Charles (20 February 1964). Peanuts by Charles Schulz for February 20, 1964 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ VERSION-NICK. Retrieved 7 April 2024. ^ R 3.2.5 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ R 3.2.4-revised is released. stat.ethz.ch. Retrieved 7 April 2024. ^ R 3.2.4 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (18 December 1980). Peanuts by Charles Schulz for December 18, 1980 | GoComics.com. GoComics. Retrieved 9 April 2024. ^ R 3.2.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ MarketScreener (7 October 2008). METLIFE : Brush Up on Fire Safety Basics -October 07, 2008 at 04:03 pm EDT | MarketScreener. www.marketscreener.com. Retrieved 7 April 2024. ^ MetLife Advises People to Brush Up on Fire Safety Basics to Stay Safe. Claims Journal. 12 October 2005. Retrieved 7 April 2024. ^ R 3.2.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (10 March 1969). Peanuts by Charles Schulz for March 10, 1969 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.2.1 liftoff. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (7 April 1966). Peanuts by Charles Schulz for April 07, 1966 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ [R] R 3.2.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles M. (2019). Happiness is a warm puppy. New York : Penguin Workshop. ISBN 978-1-5247-8995-4.{{cite book}}: CS1 maint: publisher location (link) ^ R 3.1.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ [R] R 3.1.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Sock it to me. Archived from the original on 9 April 2024. ^ Sock it to me. Archived from the original on 9 April 2024. ^ Sock it to me puzzle. Archived from the original on 9 April 2024. ^ Peanuts Springbok Puzzles. ^ [R] R 3.1.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ [R] R 3.1.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (11 January 1965). Peanuts by Charles Schulz for January 11, 1965 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.0.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (3 September 1971). Peanuts by Charles Schulz for September 03, 1971 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.0.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (22 November 1953). Peanuts by Charles Schulz for November 22, 1953 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.0.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (23 June 1981). Peanuts by Charles Schulz for June 23, 1981 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 3.0.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (23 October 1965). Peanuts by Charles Schulz for October 23, 1965 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.15.3 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (31 October 1969). Peanuts by Charles Schulz for October 31, 1969 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.15.2 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (6 June 1987). Peanuts by Charles Schulz for June 06, 1987 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.15.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (11 April 1971). Peanuts by Charles Schulz for April 11, 1971 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.15.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ It's the Easter Beagle, Charlie Brown! (TV Short 1974) - Quotes - IMDb. Retrieved 8 April 2024 – via www.imdb.com. ^ R 2.14.2 is released + R anniversary. stat.ethz.ch. Retrieved 7 April 2024. ^ McGough, Nellah Bailey (20 January 2023). Our Favorite Quotes and Sayings from A Charlie Brown Christmas. Southern Living. Retrieved 8 April 2024. ^ R 2.14.1 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (29 October 1973). Peanuts by Charles Schulz for October 29, 1973 | GoComics.com. GoComics. Retrieved 7 April 2024. ^ R 2.14.0 is released. stat.ethz.ch. Retrieved 7 April 2024. ^ Schulz, Charles (17 August 1967). Peanuts by Charles Schulz for August 17, 1967 | GoComics.com. GoComics. Retrieved 7 April 2024. Wickham, Hadley; Çetinkaya-Rundel, Mine; Grolemund, Garrett (2023). R for data science: import, tidy, transform, visualize, and model data (2nd ed.). Beijing Boston Farnham Sebastopol Tokyo: O'Reilly. ISBN 978-1-4920-9740-2. Gagolewski, Marek (2024). Deep R Programming. doi:10.5281/ZENODO.7490464. ISBN 978-0-6455719-2-9. R Technical Papers Big Book of R, curated list of R-related programming books Books Related to R - R Project, partially annotated curated list of books relating to R or S. vteR (programming language)Features Sweave Implementations Distributed R Microsoft R Open (Revolution R Open) Renjin Packages Bibliometrix easystats qdap lumi RGtk2 Rhea Rmetrics rnn RQDA Shiny SimpleITK Statcheck tidyverse ggplot2 dplyr knitr Interfaces Emacs Speaks Statistics Java GUI for R KH Coder Rattle GUI R Commander RExcel RKWard RStudio People Roger Bivand Jenny Bryan John Chambers Peter Dalgaard Dirk Eddelbuettel Robert Gentleman Ross Ihaka Friedrich Leisch Thomas Lumley Brian D. Ripley Julia Silge Luke Tierney Hadley Wickham Yihui Xie Organisations R Consortium Revolution Analytics R-Ladies Posit PBC (formerly RStudio PBC) Publications The R Journal vteGNU ProjectHistory GNU Manifesto Free Software Foundation Europe India Latin America History of free software Licenses GNU General Public License linking exception font exception GNU Lesser General Public License GNU Affero General Public License GNU Free Documentation License GNAT Modified General Public License Software GNU (variants) Hurd Linux-libre glibc Bash coreutils findutils Build system GCC binutils GDB GRUB GNUstep GIMP Jami GNU Emacs GNU TeXmacs GNU Octave GNU Taler GNU R GSL GMP GNU Electric GNU Archimedes GNUnet GNU Privacy Guard Gnuzilla (IceCat) GNU Health GNUmed GNU LilyPond GNU Go GNU Chess Gnash Guix more... Contributors Benjamin Mako Hill Bradley M. Kuhn Brian Fox Federico Heinz John Sullivan Nagarjuna G. Richard M. Stallman Other topics GNU/Linux naming controversy Revolution OS Free Software Foundation anti-Windows campaigns Defective by Design vteNumerical-analysis softwareFree Advanced Simulation Library ADMB Chapel Euler Mathematical Toolbox FreeFem++ FreeMat Genius Gmsh GNU Octave gretl Julia Jupyter (Julia, Python, R; IPython) MFEM OpenFOAM Python R SageMath Salome ScicosLab Scilab X10 Weka Discontinued Fortress Proprietary DADiSP FEATool Multiphysics GAUSS LabVIEW Maple Mathcad Mathematica MATLAB MWorks SAS (SAS Viya) Speakeasy VisSim Comparison vteStatistical softwarePublic domain Dataplot Epi Info CSPro X-12-ARIMA Open-source ADMB DAP gretl jamovi JASP JAGS JMulTi Julia Jupyter (Julia, Python, R) GNU Octave OpenBUGS Orange PSPP Python (statsmodels, PyMC3, IPython, IDLE) R (RStudio) SageMath SimFiT SOFA Statistics Stan XLispStat Freeware BV4.1 CumFreq SegReg XploRe WinBUGS CommercialCross-platform Data Desk GAUSS GraphPad InStat GraphPad Prism IBM SPSS Statistics IBM SPSS Modeler JMP Maple Mathcad Mathematica MATLAB OxMetrics RATS Revolution Analytics SAS (SAS Viya) SmartPLS Stata StatView SUDAAN S-PLUS TSP World Programming System (WPS) Windows only BMDP EViews GenStat LIMDEP LISREL MedCalc Microfit Minitab MLwiN NCSS Shazam SigmaStat Statistica StatsDirect StatXact SYSTAT The Unscrambler Unistat Excel add-ons Analyse-it Unistat for Excel XLfit RExcel Comparison • Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Portal: Computer programming Authority control databases InternationalVIAFFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef",
    "paradigm": "Multi-paradigm : procedural , object-oriented , functional , reflective , imperative , array",
    "first_appeared": "August 1993 ; 31 years ago ( 1993-08 )",
    "stable_release": "4.5.0",
    "typing_discipline": "Dynamic",
    "influenced_by": "Lisp, S, Scheme",
    "influenced": "Julia pandas",
    "stable_release_date": "2025-04-11T00:00:00Z"
  },
  {
    "title": "Zig (programming language)",
    "url": "https://en.wikipedia.org/wiki/Zig_(programming_language)",
    "goals": "The primary goal of Zig is to be a better solution to the sorts of tasks that are currently solved with C. A primary concern in that respect is readability; Zig attempts to use existing concepts and syntax wherever possible, avoiding the addition of different syntax for similar concepts. Further, it is designed for robustness, optimality and maintainability, including a variety of features to improve safety, optimization, and testing. The small and simple syntax is an important part of the maintenance, as it is a goal of the language to allow maintainers to debug the code without having to learn the intricacies of a language they might not be familiar with. Even with these changes, Zig can compile into and against existing C code; C headers can be included in a Zig project and their functions called, and Zig code can be linked into C projects by including the compiler-built headers. In keeping with the overall design philosophy of making the code simple and easy to read, the Zig system as a whole also encompasses a number of stylistic changes compared to C and other C-like languages. For instance, the Rust language has operator overloading which means a statement like a = b + c might actually be a function call to a type’s overloaded version of the plus operator. Further, that function might panic which might pre-empt any following code. In Zig, if something calls a function, it looks like a function call; if it doesn’t, it doesn’t look like a function call. If it can raise an error, it is explicit in the syntax, error handling is handled through error types and can be handled with catch or try. The goals of Zig are in contrast to those of many other languages designed in the same time period, like Rust, Carbon, and Nim. Generally, these languages are more complex with added features like operator overloading, functions that masquerade as values (properties), and many other features intended to aid in building large programs. These sorts of features have more in common with C++’s approach, and these languages are more along the lines of that language. Zig has a more conservative extension of the type system, supporting compile time generics and accommodating a form of duck typing with the comptime directive.",
    "memory_handling": "One of the primary sources of bugs in C programs is the memory management system, based on malloc. malloc sets aside a block of memory for use in the code and returns a reference to that memory as a pointer. There is no system to ensure that memory is released when the program no longer needs it, which can lead to programs using up all available memory, a memory leak. More common is a dangling pointer that does not refer to a properly allocated memory object. A common solution to these problems is a garbage collector (GC), which examines the program for pointers to previously allocated memory, and removing any blocks that no longer have anything pointing to them. Although this greatly reduces, or even eliminates, memory errors, GC systems are relatively slow compared to manual memory management[citation needed], and have unpredictable performance that makes them unsuited to systems programming. Another solution is automatic reference counting (ARC), which implements the same basic concept of identifying blocks of disused memory, but does so at pointer creation and destruction time by maintaining the number of pointers to a block, meaning there is no need to perform exhaustive pointer searches, which are rendered unnecessary at the cost of adding reference counter adjustment overhead to every pointer creation and destruction operation. Zig aims to provide performance similar to or better than C, so GC and ARC are not suitable solutions. Instead, it uses a modern, as of 2022[update], concept known as option types. Instead of a pointer being allowed to point to nothing, or nil, a separate type is used to indicate data that is optionally empty. This is similar to using a structure with a pointer and a boolean that indicates whether the pointer is valid, but the state of the boolean is invisibly managed by the language and does not need to be explicitly managed by the programmer. So, for instance, when the pointer is declared it is set to unallocated, and when that pointer receives a value from a malloc, it is set to allocated if the malloc succeeded. The advantage to this model is that it has very low or zero overhead; the compiler has to create the code to pass along the optional type when pointers are manipulated, as opposed to a simple pointer, but this allows it to directly express possible memory problems at compile time with no runtime support. For instance, creating a pointer with a null value and then attempting to use it is perfectly acceptable in C, leading to null-pointer errors. In contrast, a language using optional types can check that all code paths only attempt to use pointers when they are valid. While this does not eliminate all potential problems, when issues do occur at runtime the error can be more precisely located and explained. Another change for memory management in Zig is that the actual allocation is handled through structs describing the action, as opposed to calling the memory management functions in libc. For instance, in C if one wants to write a function that makes a string containing multiple copies of another string, the function might look like this: const char* repeat(const char* original, size_t times); In the code, the function would examine the size of original and then malloc times that length to set aside memory for the string it will build. That malloc is invisible to the functions calling it, if they fail to later release the memory, a leak will occur. In Zig, this might be handled using a function like: fn repeat(allocator: std.mem.Allocator, original: []const u8, times: usize) std.mem.Allocator.Error![]const u8; In this code, the allocator variable is passed a struct that describes what code should perform the allocation, and the repeat function returns either the resulting string or, using the optional type as indicated by the !, an Allocator.Error. By directly expressing the allocator as an input, memory allocation is never hidden within another function, it is always exposed to the API by the function that is ultimately calling for the memory to be allocated. No allocations are performed inside Zig’s standard library. Further, as the struct can point to anything, one can use alternative allocators, even ones written in the program. This can allow, for instance, small-object allocators that do not use the operating system functions that normally allocate an entire memory page. Optional types are an example of a language feature that offers general functionality while still being simple and generic. They do not have to be used to solve null pointer problems, they are also useful for any type of value where no value is an appropriate answer. Consider a function countTheNumberOfUsers that returns an integer, and an integer variable, theCountedUsers that holds the result. In many languages, a magic number would be placed in theCountedUsers to indicate that countTheNumberOfUsers has not yet been called, while many implementations would just set it to zero. In Zig, this could be implemented as an var theCountedUsers: ?i32 = null which sets the variable to a clear not been called value. Another more general feature of Zig that also helps manage memory problems is the concept of defer, which marks some code to be performed at the end of a function no matter what happens, including possible runtime errors. If a particular function allocates some memory and then disposes of it when the operation is complete, one can add a line to defer a free to ensure it is released no matter what happens. Zig memory management avoids hidden allocations. Allocation is not managed in the language directly. Instead, heap access is done via the standard library, explicitly.",
    "direct_interaction_with_c": "Zig promotes a gradual approach to portability that combines new Zig code with existing C code. To do this, it aims to make interaction with existing C libraries as seamless as possible. Zig imports its own libraries with the @import directive, typically in this fashion: const std = @import(std); Zig code within that file can now call functions inside std, for instance: std.debug.print(Hello, world!\\n, .{}); To work with C code, one simply replaces the @import with @cImport: const c = @cImport(@cInclude(soundio/soundio.h)); The Zig code can now call functions in the soundio library as if they were native Zig code. As Zig uses new data types that are explicitly defined, unlike C’s more generic int and float, a small number of directives are used to move data between the C and Zig types, including @intCast and @ptrCast.",
    "comptime": "By using the comptime keyword, the programmer can explicitly have Zig evaluate sections of code at compile time, as opposed to runtime. Being able to run code at compile time allows Zig to have the functionality of macros and conditional compilation without the need for a separate preprocessor language. During compile time, types become first-class citizens. This enables compile-time duck typing, and is how Zig implements generic types. For instance, in Zig, a generic linked list type might be implemented using a function like: fn LinkedList(comptime T: type) type; This function takes in some type T, and returns a custom struct defining a linked list with that data type.",
    "compiler": "Zig also includes a C and C++ compiler, and can be used with either or both languages by leveraging with the commands zig cc and zig c++, providing many headers including the C standard library (libc) and C++ Standard Library (libcxx) for many different platforms. This allows Zig’s cc and c++ sub-commands to act as cross compilers out of the box (similarly to Clang). Zig treats cross-compiling as a first-class use-case of the language. This means any Zig compiler can compile runnable binaries for any of its target platforms, of which there are dozens. These include not only widely-used modern systems like ARM and x86-64, but also PowerPC, SPARC, MIPS, RISC-V, LoongArch64 and even the IBM z/Architectures (S390). The toolchain can compile to any of these targets without installing additional software, all the needed support is in the basic system. The experimental support is also provided for less known platforms like AMD and Nvidia GPUs or PlayStation 4 and 5 (with various degree of support). Cross-compilation is also available for variety of the operating systems (mostly desktop ones). Popular UNIX-like ones and Windows are officially supported (and documented), but (minimal) applications can and have been made for Android (with Android NDK) or iOS. Zig uses LLVM (written in C++) as a backend for optimization. Since version 0.10 the Zig compiler is written in the Zig programming language, i.e., it is a self-hosting compiler. The self-hosted linker is tightly coupled with the self-hosted compiler. The LLVM backend is the default for most targets, except for SPIR-V. Zig also supports their self-hosted backend which can be enabled by using -fno-llvm.",
    "packages": "Version 0.11.0 bundles an experimental package manager, but no official package repository is available. Instead a package is simply a URL that points to a compressed file, or a Git repository. Each package ideally includes a standard build.zig file (that the Zig compiler uses by convention to compile the source code) and a build.zig.zon file containing metadata with name and version of the package.",
    "hello_world": "const std = @import(std); pub fn main() !void { const stdout = std.io.getStdOut().writer(); try stdout.print(Hello, {s}!\\n, .{world}); }",
    "generic_linked_list": "const std = @import(std); const stdout = std.io.getStdOut().writer(); fn LinkedList(comptime T: type) type { return struct { const Self = @This(); pub const Node = struct { next: ?*Node = null, data: T, }; first: ?*Node = null, pub fn prepend( list: *Self, new_node: *Node, ) void { new_node.next = list.first; list.first = new_node; } pub fn format( list: Self, comptime fmt: []const u8, options: std.fmt.FormatOptions, out_stream: anytype, ) !void { try out_stream.writeAll(( ); var it = list.first; while (it) |node| : (it = node.next) { try std.fmt.formatType( node.data, fmt, options, out_stream, 1, ); try out_stream.writeAll( ); } try out_stream.writeAll()); } }; } pub fn main() !void { const ListU32 = LinkedList(u32); var list = ListU32{}; var node1 = ListU32.Node{ .data = 1 }; var node2 = ListU32.Node{ .data = 2 }; var node3 = ListU32.Node{ .data = 3 }; list.prepend(&node1); list.prepend(&node2); list.prepend(&node3); try stdout.print({}\\n, .{list}); try stdout.print({b}\\n, .{list}); } Output ( 3 2 1 ) ( 11 10 1 )",
    "string_repetition_with_allocator": "const std = @import(std); fn repeat( allocator: std.mem.Allocator, original: []const u8, times: usize, ) std.mem.Allocator.Error![]const u8 { var buffer = try allocator.alloc( u8, original.len * times, ); for (0..times) |i| { std.mem.copyForwards( u8, buffer[(original.len * i)..], original, ); } return buffer; } pub fn main() !void { const stdout = std.io.getStdOut().writer(); var arena = std.heap.ArenaAllocator.init( std.heap.page_allocator, ); defer arena.deinit(); const allocator = arena.allocator(); const original = Hello ; const repeated = try repeat( allocator, original, 3, ); try stdout.print({s}\\n, .{repeated}); } Output Hello Hello Hello",
    "history": "The name “Zig” was reportedly chosen through a process involving a Python script that randomly combined letters, starting with the letter “Z” and followed by a vowel or “Y”, in order to generate four-letter words. Despite the intended length, “Zig”, a three-letter word, was ultimately selected from the various combinations produced by the script. The previous bootstrapping compiler, written in Zig and C++ using LLVM as a back-end, supporting many of its native targets, was removed in version 0.11. Newer versions of Zig use a prebuilt WebAssembly version of Zig to bootstrap itself.",
    "projects": "Bun is a JavaScript and TypeScript runtime written in Zig, using Safari’s JavaScriptCore virtual machine. Ghostty is a terminal emulator written in Zig. The TigerBeetle financial transaction database is written in Zig. Deecy, an up-and-coming (latest release as of this writing is version 0.3.0) emulator of Sega's Dreamcast home video gaming console platform, completely written in Zig from scratch. See a more comprehensive list of companies and projects utilizing Zig in production.",
    "see_also": "Free and open-source software portalComputer programming portal C C++ D Nim Go Rust Carbon V",
    "citations": "^ Kelley, Andrew. Introduction to the Zig Programming Language. andrewkelley.me. Retrieved 8 November 2020. ^ Release 0.14.0. Retrieved 9 March 2025. ^ What are the pros and cons of Zig vs Rust? I see Zig mentioned more and more her... | Hacker News. ^ Why Zig when There is Already C++, D, and Rust? ⚡ Zig Programming Language. ^ No surprises on any system: Q&A with Loris Cro of Zig - Stack Overflow. 2 October 2023. ^ Zig's New Relationship with LLVM | Hacker News. ^ What's Zig got that C, Rust and Go don't have? (With Loris Cro). YouTube. 15 November 2023. ^ https://news.ycombinator.com/item?id=25797025 ^ Overview ⚡ Zig Programming Language. ^ After a day of programming in Zig. 29 December 2023. ^ Home ⚡ Zig Programming Language. ziglang.org. Retrieved 2024-12-31. ^ Taking the warts off C, with Andrew Kelley, creator of the Zig programming language. Sourcegraph. 2021-10-19. Retrieved 2024-04-18. ^ ziglang/zig. GitHub. Retrieved 2020-02-11. ^ a b The Road to Zig 1.0 - Andrew Kelley. ChariotSolutions. 2019-05-09 – via YouTube. ^ The Zig Programming Language. Ziglang.org. Retrieved 2020-02-11. ^ Zig programming language. SudoNull. Retrieved 2020-02-11. ^ a b c d Yegulalp 2016. ^ Zig has all the elegant simplicity of C, minus all the ways to shoot yourself in the foot. JAXenter. 2017-10-31. Archived from the original on 2017-11-01. Retrieved 2020-02-11. ^ a b c The Zig Programming Language. Ziglang.org. Retrieved 2020-02-11. ^ Anderson, Tim (2020-04-24). Keen to go _ExtInt? LLVM Clang compiler adds support for custom width integers. www.theregister.co.uk. Retrieved 2024-12-30. ^ a b Documentation. Ziglang.org. Retrieved 2020-04-24. ^ a b c d Chigozie, Oduah (2024-06-04). Comparing Rust vs. Zig: Performance, Safety, and More. LogRocket Blog. Retrieved 2024-07-16. ^ Jakub Konka on Twitter. Twitter. Archived from the original on 2022-04-10. Retrieved 2021-05-28. ^ Announcing the Zig Software Foundation. Ziglang.org. Retrieved 2021-05-28. ^ Sponsor ZSF. Ziglang.org. Retrieved 2021-05-28. ^ a b Kavanagh, Amanda (June 25, 2024). Why Zig has become the highest-paying programming language. The Next Web. Retrieved Dec 15, 2024. ^ McBride, Aoibhinn (July 16, 2024). 3 programming languages you need to know about. VentureBeat. Retrieved Dec 15, 2024. ^ Elizabeth 2017. ^ a b ARC vs. GC. Elements. ^ Guide To Java 8 Optional. 28 November 2022. ^ Rust: Memory Management. ^ a b c d e Allocators. 11 September 2023. ^ Tyson, Matthew (9 March 2023). Meet Zig: The modern alternative to C. InfoWorld.com. ^ 0.6.0 Release Notes. Ziglang.org. Retrieved 2020-04-19. ^ 'zig cc': a Powerful Drop-In Replacement for GCC/Clang - Andrew Kelley. andrewkelley.me. Retrieved 2021-05-28. ^ Zig Makes Go Cross Compilation Just Work. DEV Community. 24 January 2021. Retrieved 2021-05-28. ^ andrewrk (2024-03-13). origin of the zig programming language name. by @andrewrk. Retrieved 2024-03-13. ^ A Reply to _The Road to Zig 1.0_. www.gingerbill.org. 2019-05-13. Retrieved 2020-02-11. ^ ziglang/zig. GitHub. Zig Programming Language. 2020-02-11. Retrieved 2020-02-11. ^ The Zig Programming Language. Ziglang.org. Retrieved 2020-02-11. ^ ghostty-org/ghostty. Github. Retrieved 2024-12-27. ^ tigerbeetle/tigerbeetle. Github. Retrieved 2024-12-30.",
    "bibliography": "Elizabeth, Jane (2017-10-19). Tired of C? New programming language Zig aims to be more pragmatic and readable. jaxenter. Archived from the original on 2020-10-01. Retrieved 2020-04-22. Yegulalp, Serdar (2016-08-29). New challenger joins Rust to topple C language. InfoWorld. Retrieved 2020-02-11. Owens, Jeffery (2023-12-02). Mastering Zig Programming. Independently Published. ISBN 979-8870587332. Allen, Corby (2024-06-20). Zig Programming Mastery. Independently Published. ISBN 979-8329021424.",
    "external_links": "Official website Zig on GitHub Movie: Introducing Zig Movie: The Road to 1.0 Zig Weekly vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category",
    "document": "The primary goal of Zig is to be a better solution to the sorts of tasks that are currently solved with C. A primary concern in that respect is readability; Zig attempts to use existing concepts and syntax wherever possible, avoiding the addition of different syntax for similar concepts. Further, it is designed for robustness, optimality and maintainability, including a variety of features to improve safety, optimization, and testing. The small and simple syntax is an important part of the maintenance, as it is a goal of the language to allow maintainers to debug the code without having to learn the intricacies of a language they might not be familiar with. Even with these changes, Zig can compile into and against existing C code; C headers can be included in a Zig project and their functions called, and Zig code can be linked into C projects by including the compiler-built headers. In keeping with the overall design philosophy of making the code simple and easy to read, the Zig system as a whole also encompasses a number of stylistic changes compared to C and other C-like languages. For instance, the Rust language has operator overloading which means a statement like a = b + c might actually be a function call to a type’s overloaded version of the plus operator. Further, that function might panic which might pre-empt any following code. In Zig, if something calls a function, it looks like a function call; if it doesn’t, it doesn’t look like a function call. If it can raise an error, it is explicit in the syntax, error handling is handled through error types and can be handled with catch or try. The goals of Zig are in contrast to those of many other languages designed in the same time period, like Rust, Carbon, and Nim. Generally, these languages are more complex with added features like operator overloading, functions that masquerade as values (properties), and many other features intended to aid in building large programs. These sorts of features have more in common with C++’s approach, and these languages are more along the lines of that language. Zig has a more conservative extension of the type system, supporting compile time generics and accommodating a form of duck typing with the comptime directive. One of the primary sources of bugs in C programs is the memory management system, based on malloc. malloc sets aside a block of memory for use in the code and returns a reference to that memory as a pointer. There is no system to ensure that memory is released when the program no longer needs it, which can lead to programs using up all available memory, a memory leak. More common is a dangling pointer that does not refer to a properly allocated memory object. A common solution to these problems is a garbage collector (GC), which examines the program for pointers to previously allocated memory, and removing any blocks that no longer have anything pointing to them. Although this greatly reduces, or even eliminates, memory errors, GC systems are relatively slow compared to manual memory management[citation needed], and have unpredictable performance that makes them unsuited to systems programming. Another solution is automatic reference counting (ARC), which implements the same basic concept of identifying blocks of disused memory, but does so at pointer creation and destruction time by maintaining the number of pointers to a block, meaning there is no need to perform exhaustive pointer searches, which are rendered unnecessary at the cost of adding reference counter adjustment overhead to every pointer creation and destruction operation. Zig aims to provide performance similar to or better than C, so GC and ARC are not suitable solutions. Instead, it uses a modern, as of 2022[update], concept known as option types. Instead of a pointer being allowed to point to nothing, or nil, a separate type is used to indicate data that is optionally empty. This is similar to using a structure with a pointer and a boolean that indicates whether the pointer is valid, but the state of the boolean is invisibly managed by the language and does not need to be explicitly managed by the programmer. So, for instance, when the pointer is declared it is set to unallocated, and when that pointer receives a value from a malloc, it is set to allocated if the malloc succeeded. The advantage to this model is that it has very low or zero overhead; the compiler has to create the code to pass along the optional type when pointers are manipulated, as opposed to a simple pointer, but this allows it to directly express possible memory problems at compile time with no runtime support. For instance, creating a pointer with a null value and then attempting to use it is perfectly acceptable in C, leading to null-pointer errors. In contrast, a language using optional types can check that all code paths only attempt to use pointers when they are valid. While this does not eliminate all potential problems, when issues do occur at runtime the error can be more precisely located and explained. Another change for memory management in Zig is that the actual allocation is handled through structs describing the action, as opposed to calling the memory management functions in libc. For instance, in C if one wants to write a function that makes a string containing multiple copies of another string, the function might look like this: const char* repeat(const char* original, size_t times); In the code, the function would examine the size of original and then malloc times that length to set aside memory for the string it will build. That malloc is invisible to the functions calling it, if they fail to later release the memory, a leak will occur. In Zig, this might be handled using a function like: fn repeat(allocator: std.mem.Allocator, original: []const u8, times: usize) std.mem.Allocator.Error![]const u8; In this code, the allocator variable is passed a struct that describes what code should perform the allocation, and the repeat function returns either the resulting string or, using the optional type as indicated by the !, an Allocator.Error. By directly expressing the allocator as an input, memory allocation is never hidden within another function, it is always exposed to the API by the function that is ultimately calling for the memory to be allocated. No allocations are performed inside Zig’s standard library. Further, as the struct can point to anything, one can use alternative allocators, even ones written in the program. This can allow, for instance, small-object allocators that do not use the operating system functions that normally allocate an entire memory page. Optional types are an example of a language feature that offers general functionality while still being simple and generic. They do not have to be used to solve null pointer problems, they are also useful for any type of value where no value is an appropriate answer. Consider a function countTheNumberOfUsers that returns an integer, and an integer variable, theCountedUsers that holds the result. In many languages, a magic number would be placed in theCountedUsers to indicate that countTheNumberOfUsers has not yet been called, while many implementations would just set it to zero. In Zig, this could be implemented as an var theCountedUsers: ?i32 = null which sets the variable to a clear not been called value. Another more general feature of Zig that also helps manage memory problems is the concept of defer, which marks some code to be performed at the end of a function no matter what happens, including possible runtime errors. If a particular function allocates some memory and then disposes of it when the operation is complete, one can add a line to defer a free to ensure it is released no matter what happens. Zig memory management avoids hidden allocations. Allocation is not managed in the language directly. Instead, heap access is done via the standard library, explicitly. Zig promotes a gradual approach to portability that combines new Zig code with existing C code. To do this, it aims to make interaction with existing C libraries as seamless as possible. Zig imports its own libraries with the @import directive, typically in this fashion: const std = @import(std); Zig code within that file can now call functions inside std, for instance: std.debug.print(Hello, world!\\n, .{}); To work with C code, one simply replaces the @import with @cImport: const c = @cImport(@cInclude(soundio/soundio.h)); The Zig code can now call functions in the soundio library as if they were native Zig code. As Zig uses new data types that are explicitly defined, unlike C’s more generic int and float, a small number of directives are used to move data between the C and Zig types, including @intCast and @ptrCast. By using the comptime keyword, the programmer can explicitly have Zig evaluate sections of code at compile time, as opposed to runtime. Being able to run code at compile time allows Zig to have the functionality of macros and conditional compilation without the need for a separate preprocessor language. During compile time, types become first-class citizens. This enables compile-time duck typing, and is how Zig implements generic types. For instance, in Zig, a generic linked list type might be implemented using a function like: fn LinkedList(comptime T: type) type; This function takes in some type T, and returns a custom struct defining a linked list with that data type. Zig also includes a C and C++ compiler, and can be used with either or both languages by leveraging with the commands zig cc and zig c++, providing many headers including the C standard library (libc) and C++ Standard Library (libcxx) for many different platforms. This allows Zig’s cc and c++ sub-commands to act as cross compilers out of the box (similarly to Clang). Zig treats cross-compiling as a first-class use-case of the language. This means any Zig compiler can compile runnable binaries for any of its target platforms, of which there are dozens. These include not only widely-used modern systems like ARM and x86-64, but also PowerPC, SPARC, MIPS, RISC-V, LoongArch64 and even the IBM z/Architectures (S390). The toolchain can compile to any of these targets without installing additional software, all the needed support is in the basic system. The experimental support is also provided for less known platforms like AMD and Nvidia GPUs or PlayStation 4 and 5 (with various degree of support). Cross-compilation is also available for variety of the operating systems (mostly desktop ones). Popular UNIX-like ones and Windows are officially supported (and documented), but (minimal) applications can and have been made for Android (with Android NDK) or iOS. Zig uses LLVM (written in C++) as a backend for optimization. Since version 0.10 the Zig compiler is written in the Zig programming language, i.e., it is a self-hosting compiler. The self-hosted linker is tightly coupled with the self-hosted compiler. The LLVM backend is the default for most targets, except for SPIR-V. Zig also supports their self-hosted backend which can be enabled by using -fno-llvm. Version 0.11.0 bundles an experimental package manager, but no official package repository is available. Instead a package is simply a URL that points to a compressed file, or a Git repository. Each package ideally includes a standard build.zig file (that the Zig compiler uses by convention to compile the source code) and a build.zig.zon file containing metadata with name and version of the package. const std = @import(std); pub fn main() !void { const stdout = std.io.getStdOut().writer(); try stdout.print(Hello, {s}!\\n, .{world}); } const std = @import(std); const stdout = std.io.getStdOut().writer(); fn LinkedList(comptime T: type) type { return struct { const Self = @This(); pub const Node = struct { next: ?*Node = null, data: T, }; first: ?*Node = null, pub fn prepend( list: *Self, new_node: *Node, ) void { new_node.next = list.first; list.first = new_node; } pub fn format( list: Self, comptime fmt: []const u8, options: std.fmt.FormatOptions, out_stream: anytype, ) !void { try out_stream.writeAll(( ); var it = list.first; while (it) |node| : (it = node.next) { try std.fmt.formatType( node.data, fmt, options, out_stream, 1, ); try out_stream.writeAll( ); } try out_stream.writeAll()); } }; } pub fn main() !void { const ListU32 = LinkedList(u32); var list = ListU32{}; var node1 = ListU32.Node{ .data = 1 }; var node2 = ListU32.Node{ .data = 2 }; var node3 = ListU32.Node{ .data = 3 }; list.prepend(&node1); list.prepend(&node2); list.prepend(&node3); try stdout.print({}\\n, .{list}); try stdout.print({b}\\n, .{list}); } Output ( 3 2 1 ) ( 11 10 1 ) const std = @import(std); fn repeat( allocator: std.mem.Allocator, original: []const u8, times: usize, ) std.mem.Allocator.Error![]const u8 { var buffer = try allocator.alloc( u8, original.len * times, ); for (0..times) |i| { std.mem.copyForwards( u8, buffer[(original.len * i)..], original, ); } return buffer; } pub fn main() !void { const stdout = std.io.getStdOut().writer(); var arena = std.heap.ArenaAllocator.init( std.heap.page_allocator, ); defer arena.deinit(); const allocator = arena.allocator(); const original = Hello ; const repeated = try repeat( allocator, original, 3, ); try stdout.print({s}\\n, .{repeated}); } Output Hello Hello Hello The name “Zig” was reportedly chosen through a process involving a Python script that randomly combined letters, starting with the letter “Z” and followed by a vowel or “Y”, in order to generate four-letter words. Despite the intended length, “Zig”, a three-letter word, was ultimately selected from the various combinations produced by the script. The previous bootstrapping compiler, written in Zig and C++ using LLVM as a back-end, supporting many of its native targets, was removed in version 0.11. Newer versions of Zig use a prebuilt WebAssembly version of Zig to bootstrap itself. Bun is a JavaScript and TypeScript runtime written in Zig, using Safari’s JavaScriptCore virtual machine. Ghostty is a terminal emulator written in Zig. The TigerBeetle financial transaction database is written in Zig. Deecy, an up-and-coming (latest release as of this writing is version 0.3.0) emulator of Sega's Dreamcast home video gaming console platform, completely written in Zig from scratch. See a more comprehensive list of companies and projects utilizing Zig in production. Free and open-source software portalComputer programming portal C C++ D Nim Go Rust Carbon V ^ Kelley, Andrew. Introduction to the Zig Programming Language. andrewkelley.me. Retrieved 8 November 2020. ^ Release 0.14.0. Retrieved 9 March 2025. ^ What are the pros and cons of Zig vs Rust? I see Zig mentioned more and more her... | Hacker News. ^ Why Zig when There is Already C++, D, and Rust? ⚡ Zig Programming Language. ^ No surprises on any system: Q&A with Loris Cro of Zig - Stack Overflow. 2 October 2023. ^ Zig's New Relationship with LLVM | Hacker News. ^ What's Zig got that C, Rust and Go don't have? (With Loris Cro). YouTube. 15 November 2023. ^ https://news.ycombinator.com/item?id=25797025 ^ Overview ⚡ Zig Programming Language. ^ After a day of programming in Zig. 29 December 2023. ^ Home ⚡ Zig Programming Language. ziglang.org. Retrieved 2024-12-31. ^ Taking the warts off C, with Andrew Kelley, creator of the Zig programming language. Sourcegraph. 2021-10-19. Retrieved 2024-04-18. ^ ziglang/zig. GitHub. Retrieved 2020-02-11. ^ a b The Road to Zig 1.0 - Andrew Kelley. ChariotSolutions. 2019-05-09 – via YouTube. ^ The Zig Programming Language. Ziglang.org. Retrieved 2020-02-11. ^ Zig programming language. SudoNull. Retrieved 2020-02-11. ^ a b c d Yegulalp 2016. ^ Zig has all the elegant simplicity of C, minus all the ways to shoot yourself in the foot. JAXenter. 2017-10-31. Archived from the original on 2017-11-01. Retrieved 2020-02-11. ^ a b c The Zig Programming Language. Ziglang.org. Retrieved 2020-02-11. ^ Anderson, Tim (2020-04-24). Keen to go _ExtInt? LLVM Clang compiler adds support for custom width integers. www.theregister.co.uk. Retrieved 2024-12-30. ^ a b Documentation. Ziglang.org. Retrieved 2020-04-24. ^ a b c d Chigozie, Oduah (2024-06-04). Comparing Rust vs. Zig: Performance, Safety, and More. LogRocket Blog. Retrieved 2024-07-16. ^ Jakub Konka on Twitter. Twitter. Archived from the original on 2022-04-10. Retrieved 2021-05-28. ^ Announcing the Zig Software Foundation. Ziglang.org. Retrieved 2021-05-28. ^ Sponsor ZSF. Ziglang.org. Retrieved 2021-05-28. ^ a b Kavanagh, Amanda (June 25, 2024). Why Zig has become the highest-paying programming language. The Next Web. Retrieved Dec 15, 2024. ^ McBride, Aoibhinn (July 16, 2024). 3 programming languages you need to know about. VentureBeat. Retrieved Dec 15, 2024. ^ Elizabeth 2017. ^ a b ARC vs. GC. Elements. ^ Guide To Java 8 Optional. 28 November 2022. ^ Rust: Memory Management. ^ a b c d e Allocators. 11 September 2023. ^ Tyson, Matthew (9 March 2023). Meet Zig: The modern alternative to C. InfoWorld.com. ^ 0.6.0 Release Notes. Ziglang.org. Retrieved 2020-04-19. ^ 'zig cc': a Powerful Drop-In Replacement for GCC/Clang - Andrew Kelley. andrewkelley.me. Retrieved 2021-05-28. ^ Zig Makes Go Cross Compilation Just Work. DEV Community. 24 January 2021. Retrieved 2021-05-28. ^ andrewrk (2024-03-13). origin of the zig programming language name. by @andrewrk. Retrieved 2024-03-13. ^ A Reply to _The Road to Zig 1.0_. www.gingerbill.org. 2019-05-13. Retrieved 2020-02-11. ^ ziglang/zig. GitHub. Zig Programming Language. 2020-02-11. Retrieved 2020-02-11. ^ The Zig Programming Language. Ziglang.org. Retrieved 2020-02-11. ^ ghostty-org/ghostty. Github. Retrieved 2024-12-27. ^ tigerbeetle/tigerbeetle. Github. Retrieved 2024-12-30. Elizabeth, Jane (2017-10-19). Tired of C? New programming language Zig aims to be more pragmatic and readable. jaxenter. Archived from the original on 2020-10-01. Retrieved 2020-04-22. Yegulalp, Serdar (2016-08-29). New challenger joins Rust to topple C language. InfoWorld. Retrieved 2020-02-11. Owens, Jeffery (2023-12-02). Mastering Zig Programming. Independently Published. ISBN 979-8870587332. Allen, Corby (2024-06-20). Zig Programming Mastery. Independently Published. ISBN 979-8329021424. Official website Zig on GitHub Movie: Introducing Zig Movie: The Road to 1.0 Zig Weekly vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category",
    "paradigm": "Multi-paradigm : imperative , concurrent , procedural , functional",
    "first_appeared": "8 February 2016 ; 9 years ago ( 2016-02-08 )",
    "stable_release": "0.14.1",
    "typing_discipline": "Static , strong , inferred , structural , generic",
    "influenced_by": "C , C++ , LLVM IR , Go , Rust",
    "stable_release_date": "2025-05-21T00:00:00Z"
  },
  {
    "title": "Scala (programming language)",
    "url": "https://en.wikipedia.org/wiki/Scala_(programming_language)",
    "history": "The design of Scala started in 2001 at the École Polytechnique Fédérale de Lausanne (EPFL) (in Lausanne, Switzerland) by Martin Odersky. It followed on from work on Funnel, a programming language combining ideas from functional programming and Petri nets. Odersky formerly worked on Generic Java, and javac, Sun's Java compiler. After an internal release in late 2003, Scala was released publicly in early 2004 on the Java platform, A second version (v2.0) followed in March 2006. On 17 January 2011, the Scala team won a five-year research grant of over €2.3 million from the European Research Council. On 12 May 2011, Odersky and collaborators launched Typesafe Inc. (later renamed Lightbend Inc.), a company to provide commercial support, training, and services for Scala. Typesafe received a $3 million investment in 2011 from Greylock Partners.",
    "platforms_and_license": "Scala runs on the Java platform (Java virtual machine) and is compatible with existing Java programs. As Android applications are typically written in Java and translated from Java bytecode into Dalvik bytecode (which may be further translated to native machine code during installation) when packaged, Scala's Java compatibility makes it well-suited to Android development, the more so when a functional approach is preferred. The reference Scala software distribution, including compiler and libraries, is released under the Apache license.",
    "other_compilers_and_targets": "Scala.js is a Scala compiler that compiles to JavaScript, making it possible to write Scala programs that can run in web browsers or Node.js. The compiler, in development since 2013, was announced as no longer experimental in 2015 (v0.6). Version v1.0.0-M1 was released in June 2018 and version 1.1.1 in September 2020. Scala Native is a Scala compiler that targets the LLVM compiler infrastructure to create executable code that uses a lightweight managed runtime, which uses the Boehm garbage collector. The project is led by Denys Shabalin and had its first release, 0.1, on 14 March 2017. Development of Scala Native began in 2015 with a goal of being faster than just-in-time compilation for the JVM by eliminating the initial runtime compilation of code and also providing the ability to call native routines directly. A reference Scala compiler targeting the .NET Framework and its Common Language Runtime was released in June 2004, but was officially dropped in 2012.",
    "basic_example": "The following example shows the differences between Java and Scala syntax. The function mathFunction takes an integer, squares it, and then adds the cube root of that number to the natural log of that number, returning the result (i.e., n 2 / 3 + ln ⁡ ( n 2 ) {\\displaystyle n^{2/3}+\\ln(n^{2})} ): // Java: int mathFunction(int num) { int numSquare = num*num; return (int) (Math.cbrt(numSquare) + Math.log(numSquare)); } // Scala: Direct conversion from Java // no import needed; scala.math // already imported as `math` def mathFunction(num: Int): Int = var numSquare: Int = num*num return (math.cbrt(numSquare) + math.log(numSquare)). asInstanceOf[Int] // Scala: More idiomatic // Uses type inference, omits `return` statement, // uses `toInt` method, declares numSquare immutable import math.* def mathFunction(num: Int) = val numSquare = num*num (cbrt(numSquare) + log(numSquare)).toInt Some syntactic differences in this code are: Scala does not require semicolons (;) to end statements. Value types are capitalized (sentence case): Int, Double, Boolean instead of int, double, boolean. Parameter and return types follow, as in Pascal, rather than precede as in C. Methods must be preceded by def. Local or class variables must be preceded by val (indicates an immutable variable) or var (indicates a mutable variable). The return operator is unnecessary in a function (although allowed); the value of the last executed statement or expression is normally the function's value. Instead of the Java cast operator (Type) foo, Scala uses foo.asInstanceOf[Type], or a specialized function such as toDouble or toInt. Function or method foo() can also be called as just foo; method thread.send(signo) can also be called as just thread send signo; and method foo.toString() can also be called as just foo toString. These syntactic relaxations are designed to allow support for domain-specific languages. Some other basic syntactic differences: Array references are written like function calls, e.g. array(i) rather than array[i]. (Internally in Scala, the former expands into array.apply(i) which returns the reference) Generic types are written as e.g. List[String] rather than Java's List<String>. Instead of the pseudo-type void, Scala has the actual singleton class Unit (see below).",
    "example_with_classes": "The following example contrasts the definition of classes in Java and Scala. // Java: public class Point { private double x, y; public Point(double x, double y) { this.x = x; this.y = y; } public Point(double x, double y, boolean addToGrid) { this(x, y); if (addToGrid) grid.addPoint(this); } public Point() { this(0.0, 0.0); } private void addPoint(Point p) { x += p.x; y += p.y; } public double getX() { return x; } public double getY() { return y; } double distanceToPoint(Point other) { return distanceBetweenPoints(x, y, other.x, other.y); } private static Point grid = new Point(); static double distanceBetweenPoints( double x1, double y1, double x2, double y2) { return Math.hypot(x1 - x2, y1 - y2); } } // Scala class Point( var x: Double, var y: Double, addToGrid: Boolean = false ): import Point.* def += (p: Point) = x += p.x y += p.y if (addToGrid) grid += this def this() = this(0.0, 0.0) def distanceToPoint(other: Point) = distanceBetweenPoints(x, y, other.x, other.y) end Point object Point: private val grid = new Point() def distanceBetweenPoints(x1: Double, y1: Double, x2: Double, y2: Double) = math.hypot(x1 - x2, y1 - y2) The code above shows some of the conceptual differences between Java and Scala's handling of classes: Scala has no static variables or methods. Instead, it has singleton objects, which are essentially classes with only one instance. Singleton objects are declared using object instead of class. It is common to place static variables and methods in a singleton object with the same name as the class name, which is then known as a companion object. (The underlying class for the singleton object has a $ appended. Hence, for class Foo with companion object object Foo, under the hood there's a class Foo$ containing the companion object's code, and one object of this class is created, using the singleton pattern.) In place of constructor parameters, Scala has class parameters, which are placed on the class, similar to parameters to a function. When declared with a val or var modifier, fields are also defined with the same name, and automatically initialized from the class parameters. (Under the hood, external access to public fields always goes through accessor (getter) and mutator (setter) methods, which are automatically created. The accessor function has the same name as the field, which is why it's unnecessary in the above example to explicitly declare accessor methods.) Note that alternative constructors can also be declared, as in Java. Code that would go into the default constructor (other than initializing the member variables) goes directly at class level. In Scala it is possible to define operators by using symbols as method names. In place of addPoint, the Scala example defines +=, which is then invoked with infix notation as grid += this. Default visibility in Scala is public.",
    "features_with_reference_to_java": "Scala has the same compiling model as Java and C#, namely separate compiling and dynamic class loading, so that Scala code can call Java libraries. Scala's operational characteristics are the same as Java's. The Scala compiler generates byte code that is nearly identical to that generated by the Java compiler. In fact, Scala code can be decompiled to readable Java code, with the exception of certain constructor operations. To the Java virtual machine (JVM), Scala code and Java code are indistinguishable. The only difference is one extra runtime library, scala-library.jar. Scala adds a large number of features compared with Java, and has some fundamental differences in its underlying model of expressions and types, which make the language theoretically cleaner and eliminate several corner cases in Java. From the Scala perspective, this is practically important because several added features in Scala are also available in C#.",
    "syntactic_flexibility": "As mentioned above, Scala has a good deal of syntactic flexibility, compared with Java. The following are some examples: Semicolons are unnecessary; lines are automatically joined if they begin or end with a token that cannot normally come in this position, or if there are unclosed parentheses or brackets. Any method can be used as an infix operator, e.g. %d apples.format(num) and %d apples format num are equivalent. In fact, arithmetic operators like + and << are treated just like any other methods, since function names are allowed to consist of sequences of arbitrary symbols (with a few exceptions made for things like parens, brackets and braces that must be handled specially); the only special treatment that such symbol-named methods undergo concerns the handling of precedence. Methods apply and update have syntactic short forms. foo()—where foo is a value (singleton object or class instance)—is short for foo.apply(), and foo() = 42 is short for foo.update(42). Similarly, foo(42) is short for foo.apply(42), and foo(4) = 2 is short for foo.update(4, 2). This is used for collection classes and extends to many other cases, such as STM cells. Scala distinguishes between no-parens (def foo = 42) and empty-parens (def foo() = 42) methods. When calling an empty-parens method, the parentheses may be omitted, which is useful when calling into Java libraries that do not know this distinction, e.g., using foo.toString instead of foo.toString(). By convention, a method should be defined with empty-parens when it performs side effects. Method names ending in colon (:) expect the argument on the left-hand-side and the receiver on the right-hand-side. For example, the 4 :: 2 :: Nil is the same as Nil.::(2).::(4), the first form corresponding visually to the result (a list with first element 4 and second element 2). Class body variables can be transparently implemented as separate getter and setter methods. For trait FooLike { var bar: Int }, an implementation may be object Foo extends FooLike { private var x = 0; def bar = x; def bar_=(value: Int) { x = value }} } }. The call site will still be able to use a concise foo.bar = 42. The use of curly braces instead of parentheses is allowed in method calls. This allows pure library implementations of new control structures. For example, breakable { ... if (...) break() ... } looks as if breakable was a language defined keyword, but really is just a method taking a thunk argument. Methods that take thunks or functions often place these in a second parameter list, allowing to mix parentheses and curly braces syntax: Vector.fill(4) { math.random } is the same as Vector.fill(4)(math.random). The curly braces variant allows the expression to span multiple lines. For-expressions (explained further down) can accommodate any type that defines monadic methods such as map, flatMap and filter. By themselves, these may seem like questionable choices, but collectively they serve the purpose of allowing domain-specific languages to be defined in Scala without needing to extend the compiler. For example, Erlang's special syntax for sending a message to an actor, i.e. actor ! message can be (and is) implemented in a Scala library without needing language extensions.",
    "unified_type_system": "Java makes a sharp distinction between primitive types (e.g. int and boolean) and reference types (any class). Only reference types are part of the inheritance scheme, deriving from java.lang.Object. In Scala, all types inherit from a top-level class Any, whose immediate children are AnyVal (value types, such as Int and Boolean) and AnyRef (reference types, as in Java). This means that the Java distinction between primitive types and boxed types (e.g. int vs. Integer) is not present in Scala; boxing and unboxing is completely transparent to the user. Scala 2.10 allows for new value types to be defined by the user.",
    "for_expressions": "Instead of the Java foreach loops for looping through an iterator, Scala has for-expressions, which are similar to list comprehensions in languages such as Haskell, or a combination of list comprehensions and generator expressions in Python. For-expressions using the yield keyword allow a new collection to be generated by iterating over an existing one, returning a new collection of the same type. They are translated by the compiler into a series of map, flatMap and filter calls. Where yield is not used, the code approximates to an imperative-style loop, by translating to foreach. A simple example is: val s = for (x <- 1 to 25 if x*x > 50) yield 2*x The result of running it is the following vector: Vector(16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50) (Note that the expression 1 to 25 is not special syntax. The method to is rather defined in the standard Scala library as an extension method on integers, using a technique known as implicit conversions that allows new methods to be added to existing types.) A more complex example of iterating over a map is: // Given a map specifying Twitter users mentioned in a set of tweets, // and number of times each user was mentioned, look up the users // in a map of known politicians, and return a new map giving only the // Democratic politicians (as objects, rather than strings). val dem_mentions = for (mention, times) <- mentions account <- accounts.get(mention) if account.party == Democratic yield (account, times) Expression (mention, times) <- mentions is an example of pattern matching (see below). Iterating over a map returns a set of key-value tuples, and pattern-matching allows the tuples to easily be destructured into separate variables for the key and value. Similarly, the result of the comprehension also returns key-value tuples, which are automatically built back up into a map because the source object (from the variable mentions) is a map. Note that if mentions instead held a list, set, array or other collection of tuples, exactly the same code above would yield a new collection of the same type.",
    "functional_tendencies": "While supporting all of the object-oriented features available in Java (and in fact, augmenting them in various ways), Scala also provides a large number of capabilities that are normally found only in functional programming languages. Together, these features allow Scala programs to be written in an almost completely functional style and also allow functional and object-oriented styles to be mixed. Examples are: No distinction between statements and expressions Type inference Anonymous functions with capturing semantics (i.e., closures) Immutable variables and objects Lazy evaluation Delimited continuations (since 2.8) Higher-order functions Nested functions Currying Pattern matching Algebraic data types (through case classes) Tuples",
    "everything_is_an_expression": "Unlike C or Java, but similar to languages such as Lisp, Scala makes no distinction between statements and expressions. All statements are in fact expressions that evaluate to some value. Functions that would be declared as returning void in C or Java, and statements like while that logically do not return a value, are in Scala considered to return the type Unit, which is a singleton type, with only one object of that type. Functions and operators that never return at all (e.g. the throw operator or a function that always exits non-locally using an exception) logically have return type Nothing, a special type containing no objects; that is, a bottom type, i.e. a subclass of every possible type. (This in turn makes type Nothing compatible with every type, allowing type inference to function correctly.) Similarly, an if-then-else statement is actually an expression, which produces a value, i.e. the result of evaluating one of the two branches. This means that such a block of code can be inserted wherever an expression is desired, obviating the need for a ternary operator in Scala: // Java: char hexDigit = (char)(x >= 10 ? x + 'A' - 10 : x + '0'); // Scala: val hexDigit = (if x >= 10 then x + 'A' - 10 else x + '0').toChar For similar reasons, return statements are unnecessary in Scala, and in fact are discouraged. As in Lisp, the last expression in a block of code is the value of that block of code, and if the block of code is the body of a function, it will be returned by the function. To make it clear that all functions are expressions, even methods that return Unit are written with an equals sign def printValue(x: String): Unit = println(I ate a %s.format(x)) or equivalently (with type inference, and omitting the unnecessary newline): def printValue(x: String) = println(I ate a %s format x)",
    "type_inference": "Due to type inference, the type of variables, function return values, and many other expressions can typically be omitted, as the compiler can deduce it. Examples are val x = foo (for an immutable constant or immutable object) or var x = 1.5 (for a variable whose value can later be changed). Type inference in Scala is essentially local, in contrast to the more global Hindley-Milner algorithm used in Haskell, ML and other more purely functional languages. This is done to facilitate object-oriented programming. The result is that certain types still need to be declared (most notably, function parameters, and the return types of recursive functions), e.g. def formatApples(x: Int) = I ate %d apples.format(x) or (with a return type declared for a recursive function) def factorial(x: Int): Int = if x == 0 then 1 else x * factorial(x - 1)",
    "anonymous_functions": "In Scala, functions are objects, and a convenient syntax exists for specifying anonymous functions. An example is the expression x => x < 2, which specifies a function with one parameter, that compares its argument to see if it is less than 2. It is equivalent to the Lisp form (lambda (x) (< x 2)). Note that neither the type of x nor the return type need be explicitly specified, and can generally be inferred by type inference; but they can be explicitly specified, e.g. as (x: Int) => x < 2 or even (x: Int) => (x < 2): Boolean. Anonymous functions behave as true closures in that they automatically capture any variables that are lexically available in the environment of the enclosing function. Those variables will be available even after the enclosing function returns, and unlike in the case of Java's anonymous inner classes do not need to be declared as final. (It is even possible to modify such variables if they are mutable, and the modified value will be available the next time the anonymous function is called.) An even shorter form of anonymous function uses placeholder variables: For example, the following: list map { x => sqrt(x) } can be written more concisely as list map { sqrt(_) } or even list map sqrt",
    "immutability": "Scala enforces a distinction between immutable and mutable variables. Mutable variables are declared using the var keyword and immutable values are declared using the val keyword. A variable declared using the val keyword cannot be reassigned in the same way that a variable declared using the final keyword can't be reassigned in Java. vals are only shallowly immutable, that is, an object referenced by a val is not guaranteed to itself be immutable. Immutable classes are encouraged by convention however, and the Scala standard library provides a rich set of immutable collection classes. Scala provides mutable and immutable variants of most collection classes, and the immutable version is always used unless the mutable version is explicitly imported. The immutable variants are persistent data structures that always return an updated copy of an old object instead of updating the old object destructively in place. An example of this is immutable linked lists where prepending an element to a list is done by returning a new list node consisting of the element and a reference to the list tail. Appending an element to a list can only be done by prepending all elements in the old list to a new list with only the new element. In the same way, inserting an element in the middle of a list will copy the first half of the list, but keep a reference to the second half of the list. This is called structural sharing. This allows for very easy concurrency — no locks are needed as no shared objects are ever modified.",
    "lazy_non_strict_evaluation": "Evaluation is strict (eager) by default. In other words, Scala evaluates expressions as soon as they are available, rather than as needed. However, it is possible to declare a variable non-strict (lazy) with the lazy keyword, meaning that the code to produce the variable's value will not be evaluated until the first time the variable is referenced. Non-strict collections of various types also exist (such as the type Stream, a non-strict linked list), and any collection can be made non-strict with the view method. Non-strict collections provide a good semantic fit to things like server-produced data, where the evaluation of the code to generate later elements of a list (that in turn triggers a request to a server, possibly located somewhere else on the web) only happens when the elements are actually needed.",
    "tail_recursion": "Functional programming languages commonly provide tail call optimization to allow for extensive use of recursion without stack overflow problems. Limitations in Java bytecode complicate tail call optimization on the JVM. In general, a function that calls itself with a tail call can be optimized, but mutually recursive functions cannot. Trampolines have been suggested as a workaround. Trampoline support has been provided by the Scala library with the object scala.util.control.TailCalls since Scala 2.8.0 (released 14 July 2010). A function may optionally be annotated with @tailrec, in which case it will not compile unless it is tail recursive. An example of this optimization could be implemented using the factorial definition. For instance, the recursive version of the factorial: def factorial(n: Int): Int = if n == 0 then 1 else n * factorial(n - 1) Could be optimized to the tail recursive version like this: @tailrec def factorial(n: Int, accum: Int): Int = if n == 0 then accum else factorial(n - 1, n * accum) However, this could compromise composability with other functions because of the new argument on its definition, so it is common to use closures to preserve its original signature: def factorial(n: Int): Int = @tailrec def loop(current: Int, accum: Int): Int = if n == 0 then accum else loop(current - 1, n * accum) loop(n, 1) // Call to the closure using the base case end factorial This ensures tail call optimization and thus prevents a stack overflow error.",
    "case_classes_and_pattern_matching": "Scala has built-in support for pattern matching, which can be thought of as a more sophisticated, extensible version of a switch statement, where arbitrary data types can be matched (rather than just simple types like integers, Booleans and strings), including arbitrary nesting. A special type of class known as a case class is provided, which includes automatic support for pattern matching and can be used to model the algebraic data types used in many functional programming languages. (From the perspective of Scala, a case class is simply a normal class for which the compiler automatically adds certain behaviors that could also be provided manually, e.g., definitions of methods providing for deep comparisons and hashing, and destructuring a case class on its constructor parameters during pattern matching.) An example of a definition of the quicksort algorithm using pattern matching is this: def qsort(list: List[Int]): List[Int] = list match case Nil => Nil case pivot :: tail => val (smaller, rest) = tail.partition(_ < pivot) qsort(smaller) ::: pivot :: qsort(rest) The idea here is that we partition a list into the elements less than a pivot and the elements not less, recursively sort each part, and paste the results together with the pivot in between. This uses the same divide-and-conquer strategy of mergesort and other fast sorting algorithms. The match operator is used to do pattern matching on the object stored in list. Each case expression is tried in turn to see if it will match, and the first match determines the result. In this case, Nil only matches the literal object Nil, but pivot :: tail matches a non-empty list, and simultaneously destructures the list according to the pattern given. In this case, the associated code will have access to a local variable named pivot holding the head of the list, and another variable tail holding the tail of the list. Note that these variables are read-only, and are semantically very similar to variable bindings established using the let operator in Lisp and Scheme. Pattern matching also happens in local variable declarations. In this case, the return value of the call to tail.partition is a tuple — in this case, two lists. (Tuples differ from other types of containers, e.g. lists, in that they are always of fixed size and the elements can be of differing types — although here they are both the same.) Pattern matching is the easiest way of fetching the two parts of the tuple. The form _ < pivot is a declaration of an anonymous function with a placeholder variable; see the section above on anonymous functions. The list operators :: (which adds an element onto the beginning of a list, similar to cons in Lisp and Scheme) and ::: (which appends two lists together, similar to append in Lisp and Scheme) both appear. Despite appearances, there is nothing built-in about either of these operators. As specified above, any string of symbols can serve as function name, and a method applied to an object can be written infix-style without the period or parentheses. The line above as written: qsort(smaller) ::: pivot :: qsort(rest) could also be written thus: qsort(rest).::(pivot).:::(qsort(smaller)) in more standard method-call notation. (Methods that end with a colon are right-associative and bind to the object to the right.)",
    "partial_functions": "In the pattern-matching example above, the body of the match operator is a partial function, which consists of a series of case expressions, with the first matching expression prevailing, similar to the body of a switch statement. Partial functions are also used in the exception-handling portion of a try statement: try ... catch case nfe: NumberFormatException => { println(nfe); List(0) } case _ => Nil Finally, a partial function can be used alone, and the result of calling it is equivalent to doing a match over it. For example, the prior code for quicksort can be written thus: val qsort: List[Int] => List[Int] = case Nil => Nil case pivot :: tail => val (smaller, rest) = tail.partition(_ < pivot) qsort(smaller) ::: pivot :: qsort(rest) Here a read-only variable is declared whose type is a function from lists of integers to lists of integers, and bind it to a partial function. (Note that the single parameter of the partial function is never explicitly declared or named.) However, we can still call this variable exactly as if it were a normal function: scala> qsort(List(6,2,5,9)) res32: List[Int] = List(2, 5, 6, 9)",
    "object_oriented_extensions": "Scala is a pure object-oriented language in the sense that every value is an object. Data types and behaviors of objects are described by classes and traits. Class abstractions are extended by subclassing and by a flexible mixin-based composition mechanism to avoid the problems of multiple inheritance. Traits are Scala's replacement for Java's interfaces. Interfaces in Java versions under 8 are highly restricted, able only to contain abstract function declarations. This has led to criticism that providing convenience methods in interfaces is awkward (the same methods must be reimplemented in every implementation), and extending a published interface in a backwards-compatible way is impossible. Traits are similar to mixin classes in that they have nearly all the power of a regular abstract class, lacking only class parameters (Scala's equivalent to Java's constructor parameters), since traits are always mixed in with a class. The super operator behaves specially in traits, allowing traits to be chained using composition in addition to inheritance. The following example is a simple window system: abstract class Window: // abstract def draw() class SimpleWindow extends Window: def draw() println(in SimpleWindow) // draw a basic window trait WindowDecoration extends Window trait HorizontalScrollbarDecoration extends WindowDecoration: // abstract override is needed here for super() to work because the parent // function is abstract. If it were concrete, regular override would be enough. abstract override def draw() println(in HorizontalScrollbarDecoration) super.draw() // now draw a horizontal scrollbar trait VerticalScrollbarDecoration extends WindowDecoration: abstract override def draw() println(in VerticalScrollbarDecoration) super.draw() // now draw a vertical scrollbar trait TitleDecoration extends WindowDecoration: abstract override def draw() println(in TitleDecoration) super.draw() // now draw the title bar A variable may be declared thus: val mywin = new SimpleWindow with VerticalScrollbarDecoration with HorizontalScrollbarDecoration with TitleDecoration The result of calling mywin.draw() is: in TitleDecoration in HorizontalScrollbarDecoration in VerticalScrollbarDecoration in SimpleWindow In other words, the call to draw first executed the code in TitleDecoration (the last trait mixed in), then (through the super() calls) threaded back through the other mixed-in traits and eventually to the code in Window, even though none of the traits inherited from one another. This is similar to the decorator pattern, but is more concise and less error-prone, as it doesn't require explicitly encapsulating the parent window, explicitly forwarding functions whose implementation isn't changed, or relying on run-time initialization of entity relationships. In other languages, a similar effect could be achieved at compile-time with a long linear chain of implementation inheritance, but with the disadvantage compared to Scala that one linear inheritance chain would have to be declared for each possible combination of the mix-ins.",
    "expressive_type_system": "Scala is equipped with an expressive static type system that mostly enforces the safe and coherent use of abstractions. The type system is, however, not sound. In particular, the type system supports: Classes and abstract types as object members Structural types Path-dependent types Compound types Explicitly typed self references Generic classes Polymorphic methods Upper and lower type bounds Variance Annotation Views Scala is able to infer types by use. This makes most static type declarations optional. Static types need not be explicitly declared unless a compiler error indicates the need. In practice, some static type declarations are included for the sake of code clarity.",
    "type_enrichment": "A common technique in Scala, known as enrich my library (originally termed pimp my library by Martin Odersky in 2006; concerns were raised about this phrasing due to its negative connotations and immaturity), allows new methods to be used as if they were added to existing types. This is similar to the C# concept of extension methods but more powerful, because the technique is not limited to adding methods and can, for instance, be used to implement new interfaces. In Scala, this technique involves declaring an implicit conversion from the type receiving the method to a new type (typically, a class) that wraps the original type and provides the additional method. If a method cannot be found for a given type, the compiler automatically searches for any applicable implicit conversions to types that provide the method in question. This technique allows new methods to be added to an existing class using an add-on library such that only code that imports the add-on library gets the new functionality, and all other code is unaffected. The following example shows the enrichment of type Int with methods isEven and isOdd: object MyExtensions: extension (i: Int) def isEven = i % 2 == 0 def isOdd = !i.isEven import MyExtensions.* // bring implicit enrichment into scope 4.isEven // -> true Importing the members of MyExtensions brings the implicit conversion to extension class IntPredicates into scope.",
    "concurrency": "Scala's standard library includes support for futures and promises, in addition to the standard Java concurrency APIs. Originally, it also included support for the actor model, which is now available as a separate source-available platform Akka licensed by Lightbend Inc. Akka actors may be distributed or combined with software transactional memory (transactors). Alternative communicating sequential processes (CSP) implementations for channel-based message passing are Communicating Scala Objects, or simply via JCSP. An Actor is like a thread instance with a mailbox. It can be created by system.actorOf, overriding the receive method to receive messages and using the ! (exclamation point) method to send a message. The following example shows an EchoServer that can receive messages and then print them. val echoServer = actor(new Act: become: case msg => println(echo  + msg) ) echoServer ! hi Scala also comes with built-in support for data-parallel programming in the form of Parallel Collections integrated into its Standard Library since version 2.9.0. The following example shows how to use Parallel Collections to improve performance. val urls = List(https://scala-lang.org, https://github.com/scala/scala) def fromURL(url: String) = scala.io.Source.fromURL(url) .getLines().mkString(\\n) val t = System.currentTimeMillis() urls.par.map(fromURL(_)) // par returns parallel implementation of a collection println(time:  + (System.currentTimeMillis - t) + ms) Besides futures and promises, actor support, and data parallelism, Scala also supports asynchronous programming with software transactional memory, and event streams.",
    "cluster_computing": "The most well-known open-source cluster-computing solution written in Scala is Apache Spark. Additionally, Apache Kafka, the publish–subscribe message queue popular with Spark and other stream processing technologies, is written in Scala.",
    "testing": "There are several ways to test code in Scala. ScalaTest supports multiple testing styles and can integrate with Java-based testing frameworks. ScalaCheck is a library similar to Haskell's QuickCheck. specs2 is a library for writing executable software specifications. ScalaMock provides support for testing high-order and curried functions. JUnit and TestNG are popular testing frameworks written in Java.",
    "versions": "Version Released Features 1.0.0-b2 8 December 2003 — 1.1.0-b1 19 February 2004 scala.Enumeration Scala license was changed to the revised BSD license 1.1.1 23 March 2004 Support for Java static inner classes Library class improvements to Iterable, Array, xml.Elem, Buffer 1.2.0 9 June 2004 Views XML literals (to be dropped in the near future, to be replaced with XML string interpolation) 1.3.0 16 September 2004 Support for Microsoft .NET Method closures Type syntax for parameterless methods changed from [] T to => T 1.4.0 20 June 2005 Attributes match keyword replaces match method Experimental support for runtime types 2.0 12 March 2006 Compiler completely rewritten in Scala Experimental support for Java generics implicit and requires keywords match keyword only allowed infix operator with connective is only allowed following an extends clause Newlines can be used as statement separators in place of semicolons Regular expression match patterns restricted to sequence patterns only For-comprehensions admit value and pattern definitions Class parameters may be prefixed by val or var Private visibility has qualifiers 2.1.0 17 March 2006 sbaz tool integrated in the Scala distribution match keyword replaces match method Experimental support for runtime types 2.1.8 23 August 2006 Protected visibility has qualifiers Private members of a class can be referenced from the companion module of the class and vice versa Implicit lookup generalised Typed pattern match tightened for singleton types 2.3.0 23 November 2006 Functions returning Unit don't have to explicitly state a return type Type variables and types are distinguished between in pattern matching All and AllRef renamed to Nothing and Null 2.4.0 9 March 2007 private and protected modifiers accept a [this] qualifier Tuples can be written with round brackets Primary constructor of a class can now be marked private or protected Attributes changed to annotations with new syntax Self aliases Operators can be combined with assignment 2.5.0 2 May 2007 Type parameters and abstract type members can also abstract over type constructors Fields of an object can be initialized before parent constructors are called Syntax change for comprehensions Implicit anonymous functions (with underscores for parameters) Pattern matching of anonymous functions extended to support any arty 2.6.0 27 July 2007 Existential types Lazy values Structural types 2.7.0 7 February 2008 Java generic types supported by default Case classes functionality extended 2.8.0 14 Jul 2010 Revision the common, uniform, and all-encompassing framework for collection types. Type specialisation Named and default arguments Package objects Improved annotations 2.9.0 12 May 2011 Parallel collections Thread safe App trait replaces Application trait DelayedInit trait Java interop improvements 2.10 4 January 2013 Value classes Implicit classes String interpolation Futures and promises Dynamic and applyDynamic Dependent method types: def identity(x: AnyRef): x.type = x // the return type says we return exactly what we got New bytecode emitter based on ASM: Can target JDK 1.5, 1.6 and 1.7 Emits 1.6 bytecode by default Old 1.5 backend is deprecated A new pattern matcher: rewritten from scratch to generate more robust code (no more exponential blow-up) code generation and analyses are now independent (the latter can be turned off with -Xno-patmat-analysis) Scaladoc improvements Implicits (-implicits flag) Diagrams (-diagrams flag, requires graphviz) Groups (-groups) Modularized language features Parallel collections are now configurable with custom thread pools Akka actors now part of the distribution scala.actors have been deprecated and the akka implementation is now included in the distribution. Performance improvements Faster inliner Range#sum is now O(1) Update of ForkJoin library Fixes in immutable TreeSet/TreeMap Improvements to PartialFunctions Addition of ??? and NotImplementedError Addition of IsTraversableOnce + IsTraversableLike type classes for extension methods Deprecations and cleanup Floating point and octal literal syntax deprecation Removed scala.dbc Experimental features Scala reflection Macros 2.10.2 6 June 2013 — 2.10.3 1 October 2013 — 2.10.4 18 March 2014 — 2.10.5 5 March 2015 — 2.11.0 21 April 2014 Collection performance improvements Compiler performance improvements 2.11.1 20 May 2014 — 2.11.2 22 July 2014 — 2.11.4 31 October 2014 — 2.11.5 8 January 2015 — 2.11.6 5 March 2015 — 2.11.7 23 June 2015 — 2.11.8 8 March 2016 — 2.11.11 18 April 2017 — 2.11.12 13 November 2017 — 2.12.0 3 November 2016 Java 8 required Java 8 bytecode generated Java 8 SAM (Functional interface) language support 2.12.1 5 December 2016 — 2.12.2 18 April 2017 — 2.12.3 26 July 2017 — 2.12.4 17 October 2017 — 2.12.5 15 March 2018 — 2.12.6 27 April 2018 — 2.12.7 27 September 2018 — 2.12.8 4 December 2018 First Scala 2.12 release with the license changed to Apache v2.0 2.12.9 5 August 2019 — 2.12.10 10 September 2019 — 2.12.11 16 March 2020 — 2.12.12 13 July 2020 — 2.12.13 12 January 2021 — 2.12.14 28 May 2021 — 2.12.15 14 Sep 2021 — 2.12.16 10 June 2022 — 2.12.17 16 September 2022 — 2.12.18 7 June 2023 — 2.12.19 25 February 2024 — 2.13.0 11 June 2019 Standard collections library redesigned Literal types Partial type unification By-name implicits Compiler optimizations 2.13.1 18 September 2019 — 2.13.2 22 April 2020 — 2.13.3 25 June 2020 — 2.13.4 19 November 2020 — 2.13.5 22 February 2021 — 2.13.6 17 May 2021 — 2.13.7 1 November 2021 — 2.13.8 12 January 2022 — 2.13.9 21 September 2022 — 2.13.10 13 October 2022 — 2.13.11 7 June 2023 — 2.13.12 11 September 2023 — 2.13.13 26 February 2024 — 2.13.14 1 May 2024 — 2.13.15 25 Sep 2024 — 3.0.0 13 May 2021 — 3.0.1 31 July 2021 — 3.0.2 7 September 2021 — 3.1.0 21 October 2021 — 3.1.1 1 February 2022 — 3.1.2 12 April 2022 — 3.1.3 21 June 2022 — 3.2.0 5 September 2022 — 3.2.1 7 November 2022 — 3.2.2 30 January 2023 — 3.3.0 30 May 2023 — 3.3.1 7 September 2023 — 3.3.2 29 February 2024 — 3.3.3 29 February 2024 — 3.4.0 29 February 2024 — 3.4.1 29 March 2024 — 3.4.2 16 May 2024 —",
    "comparison_with_other_jvm_languages": "Scala is often compared with Groovy and Clojure, two other programming languages also using the JVM. Substantial differences between these languages exist in the type system, in the extent to which each language supports object-oriented and functional programming, and in the similarity of their syntax to that of Java. Scala is statically typed, while both Groovy and Clojure are dynamically typed. This makes the type system more complex and difficult to understand but allows almost all type errors to be caught at compile-time and can result in significantly faster execution. By contrast, dynamic typing requires more testing to ensure program correctness, and thus is generally slower, to allow greater programming flexibility and simplicity. Regarding speed differences, current versions of Groovy and Clojure allow optional type annotations to help programs avoid the overhead of dynamic typing in cases where types are practically static. This overhead is further reduced when using recent versions of the JVM, which has been enhanced with an invoke dynamic instruction for methods that are defined with dynamically typed arguments. These advances reduce the speed gap between static and dynamic typing, although a statically typed language, like Scala, is still the preferred choice when execution efficiency is very important. Regarding programming paradigms, Scala inherits the object-oriented model of Java and extends it in various ways. Groovy, while also strongly object-oriented, is more focused in reducing verbosity. In Clojure, object-oriented programming is deemphasised with functional programming being the main strength of the language. Scala also has many functional programming facilities, including features found in advanced functional languages like Haskell, and tries to be agnostic between the two paradigms, letting the developer choose between the two paradigms or, more frequently, some combination thereof. Regarding syntax similarity with Java, Scala inherits much of Java's syntax, as is the case with Groovy. Clojure on the other hand follows the Lisp syntax, which is different in both appearance and philosophy.[citation needed]",
    "language_rankings": "Back in 2013, when Scala was in version 2.10, the ThoughtWorks Technology Radar, which is an opinion based biannual report of a group of senior technologists, recommended Scala adoption in its languages and frameworks category. In July 2014, this assessment was made more specific and now refers to a “Scala, the good parts”, which is described as “To successfully use Scala, you need to research the language and have a very strong opinion on which parts are right for you, creating your own definition of Scala, the good parts.”. In the 2018 edition of the State of Java survey, which collected data from 5160 developers on various Java-related topics, Scala places third in terms of use of alternative languages on the JVM. Relative to the prior year's edition of the survey, Scala's use among alternative JVM languages fell from 28.4% to 21.5%, overtaken by Kotlin, which rose from 11.4% in 2017 to 28.8% in 2018. The Popularity of Programming Language Index, which tracks searches for language tutorials, ranked Scala 15th in April 2018 with a small downward trend, and 17th in Jan 2021. This makes Scala the 3rd most popular JVM-based language after Java and Kotlin, ranked 12th. The RedMonk Programming Language Rankings, which establishes rankings based on the number of GitHub projects and questions asked on Stack Overflow, in January 2021 ranked Scala 14th. Here, Scala was placed inside a second-tier group of languages–ahead of Go, PowerShell, and Haskell, and behind Swift, Objective-C, Typescript, and R. The TIOBE index of programming language popularity employs internet search engine rankings and similar publication counting to determine language popularity. In September 2021, it showed Scala in 31st place. In this ranking, Scala was ahead of Haskell (38th) and Erlang, but below Go (14th), Swift (15th), and Perl (19th). As of 2022[update], JVM-based languages such as Clojure, Groovy, and Scala are highly ranked, but still significantly less popular than the original Java language, which is usually ranked in the top three places.",
    "companies": "In April 2009, Twitter announced that it had switched large portions of its backend from Ruby to Scala and intended to convert the rest. Tesla, Inc. uses Akka with Scala in the backend of the Tesla Virtual Power Plant. Thereby, the Actor model is used for representing and operating devices that together with other components make up an instance of the virtual power plant, and Reactive Streams are used for data collection and data processing. Apache Kafka is implemented in Scala with regards to most of its core and other critical parts. It is maintained and extended through the open source project and by the company Confluent. Gilt uses Scala and Play Framework. Foursquare uses Scala and Lift. Coursera uses Scala and Play Framework. Apple Inc. uses Scala in certain teams, along with Java and the Play framework. The Guardian newspaper's high-traffic website guardian.co.uk announced in April 2011 that it was switching from Java to Scala. The New York Times revealed in 2014 that its internal content management system Blackbeard is built using Scala, Akka, and Play. The Huffington Post newspaper started to employ Scala as part of its content delivery system Athena in 2013. Swiss bank UBS approved Scala for general production use. LinkedIn uses the Scalatra microframework to power its Signal API. Meetup uses Unfiltered toolkit for real-time APIs. Remember the Milk uses Unfiltered toolkit, Scala and Akka for public API and real-time updates. Verizon seeking to make a next-generation framework using Scala. Airbnb develops open-source machine-learning software Aerosolve, written in Java and Scala. Zalando moved its technology stack from Java to Scala and Play. SoundCloud uses Scala for its back-end, employing technologies such as Finagle (micro services), Scalding and Spark (data processing). Databricks uses Scala for the Apache Spark Big Data platform. Morgan Stanley uses Scala extensively in their finance and asset-related projects. There are teams within Google and Alphabet Inc. that use Scala, mostly due to acquisitions such as Firebase and Nest. Walmart Canada uses Scala for their back-end platform. Duolingo uses Scala for their back-end module that generates lessons. HMRC uses Scala for many UK Government tax applications. M1 Finance uses Scala for their back-end platform.",
    "criticism": "In November 2011, Yammer moved away from Scala for reasons that included the learning curve for new team members and incompatibility from one version of the Scala compiler to the next. In March 2015, former VP of the Platform Engineering group at Twitter Raffi Krikorian, stated that he would not have chosen Scala in 2011 due to its learning curve. The same month, LinkedIn SVP Kevin Scott stated their decision to minimize [their] dependence on Scala.",
    "see_also": "Free and open-source software portalComputer programming portal sbt, a widely used build tool for Scala projects Spark Framework is designed to handle, and process big-data and it solely supports Scala Neo4j is a java spring framework supported by Scala with domain-specific functionality, analytical capabilities, graph algorithms, and many more Play!, an open-source Web application framework that supports Scala Akka, an open-source toolkit for building concurrent and distributed applications Chisel, an open-source language built on Scala that is used for hardware design and generation. See also: Category:Free software programmed in Scala",
    "references": "^ https://www.scala-lang.org/download/3.5.0.html. {{cite web}}: Missing or empty |title= (help) ^ Notice file. GitHub. 2019-01-24. Retrieved 2019-12-04. ^ Scala Macros. ^ Fogus, Michael (6 August 2010). MartinOdersky take(5) toList. Send More Paramedics. Retrieved 2012-02-09. ^ a b c d Odersky, Martin (11 January 2006). The Scala Experiment - Can We Provide Better Language Support for Component Systems? (PDF). Retrieved 2016-06-22. ^ a b c d Odersky, Martin; et al. (2006). An Overview of the Scala Programming Language (PDF) (2nd ed.). École Polytechnique Fédérale de Lausanne (EPFL). Archived (PDF) from the original on 2020-07-09. ^ Odersky, Martin (2008). Programming in Scala. Mountain View, California: Artima. p. 3. ISBN 9780981531601. Retrieved 12 June 2014. ^ Wampler, Dean; Payne, Alex (15 September 2009). Programming Scala: Scalability = Functional Programming + Objects. O'Reilly Media, Inc. p. 7. ISBN 978-1-4493-7926-1. Retrieved 13 May 2024. The creators of Scala actually pronounce it scah-lah, like the Italian word for stairs. The two as are pronounced the same. ^ Potvin, Pascal; Bonja, Mario (24 September 2015). SDL 2013: Model-Driven Dependability Engineering. Lecture Notes in Computer Science. Vol. 7916. arXiv:1509.07326. doi:10.1007/978-3-642-38911-5. ISBN 978-3-642-38910-8. S2CID 1214469. ^ Frequently Asked Questions: Java Interoperability. Scala-lang.org. Retrieved 2015-02-06. ^ Martin Odersky (17 June 2020). Martin Odersky: A Scala 3 Update (video). YouTube. Event occurs at 36:35–45:08. Archived from the original on 2021-12-21. Retrieved 2021-04-24. ^ Effect expt. scala. Retrieved 2022-07-31. ^ Loverdo, Christos (2010). Steps in Scala: An Introduction to Object-Functional Programming. Cambridge University Press. p. xiii. ISBN 9781139490948. Retrieved 31 July 2014. ^ a b c d Odersky, Martin (9 June 2006). A Brief History of Scala. Artima.com. ^ a b c d Odersky, M.; Rompf, T. (2014). Unifying functional and object-oriented programming with Scala. Communications of the ACM. 57 (4): 76. doi:10.1145/2591013. ^ Martin Odersky, The Scala Language Specification Version 2.7 ^ Scala Team Wins ERC Grant. Retrieved 4 July 2015. ^ Commercial Support for Scala. 2011-05-12. Retrieved 2011-08-18. ^ Why We Invested in Typesafe: Modern Applications Demand Modern Tools. 2011-05-12. Retrieved 2018-05-08. ^ Open-source Scala gains commercial backing. 2011-05-12. Retrieved 2011-10-09. ^ Cloud computing pioneer Martin Odersky takes wraps off his new company Typesafe. 2011-05-12. Retrieved 2011-08-24. ^ Scala on Android. Archived from the original on 20 June 2016. Retrieved 8 June 2016. ^ Scala 2.12.8 is now available!. 2018-12-04. Retrieved 2018-12-09. ^ Scala Js Is No Longer Experimental | The Scala Programming Language. Scala-lang.org. 5 February 2015. Retrieved 28 October 2015. ^ Releases · scala-js/Scala-js. GitHub. ^ Krill, Paul (15 March 2017). Scaled-down Scala variant cuts ties to the JVM. InfoWorld. Retrieved 21 March 2017. ^ Krill, Paul (2016-05-11). Scala language moves closer to bare metal. InfoWorld. ^ Expunged the .net backend. by paulp · Pull Request #1718 · scala/scala · GitHub. Github.com (2012-12-05). Retrieved on 2013-11-02. ^ Getting Started with Scala. Scala-lang.org. 15 July 2008. Retrieved 31 July 2014. ^ Home. Blog.lostlake.org. Archived from the original on 31 August 2010. Retrieved 2013-06-25. ^ Scala's built-in control structures such as if or while cannot be re-implemented. There is a research project, Scala-Virtualized, that aimed at removing these restrictions: Adriaan Moors, Tiark Rompf, Philipp Haller and Martin Odersky. Scala-Virtualized. Proceedings of the ACM SIGPLAN 2012 workshop on Partial evaluation and program manipulation, 117–120. July 2012. ^ a b Pimp my Library. Artima.com. 2006-10-09. Retrieved 2013-06-25. ^ Expressions | Scala 2.13. scala-lang.org. Retrieved 2021-05-24. ^ Mutable and Immutable Collections - Scala Documentation. Retrieved 30 April 2020. ^ Collections - Concrete Immutable Collection Classes - Scala Documentation. Retrieved 4 July 2015. ^ Dougherty, Rich. Rich Dougherty's blog. Retrieved 4 July 2015. ^ TailCalls - Scala Standard Library API (Scaladoc) 2.10.2 - scala.util.control.TailCalls. Scala-lang.org. Retrieved 2013-06-25. ^ a b Java and Scala's Type Systems are Unsound (PDF). ^ Giarrusso, Paolo G. (2013). Reify your collection queries for modularity and speed!. Proceedings of the 12th annual international conference on Aspect-oriented software development. ACM. arXiv:1210.6284. Bibcode:2012arXiv1210.6284G. Also known as pimp-my-library pattern ^ Gilbert, Clint (2011-11-15). What is highest priority for Scala to succeed in corporate world (Should be in scala-debate?) ?. Scala-lang.org. Retrieved 2019-05-08. ^ Should we enrich or pimp Scala libraries?. stackexchange.com. 17 June 2013. Retrieved 15 April 2016. ^ Implicit classes were introduced in Scala 2.10 to make method extensions more concise. This is equivalent to adding a method implicit def IntPredicate(i: Int) = new IntPredicate(i). The class can also be defined as implicit class IntPredicates(val i: Int) extends AnyVal { ... }, producing a so-called value class, also introduced in Scala 2.10. The compiler will then eliminate actual instantiations and generate static methods instead, allowing extension methods to have virtually no performance overhead. ^ What is Akka?, Akka online documentation ^ Sufrin, Bernard (2008). Communicating Scala Objects. In Welch, P. H.; Stepney, S.; Polack, F.A.C.; Barnes, F. R. M.; McEwan, A.A.; Stiles, G.S.; Broenink, J. F.; Sampson, A. T. (eds.). Communicating Process Architectures 2008: WoTUG-31 (PDF). IOS Press. ISBN 978-1586039073. ^ Yan, Kay. Scala Tour. Retrieved 4 July 2015. ^ Parallelcollections - Overview - Scala Documentation. Docs.scala-lang.org. Retrieved 2013-06-25. ^ Yan, Kay. Scala Tour. Retrieved 4 July 2015. ^ Learning Concurrent Programming in Scala, Aleksandar Prokopec, Packt Publishing ^ Kops, Micha (2013-01-13). A short Introduction to ScalaTest. hascode.com. Retrieved 2014-11-07. ^ Nilsson, Rickard (2008-11-17). ScalaCheck 1.5. Scala-lang.org. Retrieved 2014-11-07. ^ Build web applications using Scala and the Play Framework. workwithplay.com. 2013-05-22. Retrieved 2014-11-07. ^ Butcher, Paul (2012-06-04). ScalaMock 3.0 Preview Release. paulbutcher.com. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ a b c d e f g Scala Change History. Scala-lang.org. Archived from the original on 2007-10-09. ^ Dropped: XML Literals. dotty.epfl.ch. Retrieved 2021-03-05. ^ Changes in Version 2.0 (12-Mar-2006). Scala-lang.org. 2006-03-12. Retrieved 2014-11-07. ^ Changes in Version 2.1.8 (23-Aug-2006). Scala-lang.org. 2006-08-23. Retrieved 2014-11-07. ^ Changes in Version 2.3.0 (23-Nov-2006). Scala-lang.org. 2006-11-23. Retrieved 2014-11-07. ^ Changes in Version 2.4.0 (09-Mar-2007). Scala-lang.org. 2007-03-09. Retrieved 2014-11-07. ^ Changes in Version 2.5 (02-May-2007). Scala-lang.org. 2007-05-02. Retrieved 2014-11-07. ^ Changes in Version 2.6 (27-Jul-2007). Scala-lang.org. 2007-06-27. Retrieved 2014-11-07. ^ Changes in Version 2.7.0 (07-Feb-2008). Scala-lang.org. 2008-02-07. Retrieved 2014-11-07. ^ Changes in Version 2.8.0 (14-Jul-2010). Scala-lang.org. 2010-07-10. Retrieved 2014-11-07. ^ Changes in Version 2.9.0 (12-May-2011). Scala-lang.org. 2011-05-12. Retrieved 2014-11-07. ^ Changes in Version 2.10.0. Scala-lang.org. 2013-01-04. Retrieved 2014-11-07. ^ Harrah, Mark. Value Classes and Universal Traits. Scala-lang.org. Retrieved 2014-11-07. ^ Suereth, Josh. SIP-13 - Implicit classes. Scala-lang.org. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ Suereth, Josh. String Interpolation. Scala-lang.org. Retrieved 2014-11-07. ^ Haller, Philipp; Prokopec, Aleksandar. Futures and Promises. Scala-lang.org. Retrieved 2014-11-07. ^ SIP-17 - Type Dynamic. Scala-lang.org. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ SIP-18 - Modularizing Language Features. Scala-lang.org. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ Prokopec, Aleksandar; Miller, Heather. Parallel Collections. Scala-lang.org. Retrieved 2014-11-07. ^ Miller, Heather; Burmako, Eugene. Reflection Overview. Scala-lang.org. Retrieved 2014-11-07. ^ Burmako, Eugene. Def Macros. Scala-lang.org. Retrieved 2014-11-07. ^ Scala 2.10.2 is now available!. Scala-lang.org. 2013-06-06. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ Scala 2.10.3 is now available!. Scala-lang.org. 2013-10-01. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ Scala 2.10.4 is now available!. Scala-lang.org. 2014-03-18. Retrieved 2015-01-07. ^ Scala 2.10.5 is now available!. Scala-lang.org. 2015-03-04. Retrieved 2015-03-23. ^ Scala 2.11.0 is now available!. Scala-lang.org. 2014-04-21. Retrieved 2014-11-07. ^ Scala 2.11.1 is now available!. Scala-lang.org. 2014-05-20. Retrieved 2014-11-07. ^ Scala 2.11.2 is now available!. Scala-lang.org. 2014-07-22. Retrieved 2014-11-07. ^ Scala 2.11.4 is now available!. Scala-lang.org. 2014-10-30. Retrieved 2014-11-07. ^ Scala 2.11.5 is now available!. Scala-lang.org. 2015-01-08. Retrieved 2015-01-22. ^ Scala 2.11.6 is now available!. Scala-lang.org. 2015-03-05. Retrieved 2015-03-12. ^ Scala 2.11.7 is now available!. Scala-lang.org. 2015-06-23. Retrieved 2015-07-03. ^ Scala 2.11.8 is now available!. Scala-lang.org. 2016-03-08. Retrieved 2016-03-09. ^ a b Three new releases and more GitHub goodness!. Scala-lang.org. 2017-04-18. Retrieved 2017-04-19. ^ Security update: 2.12.4, 2.11.12, 2.10.7 (CVE-2017-15288). Scala-lang.org. 2017-11-13. Retrieved 2018-05-04. ^ Scala 2.12.0 is now available!. Scala-lang.org. 2016-11-03. Retrieved 2017-01-08. ^ Scala 2.12.1 is now available!. Scala-lang.org. 2016-12-05. Retrieved 2017-01-08. ^ Scala 2.12.3 is now available!. Scala-lang.org. 2017-07-26. Retrieved 2017-08-16. ^ Scala 2.12.4 is now available!. Scala-lang.org. 2017-10-18. Retrieved 2017-10-26. ^ Scala 2.12.5 is now available!. Scala-lang.org. 2018-03-15. Retrieved 2018-03-20. ^ Scala 2.12.6 is now available!. Scala-lang.org. 2018-04-27. Retrieved 2018-05-04. ^ Scala 2.12.7 is now available!. Scala-lang.org. 2018-09-27. Retrieved 2018-10-09. ^ Scala 2.12.8 is now available!. Scala-lang.org. 2018-12-04. Retrieved 2018-12-09. ^ Scala 2.12.9 is now available!. Scala-lang.org. 2019-08-05. Retrieved 2021-01-20. ^ Scala 2.12.10 is now available!. Scala-lang.org. 2019-09-10. Retrieved 2021-01-20. ^ Scala 2.12.11 is now available!. Scala-lang.org. 2020-03-16. Retrieved 2021-01-20. ^ Scala 2.12.12 is now available!. Scala-lang.org. 2020-07-13. Retrieved 2021-01-20. ^ Scala 2.12.13 is now available!. Scala-lang.org. 2021-01-12. Retrieved 2021-01-20. ^ Scala 2.12.14 is now available!. Scala-lang.org. 2021-05-28. Retrieved 2022-04-15. ^ Scala 2.12.15 is now available!. Scala-lang.org. 2021-09-14. Retrieved 2022-06-19. ^ Scala 2.12.16 is now available!. Scala-lang.org. 2022-06-10. Retrieved 2022-06-19. ^ Scala 2.12.17 is now available!. Scala-lang.org. 2022-06-10. Retrieved 2022-09-16. ^ Scala 2.12.18 is now available!. Scala-lang.org. 2022-06-10. Retrieved 2023-06-07. ^ Scala 2.12.19 is now available!. Scala-lang.org. 2024-02-25. Retrieved 2024-08-12. ^ Scala 2.13.0 is now available!. Scala-lang.org. 2019-06-11. Retrieved 2018-06-17. ^ Scala 2.13.1 is now available!. Scala-lang.org. 2019-09-18. Retrieved 2021-01-20. ^ Scala 2.13.2 is now available!. Scala-lang.org. 2020-04-22. Retrieved 2021-01-20. ^ Scala 2.13.3 is now available!. Scala-lang.org. 2020-06-25. Retrieved 2021-01-20. ^ Scala 2.13.4 is now available!. Scala-lang.org. 2020-11-19. Retrieved 2021-01-20. ^ Scala 2.13.5 is now available!. Scala-lang.org. 2021-02-22. Retrieved 2021-02-26. ^ Scala 2.13.6 is now available!. Scala-lang.org. 2021-05-17. Retrieved 2022-04-15. ^ Scala 2.13.7 is now available!. Scala-lang.org. 2021-11-01. Retrieved 2022-04-15. ^ Scala 2.13.8 is now available!. Scala-lang.org. 2022-01-12. Retrieved 2022-04-15. ^ Scala 2.13.9 is now available!. Scala-lang.org. 2022-09-21. Retrieved 2023-08-28. ^ Scala 2.13.10 is now available!. Scala-lang.org. 2022-10-13. Retrieved 2023-08-28. ^ Scala 2.13.11 is now available!. Scala-lang.org. 2023-06-07. Retrieved 2023-08-28. ^ Scala 2.13.12 is now available!. Scala-lang.org. 2023-09-11. Retrieved 2024-08-12. ^ Scala 2.13.13 is now available!. Scala-lang.org. 2024-02-26. Retrieved 2024-08-12. ^ Scala 2.13.14 is now available!. Scala-lang.org. 2024-05-01. Retrieved 2024-08-12. ^ Scala 2.13.15 is now available!. Scala-lang.org. 2024-09-25. Retrieved 2024-12-05. ^ Scala 3 is here!. Scala-lang.org. 2021-05-14. Retrieved 2021-05-26. ^ Scala 3.0.1 and 3.0.2-RC1 are here!. Scala-lang.org. 2021-07-31. Retrieved 2024-08-12. ^ Scala 3.0.2 released!. Scala-lang.org. 2021-09-07. Retrieved 2024-08-12. ^ Scala 3.1.0 released!. Scala-lang.org. 2021-10-21. Retrieved 2024-08-12. ^ Scala 3.1.1 and forward compatibility news. Scala-lang.org. 2022-02-01. Retrieved 2024-08-12. ^ Scala 3.1.2 released!. Scala-lang.org. 2022-04-12. Retrieved 2024-08-12. ^ Scala 3.1.3 released!. Scala-lang.org. 2022-06-21. Retrieved 2024-08-12. ^ Scala 3.2.0 released!. Scala-lang.org. 2022-09-05. Retrieved 2024-08-12. ^ Scala 3.2.1 released!. Scala-lang.org. 2022-11-07. Retrieved 2024-08-12. ^ Scala 3.2.2 is now available!. Scala-lang.org. 2023-01-30. Retrieved 2024-08-12. ^ Scala 3.3.0 released!. Scala-lang.org. 2023-05-30. Retrieved 2024-08-12. ^ Scala 3.3.1 LTS is now available!. Scala-lang.org. 2023-09-07. Retrieved 2024-08-12. ^ Scala 3.3.2. github.com. 2024-02-29. Retrieved 2024-08-12. ^ a b Scala 3.4.0 and 3.3.3 LTS released!. Scala-lang.org. 2024-02-29. Retrieved 2024-08-12. ^ Scala 3.4.1 is now available!. Scala-lang.org. 2024-03-29. Retrieved 2024-08-12. ^ Scala 3.4.2 is now available!. Scala-lang.org. 2024-05-16. Retrieved 2024-08-12. ^ ThoughtWorks Technology Radar FAQ. ^ ThoughtWorks Technology Radar MAY 2013 (PDF). ^ Scala, the good parts. ^ The State of Java in 2018. ^ Popularity of Programming Language Index. ^ a b O'Grady, Stephen (1 March 2021). The RedMonk Programming Language Rankings: January 2021. RedMonk. ^ a b TIOBE Index for May 2021. ^ Greene, Kate (1 April 2009). The Secret Behind Twitter's Growth, How a new Web programming language is helping the company handle its increasing popularity. Technology Review. MIT. Retrieved 6 April 2009. ^ Breck, Colin; Link, Percy (2020-03-23). Tesla Virtual Power Plant (Architecture and Design). Retrieved 2023-03-28. ^ Apache Kafka source code at GitHub. Apache Software Foundation. Retrieved 29 March 2023. ^ Play Framework, Akka and Scala at Gilt Groupe. Lightbend. 15 July 2013. Retrieved 16 July 2016. ^ Scala, Lift, and the Future. Archived from the original on 13 January 2016. Retrieved 4 July 2015. ^ Saeta, Brennan (2014-02-17). Why we love Scala at Coursera. Coursera Engineering. Retrieved 2023-09-21. ^ Apple Engineering PM Jarrod Nettles on Twitter. Jarrod Nettles. Retrieved 2016-03-11. ^ 30 Scala job openings at Apple. Alvin Alexander. Retrieved 2016-03-11. ^ David Reid & Tania Teixeira (26 February 2010). Are people ready to pay for online news?. BBC. Retrieved 2010-02-28. ^ Guardian switching from Java to Scala. Heise Online. 2011-04-05. Retrieved 2011-04-05. ^ Guardian.co.uk Switching from Java to Scala. InfoQ.com. 2011-04-04. Retrieved 2011-04-05. ^ Roy, Suman; Sundaresan, Krishna (2014-05-13). Building Blackbeard: A Syndication System Powered By Play, Scala and Akka. The New York Times. Retrieved 2014-07-20. ^ Pavley, John (2013-08-11). Sneak Peek: HuffPost Brings Real Time Collaboration to the Newsroom. Huffington Post. Retrieved 2014-07-20. ^ Binstock, Andrew (2011-07-14). Interview with Scala's Martin Odersky. Dr. Dobb's Journal. Retrieved 2012-02-10. ^ Synodinos, Dionysios G. (2010-10-11). LinkedIn Signal: A Case Study for Scala, JRuby and Voldemort. InfoQ. ^ Real-life Meetups Deserve Real-time APIs. ^ Real time updating comes to the Remember The Milk web app. ^ WHAT IS SCALA. 8 March 2023. Retrieved 2023-03-17. ^ Novet, Jordan (2015-06-04). Airbnb announces Aerosolve, an open-source machine learning software package. Retrieved 2016-03-09. ^ Kops, Alexander (2015-12-14). Zalando Tech: From Java to Scala in Less Than Three Months. Retrieved 2016-03-09. ^ Calçado, Phil (2014-06-13). Building Products at SoundCloud—Part III: Microservices in Scala and Finagle. Retrieved 2016-03-09. ^ Customer Case Studies: SoundCloud. Concurrent Inc. 2014-11-18. Retrieved 2016-03-09. ^ Scala at Morgan Stanley (video). Skills Matter. 2015-12-03. Retrieved 2016-03-11. ^ Greg Soltis (2015-12-03). SF Scala, Greg Soltis: High Performance Services in Scala (video). Skills Matter. Archived from the original on 2021-12-21. Retrieved 2016-03-11. ^ Lee Mighdoll. Scala jobs at Nest. Retrieved 2016-03-11. ^ Nurun. Nurun Launches Redesigned Transactional Platform With Walmart Canada. Retrieved 2013-12-11. ^ Horie, André K. (2017-01-31). Rewriting Duolingo's engine in Scala. Retrieved 2017-02-03. ^ HMRC GitHub repository. GitHub. ^ Meet M1 Finance, A ScalaCon Gold Sponsor. ScalaCon. Retrieved 2023-09-02. ^ Hale, Coda (29 November 2011). The Rest of the Story. codahale.com. Retrieved 7 November 2013. ^ Krikorian, Raffi (17 March 2015). O'Reilly Software Architecture Conference 2015 Complete Video Compilation: Re-Architecting on the Fly - Raffi Krikorian - Part 3 (video). O'Reilly Media. Event occurs at 4:57. Retrieved 8 March 2016. What I would have done differently four years ago is use Java and not used Scala as part of this rewrite. [...] it would take an engineer two months before they're fully productive and writing Scala code.[permanent dead link] ^ Scott, Kevin (11 Mar 2015). Is LinkedIn getting rid of Scala?. quora.com. Retrieved 25 January 2016. ^ Chisel: Constructing Hardware in a Scala Embedded Language. UC Berkeley APSIRE. Retrieved 27 May 2020.",
    "further_reading": "Wikibooks has a book on the topic of: Scala Odersky, Martin; Spoon, Lex; Venners, Bill (15 December 2019). Programming in Scala: A Comprehensive Step-by-step Guide (4th ed.). Artima Inc. p. 896. ISBN 978-0-9815316-1-8. Horstmann, Cay (15 December 2016). Scala for the Impatient (2nd ed.). Addison-Wesley Professional. p. 384. ISBN 978-0-134-54056-6. Wampler, Dean; Payne, Alex (14 December 2014). Programming Scala: Scalability = Functional Programming + Objects (2nd ed.). O'Reilly Media. p. 583. ISBN 978-1-491-94985-6. Suereth, Joshua D. (Spring 2011). Scala in Depth. Manning Publications. p. 225. ISBN 978-1-935182-70-2. Meredith, Gregory (2011). Monadic Design Patterns for the Web (PDF) (1st ed.). p. 300. Odersky, Martin; Spoon, Lex; Venners, Bill (10 December 2008). Programming in Scala, eBook (1st ed.). Artima Inc. vteJava (software platform)Platforms JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK GraalVM Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Pack200 Modules Major third-partytechnologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations JVM languages Java BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Oxygene CommunityConferences JavaOne Devoxx Organizations Apache Software Foundation Eclipse Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal vteCommon Language InfrastructureArchitecture Application domain Code Access Security Common Intermediate Language instructions Common Type System Platform Invocation Services Virtual Execution System Components Assembly Delegate Global Assembly Cache Manifest Metadata Standard Libraries ImplementationsMicrosoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono DotGNU LanguagesMajor languages C# Visual Basic F# PowerShell Other Axum A# Boo Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Small Basic Comparison C# and Java C# and Visual Basic .NET Visual Basic and Visual Basic .NET vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef",
    "document": "The design of Scala started in 2001 at the École Polytechnique Fédérale de Lausanne (EPFL) (in Lausanne, Switzerland) by Martin Odersky. It followed on from work on Funnel, a programming language combining ideas from functional programming and Petri nets. Odersky formerly worked on Generic Java, and javac, Sun's Java compiler. After an internal release in late 2003, Scala was released publicly in early 2004 on the Java platform, A second version (v2.0) followed in March 2006. On 17 January 2011, the Scala team won a five-year research grant of over €2.3 million from the European Research Council. On 12 May 2011, Odersky and collaborators launched Typesafe Inc. (later renamed Lightbend Inc.), a company to provide commercial support, training, and services for Scala. Typesafe received a $3 million investment in 2011 from Greylock Partners. Scala runs on the Java platform (Java virtual machine) and is compatible with existing Java programs. As Android applications are typically written in Java and translated from Java bytecode into Dalvik bytecode (which may be further translated to native machine code during installation) when packaged, Scala's Java compatibility makes it well-suited to Android development, the more so when a functional approach is preferred. The reference Scala software distribution, including compiler and libraries, is released under the Apache license. Scala.js is a Scala compiler that compiles to JavaScript, making it possible to write Scala programs that can run in web browsers or Node.js. The compiler, in development since 2013, was announced as no longer experimental in 2015 (v0.6). Version v1.0.0-M1 was released in June 2018 and version 1.1.1 in September 2020. Scala Native is a Scala compiler that targets the LLVM compiler infrastructure to create executable code that uses a lightweight managed runtime, which uses the Boehm garbage collector. The project is led by Denys Shabalin and had its first release, 0.1, on 14 March 2017. Development of Scala Native began in 2015 with a goal of being faster than just-in-time compilation for the JVM by eliminating the initial runtime compilation of code and also providing the ability to call native routines directly. A reference Scala compiler targeting the .NET Framework and its Common Language Runtime was released in June 2004, but was officially dropped in 2012. The following example shows the differences between Java and Scala syntax. The function mathFunction takes an integer, squares it, and then adds the cube root of that number to the natural log of that number, returning the result (i.e., n 2 / 3 + ln ⁡ ( n 2 ) {\\displaystyle n^{2/3}+\\ln(n^{2})} ): // Java: int mathFunction(int num) { int numSquare = num*num; return (int) (Math.cbrt(numSquare) + Math.log(numSquare)); } // Scala: Direct conversion from Java // no import needed; scala.math // already imported as `math` def mathFunction(num: Int): Int = var numSquare: Int = num*num return (math.cbrt(numSquare) + math.log(numSquare)). asInstanceOf[Int] // Scala: More idiomatic // Uses type inference, omits `return` statement, // uses `toInt` method, declares numSquare immutable import math.* def mathFunction(num: Int) = val numSquare = num*num (cbrt(numSquare) + log(numSquare)).toInt Some syntactic differences in this code are: Scala does not require semicolons (;) to end statements. Value types are capitalized (sentence case): Int, Double, Boolean instead of int, double, boolean. Parameter and return types follow, as in Pascal, rather than precede as in C. Methods must be preceded by def. Local or class variables must be preceded by val (indicates an immutable variable) or var (indicates a mutable variable). The return operator is unnecessary in a function (although allowed); the value of the last executed statement or expression is normally the function's value. Instead of the Java cast operator (Type) foo, Scala uses foo.asInstanceOf[Type], or a specialized function such as toDouble or toInt. Function or method foo() can also be called as just foo; method thread.send(signo) can also be called as just thread send signo; and method foo.toString() can also be called as just foo toString. These syntactic relaxations are designed to allow support for domain-specific languages. Some other basic syntactic differences: Array references are written like function calls, e.g. array(i) rather than array[i]. (Internally in Scala, the former expands into array.apply(i) which returns the reference) Generic types are written as e.g. List[String] rather than Java's List<String>. Instead of the pseudo-type void, Scala has the actual singleton class Unit (see below). The following example contrasts the definition of classes in Java and Scala. // Java: public class Point { private double x, y; public Point(double x, double y) { this.x = x; this.y = y; } public Point(double x, double y, boolean addToGrid) { this(x, y); if (addToGrid) grid.addPoint(this); } public Point() { this(0.0, 0.0); } private void addPoint(Point p) { x += p.x; y += p.y; } public double getX() { return x; } public double getY() { return y; } double distanceToPoint(Point other) { return distanceBetweenPoints(x, y, other.x, other.y); } private static Point grid = new Point(); static double distanceBetweenPoints( double x1, double y1, double x2, double y2) { return Math.hypot(x1 - x2, y1 - y2); } } // Scala class Point( var x: Double, var y: Double, addToGrid: Boolean = false ): import Point.* def += (p: Point) = x += p.x y += p.y if (addToGrid) grid += this def this() = this(0.0, 0.0) def distanceToPoint(other: Point) = distanceBetweenPoints(x, y, other.x, other.y) end Point object Point: private val grid = new Point() def distanceBetweenPoints(x1: Double, y1: Double, x2: Double, y2: Double) = math.hypot(x1 - x2, y1 - y2) The code above shows some of the conceptual differences between Java and Scala's handling of classes: Scala has no static variables or methods. Instead, it has singleton objects, which are essentially classes with only one instance. Singleton objects are declared using object instead of class. It is common to place static variables and methods in a singleton object with the same name as the class name, which is then known as a companion object. (The underlying class for the singleton object has a $ appended. Hence, for class Foo with companion object object Foo, under the hood there's a class Foo$ containing the companion object's code, and one object of this class is created, using the singleton pattern.) In place of constructor parameters, Scala has class parameters, which are placed on the class, similar to parameters to a function. When declared with a val or var modifier, fields are also defined with the same name, and automatically initialized from the class parameters. (Under the hood, external access to public fields always goes through accessor (getter) and mutator (setter) methods, which are automatically created. The accessor function has the same name as the field, which is why it's unnecessary in the above example to explicitly declare accessor methods.) Note that alternative constructors can also be declared, as in Java. Code that would go into the default constructor (other than initializing the member variables) goes directly at class level. In Scala it is possible to define operators by using symbols as method names. In place of addPoint, the Scala example defines +=, which is then invoked with infix notation as grid += this. Default visibility in Scala is public. Scala has the same compiling model as Java and C#, namely separate compiling and dynamic class loading, so that Scala code can call Java libraries. Scala's operational characteristics are the same as Java's. The Scala compiler generates byte code that is nearly identical to that generated by the Java compiler. In fact, Scala code can be decompiled to readable Java code, with the exception of certain constructor operations. To the Java virtual machine (JVM), Scala code and Java code are indistinguishable. The only difference is one extra runtime library, scala-library.jar. Scala adds a large number of features compared with Java, and has some fundamental differences in its underlying model of expressions and types, which make the language theoretically cleaner and eliminate several corner cases in Java. From the Scala perspective, this is practically important because several added features in Scala are also available in C#. As mentioned above, Scala has a good deal of syntactic flexibility, compared with Java. The following are some examples: Semicolons are unnecessary; lines are automatically joined if they begin or end with a token that cannot normally come in this position, or if there are unclosed parentheses or brackets. Any method can be used as an infix operator, e.g. %d apples.format(num) and %d apples format num are equivalent. In fact, arithmetic operators like + and << are treated just like any other methods, since function names are allowed to consist of sequences of arbitrary symbols (with a few exceptions made for things like parens, brackets and braces that must be handled specially); the only special treatment that such symbol-named methods undergo concerns the handling of precedence. Methods apply and update have syntactic short forms. foo()—where foo is a value (singleton object or class instance)—is short for foo.apply(), and foo() = 42 is short for foo.update(42). Similarly, foo(42) is short for foo.apply(42), and foo(4) = 2 is short for foo.update(4, 2). This is used for collection classes and extends to many other cases, such as STM cells. Scala distinguishes between no-parens (def foo = 42) and empty-parens (def foo() = 42) methods. When calling an empty-parens method, the parentheses may be omitted, which is useful when calling into Java libraries that do not know this distinction, e.g., using foo.toString instead of foo.toString(). By convention, a method should be defined with empty-parens when it performs side effects. Method names ending in colon (:) expect the argument on the left-hand-side and the receiver on the right-hand-side. For example, the 4 :: 2 :: Nil is the same as Nil.::(2).::(4), the first form corresponding visually to the result (a list with first element 4 and second element 2). Class body variables can be transparently implemented as separate getter and setter methods. For trait FooLike { var bar: Int }, an implementation may be object Foo extends FooLike { private var x = 0; def bar = x; def bar_=(value: Int) { x = value }} } }. The call site will still be able to use a concise foo.bar = 42. The use of curly braces instead of parentheses is allowed in method calls. This allows pure library implementations of new control structures. For example, breakable { ... if (...) break() ... } looks as if breakable was a language defined keyword, but really is just a method taking a thunk argument. Methods that take thunks or functions often place these in a second parameter list, allowing to mix parentheses and curly braces syntax: Vector.fill(4) { math.random } is the same as Vector.fill(4)(math.random). The curly braces variant allows the expression to span multiple lines. For-expressions (explained further down) can accommodate any type that defines monadic methods such as map, flatMap and filter. By themselves, these may seem like questionable choices, but collectively they serve the purpose of allowing domain-specific languages to be defined in Scala without needing to extend the compiler. For example, Erlang's special syntax for sending a message to an actor, i.e. actor ! message can be (and is) implemented in a Scala library without needing language extensions. Java makes a sharp distinction between primitive types (e.g. int and boolean) and reference types (any class). Only reference types are part of the inheritance scheme, deriving from java.lang.Object. In Scala, all types inherit from a top-level class Any, whose immediate children are AnyVal (value types, such as Int and Boolean) and AnyRef (reference types, as in Java). This means that the Java distinction between primitive types and boxed types (e.g. int vs. Integer) is not present in Scala; boxing and unboxing is completely transparent to the user. Scala 2.10 allows for new value types to be defined by the user. Instead of the Java foreach loops for looping through an iterator, Scala has for-expressions, which are similar to list comprehensions in languages such as Haskell, or a combination of list comprehensions and generator expressions in Python. For-expressions using the yield keyword allow a new collection to be generated by iterating over an existing one, returning a new collection of the same type. They are translated by the compiler into a series of map, flatMap and filter calls. Where yield is not used, the code approximates to an imperative-style loop, by translating to foreach. A simple example is: val s = for (x <- 1 to 25 if x*x > 50) yield 2*x The result of running it is the following vector: Vector(16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50) (Note that the expression 1 to 25 is not special syntax. The method to is rather defined in the standard Scala library as an extension method on integers, using a technique known as implicit conversions that allows new methods to be added to existing types.) A more complex example of iterating over a map is: // Given a map specifying Twitter users mentioned in a set of tweets, // and number of times each user was mentioned, look up the users // in a map of known politicians, and return a new map giving only the // Democratic politicians (as objects, rather than strings). val dem_mentions = for (mention, times) <- mentions account <- accounts.get(mention) if account.party == Democratic yield (account, times) Expression (mention, times) <- mentions is an example of pattern matching (see below). Iterating over a map returns a set of key-value tuples, and pattern-matching allows the tuples to easily be destructured into separate variables for the key and value. Similarly, the result of the comprehension also returns key-value tuples, which are automatically built back up into a map because the source object (from the variable mentions) is a map. Note that if mentions instead held a list, set, array or other collection of tuples, exactly the same code above would yield a new collection of the same type. While supporting all of the object-oriented features available in Java (and in fact, augmenting them in various ways), Scala also provides a large number of capabilities that are normally found only in functional programming languages. Together, these features allow Scala programs to be written in an almost completely functional style and also allow functional and object-oriented styles to be mixed. Examples are: No distinction between statements and expressions Type inference Anonymous functions with capturing semantics (i.e., closures) Immutable variables and objects Lazy evaluation Delimited continuations (since 2.8) Higher-order functions Nested functions Currying Pattern matching Algebraic data types (through case classes) Tuples Unlike C or Java, but similar to languages such as Lisp, Scala makes no distinction between statements and expressions. All statements are in fact expressions that evaluate to some value. Functions that would be declared as returning void in C or Java, and statements like while that logically do not return a value, are in Scala considered to return the type Unit, which is a singleton type, with only one object of that type. Functions and operators that never return at all (e.g. the throw operator or a function that always exits non-locally using an exception) logically have return type Nothing, a special type containing no objects; that is, a bottom type, i.e. a subclass of every possible type. (This in turn makes type Nothing compatible with every type, allowing type inference to function correctly.) Similarly, an if-then-else statement is actually an expression, which produces a value, i.e. the result of evaluating one of the two branches. This means that such a block of code can be inserted wherever an expression is desired, obviating the need for a ternary operator in Scala: // Java: char hexDigit = (char)(x >= 10 ? x + 'A' - 10 : x + '0'); // Scala: val hexDigit = (if x >= 10 then x + 'A' - 10 else x + '0').toChar For similar reasons, return statements are unnecessary in Scala, and in fact are discouraged. As in Lisp, the last expression in a block of code is the value of that block of code, and if the block of code is the body of a function, it will be returned by the function. To make it clear that all functions are expressions, even methods that return Unit are written with an equals sign def printValue(x: String): Unit = println(I ate a %s.format(x)) or equivalently (with type inference, and omitting the unnecessary newline): def printValue(x: String) = println(I ate a %s format x) Due to type inference, the type of variables, function return values, and many other expressions can typically be omitted, as the compiler can deduce it. Examples are val x = foo (for an immutable constant or immutable object) or var x = 1.5 (for a variable whose value can later be changed). Type inference in Scala is essentially local, in contrast to the more global Hindley-Milner algorithm used in Haskell, ML and other more purely functional languages. This is done to facilitate object-oriented programming. The result is that certain types still need to be declared (most notably, function parameters, and the return types of recursive functions), e.g. def formatApples(x: Int) = I ate %d apples.format(x) or (with a return type declared for a recursive function) def factorial(x: Int): Int = if x == 0 then 1 else x * factorial(x - 1) In Scala, functions are objects, and a convenient syntax exists for specifying anonymous functions. An example is the expression x => x < 2, which specifies a function with one parameter, that compares its argument to see if it is less than 2. It is equivalent to the Lisp form (lambda (x) (< x 2)). Note that neither the type of x nor the return type need be explicitly specified, and can generally be inferred by type inference; but they can be explicitly specified, e.g. as (x: Int) => x < 2 or even (x: Int) => (x < 2): Boolean. Anonymous functions behave as true closures in that they automatically capture any variables that are lexically available in the environment of the enclosing function. Those variables will be available even after the enclosing function returns, and unlike in the case of Java's anonymous inner classes do not need to be declared as final. (It is even possible to modify such variables if they are mutable, and the modified value will be available the next time the anonymous function is called.) An even shorter form of anonymous function uses placeholder variables: For example, the following: list map { x => sqrt(x) } can be written more concisely as list map { sqrt(_) } or even list map sqrt Scala enforces a distinction between immutable and mutable variables. Mutable variables are declared using the var keyword and immutable values are declared using the val keyword. A variable declared using the val keyword cannot be reassigned in the same way that a variable declared using the final keyword can't be reassigned in Java. vals are only shallowly immutable, that is, an object referenced by a val is not guaranteed to itself be immutable. Immutable classes are encouraged by convention however, and the Scala standard library provides a rich set of immutable collection classes. Scala provides mutable and immutable variants of most collection classes, and the immutable version is always used unless the mutable version is explicitly imported. The immutable variants are persistent data structures that always return an updated copy of an old object instead of updating the old object destructively in place. An example of this is immutable linked lists where prepending an element to a list is done by returning a new list node consisting of the element and a reference to the list tail. Appending an element to a list can only be done by prepending all elements in the old list to a new list with only the new element. In the same way, inserting an element in the middle of a list will copy the first half of the list, but keep a reference to the second half of the list. This is called structural sharing. This allows for very easy concurrency — no locks are needed as no shared objects are ever modified. Evaluation is strict (eager) by default. In other words, Scala evaluates expressions as soon as they are available, rather than as needed. However, it is possible to declare a variable non-strict (lazy) with the lazy keyword, meaning that the code to produce the variable's value will not be evaluated until the first time the variable is referenced. Non-strict collections of various types also exist (such as the type Stream, a non-strict linked list), and any collection can be made non-strict with the view method. Non-strict collections provide a good semantic fit to things like server-produced data, where the evaluation of the code to generate later elements of a list (that in turn triggers a request to a server, possibly located somewhere else on the web) only happens when the elements are actually needed. Functional programming languages commonly provide tail call optimization to allow for extensive use of recursion without stack overflow problems. Limitations in Java bytecode complicate tail call optimization on the JVM. In general, a function that calls itself with a tail call can be optimized, but mutually recursive functions cannot. Trampolines have been suggested as a workaround. Trampoline support has been provided by the Scala library with the object scala.util.control.TailCalls since Scala 2.8.0 (released 14 July 2010). A function may optionally be annotated with @tailrec, in which case it will not compile unless it is tail recursive. An example of this optimization could be implemented using the factorial definition. For instance, the recursive version of the factorial: def factorial(n: Int): Int = if n == 0 then 1 else n * factorial(n - 1) Could be optimized to the tail recursive version like this: @tailrec def factorial(n: Int, accum: Int): Int = if n == 0 then accum else factorial(n - 1, n * accum) However, this could compromise composability with other functions because of the new argument on its definition, so it is common to use closures to preserve its original signature: def factorial(n: Int): Int = @tailrec def loop(current: Int, accum: Int): Int = if n == 0 then accum else loop(current - 1, n * accum) loop(n, 1) // Call to the closure using the base case end factorial This ensures tail call optimization and thus prevents a stack overflow error. Scala has built-in support for pattern matching, which can be thought of as a more sophisticated, extensible version of a switch statement, where arbitrary data types can be matched (rather than just simple types like integers, Booleans and strings), including arbitrary nesting. A special type of class known as a case class is provided, which includes automatic support for pattern matching and can be used to model the algebraic data types used in many functional programming languages. (From the perspective of Scala, a case class is simply a normal class for which the compiler automatically adds certain behaviors that could also be provided manually, e.g., definitions of methods providing for deep comparisons and hashing, and destructuring a case class on its constructor parameters during pattern matching.) An example of a definition of the quicksort algorithm using pattern matching is this: def qsort(list: List[Int]): List[Int] = list match case Nil => Nil case pivot :: tail => val (smaller, rest) = tail.partition(_ < pivot) qsort(smaller) ::: pivot :: qsort(rest) The idea here is that we partition a list into the elements less than a pivot and the elements not less, recursively sort each part, and paste the results together with the pivot in between. This uses the same divide-and-conquer strategy of mergesort and other fast sorting algorithms. The match operator is used to do pattern matching on the object stored in list. Each case expression is tried in turn to see if it will match, and the first match determines the result. In this case, Nil only matches the literal object Nil, but pivot :: tail matches a non-empty list, and simultaneously destructures the list according to the pattern given. In this case, the associated code will have access to a local variable named pivot holding the head of the list, and another variable tail holding the tail of the list. Note that these variables are read-only, and are semantically very similar to variable bindings established using the let operator in Lisp and Scheme. Pattern matching also happens in local variable declarations. In this case, the return value of the call to tail.partition is a tuple — in this case, two lists. (Tuples differ from other types of containers, e.g. lists, in that they are always of fixed size and the elements can be of differing types — although here they are both the same.) Pattern matching is the easiest way of fetching the two parts of the tuple. The form _ < pivot is a declaration of an anonymous function with a placeholder variable; see the section above on anonymous functions. The list operators :: (which adds an element onto the beginning of a list, similar to cons in Lisp and Scheme) and ::: (which appends two lists together, similar to append in Lisp and Scheme) both appear. Despite appearances, there is nothing built-in about either of these operators. As specified above, any string of symbols can serve as function name, and a method applied to an object can be written infix-style without the period or parentheses. The line above as written: qsort(smaller) ::: pivot :: qsort(rest) could also be written thus: qsort(rest).::(pivot).:::(qsort(smaller)) in more standard method-call notation. (Methods that end with a colon are right-associative and bind to the object to the right.) In the pattern-matching example above, the body of the match operator is a partial function, which consists of a series of case expressions, with the first matching expression prevailing, similar to the body of a switch statement. Partial functions are also used in the exception-handling portion of a try statement: try ... catch case nfe: NumberFormatException => { println(nfe); List(0) } case _ => Nil Finally, a partial function can be used alone, and the result of calling it is equivalent to doing a match over it. For example, the prior code for quicksort can be written thus: val qsort: List[Int] => List[Int] = case Nil => Nil case pivot :: tail => val (smaller, rest) = tail.partition(_ < pivot) qsort(smaller) ::: pivot :: qsort(rest) Here a read-only variable is declared whose type is a function from lists of integers to lists of integers, and bind it to a partial function. (Note that the single parameter of the partial function is never explicitly declared or named.) However, we can still call this variable exactly as if it were a normal function: scala> qsort(List(6,2,5,9)) res32: List[Int] = List(2, 5, 6, 9) Scala is a pure object-oriented language in the sense that every value is an object. Data types and behaviors of objects are described by classes and traits. Class abstractions are extended by subclassing and by a flexible mixin-based composition mechanism to avoid the problems of multiple inheritance. Traits are Scala's replacement for Java's interfaces. Interfaces in Java versions under 8 are highly restricted, able only to contain abstract function declarations. This has led to criticism that providing convenience methods in interfaces is awkward (the same methods must be reimplemented in every implementation), and extending a published interface in a backwards-compatible way is impossible. Traits are similar to mixin classes in that they have nearly all the power of a regular abstract class, lacking only class parameters (Scala's equivalent to Java's constructor parameters), since traits are always mixed in with a class. The super operator behaves specially in traits, allowing traits to be chained using composition in addition to inheritance. The following example is a simple window system: abstract class Window: // abstract def draw() class SimpleWindow extends Window: def draw() println(in SimpleWindow) // draw a basic window trait WindowDecoration extends Window trait HorizontalScrollbarDecoration extends WindowDecoration: // abstract override is needed here for super() to work because the parent // function is abstract. If it were concrete, regular override would be enough. abstract override def draw() println(in HorizontalScrollbarDecoration) super.draw() // now draw a horizontal scrollbar trait VerticalScrollbarDecoration extends WindowDecoration: abstract override def draw() println(in VerticalScrollbarDecoration) super.draw() // now draw a vertical scrollbar trait TitleDecoration extends WindowDecoration: abstract override def draw() println(in TitleDecoration) super.draw() // now draw the title bar A variable may be declared thus: val mywin = new SimpleWindow with VerticalScrollbarDecoration with HorizontalScrollbarDecoration with TitleDecoration The result of calling mywin.draw() is: in TitleDecoration in HorizontalScrollbarDecoration in VerticalScrollbarDecoration in SimpleWindow In other words, the call to draw first executed the code in TitleDecoration (the last trait mixed in), then (through the super() calls) threaded back through the other mixed-in traits and eventually to the code in Window, even though none of the traits inherited from one another. This is similar to the decorator pattern, but is more concise and less error-prone, as it doesn't require explicitly encapsulating the parent window, explicitly forwarding functions whose implementation isn't changed, or relying on run-time initialization of entity relationships. In other languages, a similar effect could be achieved at compile-time with a long linear chain of implementation inheritance, but with the disadvantage compared to Scala that one linear inheritance chain would have to be declared for each possible combination of the mix-ins. Scala is equipped with an expressive static type system that mostly enforces the safe and coherent use of abstractions. The type system is, however, not sound. In particular, the type system supports: Classes and abstract types as object members Structural types Path-dependent types Compound types Explicitly typed self references Generic classes Polymorphic methods Upper and lower type bounds Variance Annotation Views Scala is able to infer types by use. This makes most static type declarations optional. Static types need not be explicitly declared unless a compiler error indicates the need. In practice, some static type declarations are included for the sake of code clarity. A common technique in Scala, known as enrich my library (originally termed pimp my library by Martin Odersky in 2006; concerns were raised about this phrasing due to its negative connotations and immaturity), allows new methods to be used as if they were added to existing types. This is similar to the C# concept of extension methods but more powerful, because the technique is not limited to adding methods and can, for instance, be used to implement new interfaces. In Scala, this technique involves declaring an implicit conversion from the type receiving the method to a new type (typically, a class) that wraps the original type and provides the additional method. If a method cannot be found for a given type, the compiler automatically searches for any applicable implicit conversions to types that provide the method in question. This technique allows new methods to be added to an existing class using an add-on library such that only code that imports the add-on library gets the new functionality, and all other code is unaffected. The following example shows the enrichment of type Int with methods isEven and isOdd: object MyExtensions: extension (i: Int) def isEven = i % 2 == 0 def isOdd = !i.isEven import MyExtensions.* // bring implicit enrichment into scope 4.isEven // -> true Importing the members of MyExtensions brings the implicit conversion to extension class IntPredicates into scope. Scala's standard library includes support for futures and promises, in addition to the standard Java concurrency APIs. Originally, it also included support for the actor model, which is now available as a separate source-available platform Akka licensed by Lightbend Inc. Akka actors may be distributed or combined with software transactional memory (transactors). Alternative communicating sequential processes (CSP) implementations for channel-based message passing are Communicating Scala Objects, or simply via JCSP. An Actor is like a thread instance with a mailbox. It can be created by system.actorOf, overriding the receive method to receive messages and using the ! (exclamation point) method to send a message. The following example shows an EchoServer that can receive messages and then print them. val echoServer = actor(new Act: become: case msg => println(echo  + msg) ) echoServer ! hi Scala also comes with built-in support for data-parallel programming in the form of Parallel Collections integrated into its Standard Library since version 2.9.0. The following example shows how to use Parallel Collections to improve performance. val urls = List(https://scala-lang.org, https://github.com/scala/scala) def fromURL(url: String) = scala.io.Source.fromURL(url) .getLines().mkString(\\n) val t = System.currentTimeMillis() urls.par.map(fromURL(_)) // par returns parallel implementation of a collection println(time:  + (System.currentTimeMillis - t) + ms) Besides futures and promises, actor support, and data parallelism, Scala also supports asynchronous programming with software transactional memory, and event streams. The most well-known open-source cluster-computing solution written in Scala is Apache Spark. Additionally, Apache Kafka, the publish–subscribe message queue popular with Spark and other stream processing technologies, is written in Scala. There are several ways to test code in Scala. ScalaTest supports multiple testing styles and can integrate with Java-based testing frameworks. ScalaCheck is a library similar to Haskell's QuickCheck. specs2 is a library for writing executable software specifications. ScalaMock provides support for testing high-order and curried functions. JUnit and TestNG are popular testing frameworks written in Java. Version Released Features 1.0.0-b2 8 December 2003 — 1.1.0-b1 19 February 2004 scala.Enumeration Scala license was changed to the revised BSD license 1.1.1 23 March 2004 Support for Java static inner classes Library class improvements to Iterable, Array, xml.Elem, Buffer 1.2.0 9 June 2004 Views XML literals (to be dropped in the near future, to be replaced with XML string interpolation) 1.3.0 16 September 2004 Support for Microsoft .NET Method closures Type syntax for parameterless methods changed from [] T to => T 1.4.0 20 June 2005 Attributes match keyword replaces match method Experimental support for runtime types 2.0 12 March 2006 Compiler completely rewritten in Scala Experimental support for Java generics implicit and requires keywords match keyword only allowed infix operator with connective is only allowed following an extends clause Newlines can be used as statement separators in place of semicolons Regular expression match patterns restricted to sequence patterns only For-comprehensions admit value and pattern definitions Class parameters may be prefixed by val or var Private visibility has qualifiers 2.1.0 17 March 2006 sbaz tool integrated in the Scala distribution match keyword replaces match method Experimental support for runtime types 2.1.8 23 August 2006 Protected visibility has qualifiers Private members of a class can be referenced from the companion module of the class and vice versa Implicit lookup generalised Typed pattern match tightened for singleton types 2.3.0 23 November 2006 Functions returning Unit don't have to explicitly state a return type Type variables and types are distinguished between in pattern matching All and AllRef renamed to Nothing and Null 2.4.0 9 March 2007 private and protected modifiers accept a [this] qualifier Tuples can be written with round brackets Primary constructor of a class can now be marked private or protected Attributes changed to annotations with new syntax Self aliases Operators can be combined with assignment 2.5.0 2 May 2007 Type parameters and abstract type members can also abstract over type constructors Fields of an object can be initialized before parent constructors are called Syntax change for comprehensions Implicit anonymous functions (with underscores for parameters) Pattern matching of anonymous functions extended to support any arty 2.6.0 27 July 2007 Existential types Lazy values Structural types 2.7.0 7 February 2008 Java generic types supported by default Case classes functionality extended 2.8.0 14 Jul 2010 Revision the common, uniform, and all-encompassing framework for collection types. Type specialisation Named and default arguments Package objects Improved annotations 2.9.0 12 May 2011 Parallel collections Thread safe App trait replaces Application trait DelayedInit trait Java interop improvements 2.10 4 January 2013 Value classes Implicit classes String interpolation Futures and promises Dynamic and applyDynamic Dependent method types: def identity(x: AnyRef): x.type = x // the return type says we return exactly what we got New bytecode emitter based on ASM: Can target JDK 1.5, 1.6 and 1.7 Emits 1.6 bytecode by default Old 1.5 backend is deprecated A new pattern matcher: rewritten from scratch to generate more robust code (no more exponential blow-up) code generation and analyses are now independent (the latter can be turned off with -Xno-patmat-analysis) Scaladoc improvements Implicits (-implicits flag) Diagrams (-diagrams flag, requires graphviz) Groups (-groups) Modularized language features Parallel collections are now configurable with custom thread pools Akka actors now part of the distribution scala.actors have been deprecated and the akka implementation is now included in the distribution. Performance improvements Faster inliner Range#sum is now O(1) Update of ForkJoin library Fixes in immutable TreeSet/TreeMap Improvements to PartialFunctions Addition of ??? and NotImplementedError Addition of IsTraversableOnce + IsTraversableLike type classes for extension methods Deprecations and cleanup Floating point and octal literal syntax deprecation Removed scala.dbc Experimental features Scala reflection Macros 2.10.2 6 June 2013 — 2.10.3 1 October 2013 — 2.10.4 18 March 2014 — 2.10.5 5 March 2015 — 2.11.0 21 April 2014 Collection performance improvements Compiler performance improvements 2.11.1 20 May 2014 — 2.11.2 22 July 2014 — 2.11.4 31 October 2014 — 2.11.5 8 January 2015 — 2.11.6 5 March 2015 — 2.11.7 23 June 2015 — 2.11.8 8 March 2016 — 2.11.11 18 April 2017 — 2.11.12 13 November 2017 — 2.12.0 3 November 2016 Java 8 required Java 8 bytecode generated Java 8 SAM (Functional interface) language support 2.12.1 5 December 2016 — 2.12.2 18 April 2017 — 2.12.3 26 July 2017 — 2.12.4 17 October 2017 — 2.12.5 15 March 2018 — 2.12.6 27 April 2018 — 2.12.7 27 September 2018 — 2.12.8 4 December 2018 First Scala 2.12 release with the license changed to Apache v2.0 2.12.9 5 August 2019 — 2.12.10 10 September 2019 — 2.12.11 16 March 2020 — 2.12.12 13 July 2020 — 2.12.13 12 January 2021 — 2.12.14 28 May 2021 — 2.12.15 14 Sep 2021 — 2.12.16 10 June 2022 — 2.12.17 16 September 2022 — 2.12.18 7 June 2023 — 2.12.19 25 February 2024 — 2.13.0 11 June 2019 Standard collections library redesigned Literal types Partial type unification By-name implicits Compiler optimizations 2.13.1 18 September 2019 — 2.13.2 22 April 2020 — 2.13.3 25 June 2020 — 2.13.4 19 November 2020 — 2.13.5 22 February 2021 — 2.13.6 17 May 2021 — 2.13.7 1 November 2021 — 2.13.8 12 January 2022 — 2.13.9 21 September 2022 — 2.13.10 13 October 2022 — 2.13.11 7 June 2023 — 2.13.12 11 September 2023 — 2.13.13 26 February 2024 — 2.13.14 1 May 2024 — 2.13.15 25 Sep 2024 — 3.0.0 13 May 2021 — 3.0.1 31 July 2021 — 3.0.2 7 September 2021 — 3.1.0 21 October 2021 — 3.1.1 1 February 2022 — 3.1.2 12 April 2022 — 3.1.3 21 June 2022 — 3.2.0 5 September 2022 — 3.2.1 7 November 2022 — 3.2.2 30 January 2023 — 3.3.0 30 May 2023 — 3.3.1 7 September 2023 — 3.3.2 29 February 2024 — 3.3.3 29 February 2024 — 3.4.0 29 February 2024 — 3.4.1 29 March 2024 — 3.4.2 16 May 2024 — Scala is often compared with Groovy and Clojure, two other programming languages also using the JVM. Substantial differences between these languages exist in the type system, in the extent to which each language supports object-oriented and functional programming, and in the similarity of their syntax to that of Java. Scala is statically typed, while both Groovy and Clojure are dynamically typed. This makes the type system more complex and difficult to understand but allows almost all type errors to be caught at compile-time and can result in significantly faster execution. By contrast, dynamic typing requires more testing to ensure program correctness, and thus is generally slower, to allow greater programming flexibility and simplicity. Regarding speed differences, current versions of Groovy and Clojure allow optional type annotations to help programs avoid the overhead of dynamic typing in cases where types are practically static. This overhead is further reduced when using recent versions of the JVM, which has been enhanced with an invoke dynamic instruction for methods that are defined with dynamically typed arguments. These advances reduce the speed gap between static and dynamic typing, although a statically typed language, like Scala, is still the preferred choice when execution efficiency is very important. Regarding programming paradigms, Scala inherits the object-oriented model of Java and extends it in various ways. Groovy, while also strongly object-oriented, is more focused in reducing verbosity. In Clojure, object-oriented programming is deemphasised with functional programming being the main strength of the language. Scala also has many functional programming facilities, including features found in advanced functional languages like Haskell, and tries to be agnostic between the two paradigms, letting the developer choose between the two paradigms or, more frequently, some combination thereof. Regarding syntax similarity with Java, Scala inherits much of Java's syntax, as is the case with Groovy. Clojure on the other hand follows the Lisp syntax, which is different in both appearance and philosophy.[citation needed] Back in 2013, when Scala was in version 2.10, the ThoughtWorks Technology Radar, which is an opinion based biannual report of a group of senior technologists, recommended Scala adoption in its languages and frameworks category. In July 2014, this assessment was made more specific and now refers to a “Scala, the good parts”, which is described as “To successfully use Scala, you need to research the language and have a very strong opinion on which parts are right for you, creating your own definition of Scala, the good parts.”. In the 2018 edition of the State of Java survey, which collected data from 5160 developers on various Java-related topics, Scala places third in terms of use of alternative languages on the JVM. Relative to the prior year's edition of the survey, Scala's use among alternative JVM languages fell from 28.4% to 21.5%, overtaken by Kotlin, which rose from 11.4% in 2017 to 28.8% in 2018. The Popularity of Programming Language Index, which tracks searches for language tutorials, ranked Scala 15th in April 2018 with a small downward trend, and 17th in Jan 2021. This makes Scala the 3rd most popular JVM-based language after Java and Kotlin, ranked 12th. The RedMonk Programming Language Rankings, which establishes rankings based on the number of GitHub projects and questions asked on Stack Overflow, in January 2021 ranked Scala 14th. Here, Scala was placed inside a second-tier group of languages–ahead of Go, PowerShell, and Haskell, and behind Swift, Objective-C, Typescript, and R. The TIOBE index of programming language popularity employs internet search engine rankings and similar publication counting to determine language popularity. In September 2021, it showed Scala in 31st place. In this ranking, Scala was ahead of Haskell (38th) and Erlang, but below Go (14th), Swift (15th), and Perl (19th). As of 2022[update], JVM-based languages such as Clojure, Groovy, and Scala are highly ranked, but still significantly less popular than the original Java language, which is usually ranked in the top three places. In April 2009, Twitter announced that it had switched large portions of its backend from Ruby to Scala and intended to convert the rest. Tesla, Inc. uses Akka with Scala in the backend of the Tesla Virtual Power Plant. Thereby, the Actor model is used for representing and operating devices that together with other components make up an instance of the virtual power plant, and Reactive Streams are used for data collection and data processing. Apache Kafka is implemented in Scala with regards to most of its core and other critical parts. It is maintained and extended through the open source project and by the company Confluent. Gilt uses Scala and Play Framework. Foursquare uses Scala and Lift. Coursera uses Scala and Play Framework. Apple Inc. uses Scala in certain teams, along with Java and the Play framework. The Guardian newspaper's high-traffic website guardian.co.uk announced in April 2011 that it was switching from Java to Scala. The New York Times revealed in 2014 that its internal content management system Blackbeard is built using Scala, Akka, and Play. The Huffington Post newspaper started to employ Scala as part of its content delivery system Athena in 2013. Swiss bank UBS approved Scala for general production use. LinkedIn uses the Scalatra microframework to power its Signal API. Meetup uses Unfiltered toolkit for real-time APIs. Remember the Milk uses Unfiltered toolkit, Scala and Akka for public API and real-time updates. Verizon seeking to make a next-generation framework using Scala. Airbnb develops open-source machine-learning software Aerosolve, written in Java and Scala. Zalando moved its technology stack from Java to Scala and Play. SoundCloud uses Scala for its back-end, employing technologies such as Finagle (micro services), Scalding and Spark (data processing). Databricks uses Scala for the Apache Spark Big Data platform. Morgan Stanley uses Scala extensively in their finance and asset-related projects. There are teams within Google and Alphabet Inc. that use Scala, mostly due to acquisitions such as Firebase and Nest. Walmart Canada uses Scala for their back-end platform. Duolingo uses Scala for their back-end module that generates lessons. HMRC uses Scala for many UK Government tax applications. M1 Finance uses Scala for their back-end platform. In November 2011, Yammer moved away from Scala for reasons that included the learning curve for new team members and incompatibility from one version of the Scala compiler to the next. In March 2015, former VP of the Platform Engineering group at Twitter Raffi Krikorian, stated that he would not have chosen Scala in 2011 due to its learning curve. The same month, LinkedIn SVP Kevin Scott stated their decision to minimize [their] dependence on Scala. Free and open-source software portalComputer programming portal sbt, a widely used build tool for Scala projects Spark Framework is designed to handle, and process big-data and it solely supports Scala Neo4j is a java spring framework supported by Scala with domain-specific functionality, analytical capabilities, graph algorithms, and many more Play!, an open-source Web application framework that supports Scala Akka, an open-source toolkit for building concurrent and distributed applications Chisel, an open-source language built on Scala that is used for hardware design and generation. See also: Category:Free software programmed in Scala ^ https://www.scala-lang.org/download/3.5.0.html. {{cite web}}: Missing or empty |title= (help) ^ Notice file. GitHub. 2019-01-24. Retrieved 2019-12-04. ^ Scala Macros. ^ Fogus, Michael (6 August 2010). MartinOdersky take(5) toList. Send More Paramedics. Retrieved 2012-02-09. ^ a b c d Odersky, Martin (11 January 2006). The Scala Experiment - Can We Provide Better Language Support for Component Systems? (PDF). Retrieved 2016-06-22. ^ a b c d Odersky, Martin; et al. (2006). An Overview of the Scala Programming Language (PDF) (2nd ed.). École Polytechnique Fédérale de Lausanne (EPFL). Archived (PDF) from the original on 2020-07-09. ^ Odersky, Martin (2008). Programming in Scala. Mountain View, California: Artima. p. 3. ISBN 9780981531601. Retrieved 12 June 2014. ^ Wampler, Dean; Payne, Alex (15 September 2009). Programming Scala: Scalability = Functional Programming + Objects. O'Reilly Media, Inc. p. 7. ISBN 978-1-4493-7926-1. Retrieved 13 May 2024. The creators of Scala actually pronounce it scah-lah, like the Italian word for stairs. The two as are pronounced the same. ^ Potvin, Pascal; Bonja, Mario (24 September 2015). SDL 2013: Model-Driven Dependability Engineering. Lecture Notes in Computer Science. Vol. 7916. arXiv:1509.07326. doi:10.1007/978-3-642-38911-5. ISBN 978-3-642-38910-8. S2CID 1214469. ^ Frequently Asked Questions: Java Interoperability. Scala-lang.org. Retrieved 2015-02-06. ^ Martin Odersky (17 June 2020). Martin Odersky: A Scala 3 Update (video). YouTube. Event occurs at 36:35–45:08. Archived from the original on 2021-12-21. Retrieved 2021-04-24. ^ Effect expt. scala. Retrieved 2022-07-31. ^ Loverdo, Christos (2010). Steps in Scala: An Introduction to Object-Functional Programming. Cambridge University Press. p. xiii. ISBN 9781139490948. Retrieved 31 July 2014. ^ a b c d Odersky, Martin (9 June 2006). A Brief History of Scala. Artima.com. ^ a b c d Odersky, M.; Rompf, T. (2014). Unifying functional and object-oriented programming with Scala. Communications of the ACM. 57 (4): 76. doi:10.1145/2591013. ^ Martin Odersky, The Scala Language Specification Version 2.7 ^ Scala Team Wins ERC Grant. Retrieved 4 July 2015. ^ Commercial Support for Scala. 2011-05-12. Retrieved 2011-08-18. ^ Why We Invested in Typesafe: Modern Applications Demand Modern Tools. 2011-05-12. Retrieved 2018-05-08. ^ Open-source Scala gains commercial backing. 2011-05-12. Retrieved 2011-10-09. ^ Cloud computing pioneer Martin Odersky takes wraps off his new company Typesafe. 2011-05-12. Retrieved 2011-08-24. ^ Scala on Android. Archived from the original on 20 June 2016. Retrieved 8 June 2016. ^ Scala 2.12.8 is now available!. 2018-12-04. Retrieved 2018-12-09. ^ Scala Js Is No Longer Experimental | The Scala Programming Language. Scala-lang.org. 5 February 2015. Retrieved 28 October 2015. ^ Releases · scala-js/Scala-js. GitHub. ^ Krill, Paul (15 March 2017). Scaled-down Scala variant cuts ties to the JVM. InfoWorld. Retrieved 21 March 2017. ^ Krill, Paul (2016-05-11). Scala language moves closer to bare metal. InfoWorld. ^ Expunged the .net backend. by paulp · Pull Request #1718 · scala/scala · GitHub. Github.com (2012-12-05). Retrieved on 2013-11-02. ^ Getting Started with Scala. Scala-lang.org. 15 July 2008. Retrieved 31 July 2014. ^ Home. Blog.lostlake.org. Archived from the original on 31 August 2010. Retrieved 2013-06-25. ^ Scala's built-in control structures such as if or while cannot be re-implemented. There is a research project, Scala-Virtualized, that aimed at removing these restrictions: Adriaan Moors, Tiark Rompf, Philipp Haller and Martin Odersky. Scala-Virtualized. Proceedings of the ACM SIGPLAN 2012 workshop on Partial evaluation and program manipulation, 117–120. July 2012. ^ a b Pimp my Library. Artima.com. 2006-10-09. Retrieved 2013-06-25. ^ Expressions | Scala 2.13. scala-lang.org. Retrieved 2021-05-24. ^ Mutable and Immutable Collections - Scala Documentation. Retrieved 30 April 2020. ^ Collections - Concrete Immutable Collection Classes - Scala Documentation. Retrieved 4 July 2015. ^ Dougherty, Rich. Rich Dougherty's blog. Retrieved 4 July 2015. ^ TailCalls - Scala Standard Library API (Scaladoc) 2.10.2 - scala.util.control.TailCalls. Scala-lang.org. Retrieved 2013-06-25. ^ a b Java and Scala's Type Systems are Unsound (PDF). ^ Giarrusso, Paolo G. (2013). Reify your collection queries for modularity and speed!. Proceedings of the 12th annual international conference on Aspect-oriented software development. ACM. arXiv:1210.6284. Bibcode:2012arXiv1210.6284G. Also known as pimp-my-library pattern ^ Gilbert, Clint (2011-11-15). What is highest priority for Scala to succeed in corporate world (Should be in scala-debate?) ?. Scala-lang.org. Retrieved 2019-05-08. ^ Should we enrich or pimp Scala libraries?. stackexchange.com. 17 June 2013. Retrieved 15 April 2016. ^ Implicit classes were introduced in Scala 2.10 to make method extensions more concise. This is equivalent to adding a method implicit def IntPredicate(i: Int) = new IntPredicate(i). The class can also be defined as implicit class IntPredicates(val i: Int) extends AnyVal { ... }, producing a so-called value class, also introduced in Scala 2.10. The compiler will then eliminate actual instantiations and generate static methods instead, allowing extension methods to have virtually no performance overhead. ^ What is Akka?, Akka online documentation ^ Sufrin, Bernard (2008). Communicating Scala Objects. In Welch, P. H.; Stepney, S.; Polack, F.A.C.; Barnes, F. R. M.; McEwan, A.A.; Stiles, G.S.; Broenink, J. F.; Sampson, A. T. (eds.). Communicating Process Architectures 2008: WoTUG-31 (PDF). IOS Press. ISBN 978-1586039073. ^ Yan, Kay. Scala Tour. Retrieved 4 July 2015. ^ Parallelcollections - Overview - Scala Documentation. Docs.scala-lang.org. Retrieved 2013-06-25. ^ Yan, Kay. Scala Tour. Retrieved 4 July 2015. ^ Learning Concurrent Programming in Scala, Aleksandar Prokopec, Packt Publishing ^ Kops, Micha (2013-01-13). A short Introduction to ScalaTest. hascode.com. Retrieved 2014-11-07. ^ Nilsson, Rickard (2008-11-17). ScalaCheck 1.5. Scala-lang.org. Retrieved 2014-11-07. ^ Build web applications using Scala and the Play Framework. workwithplay.com. 2013-05-22. Retrieved 2014-11-07. ^ Butcher, Paul (2012-06-04). ScalaMock 3.0 Preview Release. paulbutcher.com. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ a b c d e f g Scala Change History. Scala-lang.org. Archived from the original on 2007-10-09. ^ Dropped: XML Literals. dotty.epfl.ch. Retrieved 2021-03-05. ^ Changes in Version 2.0 (12-Mar-2006). Scala-lang.org. 2006-03-12. Retrieved 2014-11-07. ^ Changes in Version 2.1.8 (23-Aug-2006). Scala-lang.org. 2006-08-23. Retrieved 2014-11-07. ^ Changes in Version 2.3.0 (23-Nov-2006). Scala-lang.org. 2006-11-23. Retrieved 2014-11-07. ^ Changes in Version 2.4.0 (09-Mar-2007). Scala-lang.org. 2007-03-09. Retrieved 2014-11-07. ^ Changes in Version 2.5 (02-May-2007). Scala-lang.org. 2007-05-02. Retrieved 2014-11-07. ^ Changes in Version 2.6 (27-Jul-2007). Scala-lang.org. 2007-06-27. Retrieved 2014-11-07. ^ Changes in Version 2.7.0 (07-Feb-2008). Scala-lang.org. 2008-02-07. Retrieved 2014-11-07. ^ Changes in Version 2.8.0 (14-Jul-2010). Scala-lang.org. 2010-07-10. Retrieved 2014-11-07. ^ Changes in Version 2.9.0 (12-May-2011). Scala-lang.org. 2011-05-12. Retrieved 2014-11-07. ^ Changes in Version 2.10.0. Scala-lang.org. 2013-01-04. Retrieved 2014-11-07. ^ Harrah, Mark. Value Classes and Universal Traits. Scala-lang.org. Retrieved 2014-11-07. ^ Suereth, Josh. SIP-13 - Implicit classes. Scala-lang.org. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ Suereth, Josh. String Interpolation. Scala-lang.org. Retrieved 2014-11-07. ^ Haller, Philipp; Prokopec, Aleksandar. Futures and Promises. Scala-lang.org. Retrieved 2014-11-07. ^ SIP-17 - Type Dynamic. Scala-lang.org. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ SIP-18 - Modularizing Language Features. Scala-lang.org. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ Prokopec, Aleksandar; Miller, Heather. Parallel Collections. Scala-lang.org. Retrieved 2014-11-07. ^ Miller, Heather; Burmako, Eugene. Reflection Overview. Scala-lang.org. Retrieved 2014-11-07. ^ Burmako, Eugene. Def Macros. Scala-lang.org. Retrieved 2014-11-07. ^ Scala 2.10.2 is now available!. Scala-lang.org. 2013-06-06. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ Scala 2.10.3 is now available!. Scala-lang.org. 2013-10-01. Archived from the original on 2014-11-08. Retrieved 2014-11-07. ^ Scala 2.10.4 is now available!. Scala-lang.org. 2014-03-18. Retrieved 2015-01-07. ^ Scala 2.10.5 is now available!. Scala-lang.org. 2015-03-04. Retrieved 2015-03-23. ^ Scala 2.11.0 is now available!. Scala-lang.org. 2014-04-21. Retrieved 2014-11-07. ^ Scala 2.11.1 is now available!. Scala-lang.org. 2014-05-20. Retrieved 2014-11-07. ^ Scala 2.11.2 is now available!. Scala-lang.org. 2014-07-22. Retrieved 2014-11-07. ^ Scala 2.11.4 is now available!. Scala-lang.org. 2014-10-30. Retrieved 2014-11-07. ^ Scala 2.11.5 is now available!. Scala-lang.org. 2015-01-08. Retrieved 2015-01-22. ^ Scala 2.11.6 is now available!. Scala-lang.org. 2015-03-05. Retrieved 2015-03-12. ^ Scala 2.11.7 is now available!. Scala-lang.org. 2015-06-23. Retrieved 2015-07-03. ^ Scala 2.11.8 is now available!. Scala-lang.org. 2016-03-08. Retrieved 2016-03-09. ^ a b Three new releases and more GitHub goodness!. Scala-lang.org. 2017-04-18. Retrieved 2017-04-19. ^ Security update: 2.12.4, 2.11.12, 2.10.7 (CVE-2017-15288). Scala-lang.org. 2017-11-13. Retrieved 2018-05-04. ^ Scala 2.12.0 is now available!. Scala-lang.org. 2016-11-03. Retrieved 2017-01-08. ^ Scala 2.12.1 is now available!. Scala-lang.org. 2016-12-05. Retrieved 2017-01-08. ^ Scala 2.12.3 is now available!. Scala-lang.org. 2017-07-26. Retrieved 2017-08-16. ^ Scala 2.12.4 is now available!. Scala-lang.org. 2017-10-18. Retrieved 2017-10-26. ^ Scala 2.12.5 is now available!. Scala-lang.org. 2018-03-15. Retrieved 2018-03-20. ^ Scala 2.12.6 is now available!. Scala-lang.org. 2018-04-27. Retrieved 2018-05-04. ^ Scala 2.12.7 is now available!. Scala-lang.org. 2018-09-27. Retrieved 2018-10-09. ^ Scala 2.12.8 is now available!. Scala-lang.org. 2018-12-04. Retrieved 2018-12-09. ^ Scala 2.12.9 is now available!. Scala-lang.org. 2019-08-05. Retrieved 2021-01-20. ^ Scala 2.12.10 is now available!. Scala-lang.org. 2019-09-10. Retrieved 2021-01-20. ^ Scala 2.12.11 is now available!. Scala-lang.org. 2020-03-16. Retrieved 2021-01-20. ^ Scala 2.12.12 is now available!. Scala-lang.org. 2020-07-13. Retrieved 2021-01-20. ^ Scala 2.12.13 is now available!. Scala-lang.org. 2021-01-12. Retrieved 2021-01-20. ^ Scala 2.12.14 is now available!. Scala-lang.org. 2021-05-28. Retrieved 2022-04-15. ^ Scala 2.12.15 is now available!. Scala-lang.org. 2021-09-14. Retrieved 2022-06-19. ^ Scala 2.12.16 is now available!. Scala-lang.org. 2022-06-10. Retrieved 2022-06-19. ^ Scala 2.12.17 is now available!. Scala-lang.org. 2022-06-10. Retrieved 2022-09-16. ^ Scala 2.12.18 is now available!. Scala-lang.org. 2022-06-10. Retrieved 2023-06-07. ^ Scala 2.12.19 is now available!. Scala-lang.org. 2024-02-25. Retrieved 2024-08-12. ^ Scala 2.13.0 is now available!. Scala-lang.org. 2019-06-11. Retrieved 2018-06-17. ^ Scala 2.13.1 is now available!. Scala-lang.org. 2019-09-18. Retrieved 2021-01-20. ^ Scala 2.13.2 is now available!. Scala-lang.org. 2020-04-22. Retrieved 2021-01-20. ^ Scala 2.13.3 is now available!. Scala-lang.org. 2020-06-25. Retrieved 2021-01-20. ^ Scala 2.13.4 is now available!. Scala-lang.org. 2020-11-19. Retrieved 2021-01-20. ^ Scala 2.13.5 is now available!. Scala-lang.org. 2021-02-22. Retrieved 2021-02-26. ^ Scala 2.13.6 is now available!. Scala-lang.org. 2021-05-17. Retrieved 2022-04-15. ^ Scala 2.13.7 is now available!. Scala-lang.org. 2021-11-01. Retrieved 2022-04-15. ^ Scala 2.13.8 is now available!. Scala-lang.org. 2022-01-12. Retrieved 2022-04-15. ^ Scala 2.13.9 is now available!. Scala-lang.org. 2022-09-21. Retrieved 2023-08-28. ^ Scala 2.13.10 is now available!. Scala-lang.org. 2022-10-13. Retrieved 2023-08-28. ^ Scala 2.13.11 is now available!. Scala-lang.org. 2023-06-07. Retrieved 2023-08-28. ^ Scala 2.13.12 is now available!. Scala-lang.org. 2023-09-11. Retrieved 2024-08-12. ^ Scala 2.13.13 is now available!. Scala-lang.org. 2024-02-26. Retrieved 2024-08-12. ^ Scala 2.13.14 is now available!. Scala-lang.org. 2024-05-01. Retrieved 2024-08-12. ^ Scala 2.13.15 is now available!. Scala-lang.org. 2024-09-25. Retrieved 2024-12-05. ^ Scala 3 is here!. Scala-lang.org. 2021-05-14. Retrieved 2021-05-26. ^ Scala 3.0.1 and 3.0.2-RC1 are here!. Scala-lang.org. 2021-07-31. Retrieved 2024-08-12. ^ Scala 3.0.2 released!. Scala-lang.org. 2021-09-07. Retrieved 2024-08-12. ^ Scala 3.1.0 released!. Scala-lang.org. 2021-10-21. Retrieved 2024-08-12. ^ Scala 3.1.1 and forward compatibility news. Scala-lang.org. 2022-02-01. Retrieved 2024-08-12. ^ Scala 3.1.2 released!. Scala-lang.org. 2022-04-12. Retrieved 2024-08-12. ^ Scala 3.1.3 released!. Scala-lang.org. 2022-06-21. Retrieved 2024-08-12. ^ Scala 3.2.0 released!. Scala-lang.org. 2022-09-05. Retrieved 2024-08-12. ^ Scala 3.2.1 released!. Scala-lang.org. 2022-11-07. Retrieved 2024-08-12. ^ Scala 3.2.2 is now available!. Scala-lang.org. 2023-01-30. Retrieved 2024-08-12. ^ Scala 3.3.0 released!. Scala-lang.org. 2023-05-30. Retrieved 2024-08-12. ^ Scala 3.3.1 LTS is now available!. Scala-lang.org. 2023-09-07. Retrieved 2024-08-12. ^ Scala 3.3.2. github.com. 2024-02-29. Retrieved 2024-08-12. ^ a b Scala 3.4.0 and 3.3.3 LTS released!. Scala-lang.org. 2024-02-29. Retrieved 2024-08-12. ^ Scala 3.4.1 is now available!. Scala-lang.org. 2024-03-29. Retrieved 2024-08-12. ^ Scala 3.4.2 is now available!. Scala-lang.org. 2024-05-16. Retrieved 2024-08-12. ^ ThoughtWorks Technology Radar FAQ. ^ ThoughtWorks Technology Radar MAY 2013 (PDF). ^ Scala, the good parts. ^ The State of Java in 2018. ^ Popularity of Programming Language Index. ^ a b O'Grady, Stephen (1 March 2021). The RedMonk Programming Language Rankings: January 2021. RedMonk. ^ a b TIOBE Index for May 2021. ^ Greene, Kate (1 April 2009). The Secret Behind Twitter's Growth, How a new Web programming language is helping the company handle its increasing popularity. Technology Review. MIT. Retrieved 6 April 2009. ^ Breck, Colin; Link, Percy (2020-03-23). Tesla Virtual Power Plant (Architecture and Design). Retrieved 2023-03-28. ^ Apache Kafka source code at GitHub. Apache Software Foundation. Retrieved 29 March 2023. ^ Play Framework, Akka and Scala at Gilt Groupe. Lightbend. 15 July 2013. Retrieved 16 July 2016. ^ Scala, Lift, and the Future. Archived from the original on 13 January 2016. Retrieved 4 July 2015. ^ Saeta, Brennan (2014-02-17). Why we love Scala at Coursera. Coursera Engineering. Retrieved 2023-09-21. ^ Apple Engineering PM Jarrod Nettles on Twitter. Jarrod Nettles. Retrieved 2016-03-11. ^ 30 Scala job openings at Apple. Alvin Alexander. Retrieved 2016-03-11. ^ David Reid & Tania Teixeira (26 February 2010). Are people ready to pay for online news?. BBC. Retrieved 2010-02-28. ^ Guardian switching from Java to Scala. Heise Online. 2011-04-05. Retrieved 2011-04-05. ^ Guardian.co.uk Switching from Java to Scala. InfoQ.com. 2011-04-04. Retrieved 2011-04-05. ^ Roy, Suman; Sundaresan, Krishna (2014-05-13). Building Blackbeard: A Syndication System Powered By Play, Scala and Akka. The New York Times. Retrieved 2014-07-20. ^ Pavley, John (2013-08-11). Sneak Peek: HuffPost Brings Real Time Collaboration to the Newsroom. Huffington Post. Retrieved 2014-07-20. ^ Binstock, Andrew (2011-07-14). Interview with Scala's Martin Odersky. Dr. Dobb's Journal. Retrieved 2012-02-10. ^ Synodinos, Dionysios G. (2010-10-11). LinkedIn Signal: A Case Study for Scala, JRuby and Voldemort. InfoQ. ^ Real-life Meetups Deserve Real-time APIs. ^ Real time updating comes to the Remember The Milk web app. ^ WHAT IS SCALA. 8 March 2023. Retrieved 2023-03-17. ^ Novet, Jordan (2015-06-04). Airbnb announces Aerosolve, an open-source machine learning software package. Retrieved 2016-03-09. ^ Kops, Alexander (2015-12-14). Zalando Tech: From Java to Scala in Less Than Three Months. Retrieved 2016-03-09. ^ Calçado, Phil (2014-06-13). Building Products at SoundCloud—Part III: Microservices in Scala and Finagle. Retrieved 2016-03-09. ^ Customer Case Studies: SoundCloud. Concurrent Inc. 2014-11-18. Retrieved 2016-03-09. ^ Scala at Morgan Stanley (video). Skills Matter. 2015-12-03. Retrieved 2016-03-11. ^ Greg Soltis (2015-12-03). SF Scala, Greg Soltis: High Performance Services in Scala (video). Skills Matter. Archived from the original on 2021-12-21. Retrieved 2016-03-11. ^ Lee Mighdoll. Scala jobs at Nest. Retrieved 2016-03-11. ^ Nurun. Nurun Launches Redesigned Transactional Platform With Walmart Canada. Retrieved 2013-12-11. ^ Horie, André K. (2017-01-31). Rewriting Duolingo's engine in Scala. Retrieved 2017-02-03. ^ HMRC GitHub repository. GitHub. ^ Meet M1 Finance, A ScalaCon Gold Sponsor. ScalaCon. Retrieved 2023-09-02. ^ Hale, Coda (29 November 2011). The Rest of the Story. codahale.com. Retrieved 7 November 2013. ^ Krikorian, Raffi (17 March 2015). O'Reilly Software Architecture Conference 2015 Complete Video Compilation: Re-Architecting on the Fly - Raffi Krikorian - Part 3 (video). O'Reilly Media. Event occurs at 4:57. Retrieved 8 March 2016. What I would have done differently four years ago is use Java and not used Scala as part of this rewrite. [...] it would take an engineer two months before they're fully productive and writing Scala code.[permanent dead link] ^ Scott, Kevin (11 Mar 2015). Is LinkedIn getting rid of Scala?. quora.com. Retrieved 25 January 2016. ^ Chisel: Constructing Hardware in a Scala Embedded Language. UC Berkeley APSIRE. Retrieved 27 May 2020. Wikibooks has a book on the topic of: Scala Odersky, Martin; Spoon, Lex; Venners, Bill (15 December 2019). Programming in Scala: A Comprehensive Step-by-step Guide (4th ed.). Artima Inc. p. 896. ISBN 978-0-9815316-1-8. Horstmann, Cay (15 December 2016). Scala for the Impatient (2nd ed.). Addison-Wesley Professional. p. 384. ISBN 978-0-134-54056-6. Wampler, Dean; Payne, Alex (14 December 2014). Programming Scala: Scalability = Functional Programming + Objects (2nd ed.). O'Reilly Media. p. 583. ISBN 978-1-491-94985-6. Suereth, Joshua D. (Spring 2011). Scala in Depth. Manning Publications. p. 225. ISBN 978-1-935182-70-2. Meredith, Gregory (2011). Monadic Design Patterns for the Web (PDF) (1st ed.). p. 300. Odersky, Martin; Spoon, Lex; Venners, Bill (10 December 2008). Programming in Scala, eBook (1st ed.). Artima Inc. vteJava (software platform)Platforms JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK GraalVM Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Pack200 Modules Major third-partytechnologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations JVM languages Java BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Oxygene CommunityConferences JavaOne Devoxx Organizations Apache Software Foundation Eclipse Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal vteCommon Language InfrastructureArchitecture Application domain Code Access Security Common Intermediate Language instructions Common Type System Platform Invocation Services Virtual Execution System Components Assembly Delegate Global Assembly Cache Manifest Metadata Standard Libraries ImplementationsMicrosoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono DotGNU LanguagesMajor languages C# Visual Basic F# PowerShell Other Axum A# Boo Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Small Basic Comparison C# and Java C# and Visual Basic .NET Visual Basic and Visual Basic .NET vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef",
    "paradigm": "Multi-paradigm : concurrent , functional , imperative , object-oriented",
    "first_appeared": "20 January 2004 ; 21 years ago ( 2004-01-20 )",
    "stable_release": "3.5.0",
    "typing_discipline": "Inferred , static , strong , structural",
    "influenced_by": "Common Lisp , Eiffel , Erlang , Haskell , Java , OCaml , Oz , Pizza , Scheme , Smalltalk , Standard ML",
    "influenced": "Ceylon , Chisel , Fantom , F# , C# , Kotlin , Lasso , Red , Flix",
    "stable_release_date": "2024-08-22T00:00:00Z"
  },
  {
    "title": "Haskell",
    "url": "https://en.wikipedia.org/wiki/Haskell",
    "history": "After the release of Miranda by Research Software Ltd. in 1985, interest in lazy functional languages grew. By 1987, more than a dozen non-strict, purely functional programming languages existed. Miranda was the most widely used, but it was proprietary software. At the conference on Functional Programming Languages and Computer Architecture (FPCA '87) in Portland, Oregon, there was a strong consensus that a committee be formed to define an open standard for such languages. The committee's purpose was to consolidate existing functional languages into a common one to serve as a basis for future research in functional-language design.",
    "haskell__to_": "Haskell was developed by a committee, attempting to bring together off the shelf solutions where possible. Type classes, which enable type-safe operator overloading, were first proposed by Philip Wadler and Stephen Blott to address the ad-hoc handling of equality types and arithmetic overloading in languages at the time. In early versions of Haskell up until and including version 1.2, user interaction and input/output (IO) were handled by both streams based and continuation based mechanisms which were widely considered unsatisfactory. In version 1.3, monadic IO was introduced, along with the generalisation of type classes to higher kinds (type constructors). Along with do notation, which provides syntactic sugar for the Monad type class, this gave Haskell an effect system that maintained referential transparency and was convenient. Other notable changes in early versions were the approach to the 'seq' function, which creates a data dependency between values, and is used in lazy languages to avoid excessive memory consumption; with it moving from a type class to a standard function to make refactoring more practical. The first version of Haskell (Haskell 1.0) was defined in 1990. The committee's efforts resulted in a series of language definitions (1.0, 1.1, 1.2, 1.3, 1.4). Hierarchy of type classes in the Haskell prelude as of GHC 7.10. The inclusion of Foldable and Traversable (with corresponding changes to the type signatures of some functions), and of Applicative as intermediate between Functor and Monad, are deviations from the Haskell 2010 standard.",
    "haskell_": "In early 2006, the process of defining a successor to the Haskell 98 standard, informally named Haskell Prime, began. This was intended to be an ongoing incremental process to revise the language definition, producing a new revision up to once per year. The first revision, named Haskell 2010, was announced in November 2009 and published in July 2010. Haskell 2010 is an incremental update to the language, mostly incorporating several well-used and uncontroversial features previously enabled via compiler-specific flags. Hierarchical module names. Module names are allowed to consist of dot-separated sequences of capitalized identifiers, rather than only one such identifier. This lets modules be named in a hierarchical manner (e.g., Data.List instead of List), although technically modules are still in a single monolithic namespace. This extension was specified in an addendum to Haskell 98 and was in practice universally used. The foreign function interface (FFI) allows bindings to other programming languages. Only bindings to C are specified in the Report, but the design allows for other language bindings. To support this, data type declarations were permitted to contain no constructors, enabling robust nonce types for foreign data that could not be constructed in Haskell. This extension was also previously specified in an Addendum to the Haskell 98 Report and widely used. So-called n+k patterns (definitions of the form fact (n+1) = (n+1) * fact n) were no longer allowed. This syntactic sugar had misleading semantics, in which the code looked like it used the (+) operator, but in fact desugared to code using (-) and (>=). The rules of type inference were relaxed to allow more programs to type check. Some syntax issues (changes in the formal grammar) were fixed: pattern guards were added, allowing pattern matching within guards; resolution of operator fixity was specified in a simpler way that reflected actual practice; an edge case in the interaction of the language's lexical syntax of operators and comments was addressed, and the interaction of do-notation and if-then-else was tweaked to eliminate unexpected syntax errors. The LANGUAGE pragma was specified. By 2010, dozens of extensions to the language were in wide use, and GHC (among other compilers) provided the LANGUAGE pragma to specify individual extensions with a list of identifiers. Haskell 2010 compilers are required to support the Haskell2010 extension and are encouraged to support several others, which correspond to extensions added in Haskell 2010.",
    "future_standards": "The next formal specification had been planned for 2020. On 29 October 2021, with GHC version 9.2.1, the GHC2021 extension was released. While this is not a formal language spec, it combines several stable, widely-used GHC extensions to Haskell 2010.",
    "features": "Main article: Haskell features See also: Glasgow Haskell Compiler § Extensions to Haskell Haskell features lazy evaluation, lambda expressions, pattern matching, list comprehension, type classes and type polymorphism. It is a purely functional programming language, which means that functions generally have no side effects. A distinct construct exists to represent side effects, orthogonal to the type of functions. A pure function can return a side effect that is subsequently executed, modeling the impure functions of other languages. Haskell has a strong, static type system based on Hindley–Milner type inference. Its principal innovation in this area is type classes, originally conceived as a principled way to add overloading to the language, but since finding many more uses. The construct that represents side effects is an example of a monad: a general framework which can model various computations such as error handling, nondeterminism, parsing and software transactional memory. They are defined as ordinary datatypes, but Haskell provides some syntactic sugar for their use. Haskell has an open, published specification, and multiple implementations exist. Its main implementation, the Glasgow Haskell Compiler (GHC), is both an interpreter and native-code compiler that runs on most platforms. GHC is noted for its rich type system incorporating recent innovations such as generalized algebraic data types and type families. The Computer Language Benchmarks Game also highlights its high-performance implementation of concurrency and parallelism. An active, growing community exists around the language, and more than 5,400 third-party open-source libraries and tools are available in the online package repository Hackage.",
    "code_examples": "See also: Haskell features § Examples A Hello, World! program in Haskell (only the last line is strictly necessary): module Main (main) where -- not needed in interpreter, is the default in a module file main :: IO () -- the compiler can infer this type definition main = putStrLn Hello, World! The factorial function in Haskell, defined in a few different ways (the first line is the type annotation, which is optional and is the same for each implementation): factorial :: (Integral a) => a -> a -- Using recursion (with the ifthenelse expression) factorial n = if n < 2 then 1 else n * factorial (n - 1) -- Using recursion (with pattern matching) factorial 0 = 1 factorial n = n * factorial (n - 1) -- Using recursion (with guards) factorial n | n < 2 = 1 | otherwise = n * factorial (n - 1) -- Using a list and the product function factorial n = product [1..n] -- Using fold (implements product) factorial n = foldl (*) 1 [1..n] -- Point-free style factorial = foldr (*) 1 . enumFromTo 1 Using Haskell's Fixed-point combinator allows this function to be written without any explicit recursion. import Data.Function (fix) factorial = fix fac where fac f x | x < 2 = 1 | otherwise = x * f (x - 1) As the Integer type has arbitrary-precision, this code will compute values such as factorial 100000 (a 456,574-digit number), with no loss of precision. An implementation of an algorithm similar to quick sort over lists, where the first element is taken as the pivot: -- Type annotation (optional, same for each implementation) quickSort :: Ord a => [a] -> [a] -- Using list comprehensions quickSort [] = [] -- The empty list is already sorted quickSort (x:xs) = quickSort [a | a <- xs, a < x] -- Sort the left part of the list ++ [x] ++ -- Insert pivot between two sorted parts quickSort [a | a <- xs, a >= x] -- Sort the right part of the list -- Using filter quickSort [] = [] quickSort (x:xs) = quickSort (filter (<x) xs) ++ [x] ++ quickSort (filter (>=x) xs)",
    "implementations": "All listed implementations are distributed under open source licenses. Implementations that fully or nearly comply with the Haskell 98 standard include: The Glasgow Haskell Compiler (GHC) compiles to native code on many different processor architectures, and to ANSI C, via one of two intermediate languages: C--, or in more recent versions, LLVM (formerly Low Level Virtual Machine) bitcode. GHC has become the de facto standard Haskell dialect. There are libraries (e.g., bindings to OpenGL) that work only with GHC. GHC was also distributed with the Haskell platform. GHC features an asynchronous runtime that also schedules threads across multiple CPU cores similar to the Go runtime. Jhc, a Haskell compiler written by John Meacham, emphasizes speed and efficiency of generated programs and exploring new program transformations. Ajhc is a fork of Jhc. The Utrecht Haskell Compiler (UHC) is a Haskell implementation from Utrecht University. It supports almost all Haskell 98 features plus many experimental extensions. It is implemented using attribute grammars and is primarily used for research on generated type systems and language extensions. Implementations no longer actively maintained include: The Haskell User's Gofer System (Hugs) is a bytecode interpreter. It was once one of the implementations used most widely, alongside the GHC compiler, but has now been mostly replaced by GHCi. It also comes with a graphics library. HBC is an early implementation supporting Haskell 1.4. It was implemented by Lennart Augustsson in, and based on, Lazy ML. It has not been actively developed for some time. nhc98 is a bytecode compiler focusing on minimizing memory use. The York Haskell Compiler (Yhc) was a fork of nhc98, with the goals of being simpler, more portable and efficient, and integrating support for Hat, the Haskell tracer. It also had a JavaScript backend, allowing users to run Haskell programs in web browsers. Implementations not fully Haskell 98 compliant, and using a variant Haskell language, include: Eta and Frege are dialects of Haskell targeting the Java virtual machine. Gofer is an educational dialect of Haskell, with a feature called constructor classes, developed by Mark Jones. It is supplanted by Haskell User's Gofer System (Hugs). Helium, a newer dialect of Haskell. The focus is on making learning easier via clearer error messages by disabling type classes as a default.",
    "notable_applications": "Agda is a proof assistant written in Haskell. Cabal is a tool for building and packaging Haskell libraries and programs. Darcs is a revision control system written in Haskell, with several innovative features, such as more precise control of patches to apply. Glasgow Haskell Compiler (GHC) is also often a testbed for advanced functional programming features and optimizations in other programming languages. Git-annex is a tool to manage (big) data files under Git version control. It also provides a distributed file synchronization system (git-annex assistant). Linspire Linux chose Haskell for system tools development. Pandoc is a tool to convert one markup format into another. Pugs is a compiler and interpreter for the programming language then named Perl 6, but since renamed Raku. TidalCycles is a domain special language for live coding musical patterns, embedded in Haskell. Xmonad is a window manager for the X Window System, written fully in Haskell. GarganText is a collaborative tool to map through semantic analysis texts on any web browser, written fully in Haskell and PureScript, which is used for instance in the research community to draw up state-of-the-art reports and roadmaps.",
    "industry": "Bluespec SystemVerilog (BSV) is a language extension of Haskell, for designing electronics. It is an example of a domain-specific language embedded into Haskell. Further, Bluespec, Inc.'s tools are implemented in Haskell. Cryptol, a language and toolchain for developing and verifying cryptography algorithms, is implemented in Haskell. Facebook implements its anti-spam programs in Haskell, maintaining the underlying data access library as open-source software. The Cardano blockchain platform is implemented in Haskell. GitHub implemented Semantic, an open-source library for analysis, diffing, and interpretation of untrusted source code, in Haskell. Standard Chartered's financial modelling language Mu is syntactic Haskell running on a strict runtime. seL4, the first formally verified microkernel, used Haskell as a prototyping language for the OS developer.: p.2 At the same time, the Haskell code defined an executable specification with which to reason, for automatic translation by the theorem-proving tool.: p.3 The Haskell code thus served as an intermediate prototype before final C refinement.: p.3 Target stores' supply chain optimization software is written in Haskell. Co–Star Mercury Technologies' back end is written in Haskell.",
    "web": "Notable web frameworks written for Haskell include: IHP Servant Snap Yesod",
    "criticism": "Jan-Willem Maessen, in 2002, and Simon Peyton Jones, in 2003, discussed problems associated with lazy evaluation while also acknowledging the theoretical motives for it. In addition to purely practical considerations such as improved performance, they note that lazy evaluation makes it more difficult for programmers to reason about the performance of their code (particularly its space use). Bastiaan Heeren, Daan Leijen, and Arjan van IJzendoorn in 2003 also observed some stumbling blocks for Haskell learners: The subtle syntax and sophisticated type system of Haskell are a double edged sword—highly appreciated by experienced programmers but also a source of frustration among beginners, since the generality of Haskell often leads to cryptic error messages. To address the error messages researchers from Utrecht University developed an advanced interpreter called Helium, which improved the user-friendliness of error messages by limiting the generality of some Haskell features. In particular it disables type classes by default. Ben Lippmeier designed Disciple as a strict-by-default (lazy by explicit annotation) dialect of Haskell with a type-and-effect system, to address Haskell's difficulties in reasoning about lazy evaluation and in using traditional data structures such as mutable arrays. He argues (p. 20) that destructive update furnishes the programmer with two important and powerful tools ... a set of efficient array-like data structures for managing collections of objects, and ... the ability to broadcast a new value to all parts of a program with minimal burden on the programmer. Robert Harper, one of the authors of Standard ML, has given his reasons for not using Haskell to teach introductory programming. Among these are the difficulty of reasoning about resource use with non-strict evaluation, that lazy evaluation complicates the definition of datatypes and inductive reasoning, and the inferiority of Haskell's (old) class system compared to ML's module system. Haskell's build tool, Cabal, has historically been criticized for poorly handling multiple versions of the same library, a problem known as Cabal hell. The Stackage server and Stack build tool were made in response to these criticisms. Cabal itself has since addressed this problem by borrowing ideas from Nix, with the new approach becoming the default in 2019.",
    "related_languages": "Clean is a close, slightly older relative of Haskell. Its biggest deviation from Haskell is in the use of uniqueness types instead of monads for input/output (I/O) and side effects. A series of languages inspired by Haskell, but with different type systems, have been developed, including: Agda, a functional language with dependent types. Cayenne, with dependent types. Elm, a functional language to create web front-end apps, no support for user-defined or higher-kinded type classes or instances. Epigram, a functional language with dependent types suitable for proving properties of programs. Idris, a general purpose functional language with dependent types, developed at the University of St Andrews. PureScript transpiles to JavaScript. Ωmega, a strict language that allows introduction of new kinds, and programming at the type level. Other related languages include: Curry, a functional/logic programming language based on Haskell. Notable Haskell variants include: Generic Haskell, a version of Haskell with type system support for generic programming. Hume, a strict functional language for embedded systems based on processes as stateless automata over a sort of tuples of one element mailbox channels where the state is kept by feedback into the mailboxes, and a mapping description from outputs to channels as box wiring, with a Haskell-like expression language and syntax.",
    "conferences_and_workshops": "The Haskell community meets regularly for research and development activities. The main events are: International Conference on Functional Programming (ICFP) Haskell Symposium (formerly the Haskell Workshop) Haskell Implementors Workshop Commercial Users of Functional Programming (CUFP) ZuriHac, kind of Hackathon held every year in Zurich Starting in 2006, a series of organized hackathons has occurred, the Hac series, aimed at improving the programming language tools and libraries.",
    "references": "^ a b c Hudak et al. 2007. ^ a b Marlow, Simon (24 November 2009). Announcing Haskell 2010. Haskell (Mailing list). Retrieved 12 March 2011. ^ a b Riedel, Herbert (28 April 2016). ANN: Haskell Prime 2020 committee has formed. Haskell-prime (Mailing list). Retrieved 6 May 2017. ^ a b c d e f g h i j k l m Peyton Jones 2003, p. xi ^ Norell, Ulf (2008). Dependently Typed Programming in Agda (PDF). Gothenburg: Chalmers University. Retrieved 9 February 2012. ^ Hudak et al. 2007, pp. 12–38, 43. ^ Stroustrup, Bjarne; Sutton, Andrew (2011). Design of Concept Libraries for C++ (PDF). Software Language Engineering. Archived from the original (PDF) on 10 February 2012. ^ a b c d e f g h i j Hudak et al. 2007, pp. 12-45–46. ^ a b Meijer, Erik (2006). Confessions of a Used Programming Language Salesman: Getting the Masses Hooked on Haskell. Oopsla 2007. CiteSeerX 10.1.1.72.868. ^ Meijer, Erik (1 October 2009). C9 Lectures: Dr. Erik Meijer – Functional Programming Fundamentals, Chapter 1 of 13. Channel 9. Microsoft. Archived from the original on 16 June 2012. Retrieved 9 February 2012. ^ Drobi, Sadek (4 March 2009). Erik Meijer on LINQ. InfoQ. QCon SF 2008: C4Media Inc. Retrieved 9 February 2012.{{cite news}}: CS1 maint: location (link) ^ Hickey, Rich. Clojure Bookshelf. Listmania!. Archived from the original on 3 October 2017. Retrieved 3 October 2017. ^ Heller, Martin (18 October 2011). Turn up your nose at Dart and smell the CoffeeScript. InfoWorld. Retrieved 2020-07-15. ^ Declarative programming in Escher (PDF). Retrieved 7 October 2015. ^ Syme, Don; Granicz, Adam; Cisternino, Antonio (2007). Expert F#. Apress. p. 2. F# also draws from Haskell particularly with regard to two advanced language features called sequence expressions and workflows. ^ Facebook Introduces 'Hack,' the Programming Language of the Future. WIRED. 20 March 2014. ^ Idris, a dependently typed language. Retrieved 26 October 2014. ^ LiveScript Inspiration. Retrieved 4 February 2014. ^ Freeman, Phil (2016). PureScript by Example. Leanpub. Retrieved 23 April 2017. ^ Kuchling, A. M. Functional Programming HOWTO. Python v2.7.2 documentation. Python Software Foundation. Retrieved 9 February 2012. ^ Glossary of Terms and Jargon. Perl Foundation Perl 6 Wiki. The Perl Foundation. Archived from the original on 21 January 2012. Retrieved 9 February 2012. ^ Influences - The Rust Reference. The Rust Reference. Retrieved 31 December 2023. ^ Fogus, Michael (6 August 2010). MartinOdersky take(5) toList. Send More Paramedics. Retrieved 9 February 2012. ^ Lattner, Chris (3 June 2014). Chris Lattner's Homepage. Chris Lattner. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ Chevalier, Tim (28 January 2008). anybody can tell me the pronunciation of haskell?. Haskell-cafe (Mailing list). Retrieved 12 March 2011. ^ Type inference originally using Hindley-Milner type inference ^ a b c Peyton Jones 2003. ^ Edward Kmett, Edward Kmett – Type Classes vs. the World ^ Mossberg, Erik (8 June 2020), erkmos/haskell-companies, retrieved 22 June 2020 ^ O'Sullivan, Bryan; Goerzen, John; Stewart, Donald Bruce (15 November 2008). Real World Haskell: Code You Can Believe In. O'Reilly Media, Inc.. pp. xxviii–xxxi. ISBN 978-0-596-55430-9. ^ Haskell in Production: Riskbook. Serokell Software Development Company. Retrieved 7 September 2021. ^ PYPL PopularitY of Programming Language index. pypl.github.io. May 2021. Archived from the original on 7 May 2021. Retrieved 16 May 2021. ^ Frederickson, Ben. Ranking Programming Languages by GitHub Users. www.benfrederickson.com. Retrieved 6 September 2019. ^ a b c Peyton Jones 2003, Preface. ^ Wadler, Philip (October 1988). How to make ad-hoc polymorphism less ad hoc. ^ Peyton Jones, Simon (2003). Wearing the hair shirt: a retrospective on Haskell. Microsoft. ^ Haskell Wiki: Implementations. Retrieved 18 December 2012. ^ Welcome to Haskell'. The Haskell' Wiki. Archived from the original on 20 February 2016. Retrieved 11 February 2016. ^ GHC 2020 Team (29 October 2021) GHC 9.2.1 released ^ Proposed compiler and language changes for GHC and GHC/Haskell ^ Wadler, P.; Blott, S. (1989). How to make ad-hoc polymorphism less ad hoc. Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages - POPL '89. ACM. pp. 60–76. doi:10.1145/75277.75283. ISBN 978-0-89791-294-5. S2CID 15327197. ^ Hallgren, T. (January 2001). Fun with Functional Dependencies, or Types as Values in Static Computations in Haskell. Proceedings of the Joint CS/CE Winter Meeting. Varberg, Sweden. ^ Computer Language Benchmarks Game ^ HackageDB statistics. Hackage.haskell.org. Archived from the original on 3 May 2013. Retrieved 26 June 2013. ^ Implementations at the Haskell Wiki ^ The LLVM Backend. GHC Trac. 29 March 2019. ^ Terei, David A.; Chakravarty, Manuel M. T. (2010). An LLVM Backend for GHC. Proceedings of ACM SIGPLAN Haskell Symposium 2010. ACM Press. ^ C. Ryder and S. Thompson (2005). Porting HaRe to the GHC API ^ Utrecht Haskell Compiler ^ Hudak et al. 2007, pp. 12–22. ^ Agda 2, Agda Github Community, 15 October 2021, retrieved 16 October 2021 ^ The Haskell Cabal. Retrieved 8 April 2015. ^ Linspire/Freespire Core OS Team and Haskell. Debian Haskell mailing list. May 2006. Archived from the original on 27 December 2017. Retrieved 14 June 2006. ^ Live code with Tidal Cycles. Tidal Cycles. Retrieved 19 January 2022. ^ xmonad.org ^ Gargantext – Main. 13 July 2023. ^ David, Chavalarias; et al. (8 May 2023). Toward a Research Agenda on Digital Media and Humanity Well-Being (report). ^ Fighting spam with Haskell. Facebook Code. 26 June 2015. Retrieved 11 August 2019. ^ Open-sourcing Haxl, a library for Haskell. Facebook Code. 10 June 2014. Retrieved 11 August 2019. ^ input-output-hk/cardano-node: The core component that is used to participate in a Cardano decentralised blockchain. GitHub. Retrieved 18 March 2022. ^ Parsing, analyzing, and comparing source code across many languages: github/semantic, GitHub, 7 June 2019, retrieved 7 June 2019 ^ Commercial Users of Functional Programming Workshop Report (PDF). Retrieved 10 June 2022. ^ a b c d A formal proof of functional correctness was completed in 2009. Klein, Gerwin; Elphinstone, Kevin; Heiser, Gernot; Andronick, June; Cock, David; Derrin, Philip; Elkaduwe, Dhammika; Engelhardt, Kai; Kolanski, Rafal; Norrish, Michael; Sewell, Thomas; Tuch, Harvey; Winwood, Simon (October 2009). seL4: Formal verification of an OS kernel (PDF). 22nd ACM Symposium on Operating System Principles. Big Sky, Montana, USA. ^ Tikhon Jelvis: Haskell at Target. YouTube. 22 April 2017. ^ Why Co–Star uses Haskell. Co–Star. Retrieved 30 September 2023. ^ Haskell in Production: Mercury. Serokell. Retrieved 11 October 2024. ^ Web/Frameworks – HaskellWiki. wiki.haskell.org. Retrieved 17 September 2022. ^ Jan-Willem Maessen. Eager Haskell: Resource-bounded execution yields efficient iteration. Proceedings of the 2002 Association for Computing Machinery (ACM) SIGPLAN workshop on Haskell. ^ [dead link]Simon Peyton Jones. Wearing the hair shirt: a retrospective on Haskell. Invited talk at POPL 2003. ^ Lazy evaluation can lead to excellent performance, such as in The Computer Language Benchmarks Game. 27 June 2006. ^ Heeren, Bastiaan; Leijen, Daan; van IJzendoorn, Arjan (2003). Helium, for learning Haskell (PDF). Proceedings of the 2003 ACM SIGPLAN workshop on Haskell. pp. 62–71. doi:10.1145/871895.871902. ISBN 1581137583. S2CID 11986908. ^ Helium Compiler Docs. GitHub. Retrieved 9 June 2023. ^ DDC – HaskellWiki. Haskell.org. 3 December 2010. Retrieved 26 June 2013. ^ Ben Lippmeier, Type Inference and Optimisation for an Impure World, Australian National University (2010) PhD thesis, chapter 1 ^ Robert Harper (25 April 2011). The point of laziness. ^ Robert Harper (16 April 2011). Modules matter most. ^ Solving Cabal Hell. www.yesodweb.com. Retrieved 11 August 2019. ^ Announcing cabal new-build: Nix-style local builds. Retrieved 1 October 2019. ^ Zürich Friends of Haskell. zfoh.ch. Retrieved 13 March 2025. ^ Hackathon – HaskellWiki.",
    "bibliography": "Reports Peyton Jones, Simon, ed. (2003). Haskell 98 Language and Libraries: The Revised Report. Cambridge University Press. ISBN 978-0521826143. Marlow, Simon, ed. (2010). Haskell 2010 Language Report (PDF). Haskell.org. Textbooks Davie, Antony (1992). An Introduction to Functional Programming Systems Using Haskell. Cambridge University Press. ISBN 978-0-521-25830-2. Bird, Richard (1998). Introduction to Functional Programming using Haskell (2nd ed.). Prentice Hall Press. ISBN 978-0-13-484346-9. Hudak, Paul (2000). The Haskell School of Expression: Learning Functional Programming through Multimedia. New York: Cambridge University Press. ISBN 978-0521643382. Hutton, Graham (2007). Programming in Haskell. Cambridge University Press. ISBN 978-0521692694. O'Sullivan, Bryan; Stewart, Don; Goerzen, John (2008). Real World Haskell. Sebastopol: O'Reilly. ISBN 978-0-596-51498-3. Real World Haskell (full text). Thompson, Simon (2011). Haskell: The Craft of Functional Programming (3rd ed.). Addison-Wesley. ISBN 978-0201882957. Lipovača, Miran (April 2011). Learn You a Haskell for Great Good!. San Francisco: No Starch Press. ISBN 978-1-59327-283-8. (full text) Bird, Richard (2014). Thinking Functionally with Haskell. Cambridge University Press. ISBN 978-1-107-45264-0. Bird, Richard; Gibbons, Jeremy (July 2020). Algorithm Design with Haskell. Cambridge University Press. ISBN 978-1-108-49161-7. Tutorials Hudak, Paul; Peterson, John; Fasel, Joseph (June 2000). A Gentle Introduction To Haskell, Version 98. Haskell.org. Learn You a Haskell for Great Good! - A community version (learnyouahaskell.github.io). An up-to-date community maintained version of the renowned Learn You a Haskell (LYAH) guide. Daumé, Hal III. Yet Another Haskell Tutorial (PDF). Assumes far less prior knowledge than official tutorial. Yorgey, Brent (12 March 2009). The Typeclassopedia (PDF). The Monad.Reader (13): 17–68. Maguire, Sandy (2018). Thinking with Types: Type-Level Programming in Haskell. History Hudak, Paul; Hughes, John; Peyton Jones, Simon; Wadler, Philip (2007). A history of Haskell (PDF). Proceedings of the third ACM SIGPLAN conference on History of programming languages. pp. 12–1–55. doi:10.1145/1238844.1238856. ISBN 978-1-59593-766-7. S2CID 52847907. Hamilton, Naomi (19 September 2008). The A-Z of Programming Languages: Haskell. Computerworld.",
    "external_links": "Wikibooks has a book on the topic of: Haskell Wikibooks has a book on the topic of: Write Yourself a Scheme in 48 Hours Official website Portal: Computer programming vteHaskell programmingSoftwareImplementations(features) Generic Haskell° Glasgow Haskell Compiler° Template Haskell° Gofer° → Hugs° York Haskell Compiler° (Yhc) Dialects Agda° Cryptol° Curry° Elm° Hume° Idris° Ωmega° Orwell° Pugs° TidalCycles° Ur° Electronic design Atom° Bluespec SystemVerilog (BSV) Libraries Concurrent Haskell° Haskell Platform° Parsec° QuickCheck° Package managers Cabal° Stack° Windowing systems Fudgets wxHaskell° xmonad° Web frameworks Servant° Snap° Yesod° Cardano° Darcs° Ganeti° git-annex° Haddock° HaXml° House° Liquid Haskell° LOLITA Pandoc° Paradox° SQream DB Book Real World Haskell CommunityEponym Haskell Curry Arvind Lennart Augustsson Richard Bird Jeremy Gibbons Andrew D. Gordon Paul Hudak John Hughes John Launchbury John MacFarlane Simon Marlow Conor McBride Erik Meijer Simon Peyton Jones David Roundy Joe Stoy Audrey Tang Simon Thompson Philip Wadler Italics = discontinued ° = Open-source software Book Category:Family Category:Software vteHaskell CurryNamesakes: mathematics,computer programming Curry–Howard correspondence Currying Curry's paradox Programming languages Brook° Curry° Haskell° Italics = discontinued ° = Open-source software Category:Mathematical philosophers Category:Mathematicians Category:Logicians vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases: National GermanyUnited StatesFranceBnF dataCzech RepublicSpainIsrael",
    "document": "After the release of Miranda by Research Software Ltd. in 1985, interest in lazy functional languages grew. By 1987, more than a dozen non-strict, purely functional programming languages existed. Miranda was the most widely used, but it was proprietary software. At the conference on Functional Programming Languages and Computer Architecture (FPCA '87) in Portland, Oregon, there was a strong consensus that a committee be formed to define an open standard for such languages. The committee's purpose was to consolidate existing functional languages into a common one to serve as a basis for future research in functional-language design. Haskell was developed by a committee, attempting to bring together off the shelf solutions where possible. Type classes, which enable type-safe operator overloading, were first proposed by Philip Wadler and Stephen Blott to address the ad-hoc handling of equality types and arithmetic overloading in languages at the time. In early versions of Haskell up until and including version 1.2, user interaction and input/output (IO) were handled by both streams based and continuation based mechanisms which were widely considered unsatisfactory. In version 1.3, monadic IO was introduced, along with the generalisation of type classes to higher kinds (type constructors). Along with do notation, which provides syntactic sugar for the Monad type class, this gave Haskell an effect system that maintained referential transparency and was convenient. Other notable changes in early versions were the approach to the 'seq' function, which creates a data dependency between values, and is used in lazy languages to avoid excessive memory consumption; with it moving from a type class to a standard function to make refactoring more practical. The first version of Haskell (Haskell 1.0) was defined in 1990. The committee's efforts resulted in a series of language definitions (1.0, 1.1, 1.2, 1.3, 1.4). Hierarchy of type classes in the Haskell prelude as of GHC 7.10. The inclusion of Foldable and Traversable (with corresponding changes to the type signatures of some functions), and of Applicative as intermediate between Functor and Monad, are deviations from the Haskell 2010 standard. In early 2006, the process of defining a successor to the Haskell 98 standard, informally named Haskell Prime, began. This was intended to be an ongoing incremental process to revise the language definition, producing a new revision up to once per year. The first revision, named Haskell 2010, was announced in November 2009 and published in July 2010. Haskell 2010 is an incremental update to the language, mostly incorporating several well-used and uncontroversial features previously enabled via compiler-specific flags. Hierarchical module names. Module names are allowed to consist of dot-separated sequences of capitalized identifiers, rather than only one such identifier. This lets modules be named in a hierarchical manner (e.g., Data.List instead of List), although technically modules are still in a single monolithic namespace. This extension was specified in an addendum to Haskell 98 and was in practice universally used. The foreign function interface (FFI) allows bindings to other programming languages. Only bindings to C are specified in the Report, but the design allows for other language bindings. To support this, data type declarations were permitted to contain no constructors, enabling robust nonce types for foreign data that could not be constructed in Haskell. This extension was also previously specified in an Addendum to the Haskell 98 Report and widely used. So-called n+k patterns (definitions of the form fact (n+1) = (n+1) * fact n) were no longer allowed. This syntactic sugar had misleading semantics, in which the code looked like it used the (+) operator, but in fact desugared to code using (-) and (>=). The rules of type inference were relaxed to allow more programs to type check. Some syntax issues (changes in the formal grammar) were fixed: pattern guards were added, allowing pattern matching within guards; resolution of operator fixity was specified in a simpler way that reflected actual practice; an edge case in the interaction of the language's lexical syntax of operators and comments was addressed, and the interaction of do-notation and if-then-else was tweaked to eliminate unexpected syntax errors. The LANGUAGE pragma was specified. By 2010, dozens of extensions to the language were in wide use, and GHC (among other compilers) provided the LANGUAGE pragma to specify individual extensions with a list of identifiers. Haskell 2010 compilers are required to support the Haskell2010 extension and are encouraged to support several others, which correspond to extensions added in Haskell 2010. The next formal specification had been planned for 2020. On 29 October 2021, with GHC version 9.2.1, the GHC2021 extension was released. While this is not a formal language spec, it combines several stable, widely-used GHC extensions to Haskell 2010. Main article: Haskell features See also: Glasgow Haskell Compiler § Extensions to Haskell Haskell features lazy evaluation, lambda expressions, pattern matching, list comprehension, type classes and type polymorphism. It is a purely functional programming language, which means that functions generally have no side effects. A distinct construct exists to represent side effects, orthogonal to the type of functions. A pure function can return a side effect that is subsequently executed, modeling the impure functions of other languages. Haskell has a strong, static type system based on Hindley–Milner type inference. Its principal innovation in this area is type classes, originally conceived as a principled way to add overloading to the language, but since finding many more uses. The construct that represents side effects is an example of a monad: a general framework which can model various computations such as error handling, nondeterminism, parsing and software transactional memory. They are defined as ordinary datatypes, but Haskell provides some syntactic sugar for their use. Haskell has an open, published specification, and multiple implementations exist. Its main implementation, the Glasgow Haskell Compiler (GHC), is both an interpreter and native-code compiler that runs on most platforms. GHC is noted for its rich type system incorporating recent innovations such as generalized algebraic data types and type families. The Computer Language Benchmarks Game also highlights its high-performance implementation of concurrency and parallelism. An active, growing community exists around the language, and more than 5,400 third-party open-source libraries and tools are available in the online package repository Hackage. See also: Haskell features § Examples A Hello, World! program in Haskell (only the last line is strictly necessary): module Main (main) where -- not needed in interpreter, is the default in a module file main :: IO () -- the compiler can infer this type definition main = putStrLn Hello, World! The factorial function in Haskell, defined in a few different ways (the first line is the type annotation, which is optional and is the same for each implementation): factorial :: (Integral a) => a -> a -- Using recursion (with the ifthenelse expression) factorial n = if n < 2 then 1 else n * factorial (n - 1) -- Using recursion (with pattern matching) factorial 0 = 1 factorial n = n * factorial (n - 1) -- Using recursion (with guards) factorial n | n < 2 = 1 | otherwise = n * factorial (n - 1) -- Using a list and the product function factorial n = product [1..n] -- Using fold (implements product) factorial n = foldl (*) 1 [1..n] -- Point-free style factorial = foldr (*) 1 . enumFromTo 1 Using Haskell's Fixed-point combinator allows this function to be written without any explicit recursion. import Data.Function (fix) factorial = fix fac where fac f x | x < 2 = 1 | otherwise = x * f (x - 1) As the Integer type has arbitrary-precision, this code will compute values such as factorial 100000 (a 456,574-digit number), with no loss of precision. An implementation of an algorithm similar to quick sort over lists, where the first element is taken as the pivot: -- Type annotation (optional, same for each implementation) quickSort :: Ord a => [a] -> [a] -- Using list comprehensions quickSort [] = [] -- The empty list is already sorted quickSort (x:xs) = quickSort [a | a <- xs, a < x] -- Sort the left part of the list ++ [x] ++ -- Insert pivot between two sorted parts quickSort [a | a <- xs, a >= x] -- Sort the right part of the list -- Using filter quickSort [] = [] quickSort (x:xs) = quickSort (filter (<x) xs) ++ [x] ++ quickSort (filter (>=x) xs) All listed implementations are distributed under open source licenses. Implementations that fully or nearly comply with the Haskell 98 standard include: The Glasgow Haskell Compiler (GHC) compiles to native code on many different processor architectures, and to ANSI C, via one of two intermediate languages: C--, or in more recent versions, LLVM (formerly Low Level Virtual Machine) bitcode. GHC has become the de facto standard Haskell dialect. There are libraries (e.g., bindings to OpenGL) that work only with GHC. GHC was also distributed with the Haskell platform. GHC features an asynchronous runtime that also schedules threads across multiple CPU cores similar to the Go runtime. Jhc, a Haskell compiler written by John Meacham, emphasizes speed and efficiency of generated programs and exploring new program transformations. Ajhc is a fork of Jhc. The Utrecht Haskell Compiler (UHC) is a Haskell implementation from Utrecht University. It supports almost all Haskell 98 features plus many experimental extensions. It is implemented using attribute grammars and is primarily used for research on generated type systems and language extensions. Implementations no longer actively maintained include: The Haskell User's Gofer System (Hugs) is a bytecode interpreter. It was once one of the implementations used most widely, alongside the GHC compiler, but has now been mostly replaced by GHCi. It also comes with a graphics library. HBC is an early implementation supporting Haskell 1.4. It was implemented by Lennart Augustsson in, and based on, Lazy ML. It has not been actively developed for some time. nhc98 is a bytecode compiler focusing on minimizing memory use. The York Haskell Compiler (Yhc) was a fork of nhc98, with the goals of being simpler, more portable and efficient, and integrating support for Hat, the Haskell tracer. It also had a JavaScript backend, allowing users to run Haskell programs in web browsers. Implementations not fully Haskell 98 compliant, and using a variant Haskell language, include: Eta and Frege are dialects of Haskell targeting the Java virtual machine. Gofer is an educational dialect of Haskell, with a feature called constructor classes, developed by Mark Jones. It is supplanted by Haskell User's Gofer System (Hugs). Helium, a newer dialect of Haskell. The focus is on making learning easier via clearer error messages by disabling type classes as a default. Agda is a proof assistant written in Haskell. Cabal is a tool for building and packaging Haskell libraries and programs. Darcs is a revision control system written in Haskell, with several innovative features, such as more precise control of patches to apply. Glasgow Haskell Compiler (GHC) is also often a testbed for advanced functional programming features and optimizations in other programming languages. Git-annex is a tool to manage (big) data files under Git version control. It also provides a distributed file synchronization system (git-annex assistant). Linspire Linux chose Haskell for system tools development. Pandoc is a tool to convert one markup format into another. Pugs is a compiler and interpreter for the programming language then named Perl 6, but since renamed Raku. TidalCycles is a domain special language for live coding musical patterns, embedded in Haskell. Xmonad is a window manager for the X Window System, written fully in Haskell. GarganText is a collaborative tool to map through semantic analysis texts on any web browser, written fully in Haskell and PureScript, which is used for instance in the research community to draw up state-of-the-art reports and roadmaps. Bluespec SystemVerilog (BSV) is a language extension of Haskell, for designing electronics. It is an example of a domain-specific language embedded into Haskell. Further, Bluespec, Inc.'s tools are implemented in Haskell. Cryptol, a language and toolchain for developing and verifying cryptography algorithms, is implemented in Haskell. Facebook implements its anti-spam programs in Haskell, maintaining the underlying data access library as open-source software. The Cardano blockchain platform is implemented in Haskell. GitHub implemented Semantic, an open-source library for analysis, diffing, and interpretation of untrusted source code, in Haskell. Standard Chartered's financial modelling language Mu is syntactic Haskell running on a strict runtime. seL4, the first formally verified microkernel, used Haskell as a prototyping language for the OS developer.: p.2 At the same time, the Haskell code defined an executable specification with which to reason, for automatic translation by the theorem-proving tool.: p.3 The Haskell code thus served as an intermediate prototype before final C refinement.: p.3 Target stores' supply chain optimization software is written in Haskell. Co–Star Mercury Technologies' back end is written in Haskell. Notable web frameworks written for Haskell include: IHP Servant Snap Yesod Jan-Willem Maessen, in 2002, and Simon Peyton Jones, in 2003, discussed problems associated with lazy evaluation while also acknowledging the theoretical motives for it. In addition to purely practical considerations such as improved performance, they note that lazy evaluation makes it more difficult for programmers to reason about the performance of their code (particularly its space use). Bastiaan Heeren, Daan Leijen, and Arjan van IJzendoorn in 2003 also observed some stumbling blocks for Haskell learners: The subtle syntax and sophisticated type system of Haskell are a double edged sword—highly appreciated by experienced programmers but also a source of frustration among beginners, since the generality of Haskell often leads to cryptic error messages. To address the error messages researchers from Utrecht University developed an advanced interpreter called Helium, which improved the user-friendliness of error messages by limiting the generality of some Haskell features. In particular it disables type classes by default. Ben Lippmeier designed Disciple as a strict-by-default (lazy by explicit annotation) dialect of Haskell with a type-and-effect system, to address Haskell's difficulties in reasoning about lazy evaluation and in using traditional data structures such as mutable arrays. He argues (p. 20) that destructive update furnishes the programmer with two important and powerful tools ... a set of efficient array-like data structures for managing collections of objects, and ... the ability to broadcast a new value to all parts of a program with minimal burden on the programmer. Robert Harper, one of the authors of Standard ML, has given his reasons for not using Haskell to teach introductory programming. Among these are the difficulty of reasoning about resource use with non-strict evaluation, that lazy evaluation complicates the definition of datatypes and inductive reasoning, and the inferiority of Haskell's (old) class system compared to ML's module system. Haskell's build tool, Cabal, has historically been criticized for poorly handling multiple versions of the same library, a problem known as Cabal hell. The Stackage server and Stack build tool were made in response to these criticisms. Cabal itself has since addressed this problem by borrowing ideas from Nix, with the new approach becoming the default in 2019. Clean is a close, slightly older relative of Haskell. Its biggest deviation from Haskell is in the use of uniqueness types instead of monads for input/output (I/O) and side effects. A series of languages inspired by Haskell, but with different type systems, have been developed, including: Agda, a functional language with dependent types. Cayenne, with dependent types. Elm, a functional language to create web front-end apps, no support for user-defined or higher-kinded type classes or instances. Epigram, a functional language with dependent types suitable for proving properties of programs. Idris, a general purpose functional language with dependent types, developed at the University of St Andrews. PureScript transpiles to JavaScript. Ωmega, a strict language that allows introduction of new kinds, and programming at the type level. Other related languages include: Curry, a functional/logic programming language based on Haskell. Notable Haskell variants include: Generic Haskell, a version of Haskell with type system support for generic programming. Hume, a strict functional language for embedded systems based on processes as stateless automata over a sort of tuples of one element mailbox channels where the state is kept by feedback into the mailboxes, and a mapping description from outputs to channels as box wiring, with a Haskell-like expression language and syntax. The Haskell community meets regularly for research and development activities. The main events are: International Conference on Functional Programming (ICFP) Haskell Symposium (formerly the Haskell Workshop) Haskell Implementors Workshop Commercial Users of Functional Programming (CUFP) ZuriHac, kind of Hackathon held every year in Zurich Starting in 2006, a series of organized hackathons has occurred, the Hac series, aimed at improving the programming language tools and libraries. ^ a b c Hudak et al. 2007. ^ a b Marlow, Simon (24 November 2009). Announcing Haskell 2010. Haskell (Mailing list). Retrieved 12 March 2011. ^ a b Riedel, Herbert (28 April 2016). ANN: Haskell Prime 2020 committee has formed. Haskell-prime (Mailing list). Retrieved 6 May 2017. ^ a b c d e f g h i j k l m Peyton Jones 2003, p. xi ^ Norell, Ulf (2008). Dependently Typed Programming in Agda (PDF). Gothenburg: Chalmers University. Retrieved 9 February 2012. ^ Hudak et al. 2007, pp. 12–38, 43. ^ Stroustrup, Bjarne; Sutton, Andrew (2011). Design of Concept Libraries for C++ (PDF). Software Language Engineering. Archived from the original (PDF) on 10 February 2012. ^ a b c d e f g h i j Hudak et al. 2007, pp. 12-45–46. ^ a b Meijer, Erik (2006). Confessions of a Used Programming Language Salesman: Getting the Masses Hooked on Haskell. Oopsla 2007. CiteSeerX 10.1.1.72.868. ^ Meijer, Erik (1 October 2009). C9 Lectures: Dr. Erik Meijer – Functional Programming Fundamentals, Chapter 1 of 13. Channel 9. Microsoft. Archived from the original on 16 June 2012. Retrieved 9 February 2012. ^ Drobi, Sadek (4 March 2009). Erik Meijer on LINQ. InfoQ. QCon SF 2008: C4Media Inc. Retrieved 9 February 2012.{{cite news}}: CS1 maint: location (link) ^ Hickey, Rich. Clojure Bookshelf. Listmania!. Archived from the original on 3 October 2017. Retrieved 3 October 2017. ^ Heller, Martin (18 October 2011). Turn up your nose at Dart and smell the CoffeeScript. InfoWorld. Retrieved 2020-07-15. ^ Declarative programming in Escher (PDF). Retrieved 7 October 2015. ^ Syme, Don; Granicz, Adam; Cisternino, Antonio (2007). Expert F#. Apress. p. 2. F# also draws from Haskell particularly with regard to two advanced language features called sequence expressions and workflows. ^ Facebook Introduces 'Hack,' the Programming Language of the Future. WIRED. 20 March 2014. ^ Idris, a dependently typed language. Retrieved 26 October 2014. ^ LiveScript Inspiration. Retrieved 4 February 2014. ^ Freeman, Phil (2016). PureScript by Example. Leanpub. Retrieved 23 April 2017. ^ Kuchling, A. M. Functional Programming HOWTO. Python v2.7.2 documentation. Python Software Foundation. Retrieved 9 February 2012. ^ Glossary of Terms and Jargon. Perl Foundation Perl 6 Wiki. The Perl Foundation. Archived from the original on 21 January 2012. Retrieved 9 February 2012. ^ Influences - The Rust Reference. The Rust Reference. Retrieved 31 December 2023. ^ Fogus, Michael (6 August 2010). MartinOdersky take(5) toList. Send More Paramedics. Retrieved 9 February 2012. ^ Lattner, Chris (3 June 2014). Chris Lattner's Homepage. Chris Lattner. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ Chevalier, Tim (28 January 2008). anybody can tell me the pronunciation of haskell?. Haskell-cafe (Mailing list). Retrieved 12 March 2011. ^ Type inference originally using Hindley-Milner type inference ^ a b c Peyton Jones 2003. ^ Edward Kmett, Edward Kmett – Type Classes vs. the World ^ Mossberg, Erik (8 June 2020), erkmos/haskell-companies, retrieved 22 June 2020 ^ O'Sullivan, Bryan; Goerzen, John; Stewart, Donald Bruce (15 November 2008). Real World Haskell: Code You Can Believe In. O'Reilly Media, Inc.. pp. xxviii–xxxi. ISBN 978-0-596-55430-9. ^ Haskell in Production: Riskbook. Serokell Software Development Company. Retrieved 7 September 2021. ^ PYPL PopularitY of Programming Language index. pypl.github.io. May 2021. Archived from the original on 7 May 2021. Retrieved 16 May 2021. ^ Frederickson, Ben. Ranking Programming Languages by GitHub Users. www.benfrederickson.com. Retrieved 6 September 2019. ^ a b c Peyton Jones 2003, Preface. ^ Wadler, Philip (October 1988). How to make ad-hoc polymorphism less ad hoc. ^ Peyton Jones, Simon (2003). Wearing the hair shirt: a retrospective on Haskell. Microsoft. ^ Haskell Wiki: Implementations. Retrieved 18 December 2012. ^ Welcome to Haskell'. The Haskell' Wiki. Archived from the original on 20 February 2016. Retrieved 11 February 2016. ^ GHC 2020 Team (29 October 2021) GHC 9.2.1 released ^ Proposed compiler and language changes for GHC and GHC/Haskell ^ Wadler, P.; Blott, S. (1989). How to make ad-hoc polymorphism less ad hoc. Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages - POPL '89. ACM. pp. 60–76. doi:10.1145/75277.75283. ISBN 978-0-89791-294-5. S2CID 15327197. ^ Hallgren, T. (January 2001). Fun with Functional Dependencies, or Types as Values in Static Computations in Haskell. Proceedings of the Joint CS/CE Winter Meeting. Varberg, Sweden. ^ Computer Language Benchmarks Game ^ HackageDB statistics. Hackage.haskell.org. Archived from the original on 3 May 2013. Retrieved 26 June 2013. ^ Implementations at the Haskell Wiki ^ The LLVM Backend. GHC Trac. 29 March 2019. ^ Terei, David A.; Chakravarty, Manuel M. T. (2010). An LLVM Backend for GHC. Proceedings of ACM SIGPLAN Haskell Symposium 2010. ACM Press. ^ C. Ryder and S. Thompson (2005). Porting HaRe to the GHC API ^ Utrecht Haskell Compiler ^ Hudak et al. 2007, pp. 12–22. ^ Agda 2, Agda Github Community, 15 October 2021, retrieved 16 October 2021 ^ The Haskell Cabal. Retrieved 8 April 2015. ^ Linspire/Freespire Core OS Team and Haskell. Debian Haskell mailing list. May 2006. Archived from the original on 27 December 2017. Retrieved 14 June 2006. ^ Live code with Tidal Cycles. Tidal Cycles. Retrieved 19 January 2022. ^ xmonad.org ^ Gargantext – Main. 13 July 2023. ^ David, Chavalarias; et al. (8 May 2023). Toward a Research Agenda on Digital Media and Humanity Well-Being (report). ^ Fighting spam with Haskell. Facebook Code. 26 June 2015. Retrieved 11 August 2019. ^ Open-sourcing Haxl, a library for Haskell. Facebook Code. 10 June 2014. Retrieved 11 August 2019. ^ input-output-hk/cardano-node: The core component that is used to participate in a Cardano decentralised blockchain. GitHub. Retrieved 18 March 2022. ^ Parsing, analyzing, and comparing source code across many languages: github/semantic, GitHub, 7 June 2019, retrieved 7 June 2019 ^ Commercial Users of Functional Programming Workshop Report (PDF). Retrieved 10 June 2022. ^ a b c d A formal proof of functional correctness was completed in 2009. Klein, Gerwin; Elphinstone, Kevin; Heiser, Gernot; Andronick, June; Cock, David; Derrin, Philip; Elkaduwe, Dhammika; Engelhardt, Kai; Kolanski, Rafal; Norrish, Michael; Sewell, Thomas; Tuch, Harvey; Winwood, Simon (October 2009). seL4: Formal verification of an OS kernel (PDF). 22nd ACM Symposium on Operating System Principles. Big Sky, Montana, USA. ^ Tikhon Jelvis: Haskell at Target. YouTube. 22 April 2017. ^ Why Co–Star uses Haskell. Co–Star. Retrieved 30 September 2023. ^ Haskell in Production: Mercury. Serokell. Retrieved 11 October 2024. ^ Web/Frameworks – HaskellWiki. wiki.haskell.org. Retrieved 17 September 2022. ^ Jan-Willem Maessen. Eager Haskell: Resource-bounded execution yields efficient iteration. Proceedings of the 2002 Association for Computing Machinery (ACM) SIGPLAN workshop on Haskell. ^ [dead link]Simon Peyton Jones. Wearing the hair shirt: a retrospective on Haskell. Invited talk at POPL 2003. ^ Lazy evaluation can lead to excellent performance, such as in The Computer Language Benchmarks Game. 27 June 2006. ^ Heeren, Bastiaan; Leijen, Daan; van IJzendoorn, Arjan (2003). Helium, for learning Haskell (PDF). Proceedings of the 2003 ACM SIGPLAN workshop on Haskell. pp. 62–71. doi:10.1145/871895.871902. ISBN 1581137583. S2CID 11986908. ^ Helium Compiler Docs. GitHub. Retrieved 9 June 2023. ^ DDC – HaskellWiki. Haskell.org. 3 December 2010. Retrieved 26 June 2013. ^ Ben Lippmeier, Type Inference and Optimisation for an Impure World, Australian National University (2010) PhD thesis, chapter 1 ^ Robert Harper (25 April 2011). The point of laziness. ^ Robert Harper (16 April 2011). Modules matter most. ^ Solving Cabal Hell. www.yesodweb.com. Retrieved 11 August 2019. ^ Announcing cabal new-build: Nix-style local builds. Retrieved 1 October 2019. ^ Zürich Friends of Haskell. zfoh.ch. Retrieved 13 March 2025. ^ Hackathon – HaskellWiki. Reports Peyton Jones, Simon, ed. (2003). Haskell 98 Language and Libraries: The Revised Report. Cambridge University Press. ISBN 978-0521826143. Marlow, Simon, ed. (2010). Haskell 2010 Language Report (PDF). Haskell.org. Textbooks Davie, Antony (1992). An Introduction to Functional Programming Systems Using Haskell. Cambridge University Press. ISBN 978-0-521-25830-2. Bird, Richard (1998). Introduction to Functional Programming using Haskell (2nd ed.). Prentice Hall Press. ISBN 978-0-13-484346-9. Hudak, Paul (2000). The Haskell School of Expression: Learning Functional Programming through Multimedia. New York: Cambridge University Press. ISBN 978-0521643382. Hutton, Graham (2007). Programming in Haskell. Cambridge University Press. ISBN 978-0521692694. O'Sullivan, Bryan; Stewart, Don; Goerzen, John (2008). Real World Haskell. Sebastopol: O'Reilly. ISBN 978-0-596-51498-3. Real World Haskell (full text). Thompson, Simon (2011). Haskell: The Craft of Functional Programming (3rd ed.). Addison-Wesley. ISBN 978-0201882957. Lipovača, Miran (April 2011). Learn You a Haskell for Great Good!. San Francisco: No Starch Press. ISBN 978-1-59327-283-8. (full text) Bird, Richard (2014). Thinking Functionally with Haskell. Cambridge University Press. ISBN 978-1-107-45264-0. Bird, Richard; Gibbons, Jeremy (July 2020). Algorithm Design with Haskell. Cambridge University Press. ISBN 978-1-108-49161-7. Tutorials Hudak, Paul; Peterson, John; Fasel, Joseph (June 2000). A Gentle Introduction To Haskell, Version 98. Haskell.org. Learn You a Haskell for Great Good! - A community version (learnyouahaskell.github.io). An up-to-date community maintained version of the renowned Learn You a Haskell (LYAH) guide. Daumé, Hal III. Yet Another Haskell Tutorial (PDF). Assumes far less prior knowledge than official tutorial. Yorgey, Brent (12 March 2009). The Typeclassopedia (PDF). The Monad.Reader (13): 17–68. Maguire, Sandy (2018). Thinking with Types: Type-Level Programming in Haskell. History Hudak, Paul; Hughes, John; Peyton Jones, Simon; Wadler, Philip (2007). A history of Haskell (PDF). Proceedings of the third ACM SIGPLAN conference on History of programming languages. pp. 12–1–55. doi:10.1145/1238844.1238856. ISBN 978-1-59593-766-7. S2CID 52847907. Hamilton, Naomi (19 September 2008). The A-Z of Programming Languages: Haskell. Computerworld. Wikibooks has a book on the topic of: Haskell Wikibooks has a book on the topic of: Write Yourself a Scheme in 48 Hours Official website Portal: Computer programming vteHaskell programmingSoftwareImplementations(features) Generic Haskell° Glasgow Haskell Compiler° Template Haskell° Gofer° → Hugs° York Haskell Compiler° (Yhc) Dialects Agda° Cryptol° Curry° Elm° Hume° Idris° Ωmega° Orwell° Pugs° TidalCycles° Ur° Electronic design Atom° Bluespec SystemVerilog (BSV) Libraries Concurrent Haskell° Haskell Platform° Parsec° QuickCheck° Package managers Cabal° Stack° Windowing systems Fudgets wxHaskell° xmonad° Web frameworks Servant° Snap° Yesod° Cardano° Darcs° Ganeti° git-annex° Haddock° HaXml° House° Liquid Haskell° LOLITA Pandoc° Paradox° SQream DB Book Real World Haskell CommunityEponym Haskell Curry Arvind Lennart Augustsson Richard Bird Jeremy Gibbons Andrew D. Gordon Paul Hudak John Hughes John Launchbury John MacFarlane Simon Marlow Conor McBride Erik Meijer Simon Peyton Jones David Roundy Joe Stoy Audrey Tang Simon Thompson Philip Wadler Italics = discontinued ° = Open-source software Book Category:Family Category:Software vteHaskell CurryNamesakes: mathematics,computer programming Curry–Howard correspondence Currying Curry's paradox Programming languages Brook° Curry° Haskell° Italics = discontinued ° = Open-source software Category:Mathematical philosophers Category:Mathematicians Category:Logicians vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases: National GermanyUnited StatesFranceBnF dataCzech RepublicSpainIsrael",
    "paradigm": "Purely functional",
    "first_appeared": "1990 ; 35 years ago ( 1990 )",
    "stable_release": "Haskell 2010",
    "typing_discipline": "Inferred , static , strong",
    "influenced_by": "Clean , FP , Gofer , Hope and Hope , Id , ISWIM , KRC , Lisp , Miranda , ML and Standard ML , Orwell , SASL , Scheme , SISAL",
    "influenced": "Agda , Bluespec , C++11 / Concepts , C# / LINQ , CAL, Cayenne , Clean , Clojure , CoffeeScript , Curry , Elm , Epigram , Escher , F# , Hack , Idris , Isabelle , Java / Generics , LiveScript , Mercury , Ωmega , PureScript , Python , Raku , Rust , Scala , Swift , Visual Basic 9.0",
    "stable_release_date": "2010-01-01T00:00:00Z"
  },
  {
    "title": "PowerShell",
    "url": "https://en.wikipedia.org/wiki/PowerShell",
    "background": "The command-line interpreter (CLI) has been an inseparable part of most Microsoft operating systems. MS-DOS and Xenix relied almost exclusively on the CLI (though MS-DOS 5 also came with a complementary graphical DOS Shell.) The Windows 9x family came bundled with COMMAND.COM, the command-line environment of MS-DOS. The Windows NT and Windows CE families, however, came with a new cmd.exe that bore strong similarities to COMMAND.COM. Both environments support a few basic internal commands and a primitive scripting language (batch files), which can be used to automate various tasks. However, they cannot automate all facets of Windows graphical user interface (GUI) because command-line equivalents of operations are limited and the scripting language is elementary. Microsoft attempted to address some of these shortcomings by introducing the Windows Script Host in 1998 with Windows 98, and its command-line based host, cscript.exe. It integrates with the Active Script engine and allows scripts to be written in compatible languages, such as JScript and VBScript, leveraging the APIs exposed by applications via the component object model (COM). Its shortcomings are: its documentation is not very accessible, and it quickly gained a reputation as a system vulnerability vector after several high-profile computer viruses exploited weaknesses in its security provisions. Different versions of Windows provided various special-purpose command-line interpreters (such as netsh and WMIC) with their own command sets but they were not interoperable. Windows Server 2003 further attempted to improve the command-line experience but scripting support was still unsatisfactory.",
    "kermit": "Microsoft program manager and PowerShell Chief Architect Jeffrey Snover By the late 1990s, Intel had come to Microsoft asking for help in making Windows, which ran on Intel CPUs, a more appropriate platform to support the development of future Intel CPUs. At the time, Intel CPU development was accomplished on Sun Microsystems computers which ran Solaris (a Unix variant) on RISC-architecture CPUs. The ability to run Intel's many KornShell automation scripts on Windows was identified as a key capability. Internally, Microsoft began an effort to create a Windows port of Korn Shell, which was code-named Kermit. Intel ultimately pivoted to a Linux-based development platform that could run on Intel CPUs, rendering the Kermit project redundant. However, with a fully funded team, Microsoft program manager Jeffrey Snover realized there was an opportunity to create a more general-purpose solution to Microsoft's problem of administrative automation.",
    "monad": "By 2002, Microsoft had started to develop a new approach to command-line management, including a CLI called Monad (also known as Microsoft Shell or MSH). The ideas behind it were published in August 2002 in a white paper called the Monad Manifesto by its chief architect, Jeffrey Snover. In a 2017 interview, Snover explains the genesis of PowerShell, saying that he had been trying to make Unix tools available on Windows, which didn't work due to core architectural difference[s] between Windows and Linux. Specifically, he noted that Linux considers everything a text file, whereas Windows considers everything an API that returns structured data. They were fundamentally incompatible, which led him to take a different approach. Monad was to be a new extensible CLI with a fresh design capable of automating a range of core administrative tasks. Microsoft first demonstrated Monad publicly at the Professional Development Conference in Los Angeles in October 2003. A few months later, they opened up private beta, which eventually led to a public beta. Microsoft published the first Monad public beta release on June 17, 2005, and the Beta 2 on September 11, 2005, and Beta 3 on January 10, 2006.",
    "powershell": "The first version of PowerShell On April 25, 2006, not long after the initial Monad announcement, Microsoft announced that Monad had been renamed Windows PowerShell, positioning it as a significant part of its management technology offerings. Release Candidate (RC) 1 of PowerShell was released at the same time. A significant aspect of both the name change and the RC was that this was now a component of Windows, rather than a mere add-on. Release Candidate 2 of PowerShell version 1 was released on September 26, 2006, with final release to the web on November 14, 2006. PowerShell for earlier versions of Windows was released on January 30, 2007. PowerShell v2.0 development began before PowerShell v1.0 shipped. During the development, Microsoft shipped three community technology previews (CTP). Microsoft made these releases available to the public. The last CTP release of Windows PowerShell v2.0 was made available in December 2008. PowerShell v2.0 was completed and released to manufacturing in August 2009, as an integral part of Windows 7 and Windows Server 2008 R2. Versions of PowerShell for Windows XP, Windows Server 2003, Windows Vista and Windows Server 2008 were released in October 2009 and are available for download for both 32-bit and 64-bit platforms. In an October 2009 issue of TechNet Magazine, Microsoft called proficiency with PowerShell the single most important skill a Windows administrator will need in the coming years. Windows 10 shipped with Pester, a script validation suite for PowerShell. PowerShell for Linux 7.3.1 on Ubuntu 22.10 On August 18, 2016, Microsoft announced that they had made PowerShell open-source and cross-platform with support for Windows, macOS, CentOS and Ubuntu. The source code was published on GitHub. The move to open source created a second incarnation of PowerShell called PowerShell Core, which runs on .NET Core. It is distinct from Windows PowerShell, which runs on the full .NET Framework. Starting with version 5.1, PowerShell Core is bundled with Windows Server 2016 Nano Server.",
    "design": "A key design tactic for PowerShell was to leverage the large number of APIs that already existed in Windows, Windows Management Instrumentation, .NET Framework, and other software. PowerShell cmdlets wrap around existing functionality. The intent with this tactic is to provide an administrator-friendly, more-consistent interface between administrators and a wide range of underlying functionality. With PowerShell, an administrator doesn't need to know .NET, WMI, or low-level API coding, and can instead focus on using the cmdlets exposed by PowerShell. In this regard, PowerShell creates little new functionality, instead focusing on making existing functionality more accessible to a particular audience.",
    "grammar": "PowerShell's developers based the core grammar of the tool on that of the POSIX 1003.2 KornShell. However, PowerShell's language was also influenced by PHP, Perl, and many other existing languages.",
    "named_commands": "Windows PowerShell can execute four kinds of named commands: cmdlets (.NET Framework programs designed to interact with PowerShell) PowerShell scripts (files suffixed by .ps1) PowerShell functions Standalone executable programs If a command is a standalone executable program, PowerShell launches it in a separate process; if it is a cmdlet, it executes in the PowerShell process. PowerShell provides an interactive command-line interface, where the commands can be entered and their output displayed. The user interface offers customizable tab completion. PowerShell enables the creation of aliases for cmdlets, which PowerShell textually translates into invocations of the original commands. PowerShell supports both named and positional parameters for commands. In executing a cmdlet, the job of binding the argument value to the parameter is done by PowerShell itself, but for external executables, arguments are parsed by the external executable independently of PowerShell interpretation.",
    "extended_type_system": "The PowerShell Extended Type System (ETS) is based on the .NET type system, but with extended semantics (for example, propertySets and third-party extensibility). For example, it enables the creation of different views of objects by exposing only a subset of the data fields, properties, and methods, as well as specifying custom formatting and sorting behavior. These views are mapped to the original object using XML-based configuration files.",
    "cmdlets": "Cmdlets are specialized commands in the PowerShell environment that implement specific functions. These are the native commands in the PowerShell stack. Cmdlets follow a Verb-Noun naming pattern, such as Get-ChildItem, which makes it self-documenting code. Cmdlets output their results as objects and can also receive objects as input, making them suitable for use as recipients in a pipeline. If a cmdlet outputs multiple objects, each object in the collection is passed down through the entire pipeline before the next object is processed. Cmdlets are specialized .NET classes, which the PowerShell runtime instantiates and invokes at execution time. Cmdlets derive either from Cmdlet or from PSCmdlet, the latter being used when the cmdlet needs to interact with the PowerShell runtime. These base classes specify certain methods – BeginProcessing(), ProcessRecord() and EndProcessing() – which the cmdlet's implementation overrides to provide the functionality. Whenever a cmdlet runs, PowerShell invokes these methods in sequence, with ProcessRecord() being called if it receives pipeline input. If a collection of objects is piped, the method is invoked for each object in the collection. The class implementing the cmdlet must have one .NET attribute – CmdletAttribute – which specifies the verb and the noun that make up the name of the cmdlet. Common verbs are provided as an enum. If a cmdlet receives either pipeline input or command-line parameter input, there must be a corresponding property in the class, with a mutator implementation. PowerShell invokes the mutator with the parameter value or pipeline input, which is saved by the mutator implementation in class variables. These values are then referred to by the methods which implement the functionality. Properties that map to command-line parameters are marked by ParameterAttribute and are set before the call to BeginProcessing(). Those which map to pipeline input are also flanked by ParameterAttribute, but with the ValueFromPipeline attribute parameter set. The implementation of these cmdlet classes can refer to any .NET API and may be in any .NET language. In addition, PowerShell makes certain APIs available, such as WriteObject(), which is used to access PowerShell-specific functionality, such as writing resultant objects to the pipeline. Cmdlets can use .NET data access APIs directly or use the PowerShell infrastructure of PowerShell Providers, which make data stores addressable using unique paths. Data stores are exposed using drive letters, and hierarchies within them, addressed as directories. Windows PowerShell ships with providers for the file system, registry, the certificate store, as well as the namespaces for command aliases, variables, and functions. Windows PowerShell also includes various cmdlets for managing various Windows systems, including the file system, or using Windows Management Instrumentation to control Windows components. Other applications can register cmdlets with PowerShell, thus allowing it to manage them, and, if they enclose any datastore (such as a database), they can add specific providers as well.[citation needed] The number of cmdlets included in the base PowerShell install has generally increased with each version: Version Cmdlets Ref Windows PowerShell 1.0 129 Windows PowerShell 2.0 632 Windows PowerShell 3.0 ≈1,000 Windows PowerShell 4.0 ? Windows PowerShell 5.0 ≈1,300 Windows PowerShell 5.1 1,586 [citation needed] PowerShell Core 6.0 ? PowerShell Core 6.1 ? PowerShell Core 6.2 ? PowerShell 7.0 1,507 [citation needed] PowerShell 7.1 ? PowerShell 7.2 ? PowerShell 7.4 1,656 Cmdlets can be added into the shell through snap-ins (deprecated in v2) and modules; users are not limited to the cmdlets included in the base PowerShell installation.",
    "pipeline": "PowerShell implements the concept of a pipeline, which enables piping the output of one cmdlet to another cmdlet as input. As with Unix pipelines, PowerShell pipelines can construct complex commands, using the | operator to connect stages. However, the PowerShell pipeline differs from Unix pipelines in that stages execute within the PowerShell runtime rather than as a set of processes coordinated by the operating system. Additionally, structured .NET objects, rather than byte streams, are passed from one stage to the next. Using objects and executing stages within the PowerShell runtime eliminates the need to serialize data structures, or to extract them by explicitly parsing text output. An object can also encapsulate certain functions that work on the contained data, which become available to the recipient command for use. For the last cmdlet in a pipeline, PowerShell automatically pipes its output object to the Out-Default cmdlet, which transforms the objects into a stream of format objects and then renders those to the screen. Because all PowerShell objects are .NET objects, they share a .ToString() method, which retrieves the text representation of the data in an object. In addition, PowerShell allows formatting definitions to be specified, so the text representation of objects can be customized by choosing which data elements to display, and in what manner. However, in order to maintain backward compatibility, if an external executable is used in a pipeline, it receives a text stream representing the object, instead of directly integrating with the PowerShell type system.",
    "scripting": "Windows PowerShell includes a dynamically typed scripting language which can implement complex operations using cmdlets imperatively. The scripting language supports variables, functions, branching (if-then-else), loops (while, do, for, and foreach), structured error/exception handling and closures/lambda expressions, as well as integration with .NET. Variables in PowerShell scripts are prefixed with $. Variables can be assigned any value, including the output of cmdlets. Strings can be enclosed either in single quotes or in double quotes: when using double quotes, variables will be expanded even if they are inside the quotation marks. Enclosing the path to a file in braces preceded by a dollar sign (as in ${C:\\foo.txt}) creates a reference to the contents of the file. If it is used as an L-value, anything assigned to it will be written to the file. When used as an R-value, the contents of the file will be read. If an object is assigned, it is serialized before being stored.[citation needed] Object members can be accessed using . notation, as in C# syntax. PowerShell provides special variables, such as $args, which is an array of all the command-line arguments passed to a function from the command line, and $_, which refers to the current object in the pipeline. PowerShell also provides arrays and associative arrays. The PowerShell scripting language also evaluates arithmetic expressions entered on the command line immediately, and it parses common abbreviations, such as GB, MB, and KB. Using the function keyword, PowerShell provides for the creation of functions. A simple function has the following general look: function name ([Type]$Param1, [Type]$Param2) { # Instructions } However, PowerShell allows for advanced functions that support named parameters, positional parameters, switch parameters and dynamic parameters. function Verb-Noun { param ( # Definition of static parameters ) dynamicparam { # Definition of dynamic parameters } begin { # Set of instruction to run at the start of the pipeline } process { # Main instruction sets, ran for each item in the pipeline } end { # Set of instruction to run at the end of the pipeline } } The defined function is invoked in either of the following forms: name value1 value2 Verb-Noun -Param1 value1 -Param2 value2 PowerShell allows any static .NET methods to be called by providing their namespaces enclosed in brackets ([]), and then using a pair of colons (::) to indicate the static method. For example: [Console]::WriteLine(PowerShell) There are dozens of ways to create objects in PowerShell. Once created, one can access the properties and instance methods of an object using the . notation. PowerShell accepts strings, both raw and escaped. A string enclosed between single quotation marks is a raw string while a string enclosed between double quotation marks is an escaped string. PowerShell treats straight and curly quotes as equivalent. The following list of special characters is supported by PowerShell: PowerShell special characters Sequence Meaning `0 Null `a Alert `b Backspace `e Escape (since PowerShell 6) `f Form feed `n Newline `r Carriage return `t Horizontal tab `u{x} Unicode escape sequence (since PowerShell 6) `v Vertical tab --% Treat any character from this point forward literally For error handling, PowerShell provides a .NET-based exception-handling mechanism. In case of errors, objects containing information about the error (Exception object) are thrown, which are caught using the try ... catch construct (although a trap construct is supported as well). PowerShell can be configured to silently resume execution, without actually throwing the exception; this can be done either on a single command, a single session or perpetually. Scripts written using PowerShell can be made to persist across sessions in either a .ps1 file or a .psm1 file (the latter is used to implement a module). Later, either the entire script or individual functions in the script can be used. Scripts and functions operate analogously with cmdlets, in that they can be used as commands in pipelines, and parameters can be bound to them. Pipeline objects can be passed between functions, scripts, and cmdlets seamlessly. To prevent unintentional running of scripts, script execution is disabled by default and must be enabled explicitly. Enabling of scripts can be performed either at system, user or session level. PowerShell scripts can be signed to verify their integrity, and are subject to Code Access Security. The PowerShell scripting language supports binary prefix notation similar to the scientific notation supported by many programming languages in the C-family.",
    "hosting": "One can also use PowerShell embedded in a management application, which uses the PowerShell runtime to implement the management functionality. For this, PowerShell provides a managed hosting API. Via the APIs, the application can instantiate a runspace (one instantiation of the PowerShell runtime), which runs in the application's process and is exposed as a Runspace object. The state of the runspace is encased in a SessionState object. When the runspace is created, the Windows PowerShell runtime initializes the instantiation, including initializing the providers and enumerating the cmdlets, and updates the SessionState object accordingly. The Runspace then must be opened for either synchronous processing or asynchronous processing. After that it can be used to execute commands.[citation needed] To execute a command, a pipeline (represented by a Pipeline object) must be created and associated with the runspace. The pipeline object is then populated with the cmdlets that make up the pipeline. For sequential operations (as in a PowerShell script), a Pipeline object is created for each statement and nested inside another Pipeline object. When a pipeline is created, Windows PowerShell invokes the pipeline processor, which resolves the cmdlets into their respective assemblies (the command processor) and adds a reference to them to the pipeline, and associates them with InputPipe, OutputPipe and ErrorOutputPipe objects, to represent the connection with the pipeline. The types are verified and parameters bound using reflection. Once the pipeline is set up, the host calls the Invoke() method to run the commands, or its asynchronous equivalent, InvokeAsync(). If the pipeline has the Write-Host cmdlet at the end of the pipeline, it writes the result onto the console screen. If not, the results are handed over to the host, which might either apply further processing or display the output itself.[citation needed] Microsoft Exchange Server 2007 uses the hosting APIs to provide its management GUI. Each operation exposed in the GUI is mapped to a sequence of PowerShell commands (or pipelines). The host creates the pipeline and executes them. In fact, the interactive PowerShell console itself is a PowerShell host, which interprets the scripts entered at command line and creates the necessary Pipeline objects and invokes them.[citation needed]",
    "desired_state_configuration": "DSC allows for declaratively specifying how a software environment should be configured. Upon running a configuration, DSC will ensure that the system gets the state described in the configuration. DSC configurations are idempotent. The Local Configuration Manager (LCM) periodically polls the system using the control flow described by resources (imperative pieces of DSC) to make sure that the state of a configuration is maintained.",
    "versions": "Initially using the code name Monad, PowerShell was first shown publicly at the Professional Developers Conference in October 2003 in Los Angeles. All major releases are still supported, and each major release has featured backwards compatibility with preceding versions.",
    "windows_powershell_": "It was released along with the Windows 10 Anniversary Update on August 2, 2016, and in Windows Server 2016. PackageManagement now supports proxies, PSReadLine now has ViMode support, and two new cmdlets were added: Get-TimeZone and Set-TimeZone. The LocalAccounts module allows for adding/removing local user accounts. A preview for PowerShell 5.1 was released for Windows 7, Windows Server 2008, Windows Server 2008 R2, Windows Server 2012, and Windows Server 2012 R2 on July 16, 2016, and was released on January 19, 2017. PowerShell 5.1 is the first version to come in two editions of Desktop and Core. The Desktop edition is the continuation of the traditional Windows PowerShell that runs on the .NET Framework stack. The Core edition runs on .NET Core and is bundled with Windows Server 2016 Nano Server. In exchange for smaller footprint, the latter lacks some features such as the cmdlets to manage clipboard or join a computer to a domain, WMI version 1 cmdlets, Event Log cmdlets and profiles. This was the final version of PowerShell made exclusively for Windows. Windows PowerShell 5.1 remains pre-installed on Windows 10, Windows 11 and Windows Server 2022, while the .NET PowerShell needs to be installed separately and can run side-by-side with Windows PowerShell.",
    "powershell_core_": "PowerShell Core 6.0 was first announced on August 18, 2016, when Microsoft unveiled PowerShell Core and its decision to make the product cross-platform, independent of Windows, free and open source. It achieved general availability on January 10, 2018, for Windows, macOS and Linux. It has its own support lifecycle and adheres to the Microsoft lifecycle policy that is introduced with Windows 10: Only the latest version of PowerShell Core is supported. Microsoft expects to release one minor version for PowerShell Core 6.0 every six months. The most significant change in this version of PowerShell is the expansion to the other platforms. For Windows administrators, this version of PowerShell did not include any major new features. In an interview with the community on January 11, 2018, the PowerShell team was asked to list the top 10 most exciting things that would happen for a Windows IT professional who would migrate from Windows PowerShell 5.1 to PowerShell Core 6.0; in response, Angel Calvo of Microsoft could only name two: cross-platform and open-source. PowerShell 6 changed to UTF-8 as default encoding, with some exceptions. (PowerShell 7.4 changes more to UTF-8)",
    "": "PowerShell Core 6.2 is focused primarily on performance improvements, bug fixes, and smaller cmdlet and language enhancements that improved developer productivity.",
    "powershell_": "PowerShell 7.6 is based on .NET 9 & is the latest preview release. The first preview release v7.6.0-preview.2 was released on 2025-01-15. There never was a v7.6.0-preview.1 version that was released. There is a what's new in PowerShell 7.6 article available that goes into more details about the new things in this version & is updated on each new release.",
    "comparison_of_cmdlets_with_similar_commands": "The following table contains a selection of the cmdlets that ship with PowerShell, noting similar commands in other well-known command-line interpreters. Many of these similar commands come out-of-the-box defined as aliases within PowerShell, making it easy for people familiar with other common shells to start working. Comparison of PowerShell cmdlets with internal and external commands of other command-line interpreters PowerShell (Cmdlet) PowerShell (Alias) Command Prompt (cmd) Unix shell Description Clear-Host cls, clear cls clear Clears the screen[a] Copy-Item cpi, copy, cp copy, xcopy, robocopy cp Copies files and folders to another location Get-ChildItem gci, dir, ls[b] dir ls Lists all files and folders in the current or given folder Get-Command gcm help, where type, which, compgen Lists available commands and gets command path Get-Content gc, type, cat type cat Gets the content of a file Get-Date n-a date + time date Displays date and time Get-Help help, man[b] help apropos, man Prints a command's documentation on the console Get-History ghy, h, history DOSKEY /HISTORY fc -l, history[c] Lists previous commands Get-Location gl, pwd cd pwd Displays the working path (current folder) Get-Process gps, ps tlist,[d] tasklist[e] ps Lists all running processes Invoke-WebRequest iwr, curl, wget[f] curl wget, curl Gets contents from a web page on the Internet Move-Item mi, move, mv move mv Moves files and folders to a new location Pop-Location popd popd popd Changes the working path to the location most recently pushed onto the stack Push-Location pushd pushd pushd Stores the working path onto the stack Read-Host n-a set /P read Reads input into a variable from the command line Remove-Item ri, del, erase, rmdir, rd, rm del, erase, rmdir, rd rm, rmdir Deletes files or folders Rename-Item rni, ren ren, rename mv Renames a single file, folder, hard link or symbolic link Select-String sls find, findstr grep Prints lines matching a pattern Set-Date n-a date + time date -s Resets the date and time. Set-Location sl, cd, chdir cd, chdir cd Changes the working path Set-Variable sv, set set env, export, set, setenv Creates or alters the contents of an environment variable Sort-Object sort sort sort Sorts lines of text with specified criteria. PowerShell version also sorts objects by properties. Stop-Process spps, kill kill,[d] taskkill[e] kill[g] Stops a running process Tee-Object tee — tee Pipes input to a file or variable, passing the input along the pipeline Test-Connection[h] ping ping ping Sends ICMP echo requests to the specified machine from the current machine, or instructs another machine to do so Write-Output echo, write echo echo Prints strings or other objects to the standard output Notes ^ Clear-Host is implemented as a predefined PowerShell function. ^ a b ls and man aliases are absent in the Linux version of PowerShell Core. '^ fc is defined in the POSIX standard and history is not. However most Unix implementations also define history. ^ a b Available in Windows NT 4, Windows 98 Resource Kit, Windows 2000 Support Tools ^ a b Introduced in Windows XP Professional Edition ^ curl and wget aliases are absent from PowerShell Core, so as to not interfere with invoking similarly named native commands. ^ Also used in UNIX to send a process any signal, the Terminate signal is merely the default ^ While the external ping command remains available to PowerShell, Test-Connection's output is a structured object that can be programmatically inspected.",
    "filename_extensions": "Extension Description .ps1 Script file .psd1 Module's manifest file; usually comes with a script module or binary module .psm1 Script module file .dll DLL-compliant[a] binary module file .ps1xml Format and type definitions file .xml XML-compliant[b] serialized data file .psc1 Console file .pssc Session configuration file .psrc Role Capability file ^ Dynamic-link library (DLL) is not a PowerShell-only format. It is a generic format for storing compiled .NET assembly's code. ^ XML is not a PowerShell-only format. It is a popular information interchange format.",
    "application_support": "Application Version Cmdlets Provider Management GUI Exchange Server 2007 402 Yes Yes Windows Server 2008 Yes Yes No Microsoft SQL Server 2008 Yes Yes No Microsoft SharePoint 2010 Yes Yes No System Center Configuration Manager 2012 R2 400+ Yes No System Center Operations Manager 2007 74 Yes No System Center Virtual Machine Manager 2007 Yes Yes Yes System Center Data Protection Manager 2007 Yes No No Windows Compute Cluster Server 2007 Yes Yes No Microsoft Transporter Suite for Lotus Domino 08.02.0012 47 No No Microsoft PowerTools for Open XML 1.0 33 No No IBM WebSphere MQ 6.0.2.2 44 No No IoT Core Add-ons 74 Un­known Un­known Quest Management Shell for Active Directory 1.7 95 No No Special Operations Software Specops Command 1.0 Yes No Yes VMware vSphere PowerCLI 6.5 R1 500+ Yes Yes Internet Information Services 7.0 54 Yes No Windows 7 Troubleshooting Center 6.1 Yes No Yes Microsoft Deployment Toolkit 2010 Yes Yes Yes NetApp PowerShell Toolkit 4.2 2000+ Yes Yes JAMS Scheduler – Job Access & Management System 5.0 52 Yes Yes UIAutomation 0.8 432 No No Dell Equallogic 3.5 55 No No LOGINventory 5.8 Yes Yes Yes SePSX 0.4.1 39 No No",
    "alternative_implementation": "A project named Pash, a pun on the widely known bash Unix shell, has been an open-source and cross-platform reimplementation of PowerShell via the Mono framework. Pash was created by Igor Moochnick, written in C# and was released under the GNU General Public License. Pash development stalled in 2008, was restarted on GitHub in 2012, and finally ceased in 2016 when PowerShell was officially made open-source and cross-platform.",
    "see_also": "Common Information Model (computing) Comparison of command shells Comparison of programming languages Web-Based Enterprise Management Windows Script Host Windows Terminal",
    "references": "^ PowerShell. Microsoft Apps. Retrieved October 24, 2024. ^ Release v7.5.0 Release of PowerShell. PowerShell/PowerShell repo. Microsoft. Retrieved February 10, 2025 – via GitHub.com. ^ PowerShell. Microsoft Apps. Retrieved October 24, 2024. ^ Release v7.6.0.preview.2 Release of PowerShell. PowerShell/PowerShell repo. Microsoft. Retrieved February 10, 2025 – via GitHub.com. ^ PowerShell for every system!. June 12, 2017 – via GitHub.com. ^ Snover, Jeffrey (May 25, 2008). PowerShell and WPF: WTF. Windows PowerShell Blog. Microsoft. ^ PowerShell. Microsoft Apps. Retrieved October 24, 2024. ^ Release v7.4.7 Release of PowerShell. PowerShell/PowerShell repo. Microsoft. Retrieved February 10, 2025 – via GitHub.com. ^ a b c d Bright, Peter (August 18, 2016). PowerShell is Microsoft's latest open source release, coming to Linux, OS X. Ars Technica. Condé Nast. Archived from the original on April 9, 2020. Retrieved May 12, 2020. ^ Announcing Windows 10 Insider Preview Build 14971 for PC. November 17, 2016. ^ PowerShell is replacing Command Prompt. ^ a b c d e powershell. Retrieved March 13, 2023. ^ Truher, Jim (December 2007). Extend Windows PowerShell With Custom Commands. MSDN Magazine. Microsoft. Archived from the original on October 6, 2008. ^ Lowe, Scott (January 4, 2007). Exchange 2007: Get used to the command line. TechRepublic. CBS Interactive. Archived from the original on November 16, 2018. Retrieved May 12, 2020. ^ Snover, Jeffrey (November 13, 2007). SQL Server Support for PowerShell!. Windows PowerShell Blog (blog posting). Microsoft. Archived from the original on November 15, 2007. Retrieved November 13, 2007. ^ Dragan, Richard V. (April 23, 2003). Windows Server 2003 Delivers Improvements All Around. PCMag.com. Ziff Davis. A standout feature here is that virtually all admin utilities now work from the command line (and most are available through telnet). ^ Jones, Don (2020). Shell of an Idea: The Untold History of PowerShell. Don Gannon-Jones. p. 25. ISBN 978-1-9536450-3-6. ^ Jeffrey P. Snover (August 8, 2002). Monad Manifesto (PDF). Windows PowerShell Blog. Microsoft. Retrieved April 2, 2021. ^ Biggar and Harbaugh (September 14, 2017). The Man Behind Windows PowerShell. To Be Continuous (Podcast). Heavybit. Retrieved September 14, 2017. ^ Windows PowerShell (Monad) Has Arrived. Windows PowerShell Blog. Microsoft. April 25, 2006. ^ Snover, Jeffrey (November 15, 2006). Windows PowerShell & Windows Vista. Windows PowerShell Blog (blog posting). Microsoft. ^ Windows Management Framework (Windows PowerShell 2.0, WinRM 2.0, and BITS 4.0). Support. Microsoft. September 30, 2013. Archived from the original on October 13, 2013. ^ Posey, Brien (October 6, 2009). 10 reasons why you should learn to use PowerShell. TechRepublic. Retrieved April 2, 2021. ^ What is Pester and Why Should I Care?. December 14, 2015. ^ Snover, Jeffrey (August 18, 2016). PowerShell is open sourced and is available on Linux. Microsoft Azure Blog. Microsoft. ^ PowerShell/PowerShell. GitHub. Retrieved August 18, 2016. ^ Hansen, Kenneth; Calvo, Angel (August 18, 2016). PowerShell on Linux and Open Source!. Windows PowerShell Blog. Microsoft. ^ Foley, Mary Jo (August 18, 2016). Microsoft open sources PowerShell; brings it to Linux and Mac OS X. ZDNet. CBS Interactive. ^ a b PowerShell on Nano Server. TechNet. Microsoft. October 20, 2016. ^ Jones, Don (2020). Shell of an Idea: The Untold History of PowerShell. Don Gannon-Jones. p. 45. ISBN 978-1-9536450-3-6. ^ Payette, Bruce (2008). Windows PowerShell in Action. Manning Pubs Co Series. Manning. p. 27. ISBN 9781932394900. Retrieved July 22, 2016. The core PowerShell language is based on the POSIX 1003.2 grammar for the Korn shell. ^ Jones, Don (2020). Shell of an Idea: The Untold History of PowerShell. Don Gannon-Jones. p. 109. ISBN 978-1-9536450-3-6. ^ about_Command_Precedence. TechNet. Microsoft. May 8, 2014. ^ Wheeler, Sean (September 7, 2021). about Parsing - PowerShell. Microsoft Docs. Retrieved December 5, 2021. ^ Windows PowerShell Extended Type System. Retrieved November 28, 2007. ^ a b c Windows PowerShell Cmdlets. Retrieved November 28, 2007. ^ Creating Your First Cmdlet. Retrieved November 28, 2007. ^ Get-Verb. TechNet. Microsoft. May 8, 2014. ^ Cmdlet Overview. MSDN. Microsoft. May 8, 2014. ^ Adding parameters That Process Command Line Input. Retrieved November 28, 2007. ^ Adding parameters That Process Pipeline Input. Retrieved November 28, 2007. ^ Windows PowerShell Providers. Retrieved October 14, 2010. ^ Yoshizawa, Tomoaki; Ramos, Durval (September 29, 2012). PowerShell 1.0 Cmdlets. TechNet Articles. Microsoft. ^ Yoshizawa, Tomoaki (July 10, 2012). PowerShell 2.0 Cmdlets. TechNet Articles. Microsoft. ^ Wilson, Ed (2013). 1: Overview of Windows PowerShell 3.0. Windows Powershell 3.0 Step by Step. Sebastopol, California: Microsoft Press. ISBN 978-0-7356-7000-6. OCLC 829236530. Windows PowerShell 3.0 comes with about 1,000 cmdlets on Windows 8 ^ Wilson, Ed (2015). 1: Overview of Windows PowerShell 5.0. Windows PowerShell Step by Step (Third ed.). Redmond, Washington: Microsoft Press. ISBN 978-1-5093-0043-3. OCLC 927112976. Windows PowerShell 5.0 comes with about 1,300 cmdlets on Windows 10 ^ Windows PowerShell Owner's Manual: Piping and the Pipeline in Windows PowerShell. TechNet. Microsoft. Retrieved September 27, 2011. ^ Jones, Don (2008). Windows PowerShell – Rethinking the Pipeline. Microsoft TechNet. Microsoft. Retrieved November 28, 2007. ^ Windows PowerShell Object Concepts. Archived from the original on August 19, 2007. Retrieved November 28, 2007. ^ How PowerShell Formatting and Outputting REALLY works. Retrieved November 28, 2007. ^ More – How does PowerShell formatting really work?. Retrieved November 28, 2007. ^ about_Pipelines. TechNet. Microsoft. May 8, 2014. ^ about_Objects. TechNet. Microsoft. May 8, 2014. ^ a b about_Format.ps1xml. TechNet. Microsoft. May 8, 2014. ^ Anonymous Functions and Code Blocks in PowerShell. Retrieved January 21, 2012. ^ Introduction to Windows PowerShell's Variables. Retrieved November 28, 2007. ^ Byte Conversion. Windows PowerShell Tip of the Week. October 22, 2009. Retrieved November 15, 2013. ^ Ravikanth (May 20, 2013). Converting to size units (KB, MB, GB, TB, and PB) without using PowerShell multipliers. PowerShell Magazine. ^ a b c about_Functions. Microsoft TechNet. Microsoft. October 17, 2013. Retrieved November 15, 2013. ^ a b Lightweight Testing with Windows PowerShell. Retrieved November 28, 2007. ^ Angelopoulos, Alex; Karen, Bemowski (December 4, 2007). PowerShell Got Smart About Smart Quotes. Windows IT Pro. Penton Media. Retrieved November 15, 2013. ^ About Special Characters. Powershell / Scripting. Microsoft. June 8, 2017. Retrieved June 20, 2019. ^ Trap [Exception] { In PowerShell }. Retrieved November 28, 2007. ^ Running Windows PowerShell Scripts. Microsoft. Retrieved November 28, 2007. ^ about_Signing. Microsoft TechNet. Microsoft. October 17, 2013. Retrieved November 15, 2013. ^ Lee Holmes (September 2006). Windows PowerShell Quick Reference. O'Reilly Media. ^ eslesar (May 23, 2023). Windows PowerShell Desired State Configuration Overview. msdn.microsoft.com. ^ Chung, Leonard; Snover, Jeffrey; Kumaravel, Arul (November 14, 2006). It's a Wrap! Windows PowerShell 1.0 Released!. Windows PowerShell Blog. Microsoft. ^ PowerShell will be installed by default on Windows Server 08 R2 (WS08R2) and Windows 7 (W7)!. Windows PowerShell Blog. Microsoft. October 28, 2008. Retrieved September 27, 2011. ^ Windows Management Framework is here!. October 27, 2009. Retrieved October 30, 2009. ^ Microsoft Support Knowledge Base: Windows Management Framework (Windows PowerShell 2.0, WinRM 2.0, and BITS 4.0). Support.microsoft.com. September 23, 2011. Retrieved September 27, 2011. ^ 574 Reasons Why We Are So Proud and Optimistic About W7 and WS08R2. Windows PowerShell Blog. Microsoft. October 29, 2008. Retrieved September 27, 2011. ^ Snover, Jeffrey (2008). PowerShell: Creating Manageable Web Services. Archived from the original on October 13, 2008. Retrieved July 19, 2015. ^ What's New in CTP of PowerShell 2.0. Retrieved November 28, 2007. ^ Windows PowerShell V2 Community Technology Preview 2 (CTP2) – releaseNotes. Microsoft. Archived from the original on May 6, 2008. Retrieved May 5, 2008. ^ Differences between PowerShell 1.0 and PowerShell 2.0. Archived from the original on September 17, 2010. Retrieved June 26, 2010. ^ Jones, Don (May 2010). Windows PowerShell: Writing Cmdlets in Script. TechNet Magazine. Microsoft. ^ GoGrid Snap-in – Managing Cloud Services with PowerShell. Windows PowerShell Blog. Microsoft. October 14, 2008. Retrieved September 27, 2011. ^ Emit-XML. Windows PowerShell Blog. Microsoft. October 17, 2008. Retrieved September 27, 2011. ^ Block Comments in V2. Windows PowerShell Blog. Microsoft. June 14, 2008. Retrieved September 27, 2011. ^ Lee, Thomas (August 13, 2012). PowerShell Version 3 is RTM!. Under The Stairs. Retrieved August 13, 2012. ^ a b c Windows Management Framework 3.0. Download Center. Microsoft. September 4, 2012. Retrieved November 8, 2012. ^ Windows Management Framework 3.0 Community Technology Preview (CTP) #2 Available for Download. Windows PowerShell Blog. Microsoft. December 2, 2011. ^ Windows Management Framework 3.0. Download Center. Microsoft. December 3, 2012. ^ Jofre, JuanPablo (December 14, 2016). Windows PowerShell System Requirements. Microsoft Developer Network. Microsoft. Retrieved April 20, 2017. ^ Honeycutt, Jerry (2012). Woolley, Valerie (ed.). Introducing Windows 8: An Overview for IT Professionals. Redmond, WA: Microsoft Press. ISBN 978-0-7356-7050-1. ^ Windows Management Framework 4.0 is now available. Microsoft. October 24, 2013. Retrieved November 4, 2013. ^ Levy, Shay (June 25, 2013). New Features in Windows PowerShell 4.0. PowerShell Magazine. Retrieved June 26, 2013. ^ Desired State Configuration in Windows Server 2012 R2 PowerShell. Channel 9. Microsoft. June 3, 2013. Archived from the original on December 26, 2013. Retrieved June 26, 2013. ^ Hall, Adrian (June 7, 2013). Thoughts from Microsoft TechEd North America. Blogs: Tips & Tricks. Splunk. Retrieved June 26, 2013. ^ Windows Management Framework (WMF) 5.0 RTM packages has been republished. Windows PowerShell Blog. Microsoft. February 24, 2016. ^ Q and A. GitHub. Retrieved April 21, 2015. ^ Snover, Jeffrey (April 3, 2014). Windows Management Framework V5 Preview. blogs.technet.com. Microsoft. Archived from the original on June 30, 2014. Retrieved April 21, 2015. ^ says, Jaap Brasser (August 2, 2016). #PSTip New PowerShell Commands in Windows 10 Anniversary Update. ^ What's New In Windows Server 2016 Standard Edition Part 9 – Management And Automation. September 4, 2016. ^ Microsoft.PowerShell.LocalAccounts Module. technet.microsoft.com. June 16, 2016. ^ Announcing Windows Management Framework (WMF) 5.1 Preview. July 16, 2016. ^ WMF 5.1. Microsoft Download Center. ^ What is Windows PowerShell? - PowerShell. Microsoft Learn. March 7, 2024. Retrieved August 19, 2024. ^ Migrating from Windows PowerShell 5.1 to PowerShell 7 - PowerShell. Microsoft Learn. April 2, 2024. Retrieved August 19, 2024. ^ Aiello, Joey (January 11, 2018). PowerShell Core 6.0: Generally Available (GA) and Supported!. PowerShell Team Blog. Microsoft. Archived from the original on June 11, 2018. Retrieved June 11, 2018. ^ Aiello, Joey; Wheeler, Sean (January 10, 2018). PowerShell Core Support Lifecycle. Microsoft Docs. Microsoft. Archived from the original on November 16, 2018. Retrieved January 11, 2018. ^ Calvo, Angel (January 11, 2018). Top 10 most exciting reasons to migrate. PowerShell AMA. Microsoft. ^ sdwheeler (August 3, 2023). What's New in PowerShell Core 6.0. learn.microsoft.com. Retrieved December 11, 2023. Default encoding is UTF-8 without a BOM except for New-ModuleManifest ^ Understanding file encoding in VS Code and PowerShell - PowerShell. learn.microsoft.com. November 29, 2023. Retrieved December 11, 2023. ^ Aiello, Joey (September 13, 2018). Announcing PowerShell Core 6.1. devblogs.microsoft.com. Microsoft. Retrieved June 1, 2019. ^ PowerShell/PowerShell. GitHub. Retrieved June 22, 2020. ^ a b c Lee, Steve (April 5, 2019). The Next Release of PowerShell – PowerShell 7. Microsoft. Retrieved June 1, 2019. ^ Lee, Steve (March 28, 2019). General Availability of PowerShell Core 6.2. devblogs.microsoft.com. Microsoft. Retrieved June 1, 2019. ^ Mackie, Kurt (May 30, 2019). Microsoft Releases PowerShell 7 Preview. 1105 Media Inc. Retrieved June 1, 2019. ^ Lee, Steve (May 30, 2019). PowerShell 7 Road Map. devblogs.microsoft.com. Microsoft. Retrieved August 12, 2020. ^ PowerShell 7 Preview 5 | PowerShell. October 23, 2019. Archived from the original on February 15, 2020. Retrieved March 5, 2020. ^ PowerShell 7.2 is the new version of Microsoft's next-generation shell. itsfoss.net. November 12, 2021. ^ Release v7.3.0 Release of PowerShell · PowerShell/PowerShell. GitHub. Archived from the original on November 9, 2022. Retrieved March 7, 2022. ^ Release v7.4.7 Release of PowerShell · PowerShell/PowerShell. GitHub. Retrieved January 27, 2025. ^ sdwheeler (January 23, 2025). What's New in PowerShell 7.4 - PowerShell. learn.microsoft.com. Retrieved January 27, 2025. ^ Release v7.5.0 Release of PowerShell · PowerShell/PowerShell. GitHub. Retrieved January 27, 2025. ^ sdwheeler (January 23, 2025). What's New in PowerShell 7.5 - PowerShell. learn.microsoft.com. Retrieved January 27, 2025. ^ Release v7.6.0-preview.2 Release of PowerShell · PowerShell/PowerShell. GitHub. Retrieved January 27, 2025. ^ sdwheeler (January 17, 2025). What's New in PowerShell 7.6 - PowerShell. learn.microsoft.com. Retrieved January 27, 2025. ^ Tar and Curl Come to Windows! - Microsoft Tech Community - 382409. March 22, 2019. Archived from the original on September 11, 2020. Retrieved May 17, 2020. ^ Test-Connection. PowerShell documentations. Microsoft. August 9, 2015. ^ Wheeler, Sean (June 2, 2020). About Scripts. Microsoft Docs. Microsoft. ^ Wheeler, Sean; Smatlak, David; Wilson, Chase (October 16, 2019). How to write a PowerShell module manifest. Docs. Microsoft. ^ Wheeler, Sean; Smatlak, David (November 22, 2019). How to Write a PowerShell Script Module. Microsoft Docs. Microsoft. ^ Wheeler, Sean (November 13, 2016). How to Write a PowerShell Binary Module. Microsoft Docs. Microsoft. ^ Wheeler, Sean; Jofre, Juan Pablo; Vorobev, Sergei; Nikolaev, Kirill; Coulter, David (June 2, 2020). About Types.ps1xml. Microsoft Docs. Microsoft. ^ Wheeler, Sean. Export-Clixml. Microsoft Docs. Microsoft. ^ Wheeler, Sean; Jofre, Juan Pablo; Vorobev, Sergei; Nikolaev, Kirill; Coulter, David. Export-Console. Microsoft Docs. Microsoft. ^ Wheeler, Sean (June 2, 2020). About Session Configuration Files. Microsoft Docs. Microsoft. ^ Wheeler, Sean (June 2, 2020). New-PSRoleCapabilityFile. Microsoft Docs. Microsoft. ^ Microsoft Transporter Suite for Lotus Domino. Microsoft. Retrieved March 7, 2008. ^ PowerTools for Open XML. Retrieved June 20, 2008. ^ MO74: WebSphere MQ – Windows PowerShell Library. Retrieved December 5, 2007. ^ IoT Core Add-ons command-line options. October 15, 2018. Retrieved June 13, 2020. ^ PowerShell Commands for Active Directory by Quest Software. Retrieved July 2, 2008. ^ PowerShell Remoting through Group Policy. Retrieved December 7, 2007. ^ VMware vSphere PowerCLI. Archived from the original on December 30, 2014. Retrieved September 9, 2014. ^ IIS7 PowerShell Provider Tech Preview 2. Windows PowerShell blog. Archived from the original on February 4, 2010. Retrieved July 3, 2008. ^ Kudos to the Win7 Diagnostics Team. Retrieved June 15, 2009. ^ Michael, Niehaus (July 10, 2009). MDT 2010 New Feature #16: PowerShell support. Retrieved October 27, 2014. ^ Kudos to NetApp for Data ONTAP PowerShell ToolKit. Retrieved June 15, 2010. ^ PowerShell Toolkit 4.2 Announcement. June 23, 2016. Retrieved September 7, 2016. ^ Heterogeneous Job Scheduling With PowerShell. Retrieved September 15, 2010. ^ UIAutomation PowerShell Extensions. Archived from the original on August 17, 2016. Retrieved February 16, 2012. ^ EqualLogic HIT-ME with PowerShell. Retrieved March 9, 2012. ^ de:LOGINventory ^ Selenium PowerShell eXtensions. Archived from the original on January 19, 2013. Retrieved August 20, 2012. ^ Pash. SourceForge. Dice Holdings, Inc. Retrieved September 27, 2011. ^ Pash Project. GitHub. Retrieved April 10, 2013. ^ Pash is now obsolete · Issue #429 · Pash-Project/Pash. GitHub. Retrieved November 26, 2019.",
    "further_reading": "Finke, Douglas (2012). Windows PowerShell for Developers. O'Reilly Media. ISBN 978-1-4493-2270-0. Holmes, Lee (2006). Windows PowerShell Quick Reference. O'Reilly Media. ISBN 0-596-52813-2. Holmes, Lee (2007). Windows PowerShell Cookbook. O'Reilly Media. ISBN 978-0-596-52849-2. Jones, Don; Hicks, Jeffery (2010). Windows PowerShell 2.0: TFM (3rd ed.). Sapien Technologies. ISBN 978-0-9821314-2-8. Jones, Don (2020). Shell of an Idea: The Untold History of PowerShell. Self-published. ISBN 978-1-9536450-3-6. Kopczynski, Tyson; Handley, Pete; Shaw, Marco (2009). Windows PowerShell Unleashed (2nd ed.). Pearson Education. ISBN 978-0-672-32988-3. Kumaravel, Arul; White, Jon; Naixin Li, Michael; Happell, Scott; Xie, Guohui; Vutukuri, Krishna C. (2008). Professional Windows PowerShell Programming: Snapins, Cmdlets, Hosts and Providers. Wrox Press. ISBN 978-0-470-17393-0. Oakley, Andy (2005). Monad (AKA PowerShell). O'Reilly Media. ISBN 0-596-10009-4. Watt, Andrew (2007). Professional Windows PowerShell. Wrox Press. ISBN 978-0-471-94693-9. Wilson, Ed (2013). Windows PowerShell 3.0 Step by Step. Microsoft Press. ISBN 978-0-7356-6339-8. Wilson, Ed (2014). Windows PowerShell Best Practices. Microsoft Press. ISBN 978-0-7356-6649-8.",
    "external_links": "Wikiversity has learning resources about PowerShell Official website PowerShell on GitHub Windows PowerShell Survival Guide Archived September 15, 2012, at the Wayback Machine on TechNet Wiki vteMicrosoft Windows components APIs Architecture 9x NT Booting process Games Managementtools App Installer Command Prompt Control Panel Device Manager DirectX Diagnostic Tool Disk Cleanup Drive Optimizer Driver Verifier Event Viewer IExpress Management Console Netsh Performance Monitor PowerShell Recovery Console Resource Monitor Settings Sysprep System Configuration System File Checker System Information System Policy Editor System Restore Task Manager Windows Error Reporting Windows Ink Windows Installer Windows Update Windows Insider WinRE WMI Apps 3D Viewer Calculator Calendar Camera Character Map City Art Search Clipchamp Clock Company Portal Copilot Edge Fax and Scan Feedback Hub Get Help Magnifier Mail Maps Media Player 2022 Mesh Messaging Mobility Center Money Movies & TV Narrator Notepad OneDrive OneNote Paint PC Manager People Phone Link Photos Quick Assist Remote Desktop Connection Skype Snipping Tool Speech Recognition Sports Start Sticky Notes Store Terminal Tips Voice Recorder Weather Whiteboard Windows App Xbox Shell Action Center Aero AutoPlay AutoRun ClearType Explorer Search IFilter Indexing Service Namespace Saved search Special folder Start menu Task View Taskbar Windows Spotlight Windows XP visual styles Services BITS CLFS Error Reporting Multimedia Class Scheduler Service Control Manager Shadow Copy Task Scheduler Wireless Zero Configuration File systems CDFS DFS exFAT FAT IFS NTFS EFS Hard link links Mount Point Reparse point TxF ReFS UDF Server Active Directory Active DRM Services DFS Replication Distributed Transaction Coordinator DNS Domains Folder redirection Group Policy Hyper-V IIS MSMQ Network Access Protection Print Services for UNIX PWS Remote Desktop Services Remote Differential Compression Remote Installation Services Roaming user profiles Server Core SharePoint System Resource Manager Windows Deployment Services Windows Media Services WSUS Architecture Boot Manager Console CSRSS Desktop Window Manager Enhanced Write Filter Graphics Device Interface Hardware Abstraction Layer I/O request packet Imaging Format Kernel Transaction Manager Library files Logical Disk Manager LSASS MinWin NTLDR Ntoskrnl.exe Object Manager Open XML Paper Specification Portable Executable DLL EXE Registry Resource Protection Security Account Manager Server Message Block Shadow Copy SMSS System Idle Process USER WHEA Winlogon WinUSB Security Security and Maintenance AppLocker BitLocker Credential Guard Data Execution Prevention Defender Family features Kernel Patch Protection Mandatory Integrity Control Protected Media Path User Account Control User Interface Privilege Isolation Windows Firewall Compatibility COMMAND.COM Windows Subsystem for Linux WoW64 API Active Scripting JScript VBScript WSH COM ActiveX ActiveX Document COM Structured storage DCOM OLE OLE Automation Transaction Server DirectX Native .NET Universal Windows Platform WinAPI Windows Mixed Reality Windows Runtime WinUSB Games Solitaire Collection Surf DiscontinuedGames 3D Pinball Chess Titans FreeCell Hearts Hold 'Em InkBall Purble Place Solitaire Spider Solitaire Tinker Apps ActiveMovie Address Book Anytime Upgrade Backup and Restore Cardfile CardSpace CD Player Chat Contacts Cortana Desktop Gadgets Diagnostics DriveSpace DVD Maker Easy Transfer Edge Legacy Fax Food & Drink Groove Music Health & Fitness Help and Support Center HyperTerminal Imaging Internet Explorer Journal Make Compatible Media Center Meeting Space Messaging Messenger Mobile Device Center Movie Maker MSN Dial-up NetMeeting NTBackup Outlook Express Paint 3D Pay Phone Companion Photo Gallery Photo Viewer Program Manager Steps Recorder Syskey Travel WinHelp WordPad Write Others Desktop Cleanup Wizard File Protection Games for Windows HPFS Interix Media Control Interface MS-DOS 7 Next-Generation Secure Computing Base POSIX subsystem ScanDisk Video for Windows Virtual DOS machine Windows on Windows Windows Services for UNIX Windows SideShow Windows System Assessment Tool Windows To Go WinFS Spun off toMicrosoft Store DVD Player File Manager Hover! Mahjong Minesweeper Category List vteWindows command-line programs and shell builtinsEcosystemInterpreters COMMAND.COM Command Prompt PowerShell Recovery Console Terminals Windows Console Windows Terminal File system navigation cd (chdir) dir popd pushd tree File management attrib cacls cipher compact copy del (erase) deltree icacls mkdir (md) mklink move openfiles recover ren (rename) replace rmdir (rd) robocopy takeown xcopy Archiving expand extrac32 extract makecab pax tar Disk management chkdsk convert defrag diskcomp diskcopy diskpart diskraid diskshadow drvspace fdisk format fsutil label manage-bde MSCDEX refsutil subst scandisk sys vol vssadmin Processes at exit kill runas sc schtasks shutdown start taskkill tasklist Registry assoc ftype reg regini regsvr32 User environment chcp cmdkey date graftabl mode path set setver setx time title ver where whoami File contents comp edit edlin fc find findstr print type Scripting choice clip cscript doskey echo for forfiles goto if more pause prompt rem timeout Networking arp bitsadmin curl getmac hostname ipconfig nbtstat net netsh netstat nslookup PathPing ping rpcping route scp setspn sftp ssh ssh-add ssh-agent ssh-keygen ssh-keyscan tracert winrm winrs Maintenance and care auditpol dism dispdiag driverquery eventcreate eventtriggers gpresult gpupdate logman mofcomp msiexec ntbackup pentnt pnpunattend pnputil REAgentC relog sfc sxstrace systeminfo tpmtool tpmvscmgr tracerpt typeperf w32tm WBAdmin wecutil wevtutil winmgmt winsat wmic Boot management bcdedit bootcfg bootsect fixboot fixmbr Software development break debug exe2bin QBasic wsl Miscellaneous cls dpath help List of DOS commands Environment variables Windows Support Tools vteCommon Language InfrastructureArchitecture Application domain Code Access Security Common Intermediate Language instructions Common Type System Platform Invocation Services Virtual Execution System Components Assembly Delegate Global Assembly Cache Manifest Metadata Standard Libraries ImplementationsMicrosoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono DotGNU LanguagesMajor languages C# Visual Basic F# PowerShell Other Axum A# Boo Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Small Basic Comparison C# and Java C# and Visual Basic .NET Visual Basic and Visual Basic .NET vteMicrosoft APIs and frameworksGraphics and UI Desktop Window Manager Direct2D Direct3D D3D (extensions) GDI / GDI+ WPF Silverlight WinUI Windows Color System Windows Image Acquisition Windows Imaging Component DirectX Graphics Infrastructure (DXGI) Windows Advanced Rasterization Platform WinG Audio DirectMusic DirectSound XACT Speech API XAudio2 Multimedia DirectX Media Objects Video Acceleration Xinput DirectInput DirectShow Managed DirectX Media Foundation XNA Windows Media Video for Windows Web MSHTML JScript VBScript BHO XDR SideBar Gadgets TypeScript Data access Data Access Components (MDAC) ADO ADO.NET ODBC OLE DB Extensible Storage Engine Entity Framework Sync Framework Access Database Engine MSXML OPC Networking Winsock LSP Winsock Kernel Filtering Platform NDIS Windows Rally BITS P2P API MSMQ DirectPlay Communication Messaging API Telephony API WCF Administration andmanagement Win32 console Windows Script Host WMI (extensions) PowerShell Task Scheduler Offline Files Shadow Copy Windows Installer Error Reporting Event Log Common Log File System Component model COM COM+ ActiveX Distributed Component Object Model .NET Framework Libraries Framework Class Library Microsoft Foundation Classes (MFC) Active Template Library (ATL) Windows Template Library (WTL) Device drivers WDM WDF KMDF UMDF WDDM NDIS UAA VxD Security Crypto API CAPICOM Windows CardSpace Data Protection API Security Support Provider Interface (SSPI) .NET ASP.NET ADO.NET Remoting Silverlight TPL WCF WCS WPF WF Software factories Enterprise Library CCF IPC MSRPC Dynamic Data Exchange (DDE) Remoting WCF Accessibility Active Accessibility UI Automation Text and multilingualsupport DirectWrite Text Services Framework Text Object Model Input method editor Language Interface Pack Multilingual User Interface Uniscribe vteMicrosoft free and open-source software (FOSS)Overview Microsoft and open source Shared Source Initiative SoftwareApplications 3D Movie Maker Atom Conference XP Family.Show File Manager Open Live Writer Microsoft PowerToys Terminal Windows Calculator Windows Console Windows Package Manager WorldWide Telescope XML Notepad Video games Allegiance Programminglanguages Bosque C# Dafny F# F* GW-BASIC IronPython IronRuby Lean P Power Fx PowerShell Project Verona Q# Small Basic Online TypeScript Visual Basic Frameworks,development tools .NET .NET Framework .NET Gadgeteer .NET MAUI .NET Micro Framework AirSim ASP.NET ASP.NET AJAX ASP.NET Core ASP.NET MVC ASP.NET Razor ASP.NET Web Forms Avalonia Babylon.js BitFunnel Blazor C++/WinRT CCF ChakraCore CLR Profiler Dapr DeepSpeed DiskSpd Dryad Dynamic Language Runtime eBPF on Windows Electron Entity Framework Fluent Design System Fluid Framework Infer.NET LightGBM Managed Extensibility Framework Microsoft Automatic Graph Layout Microsoft C++ Standard Library Microsoft Cognitive Toolkit Microsoft Design Language Microsoft Detours Microsoft Enterprise Library Microsoft SEAL mimalloc Mixed Reality Toolkit ML.NET mod_mono Mono MonoDevelop MSBuild MsQuic Neural Network Intelligence npm NuGet OneFuzz Open Management Infrastructure Open Neural Network Exchange Open Service Mesh Open XML SDK Orleans Playwright ProcDump ProcMon Python Tools for Visual Studio R Tools for Visual Studio RecursiveExtractor Roslyn Sandcastle SignalR StyleCop SVNBridge T2 Temporal Prover Text Template Transformation Toolkit TLA+ Toolbox U-Prove vcpkg Virtual File System for Git Voldemort VoTT Vowpal Wabbit Windows App SDK Windows Communication Foundation Windows Driver Frameworks KMDF UMDF Windows Forms Windows Presentation Foundation Windows Template Library Windows UI Library WinJS WinObjC WiX XDP for Windows XSP xUnit.net Z3 Theorem Prover Operating systems MS-DOS (v1.25, v2.0 & v4.0) Barrelfish SONiC Azure Linux Other ChronoZoom Extensible Storage Engine FlexWiki FourQ Gollum Project Mu ReactiveX SILK TLAPS TPM 2.0 Reference Implementation WikiBhasha Licenses Microsoft Public License Microsoft Reciprocal License Forges CodePlex GitHub Related .NET Foundation F# Software Foundation Microsoft Open Specification Promise Open Letter to Hobbyists Open Source Security Foundation Outercurve Foundation Category",
    "document": "The command-line interpreter (CLI) has been an inseparable part of most Microsoft operating systems. MS-DOS and Xenix relied almost exclusively on the CLI (though MS-DOS 5 also came with a complementary graphical DOS Shell.) The Windows 9x family came bundled with COMMAND.COM, the command-line environment of MS-DOS. The Windows NT and Windows CE families, however, came with a new cmd.exe that bore strong similarities to COMMAND.COM. Both environments support a few basic internal commands and a primitive scripting language (batch files), which can be used to automate various tasks. However, they cannot automate all facets of Windows graphical user interface (GUI) because command-line equivalents of operations are limited and the scripting language is elementary. Microsoft attempted to address some of these shortcomings by introducing the Windows Script Host in 1998 with Windows 98, and its command-line based host, cscript.exe. It integrates with the Active Script engine and allows scripts to be written in compatible languages, such as JScript and VBScript, leveraging the APIs exposed by applications via the component object model (COM). Its shortcomings are: its documentation is not very accessible, and it quickly gained a reputation as a system vulnerability vector after several high-profile computer viruses exploited weaknesses in its security provisions. Different versions of Windows provided various special-purpose command-line interpreters (such as netsh and WMIC) with their own command sets but they were not interoperable. Windows Server 2003 further attempted to improve the command-line experience but scripting support was still unsatisfactory. Microsoft program manager and PowerShell Chief Architect Jeffrey Snover By the late 1990s, Intel had come to Microsoft asking for help in making Windows, which ran on Intel CPUs, a more appropriate platform to support the development of future Intel CPUs. At the time, Intel CPU development was accomplished on Sun Microsystems computers which ran Solaris (a Unix variant) on RISC-architecture CPUs. The ability to run Intel's many KornShell automation scripts on Windows was identified as a key capability. Internally, Microsoft began an effort to create a Windows port of Korn Shell, which was code-named Kermit. Intel ultimately pivoted to a Linux-based development platform that could run on Intel CPUs, rendering the Kermit project redundant. However, with a fully funded team, Microsoft program manager Jeffrey Snover realized there was an opportunity to create a more general-purpose solution to Microsoft's problem of administrative automation. By 2002, Microsoft had started to develop a new approach to command-line management, including a CLI called Monad (also known as Microsoft Shell or MSH). The ideas behind it were published in August 2002 in a white paper called the Monad Manifesto by its chief architect, Jeffrey Snover. In a 2017 interview, Snover explains the genesis of PowerShell, saying that he had been trying to make Unix tools available on Windows, which didn't work due to core architectural difference[s] between Windows and Linux. Specifically, he noted that Linux considers everything a text file, whereas Windows considers everything an API that returns structured data. They were fundamentally incompatible, which led him to take a different approach. Monad was to be a new extensible CLI with a fresh design capable of automating a range of core administrative tasks. Microsoft first demonstrated Monad publicly at the Professional Development Conference in Los Angeles in October 2003. A few months later, they opened up private beta, which eventually led to a public beta. Microsoft published the first Monad public beta release on June 17, 2005, and the Beta 2 on September 11, 2005, and Beta 3 on January 10, 2006. The first version of PowerShell On April 25, 2006, not long after the initial Monad announcement, Microsoft announced that Monad had been renamed Windows PowerShell, positioning it as a significant part of its management technology offerings. Release Candidate (RC) 1 of PowerShell was released at the same time. A significant aspect of both the name change and the RC was that this was now a component of Windows, rather than a mere add-on. Release Candidate 2 of PowerShell version 1 was released on September 26, 2006, with final release to the web on November 14, 2006. PowerShell for earlier versions of Windows was released on January 30, 2007. PowerShell v2.0 development began before PowerShell v1.0 shipped. During the development, Microsoft shipped three community technology previews (CTP). Microsoft made these releases available to the public. The last CTP release of Windows PowerShell v2.0 was made available in December 2008. PowerShell v2.0 was completed and released to manufacturing in August 2009, as an integral part of Windows 7 and Windows Server 2008 R2. Versions of PowerShell for Windows XP, Windows Server 2003, Windows Vista and Windows Server 2008 were released in October 2009 and are available for download for both 32-bit and 64-bit platforms. In an October 2009 issue of TechNet Magazine, Microsoft called proficiency with PowerShell the single most important skill a Windows administrator will need in the coming years. Windows 10 shipped with Pester, a script validation suite for PowerShell. PowerShell for Linux 7.3.1 on Ubuntu 22.10 On August 18, 2016, Microsoft announced that they had made PowerShell open-source and cross-platform with support for Windows, macOS, CentOS and Ubuntu. The source code was published on GitHub. The move to open source created a second incarnation of PowerShell called PowerShell Core, which runs on .NET Core. It is distinct from Windows PowerShell, which runs on the full .NET Framework. Starting with version 5.1, PowerShell Core is bundled with Windows Server 2016 Nano Server. A key design tactic for PowerShell was to leverage the large number of APIs that already existed in Windows, Windows Management Instrumentation, .NET Framework, and other software. PowerShell cmdlets wrap around existing functionality. The intent with this tactic is to provide an administrator-friendly, more-consistent interface between administrators and a wide range of underlying functionality. With PowerShell, an administrator doesn't need to know .NET, WMI, or low-level API coding, and can instead focus on using the cmdlets exposed by PowerShell. In this regard, PowerShell creates little new functionality, instead focusing on making existing functionality more accessible to a particular audience. PowerShell's developers based the core grammar of the tool on that of the POSIX 1003.2 KornShell. However, PowerShell's language was also influenced by PHP, Perl, and many other existing languages. Windows PowerShell can execute four kinds of named commands: cmdlets (.NET Framework programs designed to interact with PowerShell) PowerShell scripts (files suffixed by .ps1) PowerShell functions Standalone executable programs If a command is a standalone executable program, PowerShell launches it in a separate process; if it is a cmdlet, it executes in the PowerShell process. PowerShell provides an interactive command-line interface, where the commands can be entered and their output displayed. The user interface offers customizable tab completion. PowerShell enables the creation of aliases for cmdlets, which PowerShell textually translates into invocations of the original commands. PowerShell supports both named and positional parameters for commands. In executing a cmdlet, the job of binding the argument value to the parameter is done by PowerShell itself, but for external executables, arguments are parsed by the external executable independently of PowerShell interpretation. The PowerShell Extended Type System (ETS) is based on the .NET type system, but with extended semantics (for example, propertySets and third-party extensibility). For example, it enables the creation of different views of objects by exposing only a subset of the data fields, properties, and methods, as well as specifying custom formatting and sorting behavior. These views are mapped to the original object using XML-based configuration files. Cmdlets are specialized commands in the PowerShell environment that implement specific functions. These are the native commands in the PowerShell stack. Cmdlets follow a Verb-Noun naming pattern, such as Get-ChildItem, which makes it self-documenting code. Cmdlets output their results as objects and can also receive objects as input, making them suitable for use as recipients in a pipeline. If a cmdlet outputs multiple objects, each object in the collection is passed down through the entire pipeline before the next object is processed. Cmdlets are specialized .NET classes, which the PowerShell runtime instantiates and invokes at execution time. Cmdlets derive either from Cmdlet or from PSCmdlet, the latter being used when the cmdlet needs to interact with the PowerShell runtime. These base classes specify certain methods – BeginProcessing(), ProcessRecord() and EndProcessing() – which the cmdlet's implementation overrides to provide the functionality. Whenever a cmdlet runs, PowerShell invokes these methods in sequence, with ProcessRecord() being called if it receives pipeline input. If a collection of objects is piped, the method is invoked for each object in the collection. The class implementing the cmdlet must have one .NET attribute – CmdletAttribute – which specifies the verb and the noun that make up the name of the cmdlet. Common verbs are provided as an enum. If a cmdlet receives either pipeline input or command-line parameter input, there must be a corresponding property in the class, with a mutator implementation. PowerShell invokes the mutator with the parameter value or pipeline input, which is saved by the mutator implementation in class variables. These values are then referred to by the methods which implement the functionality. Properties that map to command-line parameters are marked by ParameterAttribute and are set before the call to BeginProcessing(). Those which map to pipeline input are also flanked by ParameterAttribute, but with the ValueFromPipeline attribute parameter set. The implementation of these cmdlet classes can refer to any .NET API and may be in any .NET language. In addition, PowerShell makes certain APIs available, such as WriteObject(), which is used to access PowerShell-specific functionality, such as writing resultant objects to the pipeline. Cmdlets can use .NET data access APIs directly or use the PowerShell infrastructure of PowerShell Providers, which make data stores addressable using unique paths. Data stores are exposed using drive letters, and hierarchies within them, addressed as directories. Windows PowerShell ships with providers for the file system, registry, the certificate store, as well as the namespaces for command aliases, variables, and functions. Windows PowerShell also includes various cmdlets for managing various Windows systems, including the file system, or using Windows Management Instrumentation to control Windows components. Other applications can register cmdlets with PowerShell, thus allowing it to manage them, and, if they enclose any datastore (such as a database), they can add specific providers as well.[citation needed] The number of cmdlets included in the base PowerShell install has generally increased with each version: Version Cmdlets Ref Windows PowerShell 1.0 129 Windows PowerShell 2.0 632 Windows PowerShell 3.0 ≈1,000 Windows PowerShell 4.0 ? Windows PowerShell 5.0 ≈1,300 Windows PowerShell 5.1 1,586 [citation needed] PowerShell Core 6.0 ? PowerShell Core 6.1 ? PowerShell Core 6.2 ? PowerShell 7.0 1,507 [citation needed] PowerShell 7.1 ? PowerShell 7.2 ? PowerShell 7.4 1,656 Cmdlets can be added into the shell through snap-ins (deprecated in v2) and modules; users are not limited to the cmdlets included in the base PowerShell installation. PowerShell implements the concept of a pipeline, which enables piping the output of one cmdlet to another cmdlet as input. As with Unix pipelines, PowerShell pipelines can construct complex commands, using the | operator to connect stages. However, the PowerShell pipeline differs from Unix pipelines in that stages execute within the PowerShell runtime rather than as a set of processes coordinated by the operating system. Additionally, structured .NET objects, rather than byte streams, are passed from one stage to the next. Using objects and executing stages within the PowerShell runtime eliminates the need to serialize data structures, or to extract them by explicitly parsing text output. An object can also encapsulate certain functions that work on the contained data, which become available to the recipient command for use. For the last cmdlet in a pipeline, PowerShell automatically pipes its output object to the Out-Default cmdlet, which transforms the objects into a stream of format objects and then renders those to the screen. Because all PowerShell objects are .NET objects, they share a .ToString() method, which retrieves the text representation of the data in an object. In addition, PowerShell allows formatting definitions to be specified, so the text representation of objects can be customized by choosing which data elements to display, and in what manner. However, in order to maintain backward compatibility, if an external executable is used in a pipeline, it receives a text stream representing the object, instead of directly integrating with the PowerShell type system. Windows PowerShell includes a dynamically typed scripting language which can implement complex operations using cmdlets imperatively. The scripting language supports variables, functions, branching (if-then-else), loops (while, do, for, and foreach), structured error/exception handling and closures/lambda expressions, as well as integration with .NET. Variables in PowerShell scripts are prefixed with $. Variables can be assigned any value, including the output of cmdlets. Strings can be enclosed either in single quotes or in double quotes: when using double quotes, variables will be expanded even if they are inside the quotation marks. Enclosing the path to a file in braces preceded by a dollar sign (as in ${C:\\foo.txt}) creates a reference to the contents of the file. If it is used as an L-value, anything assigned to it will be written to the file. When used as an R-value, the contents of the file will be read. If an object is assigned, it is serialized before being stored.[citation needed] Object members can be accessed using . notation, as in C# syntax. PowerShell provides special variables, such as $args, which is an array of all the command-line arguments passed to a function from the command line, and $_, which refers to the current object in the pipeline. PowerShell also provides arrays and associative arrays. The PowerShell scripting language also evaluates arithmetic expressions entered on the command line immediately, and it parses common abbreviations, such as GB, MB, and KB. Using the function keyword, PowerShell provides for the creation of functions. A simple function has the following general look: function name ([Type]$Param1, [Type]$Param2) { # Instructions } However, PowerShell allows for advanced functions that support named parameters, positional parameters, switch parameters and dynamic parameters. function Verb-Noun { param ( # Definition of static parameters ) dynamicparam { # Definition of dynamic parameters } begin { # Set of instruction to run at the start of the pipeline } process { # Main instruction sets, ran for each item in the pipeline } end { # Set of instruction to run at the end of the pipeline } } The defined function is invoked in either of the following forms: name value1 value2 Verb-Noun -Param1 value1 -Param2 value2 PowerShell allows any static .NET methods to be called by providing their namespaces enclosed in brackets ([]), and then using a pair of colons (::) to indicate the static method. For example: [Console]::WriteLine(PowerShell) There are dozens of ways to create objects in PowerShell. Once created, one can access the properties and instance methods of an object using the . notation. PowerShell accepts strings, both raw and escaped. A string enclosed between single quotation marks is a raw string while a string enclosed between double quotation marks is an escaped string. PowerShell treats straight and curly quotes as equivalent. The following list of special characters is supported by PowerShell: PowerShell special characters Sequence Meaning `0 Null `a Alert `b Backspace `e Escape (since PowerShell 6) `f Form feed `n Newline `r Carriage return `t Horizontal tab `u{x} Unicode escape sequence (since PowerShell 6) `v Vertical tab --% Treat any character from this point forward literally For error handling, PowerShell provides a .NET-based exception-handling mechanism. In case of errors, objects containing information about the error (Exception object) are thrown, which are caught using the try ... catch construct (although a trap construct is supported as well). PowerShell can be configured to silently resume execution, without actually throwing the exception; this can be done either on a single command, a single session or perpetually. Scripts written using PowerShell can be made to persist across sessions in either a .ps1 file or a .psm1 file (the latter is used to implement a module). Later, either the entire script or individual functions in the script can be used. Scripts and functions operate analogously with cmdlets, in that they can be used as commands in pipelines, and parameters can be bound to them. Pipeline objects can be passed between functions, scripts, and cmdlets seamlessly. To prevent unintentional running of scripts, script execution is disabled by default and must be enabled explicitly. Enabling of scripts can be performed either at system, user or session level. PowerShell scripts can be signed to verify their integrity, and are subject to Code Access Security. The PowerShell scripting language supports binary prefix notation similar to the scientific notation supported by many programming languages in the C-family. One can also use PowerShell embedded in a management application, which uses the PowerShell runtime to implement the management functionality. For this, PowerShell provides a managed hosting API. Via the APIs, the application can instantiate a runspace (one instantiation of the PowerShell runtime), which runs in the application's process and is exposed as a Runspace object. The state of the runspace is encased in a SessionState object. When the runspace is created, the Windows PowerShell runtime initializes the instantiation, including initializing the providers and enumerating the cmdlets, and updates the SessionState object accordingly. The Runspace then must be opened for either synchronous processing or asynchronous processing. After that it can be used to execute commands.[citation needed] To execute a command, a pipeline (represented by a Pipeline object) must be created and associated with the runspace. The pipeline object is then populated with the cmdlets that make up the pipeline. For sequential operations (as in a PowerShell script), a Pipeline object is created for each statement and nested inside another Pipeline object. When a pipeline is created, Windows PowerShell invokes the pipeline processor, which resolves the cmdlets into their respective assemblies (the command processor) and adds a reference to them to the pipeline, and associates them with InputPipe, OutputPipe and ErrorOutputPipe objects, to represent the connection with the pipeline. The types are verified and parameters bound using reflection. Once the pipeline is set up, the host calls the Invoke() method to run the commands, or its asynchronous equivalent, InvokeAsync(). If the pipeline has the Write-Host cmdlet at the end of the pipeline, it writes the result onto the console screen. If not, the results are handed over to the host, which might either apply further processing or display the output itself.[citation needed] Microsoft Exchange Server 2007 uses the hosting APIs to provide its management GUI. Each operation exposed in the GUI is mapped to a sequence of PowerShell commands (or pipelines). The host creates the pipeline and executes them. In fact, the interactive PowerShell console itself is a PowerShell host, which interprets the scripts entered at command line and creates the necessary Pipeline objects and invokes them.[citation needed] DSC allows for declaratively specifying how a software environment should be configured. Upon running a configuration, DSC will ensure that the system gets the state described in the configuration. DSC configurations are idempotent. The Local Configuration Manager (LCM) periodically polls the system using the control flow described by resources (imperative pieces of DSC) to make sure that the state of a configuration is maintained. Initially using the code name Monad, PowerShell was first shown publicly at the Professional Developers Conference in October 2003 in Los Angeles. All major releases are still supported, and each major release has featured backwards compatibility with preceding versions. It was released along with the Windows 10 Anniversary Update on August 2, 2016, and in Windows Server 2016. PackageManagement now supports proxies, PSReadLine now has ViMode support, and two new cmdlets were added: Get-TimeZone and Set-TimeZone. The LocalAccounts module allows for adding/removing local user accounts. A preview for PowerShell 5.1 was released for Windows 7, Windows Server 2008, Windows Server 2008 R2, Windows Server 2012, and Windows Server 2012 R2 on July 16, 2016, and was released on January 19, 2017. PowerShell 5.1 is the first version to come in two editions of Desktop and Core. The Desktop edition is the continuation of the traditional Windows PowerShell that runs on the .NET Framework stack. The Core edition runs on .NET Core and is bundled with Windows Server 2016 Nano Server. In exchange for smaller footprint, the latter lacks some features such as the cmdlets to manage clipboard or join a computer to a domain, WMI version 1 cmdlets, Event Log cmdlets and profiles. This was the final version of PowerShell made exclusively for Windows. Windows PowerShell 5.1 remains pre-installed on Windows 10, Windows 11 and Windows Server 2022, while the .NET PowerShell needs to be installed separately and can run side-by-side with Windows PowerShell. PowerShell Core 6.0 was first announced on August 18, 2016, when Microsoft unveiled PowerShell Core and its decision to make the product cross-platform, independent of Windows, free and open source. It achieved general availability on January 10, 2018, for Windows, macOS and Linux. It has its own support lifecycle and adheres to the Microsoft lifecycle policy that is introduced with Windows 10: Only the latest version of PowerShell Core is supported. Microsoft expects to release one minor version for PowerShell Core 6.0 every six months. The most significant change in this version of PowerShell is the expansion to the other platforms. For Windows administrators, this version of PowerShell did not include any major new features. In an interview with the community on January 11, 2018, the PowerShell team was asked to list the top 10 most exciting things that would happen for a Windows IT professional who would migrate from Windows PowerShell 5.1 to PowerShell Core 6.0; in response, Angel Calvo of Microsoft could only name two: cross-platform and open-source. PowerShell 6 changed to UTF-8 as default encoding, with some exceptions. (PowerShell 7.4 changes more to UTF-8) PowerShell Core 6.2 is focused primarily on performance improvements, bug fixes, and smaller cmdlet and language enhancements that improved developer productivity. PowerShell 7.6 is based on .NET 9 & is the latest preview release. The first preview release v7.6.0-preview.2 was released on 2025-01-15. There never was a v7.6.0-preview.1 version that was released. There is a what's new in PowerShell 7.6 article available that goes into more details about the new things in this version & is updated on each new release. The following table contains a selection of the cmdlets that ship with PowerShell, noting similar commands in other well-known command-line interpreters. Many of these similar commands come out-of-the-box defined as aliases within PowerShell, making it easy for people familiar with other common shells to start working. Comparison of PowerShell cmdlets with internal and external commands of other command-line interpreters PowerShell (Cmdlet) PowerShell (Alias) Command Prompt (cmd) Unix shell Description Clear-Host cls, clear cls clear Clears the screen[a] Copy-Item cpi, copy, cp copy, xcopy, robocopy cp Copies files and folders to another location Get-ChildItem gci, dir, ls[b] dir ls Lists all files and folders in the current or given folder Get-Command gcm help, where type, which, compgen Lists available commands and gets command path Get-Content gc, type, cat type cat Gets the content of a file Get-Date n-a date + time date Displays date and time Get-Help help, man[b] help apropos, man Prints a command's documentation on the console Get-History ghy, h, history DOSKEY /HISTORY fc -l, history[c] Lists previous commands Get-Location gl, pwd cd pwd Displays the working path (current folder) Get-Process gps, ps tlist,[d] tasklist[e] ps Lists all running processes Invoke-WebRequest iwr, curl, wget[f] curl wget, curl Gets contents from a web page on the Internet Move-Item mi, move, mv move mv Moves files and folders to a new location Pop-Location popd popd popd Changes the working path to the location most recently pushed onto the stack Push-Location pushd pushd pushd Stores the working path onto the stack Read-Host n-a set /P read Reads input into a variable from the command line Remove-Item ri, del, erase, rmdir, rd, rm del, erase, rmdir, rd rm, rmdir Deletes files or folders Rename-Item rni, ren ren, rename mv Renames a single file, folder, hard link or symbolic link Select-String sls find, findstr grep Prints lines matching a pattern Set-Date n-a date + time date -s Resets the date and time. Set-Location sl, cd, chdir cd, chdir cd Changes the working path Set-Variable sv, set set env, export, set, setenv Creates or alters the contents of an environment variable Sort-Object sort sort sort Sorts lines of text with specified criteria. PowerShell version also sorts objects by properties. Stop-Process spps, kill kill,[d] taskkill[e] kill[g] Stops a running process Tee-Object tee — tee Pipes input to a file or variable, passing the input along the pipeline Test-Connection[h] ping ping ping Sends ICMP echo requests to the specified machine from the current machine, or instructs another machine to do so Write-Output echo, write echo echo Prints strings or other objects to the standard output Notes ^ Clear-Host is implemented as a predefined PowerShell function. ^ a b ls and man aliases are absent in the Linux version of PowerShell Core. '^ fc is defined in the POSIX standard and history is not. However most Unix implementations also define history. ^ a b Available in Windows NT 4, Windows 98 Resource Kit, Windows 2000 Support Tools ^ a b Introduced in Windows XP Professional Edition ^ curl and wget aliases are absent from PowerShell Core, so as to not interfere with invoking similarly named native commands. ^ Also used in UNIX to send a process any signal, the Terminate signal is merely the default ^ While the external ping command remains available to PowerShell, Test-Connection's output is a structured object that can be programmatically inspected. Extension Description .ps1 Script file .psd1 Module's manifest file; usually comes with a script module or binary module .psm1 Script module file .dll DLL-compliant[a] binary module file .ps1xml Format and type definitions file .xml XML-compliant[b] serialized data file .psc1 Console file .pssc Session configuration file .psrc Role Capability file ^ Dynamic-link library (DLL) is not a PowerShell-only format. It is a generic format for storing compiled .NET assembly's code. ^ XML is not a PowerShell-only format. It is a popular information interchange format. Application Version Cmdlets Provider Management GUI Exchange Server 2007 402 Yes Yes Windows Server 2008 Yes Yes No Microsoft SQL Server 2008 Yes Yes No Microsoft SharePoint 2010 Yes Yes No System Center Configuration Manager 2012 R2 400+ Yes No System Center Operations Manager 2007 74 Yes No System Center Virtual Machine Manager 2007 Yes Yes Yes System Center Data Protection Manager 2007 Yes No No Windows Compute Cluster Server 2007 Yes Yes No Microsoft Transporter Suite for Lotus Domino 08.02.0012 47 No No Microsoft PowerTools for Open XML 1.0 33 No No IBM WebSphere MQ 6.0.2.2 44 No No IoT Core Add-ons 74 Un­known Un­known Quest Management Shell for Active Directory 1.7 95 No No Special Operations Software Specops Command 1.0 Yes No Yes VMware vSphere PowerCLI 6.5 R1 500+ Yes Yes Internet Information Services 7.0 54 Yes No Windows 7 Troubleshooting Center 6.1 Yes No Yes Microsoft Deployment Toolkit 2010 Yes Yes Yes NetApp PowerShell Toolkit 4.2 2000+ Yes Yes JAMS Scheduler – Job Access & Management System 5.0 52 Yes Yes UIAutomation 0.8 432 No No Dell Equallogic 3.5 55 No No LOGINventory 5.8 Yes Yes Yes SePSX 0.4.1 39 No No A project named Pash, a pun on the widely known bash Unix shell, has been an open-source and cross-platform reimplementation of PowerShell via the Mono framework. Pash was created by Igor Moochnick, written in C# and was released under the GNU General Public License. Pash development stalled in 2008, was restarted on GitHub in 2012, and finally ceased in 2016 when PowerShell was officially made open-source and cross-platform. Common Information Model (computing) Comparison of command shells Comparison of programming languages Web-Based Enterprise Management Windows Script Host Windows Terminal ^ PowerShell. Microsoft Apps. Retrieved October 24, 2024. ^ Release v7.5.0 Release of PowerShell. PowerShell/PowerShell repo. Microsoft. Retrieved February 10, 2025 – via GitHub.com. ^ PowerShell. Microsoft Apps. Retrieved October 24, 2024. ^ Release v7.6.0.preview.2 Release of PowerShell. PowerShell/PowerShell repo. Microsoft. Retrieved February 10, 2025 – via GitHub.com. ^ PowerShell for every system!. June 12, 2017 – via GitHub.com. ^ Snover, Jeffrey (May 25, 2008). PowerShell and WPF: WTF. Windows PowerShell Blog. Microsoft. ^ PowerShell. Microsoft Apps. Retrieved October 24, 2024. ^ Release v7.4.7 Release of PowerShell. PowerShell/PowerShell repo. Microsoft. Retrieved February 10, 2025 – via GitHub.com. ^ a b c d Bright, Peter (August 18, 2016). PowerShell is Microsoft's latest open source release, coming to Linux, OS X. Ars Technica. Condé Nast. Archived from the original on April 9, 2020. Retrieved May 12, 2020. ^ Announcing Windows 10 Insider Preview Build 14971 for PC. November 17, 2016. ^ PowerShell is replacing Command Prompt. ^ a b c d e powershell. Retrieved March 13, 2023. ^ Truher, Jim (December 2007). Extend Windows PowerShell With Custom Commands. MSDN Magazine. Microsoft. Archived from the original on October 6, 2008. ^ Lowe, Scott (January 4, 2007). Exchange 2007: Get used to the command line. TechRepublic. CBS Interactive. Archived from the original on November 16, 2018. Retrieved May 12, 2020. ^ Snover, Jeffrey (November 13, 2007). SQL Server Support for PowerShell!. Windows PowerShell Blog (blog posting). Microsoft. Archived from the original on November 15, 2007. Retrieved November 13, 2007. ^ Dragan, Richard V. (April 23, 2003). Windows Server 2003 Delivers Improvements All Around. PCMag.com. Ziff Davis. A standout feature here is that virtually all admin utilities now work from the command line (and most are available through telnet). ^ Jones, Don (2020). Shell of an Idea: The Untold History of PowerShell. Don Gannon-Jones. p. 25. ISBN 978-1-9536450-3-6. ^ Jeffrey P. Snover (August 8, 2002). Monad Manifesto (PDF). Windows PowerShell Blog. Microsoft. Retrieved April 2, 2021. ^ Biggar and Harbaugh (September 14, 2017). The Man Behind Windows PowerShell. To Be Continuous (Podcast). Heavybit. Retrieved September 14, 2017. ^ Windows PowerShell (Monad) Has Arrived. Windows PowerShell Blog. Microsoft. April 25, 2006. ^ Snover, Jeffrey (November 15, 2006). Windows PowerShell & Windows Vista. Windows PowerShell Blog (blog posting). Microsoft. ^ Windows Management Framework (Windows PowerShell 2.0, WinRM 2.0, and BITS 4.0). Support. Microsoft. September 30, 2013. Archived from the original on October 13, 2013. ^ Posey, Brien (October 6, 2009). 10 reasons why you should learn to use PowerShell. TechRepublic. Retrieved April 2, 2021. ^ What is Pester and Why Should I Care?. December 14, 2015. ^ Snover, Jeffrey (August 18, 2016). PowerShell is open sourced and is available on Linux. Microsoft Azure Blog. Microsoft. ^ PowerShell/PowerShell. GitHub. Retrieved August 18, 2016. ^ Hansen, Kenneth; Calvo, Angel (August 18, 2016). PowerShell on Linux and Open Source!. Windows PowerShell Blog. Microsoft. ^ Foley, Mary Jo (August 18, 2016). Microsoft open sources PowerShell; brings it to Linux and Mac OS X. ZDNet. CBS Interactive. ^ a b PowerShell on Nano Server. TechNet. Microsoft. October 20, 2016. ^ Jones, Don (2020). Shell of an Idea: The Untold History of PowerShell. Don Gannon-Jones. p. 45. ISBN 978-1-9536450-3-6. ^ Payette, Bruce (2008). Windows PowerShell in Action. Manning Pubs Co Series. Manning. p. 27. ISBN 9781932394900. Retrieved July 22, 2016. The core PowerShell language is based on the POSIX 1003.2 grammar for the Korn shell. ^ Jones, Don (2020). Shell of an Idea: The Untold History of PowerShell. Don Gannon-Jones. p. 109. ISBN 978-1-9536450-3-6. ^ about_Command_Precedence. TechNet. Microsoft. May 8, 2014. ^ Wheeler, Sean (September 7, 2021). about Parsing - PowerShell. Microsoft Docs. Retrieved December 5, 2021. ^ Windows PowerShell Extended Type System. Retrieved November 28, 2007. ^ a b c Windows PowerShell Cmdlets. Retrieved November 28, 2007. ^ Creating Your First Cmdlet. Retrieved November 28, 2007. ^ Get-Verb. TechNet. Microsoft. May 8, 2014. ^ Cmdlet Overview. MSDN. Microsoft. May 8, 2014. ^ Adding parameters That Process Command Line Input. Retrieved November 28, 2007. ^ Adding parameters That Process Pipeline Input. Retrieved November 28, 2007. ^ Windows PowerShell Providers. Retrieved October 14, 2010. ^ Yoshizawa, Tomoaki; Ramos, Durval (September 29, 2012). PowerShell 1.0 Cmdlets. TechNet Articles. Microsoft. ^ Yoshizawa, Tomoaki (July 10, 2012). PowerShell 2.0 Cmdlets. TechNet Articles. Microsoft. ^ Wilson, Ed (2013). 1: Overview of Windows PowerShell 3.0. Windows Powershell 3.0 Step by Step. Sebastopol, California: Microsoft Press. ISBN 978-0-7356-7000-6. OCLC 829236530. Windows PowerShell 3.0 comes with about 1,000 cmdlets on Windows 8 ^ Wilson, Ed (2015). 1: Overview of Windows PowerShell 5.0. Windows PowerShell Step by Step (Third ed.). Redmond, Washington: Microsoft Press. ISBN 978-1-5093-0043-3. OCLC 927112976. Windows PowerShell 5.0 comes with about 1,300 cmdlets on Windows 10 ^ Windows PowerShell Owner's Manual: Piping and the Pipeline in Windows PowerShell. TechNet. Microsoft. Retrieved September 27, 2011. ^ Jones, Don (2008). Windows PowerShell – Rethinking the Pipeline. Microsoft TechNet. Microsoft. Retrieved November 28, 2007. ^ Windows PowerShell Object Concepts. Archived from the original on August 19, 2007. Retrieved November 28, 2007. ^ How PowerShell Formatting and Outputting REALLY works. Retrieved November 28, 2007. ^ More – How does PowerShell formatting really work?. Retrieved November 28, 2007. ^ about_Pipelines. TechNet. Microsoft. May 8, 2014. ^ about_Objects. TechNet. Microsoft. May 8, 2014. ^ a b about_Format.ps1xml. TechNet. Microsoft. May 8, 2014. ^ Anonymous Functions and Code Blocks in PowerShell. Retrieved January 21, 2012. ^ Introduction to Windows PowerShell's Variables. Retrieved November 28, 2007. ^ Byte Conversion. Windows PowerShell Tip of the Week. October 22, 2009. Retrieved November 15, 2013. ^ Ravikanth (May 20, 2013). Converting to size units (KB, MB, GB, TB, and PB) without using PowerShell multipliers. PowerShell Magazine. ^ a b c about_Functions. Microsoft TechNet. Microsoft. October 17, 2013. Retrieved November 15, 2013. ^ a b Lightweight Testing with Windows PowerShell. Retrieved November 28, 2007. ^ Angelopoulos, Alex; Karen, Bemowski (December 4, 2007). PowerShell Got Smart About Smart Quotes. Windows IT Pro. Penton Media. Retrieved November 15, 2013. ^ About Special Characters. Powershell / Scripting. Microsoft. June 8, 2017. Retrieved June 20, 2019. ^ Trap [Exception] { In PowerShell }. Retrieved November 28, 2007. ^ Running Windows PowerShell Scripts. Microsoft. Retrieved November 28, 2007. ^ about_Signing. Microsoft TechNet. Microsoft. October 17, 2013. Retrieved November 15, 2013. ^ Lee Holmes (September 2006). Windows PowerShell Quick Reference. O'Reilly Media. ^ eslesar (May 23, 2023). Windows PowerShell Desired State Configuration Overview. msdn.microsoft.com. ^ Chung, Leonard; Snover, Jeffrey; Kumaravel, Arul (November 14, 2006). It's a Wrap! Windows PowerShell 1.0 Released!. Windows PowerShell Blog. Microsoft. ^ PowerShell will be installed by default on Windows Server 08 R2 (WS08R2) and Windows 7 (W7)!. Windows PowerShell Blog. Microsoft. October 28, 2008. Retrieved September 27, 2011. ^ Windows Management Framework is here!. October 27, 2009. Retrieved October 30, 2009. ^ Microsoft Support Knowledge Base: Windows Management Framework (Windows PowerShell 2.0, WinRM 2.0, and BITS 4.0). Support.microsoft.com. September 23, 2011. Retrieved September 27, 2011. ^ 574 Reasons Why We Are So Proud and Optimistic About W7 and WS08R2. Windows PowerShell Blog. Microsoft. October 29, 2008. Retrieved September 27, 2011. ^ Snover, Jeffrey (2008). PowerShell: Creating Manageable Web Services. Archived from the original on October 13, 2008. Retrieved July 19, 2015. ^ What's New in CTP of PowerShell 2.0. Retrieved November 28, 2007. ^ Windows PowerShell V2 Community Technology Preview 2 (CTP2) – releaseNotes. Microsoft. Archived from the original on May 6, 2008. Retrieved May 5, 2008. ^ Differences between PowerShell 1.0 and PowerShell 2.0. Archived from the original on September 17, 2010. Retrieved June 26, 2010. ^ Jones, Don (May 2010). Windows PowerShell: Writing Cmdlets in Script. TechNet Magazine. Microsoft. ^ GoGrid Snap-in – Managing Cloud Services with PowerShell. Windows PowerShell Blog. Microsoft. October 14, 2008. Retrieved September 27, 2011. ^ Emit-XML. Windows PowerShell Blog. Microsoft. October 17, 2008. Retrieved September 27, 2011. ^ Block Comments in V2. Windows PowerShell Blog. Microsoft. June 14, 2008. Retrieved September 27, 2011. ^ Lee, Thomas (August 13, 2012). PowerShell Version 3 is RTM!. Under The Stairs. Retrieved August 13, 2012. ^ a b c Windows Management Framework 3.0. Download Center. Microsoft. September 4, 2012. Retrieved November 8, 2012. ^ Windows Management Framework 3.0 Community Technology Preview (CTP) #2 Available for Download. Windows PowerShell Blog. Microsoft. December 2, 2011. ^ Windows Management Framework 3.0. Download Center. Microsoft. December 3, 2012. ^ Jofre, JuanPablo (December 14, 2016). Windows PowerShell System Requirements. Microsoft Developer Network. Microsoft. Retrieved April 20, 2017. ^ Honeycutt, Jerry (2012). Woolley, Valerie (ed.). Introducing Windows 8: An Overview for IT Professionals. Redmond, WA: Microsoft Press. ISBN 978-0-7356-7050-1. ^ Windows Management Framework 4.0 is now available. Microsoft. October 24, 2013. Retrieved November 4, 2013. ^ Levy, Shay (June 25, 2013). New Features in Windows PowerShell 4.0. PowerShell Magazine. Retrieved June 26, 2013. ^ Desired State Configuration in Windows Server 2012 R2 PowerShell. Channel 9. Microsoft. June 3, 2013. Archived from the original on December 26, 2013. Retrieved June 26, 2013. ^ Hall, Adrian (June 7, 2013). Thoughts from Microsoft TechEd North America. Blogs: Tips & Tricks. Splunk. Retrieved June 26, 2013. ^ Windows Management Framework (WMF) 5.0 RTM packages has been republished. Windows PowerShell Blog. Microsoft. February 24, 2016. ^ Q and A. GitHub. Retrieved April 21, 2015. ^ Snover, Jeffrey (April 3, 2014). Windows Management Framework V5 Preview. blogs.technet.com. Microsoft. Archived from the original on June 30, 2014. Retrieved April 21, 2015. ^ says, Jaap Brasser (August 2, 2016). #PSTip New PowerShell Commands in Windows 10 Anniversary Update. ^ What's New In Windows Server 2016 Standard Edition Part 9 – Management And Automation. September 4, 2016. ^ Microsoft.PowerShell.LocalAccounts Module. technet.microsoft.com. June 16, 2016. ^ Announcing Windows Management Framework (WMF) 5.1 Preview. July 16, 2016. ^ WMF 5.1. Microsoft Download Center. ^ What is Windows PowerShell? - PowerShell. Microsoft Learn. March 7, 2024. Retrieved August 19, 2024. ^ Migrating from Windows PowerShell 5.1 to PowerShell 7 - PowerShell. Microsoft Learn. April 2, 2024. Retrieved August 19, 2024. ^ Aiello, Joey (January 11, 2018). PowerShell Core 6.0: Generally Available (GA) and Supported!. PowerShell Team Blog. Microsoft. Archived from the original on June 11, 2018. Retrieved June 11, 2018. ^ Aiello, Joey; Wheeler, Sean (January 10, 2018). PowerShell Core Support Lifecycle. Microsoft Docs. Microsoft. Archived from the original on November 16, 2018. Retrieved January 11, 2018. ^ Calvo, Angel (January 11, 2018). Top 10 most exciting reasons to migrate. PowerShell AMA. Microsoft. ^ sdwheeler (August 3, 2023). What's New in PowerShell Core 6.0. learn.microsoft.com. Retrieved December 11, 2023. Default encoding is UTF-8 without a BOM except for New-ModuleManifest ^ Understanding file encoding in VS Code and PowerShell - PowerShell. learn.microsoft.com. November 29, 2023. Retrieved December 11, 2023. ^ Aiello, Joey (September 13, 2018). Announcing PowerShell Core 6.1. devblogs.microsoft.com. Microsoft. Retrieved June 1, 2019. ^ PowerShell/PowerShell. GitHub. Retrieved June 22, 2020. ^ a b c Lee, Steve (April 5, 2019). The Next Release of PowerShell – PowerShell 7. Microsoft. Retrieved June 1, 2019. ^ Lee, Steve (March 28, 2019). General Availability of PowerShell Core 6.2. devblogs.microsoft.com. Microsoft. Retrieved June 1, 2019. ^ Mackie, Kurt (May 30, 2019). Microsoft Releases PowerShell 7 Preview. 1105 Media Inc. Retrieved June 1, 2019. ^ Lee, Steve (May 30, 2019). PowerShell 7 Road Map. devblogs.microsoft.com. Microsoft. Retrieved August 12, 2020. ^ PowerShell 7 Preview 5 | PowerShell. October 23, 2019. Archived from the original on February 15, 2020. Retrieved March 5, 2020. ^ PowerShell 7.2 is the new version of Microsoft's next-generation shell. itsfoss.net. November 12, 2021. ^ Release v7.3.0 Release of PowerShell · PowerShell/PowerShell. GitHub. Archived from the original on November 9, 2022. Retrieved March 7, 2022. ^ Release v7.4.7 Release of PowerShell · PowerShell/PowerShell. GitHub. Retrieved January 27, 2025. ^ sdwheeler (January 23, 2025). What's New in PowerShell 7.4 - PowerShell. learn.microsoft.com. Retrieved January 27, 2025. ^ Release v7.5.0 Release of PowerShell · PowerShell/PowerShell. GitHub. Retrieved January 27, 2025. ^ sdwheeler (January 23, 2025). What's New in PowerShell 7.5 - PowerShell. learn.microsoft.com. Retrieved January 27, 2025. ^ Release v7.6.0-preview.2 Release of PowerShell · PowerShell/PowerShell. GitHub. Retrieved January 27, 2025. ^ sdwheeler (January 17, 2025). What's New in PowerShell 7.6 - PowerShell. learn.microsoft.com. Retrieved January 27, 2025. ^ Tar and Curl Come to Windows! - Microsoft Tech Community - 382409. March 22, 2019. Archived from the original on September 11, 2020. Retrieved May 17, 2020. ^ Test-Connection. PowerShell documentations. Microsoft. August 9, 2015. ^ Wheeler, Sean (June 2, 2020). About Scripts. Microsoft Docs. Microsoft. ^ Wheeler, Sean; Smatlak, David; Wilson, Chase (October 16, 2019). How to write a PowerShell module manifest. Docs. Microsoft. ^ Wheeler, Sean; Smatlak, David (November 22, 2019). How to Write a PowerShell Script Module. Microsoft Docs. Microsoft. ^ Wheeler, Sean (November 13, 2016). How to Write a PowerShell Binary Module. Microsoft Docs. Microsoft. ^ Wheeler, Sean; Jofre, Juan Pablo; Vorobev, Sergei; Nikolaev, Kirill; Coulter, David (June 2, 2020). About Types.ps1xml. Microsoft Docs. Microsoft. ^ Wheeler, Sean. Export-Clixml. Microsoft Docs. Microsoft. ^ Wheeler, Sean; Jofre, Juan Pablo; Vorobev, Sergei; Nikolaev, Kirill; Coulter, David. Export-Console. Microsoft Docs. Microsoft. ^ Wheeler, Sean (June 2, 2020). About Session Configuration Files. Microsoft Docs. Microsoft. ^ Wheeler, Sean (June 2, 2020). New-PSRoleCapabilityFile. Microsoft Docs. Microsoft. ^ Microsoft Transporter Suite for Lotus Domino. Microsoft. Retrieved March 7, 2008. ^ PowerTools for Open XML. Retrieved June 20, 2008. ^ MO74: WebSphere MQ – Windows PowerShell Library. Retrieved December 5, 2007. ^ IoT Core Add-ons command-line options. October 15, 2018. Retrieved June 13, 2020. ^ PowerShell Commands for Active Directory by Quest Software. Retrieved July 2, 2008. ^ PowerShell Remoting through Group Policy. Retrieved December 7, 2007. ^ VMware vSphere PowerCLI. Archived from the original on December 30, 2014. Retrieved September 9, 2014. ^ IIS7 PowerShell Provider Tech Preview 2. Windows PowerShell blog. Archived from the original on February 4, 2010. Retrieved July 3, 2008. ^ Kudos to the Win7 Diagnostics Team. Retrieved June 15, 2009. ^ Michael, Niehaus (July 10, 2009). MDT 2010 New Feature #16: PowerShell support. Retrieved October 27, 2014. ^ Kudos to NetApp for Data ONTAP PowerShell ToolKit. Retrieved June 15, 2010. ^ PowerShell Toolkit 4.2 Announcement. June 23, 2016. Retrieved September 7, 2016. ^ Heterogeneous Job Scheduling With PowerShell. Retrieved September 15, 2010. ^ UIAutomation PowerShell Extensions. Archived from the original on August 17, 2016. Retrieved February 16, 2012. ^ EqualLogic HIT-ME with PowerShell. Retrieved March 9, 2012. ^ de:LOGINventory ^ Selenium PowerShell eXtensions. Archived from the original on January 19, 2013. Retrieved August 20, 2012. ^ Pash. SourceForge. Dice Holdings, Inc. Retrieved September 27, 2011. ^ Pash Project. GitHub. Retrieved April 10, 2013. ^ Pash is now obsolete · Issue #429 · Pash-Project/Pash. GitHub. Retrieved November 26, 2019. Finke, Douglas (2012). Windows PowerShell for Developers. O'Reilly Media. ISBN 978-1-4493-2270-0. Holmes, Lee (2006). Windows PowerShell Quick Reference. O'Reilly Media. ISBN 0-596-52813-2. Holmes, Lee (2007). Windows PowerShell Cookbook. O'Reilly Media. ISBN 978-0-596-52849-2. Jones, Don; Hicks, Jeffery (2010). Windows PowerShell 2.0: TFM (3rd ed.). Sapien Technologies. ISBN 978-0-9821314-2-8. Jones, Don (2020). Shell of an Idea: The Untold History of PowerShell. Self-published. ISBN 978-1-9536450-3-6. Kopczynski, Tyson; Handley, Pete; Shaw, Marco (2009). Windows PowerShell Unleashed (2nd ed.). Pearson Education. ISBN 978-0-672-32988-3. Kumaravel, Arul; White, Jon; Naixin Li, Michael; Happell, Scott; Xie, Guohui; Vutukuri, Krishna C. (2008). Professional Windows PowerShell Programming: Snapins, Cmdlets, Hosts and Providers. Wrox Press. ISBN 978-0-470-17393-0. Oakley, Andy (2005). Monad (AKA PowerShell). O'Reilly Media. ISBN 0-596-10009-4. Watt, Andrew (2007). Professional Windows PowerShell. Wrox Press. ISBN 978-0-471-94693-9. Wilson, Ed (2013). Windows PowerShell 3.0 Step by Step. Microsoft Press. ISBN 978-0-7356-6339-8. Wilson, Ed (2014). Windows PowerShell Best Practices. Microsoft Press. ISBN 978-0-7356-6649-8. Wikiversity has learning resources about PowerShell Official website PowerShell on GitHub Windows PowerShell Survival Guide Archived September 15, 2012, at the Wayback Machine on TechNet Wiki vteMicrosoft Windows components APIs Architecture 9x NT Booting process Games Managementtools App Installer Command Prompt Control Panel Device Manager DirectX Diagnostic Tool Disk Cleanup Drive Optimizer Driver Verifier Event Viewer IExpress Management Console Netsh Performance Monitor PowerShell Recovery Console Resource Monitor Settings Sysprep System Configuration System File Checker System Information System Policy Editor System Restore Task Manager Windows Error Reporting Windows Ink Windows Installer Windows Update Windows Insider WinRE WMI Apps 3D Viewer Calculator Calendar Camera Character Map City Art Search Clipchamp Clock Company Portal Copilot Edge Fax and Scan Feedback Hub Get Help Magnifier Mail Maps Media Player 2022 Mesh Messaging Mobility Center Money Movies & TV Narrator Notepad OneDrive OneNote Paint PC Manager People Phone Link Photos Quick Assist Remote Desktop Connection Skype Snipping Tool Speech Recognition Sports Start Sticky Notes Store Terminal Tips Voice Recorder Weather Whiteboard Windows App Xbox Shell Action Center Aero AutoPlay AutoRun ClearType Explorer Search IFilter Indexing Service Namespace Saved search Special folder Start menu Task View Taskbar Windows Spotlight Windows XP visual styles Services BITS CLFS Error Reporting Multimedia Class Scheduler Service Control Manager Shadow Copy Task Scheduler Wireless Zero Configuration File systems CDFS DFS exFAT FAT IFS NTFS EFS Hard link links Mount Point Reparse point TxF ReFS UDF Server Active Directory Active DRM Services DFS Replication Distributed Transaction Coordinator DNS Domains Folder redirection Group Policy Hyper-V IIS MSMQ Network Access Protection Print Services for UNIX PWS Remote Desktop Services Remote Differential Compression Remote Installation Services Roaming user profiles Server Core SharePoint System Resource Manager Windows Deployment Services Windows Media Services WSUS Architecture Boot Manager Console CSRSS Desktop Window Manager Enhanced Write Filter Graphics Device Interface Hardware Abstraction Layer I/O request packet Imaging Format Kernel Transaction Manager Library files Logical Disk Manager LSASS MinWin NTLDR Ntoskrnl.exe Object Manager Open XML Paper Specification Portable Executable DLL EXE Registry Resource Protection Security Account Manager Server Message Block Shadow Copy SMSS System Idle Process USER WHEA Winlogon WinUSB Security Security and Maintenance AppLocker BitLocker Credential Guard Data Execution Prevention Defender Family features Kernel Patch Protection Mandatory Integrity Control Protected Media Path User Account Control User Interface Privilege Isolation Windows Firewall Compatibility COMMAND.COM Windows Subsystem for Linux WoW64 API Active Scripting JScript VBScript WSH COM ActiveX ActiveX Document COM Structured storage DCOM OLE OLE Automation Transaction Server DirectX Native .NET Universal Windows Platform WinAPI Windows Mixed Reality Windows Runtime WinUSB Games Solitaire Collection Surf DiscontinuedGames 3D Pinball Chess Titans FreeCell Hearts Hold 'Em InkBall Purble Place Solitaire Spider Solitaire Tinker Apps ActiveMovie Address Book Anytime Upgrade Backup and Restore Cardfile CardSpace CD Player Chat Contacts Cortana Desktop Gadgets Diagnostics DriveSpace DVD Maker Easy Transfer Edge Legacy Fax Food & Drink Groove Music Health & Fitness Help and Support Center HyperTerminal Imaging Internet Explorer Journal Make Compatible Media Center Meeting Space Messaging Messenger Mobile Device Center Movie Maker MSN Dial-up NetMeeting NTBackup Outlook Express Paint 3D Pay Phone Companion Photo Gallery Photo Viewer Program Manager Steps Recorder Syskey Travel WinHelp WordPad Write Others Desktop Cleanup Wizard File Protection Games for Windows HPFS Interix Media Control Interface MS-DOS 7 Next-Generation Secure Computing Base POSIX subsystem ScanDisk Video for Windows Virtual DOS machine Windows on Windows Windows Services for UNIX Windows SideShow Windows System Assessment Tool Windows To Go WinFS Spun off toMicrosoft Store DVD Player File Manager Hover! Mahjong Minesweeper Category List vteWindows command-line programs and shell builtinsEcosystemInterpreters COMMAND.COM Command Prompt PowerShell Recovery Console Terminals Windows Console Windows Terminal File system navigation cd (chdir) dir popd pushd tree File management attrib cacls cipher compact copy del (erase) deltree icacls mkdir (md) mklink move openfiles recover ren (rename) replace rmdir (rd) robocopy takeown xcopy Archiving expand extrac32 extract makecab pax tar Disk management chkdsk convert defrag diskcomp diskcopy diskpart diskraid diskshadow drvspace fdisk format fsutil label manage-bde MSCDEX refsutil subst scandisk sys vol vssadmin Processes at exit kill runas sc schtasks shutdown start taskkill tasklist Registry assoc ftype reg regini regsvr32 User environment chcp cmdkey date graftabl mode path set setver setx time title ver where whoami File contents comp edit edlin fc find findstr print type Scripting choice clip cscript doskey echo for forfiles goto if more pause prompt rem timeout Networking arp bitsadmin curl getmac hostname ipconfig nbtstat net netsh netstat nslookup PathPing ping rpcping route scp setspn sftp ssh ssh-add ssh-agent ssh-keygen ssh-keyscan tracert winrm winrs Maintenance and care auditpol dism dispdiag driverquery eventcreate eventtriggers gpresult gpupdate logman mofcomp msiexec ntbackup pentnt pnpunattend pnputil REAgentC relog sfc sxstrace systeminfo tpmtool tpmvscmgr tracerpt typeperf w32tm WBAdmin wecutil wevtutil winmgmt winsat wmic Boot management bcdedit bootcfg bootsect fixboot fixmbr Software development break debug exe2bin QBasic wsl Miscellaneous cls dpath help List of DOS commands Environment variables Windows Support Tools vteCommon Language InfrastructureArchitecture Application domain Code Access Security Common Intermediate Language instructions Common Type System Platform Invocation Services Virtual Execution System Components Assembly Delegate Global Assembly Cache Manifest Metadata Standard Libraries ImplementationsMicrosoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono DotGNU LanguagesMajor languages C# Visual Basic F# PowerShell Other Axum A# Boo Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Small Basic Comparison C# and Java C# and Visual Basic .NET Visual Basic and Visual Basic .NET vteMicrosoft APIs and frameworksGraphics and UI Desktop Window Manager Direct2D Direct3D D3D (extensions) GDI / GDI+ WPF Silverlight WinUI Windows Color System Windows Image Acquisition Windows Imaging Component DirectX Graphics Infrastructure (DXGI) Windows Advanced Rasterization Platform WinG Audio DirectMusic DirectSound XACT Speech API XAudio2 Multimedia DirectX Media Objects Video Acceleration Xinput DirectInput DirectShow Managed DirectX Media Foundation XNA Windows Media Video for Windows Web MSHTML JScript VBScript BHO XDR SideBar Gadgets TypeScript Data access Data Access Components (MDAC) ADO ADO.NET ODBC OLE DB Extensible Storage Engine Entity Framework Sync Framework Access Database Engine MSXML OPC Networking Winsock LSP Winsock Kernel Filtering Platform NDIS Windows Rally BITS P2P API MSMQ DirectPlay Communication Messaging API Telephony API WCF Administration andmanagement Win32 console Windows Script Host WMI (extensions) PowerShell Task Scheduler Offline Files Shadow Copy Windows Installer Error Reporting Event Log Common Log File System Component model COM COM+ ActiveX Distributed Component Object Model .NET Framework Libraries Framework Class Library Microsoft Foundation Classes (MFC) Active Template Library (ATL) Windows Template Library (WTL) Device drivers WDM WDF KMDF UMDF WDDM NDIS UAA VxD Security Crypto API CAPICOM Windows CardSpace Data Protection API Security Support Provider Interface (SSPI) .NET ASP.NET ADO.NET Remoting Silverlight TPL WCF WCS WPF WF Software factories Enterprise Library CCF IPC MSRPC Dynamic Data Exchange (DDE) Remoting WCF Accessibility Active Accessibility UI Automation Text and multilingualsupport DirectWrite Text Services Framework Text Object Model Input method editor Language Interface Pack Multilingual User Interface Uniscribe vteMicrosoft free and open-source software (FOSS)Overview Microsoft and open source Shared Source Initiative SoftwareApplications 3D Movie Maker Atom Conference XP Family.Show File Manager Open Live Writer Microsoft PowerToys Terminal Windows Calculator Windows Console Windows Package Manager WorldWide Telescope XML Notepad Video games Allegiance Programminglanguages Bosque C# Dafny F# F* GW-BASIC IronPython IronRuby Lean P Power Fx PowerShell Project Verona Q# Small Basic Online TypeScript Visual Basic Frameworks,development tools .NET .NET Framework .NET Gadgeteer .NET MAUI .NET Micro Framework AirSim ASP.NET ASP.NET AJAX ASP.NET Core ASP.NET MVC ASP.NET Razor ASP.NET Web Forms Avalonia Babylon.js BitFunnel Blazor C++/WinRT CCF ChakraCore CLR Profiler Dapr DeepSpeed DiskSpd Dryad Dynamic Language Runtime eBPF on Windows Electron Entity Framework Fluent Design System Fluid Framework Infer.NET LightGBM Managed Extensibility Framework Microsoft Automatic Graph Layout Microsoft C++ Standard Library Microsoft Cognitive Toolkit Microsoft Design Language Microsoft Detours Microsoft Enterprise Library Microsoft SEAL mimalloc Mixed Reality Toolkit ML.NET mod_mono Mono MonoDevelop MSBuild MsQuic Neural Network Intelligence npm NuGet OneFuzz Open Management Infrastructure Open Neural Network Exchange Open Service Mesh Open XML SDK Orleans Playwright ProcDump ProcMon Python Tools for Visual Studio R Tools for Visual Studio RecursiveExtractor Roslyn Sandcastle SignalR StyleCop SVNBridge T2 Temporal Prover Text Template Transformation Toolkit TLA+ Toolbox U-Prove vcpkg Virtual File System for Git Voldemort VoTT Vowpal Wabbit Windows App SDK Windows Communication Foundation Windows Driver Frameworks KMDF UMDF Windows Forms Windows Presentation Foundation Windows Template Library Windows UI Library WinJS WinObjC WiX XDP for Windows XSP xUnit.net Z3 Theorem Prover Operating systems MS-DOS (v1.25, v2.0 & v4.0) Barrelfish SONiC Azure Linux Other ChronoZoom Extensible Storage Engine FlexWiki FourQ Gollum Project Mu ReactiveX SILK TLAPS TPM 2.0 Reference Implementation WikiBhasha Licenses Microsoft Public License Microsoft Reciprocal License Forges CodePlex GitHub Related .NET Foundation F# Software Foundation Microsoft Open Specification Promise Open Letter to Hobbyists Open Source Security Foundation Outercurve Foundation Category",
    "paradigm": "Imperative , pipeline , object-oriented , functional and reflective",
    "first_appeared": "November 14, 2006 ; 18 years ago ( 2006-11-14 )",
    "stable_release": "v7.5.0",
    "typing_discipline": "Strong , safe , implicit and dynamic",
    "influenced_by": "Python , Ksh , Perl , C# , CL , DCL , SQL , Tcl , Tk , Chef , Puppet",
    "stable_release_date": "2025-01-23T00:00:00Z"
  },
  {
    "title": "Java (programming language)",
    "url": "https://en.wikipedia.org/wiki/Java_(programming_language)",
    "history": "See also: Java (software platform) § History Duke, the Java mascot James Gosling, the creator of Java, in 2008 James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991. Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time. The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee, a type of coffee from Indonesia. Gosling designed Java with a C/C++-style syntax that system and application programmers would find familiar. Sun Microsystems released the first public implementation as Java 1.0 in 1996. It promised write once, run anywhere (WORA) functionality, providing no-cost run-times on popular platforms. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major web browsers soon incorporated the ability to run Java applets within web pages, and Java quickly became popular. The Java 1.0 compiler was re-written in Java by Arthur van Hoff to comply strictly with the Java 1.0 language specification. With the advent of Java 2 (released initially as J2SE 1.2 in December 1998 – 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as Java EE, Java ME, and Java SE, respectively. In 1997, Sun Microsystems approached the ISO/IEC JTC 1 standards body and later the Ecma International to formalize Java, but it soon withdrew from the process. Java remains a de facto standard, controlled through the Java Community Process. At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System. On November 13, 2006, Sun released much of its Java virtual machine (JVM) as free and open-source software (FOSS), under the terms of the GPL-2.0-only license. On May 8, 2007, Sun finished the process, making all of its JVM's core code available under free software/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright. Sun's vice-president Rich Green said that Sun's ideal role with regard to Java was as an evangelist. Following Oracle Corporation's acquisition of Sun Microsystems in 2009–10, Oracle has described itself as the steward of Java technology with a relentless commitment to fostering a community of participation and transparency. This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the Android SDK (see the Android section). On April 2, 2010, James Gosling resigned from Oracle. In January 2016, Oracle announced that Java run-time environments based on JDK 9 will discontinue the browser plugin. Java software runs on most devices from laptops to data centers, game consoles to scientific supercomputers. Oracle (and others) highly recommend uninstalling outdated and unsupported versions of Java, due to unresolved security issues in older versions.",
    "principles": "There were five primary goals in creating the Java language: It must be simple, object-oriented, and familiar. It must be robust and secure. It must be architecture-neutral and portable. It must execute with high performance. It must be interpreted, threaded, and dynamic.",
    "versions": "Main article: Java version history As of November 2024[update], Java 8, 11, 17, and 21 are supported as long-term support (LTS) versions, with Java 25, releasing in September 2025, as the next scheduled LTS version. Oracle released the last zero-cost public update for the legacy version Java 8 LTS in January 2019 for commercial use, although it will otherwise still support Java 8 with public updates for personal use indefinitely. Other vendors such as Adoptium continue to offer free builds of OpenJDK's long-term support (LTS) versions. These builds may include additional security patches and bug fixes. Major release versions of Java, along with their release dates: Version Date JDK Beta 1995 JDK 1.0 January 23, 1996 JDK 1.1 February 19, 1997 J2SE 1.2 December 8, 1998 J2SE 1.3 May 8, 2000 J2SE 1.4 February 6, 2002 J2SE 5.0 September 30, 2004 Java SE 6 December 11, 2006 Java SE 7 July 28, 2011 Java SE 8 (LTS) March 18, 2014 Java SE 9 September 21, 2017 Java SE 10 March 20, 2018 Java SE 11 (LTS) September 25, 2018 Java SE 12 March 19, 2019 Java SE 13 September 17, 2019 Java SE 14 March 17, 2020 Java SE 15 September 15, 2020 Java SE 16 March 16, 2021 Java SE 17 (LTS) September 14, 2021 Java SE 18 March 22, 2022 Java SE 19 September 20, 2022 Java SE 20 March 21, 2023 Java SE 21 (LTS) September 19, 2023 Java SE 22 March 19, 2024 Java SE 23 September 17, 2024 Java SE 24 18 March 2025",
    "editions": "See also: Free Java implementations § Class library Java platform editions Java Card Java ME (Micro Edition) Java SE (Standard Edition) Jakarta EE (Enterprise Edition) JavaFX (bundled in Oracle's JDK from versions 8 to 10 but separately since 11) PersonalJava (Discontinued) vte Sun has defined and supports four editions of Java targeting different application environments and segmented many of its APIs so that they belong to one of the platforms. The platforms are: Java Card for smart-cards. Java Platform, Micro Edition (Java ME) – targeting environments with limited resources. Java Platform, Standard Edition (Java SE) – targeting workstation environments. Java Platform, Enterprise Edition (Java EE) – targeting large distributed enterprise or Internet environments. The classes in the Java APIs are organized into separate groups called packages. Each package contains a set of related interfaces, classes, subpackages and exceptions. Sun also provided an edition called Personal Java that has been superseded by later, standards-based Java ME configuration-profile pairings.",
    "java_jvm_and_bytecode": "Main articles: Java (software platform) and Java virtual machine One design goal of Java is portability, which means that programs written for the Java platform must run similarly on any combination of hardware and operating system with adequate run time support. This is achieved by compiling the Java language code to an intermediate representation called Java bytecode, instead of directly to architecture-specific machine code. Java bytecode instructions are analogous to machine code, but they are intended to be executed by a virtual machine (VM) written specifically for the host hardware. End-users commonly use a Java Runtime Environment (JRE) installed on their device for standalone Java applications or a web browser for Java applets. Standard libraries provide a generic way to access host-specific features such as graphics, threading, and networking. The use of universal bytecode makes porting simple. However, the overhead of interpreting bytecode into machine instructions made interpreted programs almost always run more slowly than native executables. Just-in-time (JIT) compilers that compile byte-codes to machine code during runtime were introduced from an early stage. Java's Hotspot compiler is actually two compilers in one; and with GraalVM (included in e.g. Java 11, but removed as of Java 16) allowing tiered compilation. Java itself is platform-independent and is adapted to the particular platform it is to run on by a Java virtual machine (JVM), which translates the Java bytecode into the platform's machine language.",
    "performance": "Main article: Java performance Programs written in Java have a reputation for being slower and requiring more memory than those written in C++. However, Java programs' execution speed improved significantly with the introduction of just-in-time compilation in 1997/1998 for Java 1.1, the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine, such as HotSpot becoming Sun's default JVM in 2000. With Java 1.5, the performance was improved with the addition of the java.util.concurrent package, including lock-free implementations of the ConcurrentMaps and other multi-core collections, and it was improved further with Java 1.6.",
    "non_jvm": "Some platforms offer direct hardware support for Java; there are micro controllers that can run Java bytecode in hardware instead of a software Java virtual machine, and some ARM-based processors could have hardware support for executing Java bytecode through their Jazelle option, though support has mostly been dropped in current implementations of ARM.",
    "automatic_memory_management": "Java uses an automatic garbage collector to manage memory in the object lifecycle. The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the unreachable memory becomes eligible to be freed automatically by the garbage collector. Something similar to a memory leak may still occur if a programmer's code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use. If methods for a non-existent object are called, a null pointer exception is thrown. One of the ideas behind Java's automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the stack or explicitly allocated and deallocated from the heap. In the latter case, the responsibility of managing memory resides with the programmer. If the program does not deallocate an object, a memory leak occurs. If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable or crash. This can be partially remedied by the use of smart pointers, but these add overhead and complexity. Garbage collection does not prevent logical memory leaks, i.e. those where the memory is still referenced but never used. Garbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java. Java does not support C/C++ style pointer arithmetic, where object addresses can be arithmetically manipulated (e.g. by adding or subtracting an offset). This allows the garbage collector to relocate referenced objects and ensures type safety and security. As in C++ and some other object-oriented languages, variables of Java's primitive data types are either stored directly in fields (for objects) or on the stack (for methods) rather than on the heap, as is commonly true for non-primitive data types (but see escape analysis). This was a conscious decision by Java's designers for performance reasons. Java contains multiple types of garbage collectors. Since Java 9, HotSpot uses the Garbage First Garbage Collector (G1GC) as the default. However, there are also several other garbage collectors that can be used to manage the heap, such as the Z Garbage Collector (ZGC) introduced in Java 11, and Shenandoah GC, introduced in Java 12 but unavailable in Oracle-produced OpenJDK builds. Shenandoah is instead available in third-party builds of OpenJDK, such as Eclipse Temurin. For most applications in Java, G1GC is sufficient. In prior versions of Java, such as Java 8, the Parallel Garbage Collector was used as the default garbage collector. Having solved the memory management problem does not relieve the programmer of the burden of handling properly other kinds of resources, like network or database connections, file handles, etc., especially in the presence of exceptions.",
    "syntax": "Main article: Java syntax This dependency graph of the Java Core classes was created with jdeps and Gephi. The syntax of Java is largely influenced by C++ and C. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language. All code is written inside classes, and every data item is an object, with the exception of the primitive data types, (i.e. integers, floating-point numbers, boolean values, and characters), which are not objects for performance reasons. Java reuses some popular aspects of C++ (such as the printf method). Unlike C++, Java does not support operator overloading or multiple inheritance for classes, though multiple inheritance is supported for interfaces. Java uses comments similar to those of C++. There are three different styles of comments: a single line style marked with two slashes (//), a multiple line style opened with /* and closed with */, and the Javadoc commenting style opened with /** and closed with */. The Javadoc style of commenting allows the user to run the Javadoc executable to create documentation for the program and can be read by some integrated development environments (IDEs) such as Eclipse to allow developers to access documentation within the IDE.",
    "hello_world": "The following is a simple example of a Hello, World! program that writes a message to the standard output: public class Example { public static void main(String[] args) { System.out.println(Hello World!); } }",
    "special_classes": "This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.Find sources: Java programming language – news · newspapers · books · scholar · JSTOR (May 2019) (Learn how and when to remove this message)",
    "applet": "Main article: Java applet Java applets were programs embedded in other applications, mainly in web pages displayed in web browsers. The Java applet API was deprecated with the release of Java 9 in 2017.",
    "servlet": "Main article: Java servlet Java servlet technology provides Web developers with a simple, consistent mechanism for extending the functionality of a Web server and for accessing existing business systems. Servlets are server-side Java EE components that generate responses to requests from clients. Most of the time, this means generating HTML pages in response to HTTP requests, although there are a number of other standard servlet classes available, for example for WebSocket communication. The Java servlet API has to some extent been superseded (but still used under the hood) by two standard Java technologies for web services: the Java API for RESTful Web Services (JAX-RS 2.0) useful for AJAX, JSON and REST services, and the Java API for XML Web Services (JAX-WS) useful for SOAP Web Services. Typical implementations of these APIs on Application Servers or Servlet Containers use a standard servlet for handling all interactions with the HTTP requests and responses that delegate to the web service methods for the actual business logic.",
    "javaserver_pages": "Main article: JavaServer Pages JavaServer Pages (JSP) are server-side Java EE components that generate responses, typically HTML pages, to HTTP requests from clients. JSPs embed Java code in an HTML page by using the special delimiters <% and %>. A JSP is compiled to a Java servlet, a Java application in its own right, the first time it is accessed. After that, the generated servlet creates the response.",
    "swing_application": "Main article: Swing (Java) Swing is a graphical user interface library for the Java SE platform. It is possible to specify a different look and feel through the pluggable look and feel system of Swing. Clones of Windows, GTK+, and Motif are supplied by Sun. Apple also provides an Aqua look and feel for macOS. Where prior implementations of these looks and feels may have been considered lacking, Swing in Java SE 6 addresses this problem by using more native GUI widget drawing routines of the underlying platforms.",
    "javafx_application": "Main article: JavaFX JavaFX is a software platform for creating and delivering desktop applications, as well as rich web applications that can run across a wide variety of devices. JavaFX is intended to replace Swing as the standard graphical user interface (GUI) library for Java SE, but since JDK 11 JavaFX has not been in the core JDK and instead in a separate module. JavaFX has support for desktop computers and web browsers on Microsoft Windows, Linux, and macOS. JavaFX does not have support for native OS look and feels.",
    "generics": "Main article: Generics in Java In 2004, generics were added to the Java language, as part of J2SE 5.0. Prior to the introduction of generics, each variable declaration had to be of a specific type. For container classes, for example, this is a problem because there is no easy way to create a container that accepts only specific types of objects. Either the container operates on all subtypes of a class or interface, usually Object, or a different container class has to be created for each contained class. Generics allow compile-time type checking without having to create many container classes, each containing almost identical code. In addition to enabling more efficient code, certain runtime exceptions are prevented from occurring, by issuing compile-time errors. If Java prevented all runtime type errors (ClassCastExceptions) from occurring, it would be type safe. In 2016, the type system of Java was proven unsound in that it is possible to use generics to construct classes and methods that allow assignment of an instance of one class to a variable of another unrelated class. Such code is accepted by the compiler, but fails at run time with a class cast exception.",
    "criticism": "Main article: Criticism of Java Criticisms directed at Java include the implementation of generics, speed, the handling of unsigned numbers, the implementation of floating-point arithmetic, and a history of security vulnerabilities in the primary Java VM implementation HotSpot. Developers have criticized the complexity and verbosity of the Java Persistence API (JPA), a standard part of Java EE. This has led to increased adoption of higher-level abstractions like Spring Data JPA, which aims to simplify database operations and reduce boilerplate code. The growing popularity of such frameworks suggests limitations in the standard JPA implementation's ease-of-use for modern Java development.",
    "class_libraries": "Main article: Java Class Library The Java Class Library is the standard library, developed to support application development in Java. It is controlled by Oracle in cooperation with others through the Java Community Process program. Companies or individuals participating in this process can influence the design and development of the APIs. This process has been a subject of controversy during the 2010s. The class library contains features such as: The core libraries, which include: Input/output (I/O or IO) and non-blocking I/O (NIO), or IO/NIO Networking (new user agent (HTTP client) since Java 11) Reflective programming (reflection) Concurrent computing (concurrency) Generics Scripting, Compiler Functional programming (Lambda, streaming) Collection libraries that implement data structures such as lists, dictionaries, trees, sets, queues and double-ended queue, or stacks XML Processing (Parsing, Transforming, Validating) libraries Security Internationalization and localization libraries The integration libraries, which allow the application writer to communicate with external systems. These libraries include: The Java Database Connectivity (JDBC) API for database access Java Naming and Directory Interface (JNDI) for lookup and discovery Java remote method invocation (RMI) and Common Object Request Broker Architecture (CORBA) for distributed application development Java Management Extensions (JMX) for managing and monitoring applications User interface libraries, which include: The (heavyweight, or native) Abstract Window Toolkit (AWT), which provides GUI components, the means for laying out those components and the means for handling events from those components The (lightweight) Swing libraries, which are built on AWT but provide (non-native) implementations of the AWT widgetry APIs for audio capture, processing, and playback JavaFX A platform dependent implementation of the Java virtual machine that is the means by which the bytecodes of the Java libraries and third-party applications are executed Plugins, which enable applets to be run in web browsers Java Web Start, which allows Java applications to be efficiently distributed to end users across the Internet Licensing and documentation",
    "documentation": "Main article: Javadoc Javadoc is a comprehensive documentation system, created by Sun Microsystems. It provides developers with an organized system for documenting their code. Javadoc comments have an extra asterisk at the beginning, i.e. the delimiters are /** and */, whereas the normal multi-line comments in Java are delimited by /* and */, and single-line comments start with //.",
    "implementations": "See also: Free Java implementations and List of Java compilers This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.Find sources: Java programming language – news · newspapers · books · scholar · JSTOR (September 2023) (Learn how and when to remove this message) Oracle Corporation owns the official implementation of the Java SE platform, due to its acquisition of Sun Microsystems on January 27, 2010. This implementation is based on the original implementation of Java by Sun. The Oracle implementation is available for Windows, macOS, Linux, and Solaris. Because Java lacks any formal standardization recognized by Ecma International, ISO/IEC, ANSI, or other third-party standards organizations, the Oracle implementation is the de facto standard. The Oracle implementation is packaged into two different distributions: The Java Runtime Environment (JRE) which contains the parts of the Java SE platform required to run Java programs and is intended for end users, and the Java Development Kit (JDK), which is intended for software developers and includes development tools such as the Java compiler, Javadoc, Jar, and a debugger. Oracle has also released GraalVM, a high performance Java dynamic compiler and interpreter. OpenJDK is another Java SE implementation that is licensed under the GNU GPL. The implementation started when Sun began releasing the Java source code under the GPL. As of Java SE 7, OpenJDK is the official Java reference implementation. The goal of Java is to make all implementations of Java compatible. Historically, Sun's trademark license for usage of the Java brand insists that all implementations be compatible. This resulted in a legal dispute with Microsoft after Sun claimed that the Microsoft implementation did not support Java remote method invocation (RMI) or Java Native Interface (JNI) and had added platform-specific features of their own. Sun sued in 1997, and, in 2001, won a settlement of US$20 million, as well as a court order enforcing the terms of the license from Sun. As a result, Microsoft no longer ships Java with Windows. Platform-independent Java is essential to Java EE, and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications.",
    "use_outside_the_java_platform": "The Java programming language requires the presence of a software platform in order for compiled programs to be executed. Oracle supplies the Java platform for use with Java. The Android SDK is an alternative software platform, used primarily for developing Android applications with its own GUI system.",
    "android": "The Java language is a key pillar in Android, an open source mobile operating system. Although Android, built on the Linux kernel, is written largely in C, the Android SDK uses the Java language as the basis for Android applications but does not use any of its standard GUI, SE, ME or other established Java standards. The bytecode language supported by the Android SDK is incompatible with Java bytecode and runs on its own virtual machine, optimized for low-memory devices such as smartphones and tablet computers. Depending on the Android version, the bytecode is either interpreted by the Dalvik virtual machine or compiled into native code by the Android Runtime. Android does not provide the full Java SE standard library, although the Android SDK does include an independent implementation of a large subset of it. It supports Java 6 and some Java 7 features, offering an implementation compatible with the standard library (Apache Harmony).",
    "controversy": "See also: Oracle America, Inc. v. Google, Inc. The use of Java-related technology in Android led to a legal dispute between Oracle and Google. On May 7, 2012, a San Francisco jury found that if APIs could be copyrighted, then Google had infringed Oracle's copyrights by the use of Java in Android devices. District Judge William Alsup ruled on May 31, 2012, that APIs cannot be copyrighted, but this was reversed by the United States Court of Appeals for the Federal Circuit in May 2014. On May 26, 2016, the district court decided in favor of Google, ruling the copyright infringement of the Java API in Android constitutes fair use. In March 2018, this ruling was overturned by the Appeals Court, which sent down the case of determining the damages to federal court in San Francisco. Google filed a petition for writ of certiorari with the Supreme Court of the United States in January 2019 to challenge the two rulings that were made by the Appeals Court in Oracle's favor. On April 5, 2021, the Court ruled 6–2 in Google's favor, that its use of Java APIs should be considered fair use. However, the court refused to rule on the copyrightability of APIs, choosing instead to determine their ruling by considering Java's API copyrightable purely for argument's sake.",
    "see_also": "Computer programming portal C# C++ Dalvik, used in old Android versions, replaced by non-JIT Android Runtime Java Heterogeneous Distributed Computing List of Java APIs List of Java frameworks List of JVM languages List of Java virtual machines Comparison of C# and Java Comparison of Java and C++ Comparison of programming languages",
    "references": "^ Binstock, Andrew (May 20, 2015). Java's 20 Years of Innovation. Forbes. Archived from the original on March 14, 2016. Retrieved March 18, 2016. ^ Oracle Releases Java 24. ^ JDK 24. ^ a b c d Barbara Liskov with John Guttag (2000). Program Development in Java – Abstraction, Specification, and Object-Oriented Design. USA, Addison Wesley. ISBN 978-0-201-65768-5. ^ Chaudhary, Harry H. (July 28, 2014). Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans. Archived from the original on September 29, 2023. Retrieved May 29, 2016. ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language. Archived March 19, 2011, at the Wayback Machine Archived January 7, 2006, at the Wayback Machine ^ Gosling, James; McGilton, Henry (May 1996). The Java Language Environment. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad. The Java Language Specification, 2nd Edition. Archived from the original on August 5, 2011. Retrieved February 8, 2008. ^ The A-Z of Programming Languages: Modula-3. Computerworld. Archived from the original on January 5, 2009. Retrieved June 9, 2010. ^ Niklaus Wirth stated on a number of public occasions, e.g. in a lecture at the Polytechnic Museum, Moscow in September 2005 (several independent first-hand accounts in Russian exist, e.g. one with an audio recording: Filippova, Elena (September 22, 2005). Niklaus Wirth's lecture at the Polytechnic Museum in Moscow. Archived from the original on December 1, 2020. Retrieved November 20, 2011.), that the Sun Java design team licensed the Oberon compiler sources a number of years prior to the release of Java and examined it: a (relative) compactness, type safety, garbage collection, no multiple inheritance for classes – all these key overall design features are shared by Java and Oberon. ^ Patrick Naughton cites Objective-C as a strong influence on the design of the Java programming language, stating that notable direct derivatives include Java interfaces (derived from Objective-C's protocol) and primitive wrapper classes. Archived July 13, 2011, at the Wayback Machine ^ TechMetrix Research (1999). History of Java (PDF). Java Application Servers Report. Archived from the original (PDF) on December 29, 2010. The project went ahead under the name green and the language was based on an old model of UCSD Pascal, which makes it possible to generate interpretive code. ^ A Conversation with James Gosling. ACM Queue. Vol. 2, no. 5. Association for Computing Machinery. August 31, 2004. Archived from the original on July 16, 2015. Retrieved June 9, 2010. ^ The Java Language Team. About Microsoft's 'Delegates' (White Paper). JavaSoft, Sun Microsystems, Inc. Archived from the original on June 27, 2012. In the summer of 1996, Sun was designing the precursor to what is now the event model of the AWT and the JavaBeans component architecture. Borland contributed greatly to this process. We looked very carefully at Delphi Object Pascal and built a working prototype of bound method references in order to understand their interaction with the Java programming language and its APIs. ^ Chapel spec (Acknowledgements) (PDF). Cray Inc. October 1, 2015. Archived (PDF) from the original on February 5, 2016. Retrieved January 14, 2016. ^ Gambas Documentation Introduction. Gambas Website. Archived from the original on October 9, 2017. Retrieved October 9, 2017. ^ Facebook Q&A: Hack brings static typing to PHP world. InfoWorld. March 26, 2014. Archived from the original on February 13, 2015. Retrieved January 11, 2015. ^ Write once, run anywhere?. Computer Weekly. May 2, 2002. Archived from the original on August 13, 2021. Retrieved July 27, 2009. ^ a b c 1.2 Design Goals of the Java Programming Language. Oracle. January 1, 1999. Archived from the original on January 23, 2013. Retrieved January 14, 2013. ^ Melanson, Mike (August 9, 2022). Don't call it a comeback: Why Java is still champ. GitHub. Archived from the original on August 25, 2023. Retrieved October 15, 2023. ^ The top programming languages. The State of the Octoverse. GitHub. Archived from the original on August 2, 2023. Retrieved October 15, 2023. ^ McMillan, Robert (August 1, 2013). Is Java Losing Its Mojo?. Wired. Archived from the original on February 15, 2017. Retrieved October 15, 2023. ^ Byous, Jon (c. 1998). Java technology: The early years. Sun Developer Network. Sun Microsystems. Archived from the original on April 20, 2005. Retrieved April 22, 2005. ^ Object-oriented programming The History of Java Technology. Sun Developer Network. c. 1995. Archived from the original on February 10, 2010. Retrieved April 30, 2010. ^ Murphy, Kieron (October 4, 1996). So why did they decide to call it Java?. JavaWorld. Archived from the original on July 13, 2020. Retrieved July 13, 2020. ^ Kabutz, Heinz; Once Upon an Oak Archived April 13, 2007, at the Wayback Machine. Artima. Retrieved April 29, 2007. ^ JAVASOFT SHIPS JAVA 1.0. Archived from the original on March 10, 2007. Retrieved May 13, 2018. ^ Object-oriented Programming with Java: Essentials and Applications. Tata McGraw-Hill Education. p. 34. ^ JSG – Java Study Group. open-std.org. Archived from the original on August 25, 2006. Retrieved August 2, 2006. ^ Why Java Was – Not – Standardized Twice (PDF). Archived (PDF) from the original on January 13, 2014. Retrieved June 3, 2018. ^ What is ECMA—and why Microsoft cares. ZDNet. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Java Community Process website. Jcp.org. May 24, 2010. Archived from the original on August 8, 2006. Retrieved June 9, 2010. ^ JAVAONE: Sun – The bulk of Java is open sourced. GrnLight.net. Archived from the original on May 27, 2014. Retrieved May 26, 2014. ^ Sun's Evolving Role as Java Evangelist. O'Reilly Media. Archived from the original on September 15, 2010. Retrieved August 2, 2009. ^ Oracle and Java. oracle.com. Oracle Corporation. Archived from the original on January 31, 2010. Retrieved August 23, 2010. Oracle has been a leading and substantive supporter of Java since its emergence in 1995 and takes on the new role as steward of Java technology with a relentless commitment to fostering a community of participation and transparency. ^ Gosling, James (April 9, 2010). Time to move on... On a New Road. Archived from the original on November 5, 2010. Retrieved November 16, 2011. ^ Topic, Dalibor. Moving to a Plugin-Free Web. Archived from the original on March 16, 2016. Retrieved March 15, 2016. ^ Learn About Java Technology. Oracle. Archived from the original on November 24, 2011. Retrieved November 21, 2011. ^ Why should I uninstall older versions of Java from my system?. Oracle. Archived from the original on February 12, 2018. Retrieved September 24, 2021. ^ Oracle Java SE Support Roadmap. Oracle. September 13, 2021. Archived from the original on September 19, 2021. Retrieved September 18, 2021. ^ Temurin™ Support; Adoptium. adoptium.net. Archived from the original on March 29, 2024. Retrieved March 29, 2024. ^ JAVASOFT SHIPS JAVA 1.0. sun.com. Archived from the original on March 10, 2007. Retrieved February 5, 2008. ^ Chander, Sharat. Introducing Java SE 11. oracle.com. Archived from the original on September 26, 2018. Retrieved September 26, 2018. ^ Chander, Sharat (September 15, 2020). The Arrival of Java 15!. Oracle. Archived from the original on September 16, 2020. Retrieved September 15, 2020. ^ JDK 21. openjdk.org. Archived from the original on September 20, 2023. Retrieved September 20, 2023. ^ JDK 24. ^ Java Card Overview. Oracle Technology Network. Oracle. Archived from the original on January 7, 2015. Retrieved December 18, 2014. ^ Java Platform, Micro Edition (Java ME). Oracle Technology Network. Oracle. Archived from the original on January 4, 2015. Retrieved December 18, 2014. ^ Java SE. Oracle Technology Network. Oracle. Archived from the original on December 24, 2014. Retrieved December 18, 2014. ^ Java Platform, Enterprise Edition (Java EE). Oracle Technology Network. Oracle. Archived from the original on December 17, 2014. Retrieved December 18, 2014. ^ Deep Dive Into the New Java JIT Compiler – Graal | Baeldung. www.baeldung.com. August 6, 2021. Archived from the original on October 28, 2021. Retrieved October 13, 2021. ^ Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?. Programmer Interview. Archived from the original on January 19, 2015. Retrieved January 19, 2015. ^ a b Jelovic, Dejan. Why Java will always be slower than C++. Archived from the original on February 11, 2008. Retrieved February 15, 2008. ^ Hundt, Robert. Loop Recognition in C++/Java/Go/Scala (PDF). Archived (PDF) from the original on November 16, 2011. Retrieved July 12, 2012. ^ Symantec's Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1. Archived from the original on June 28, 2010. Retrieved August 1, 2009. ^ Salcic, Zoran; Park, Heejong; Teich, Jürgen; Malik, Avinash; Nadeem, Muhammad (July 22, 2017). Noc-HMP: A Heterogeneous Multicore Processor for Embedded Systems Designed in SystemJ. ACM Transactions on Design Automation of Electronic Systems. 22 (4): 73. doi:10.1145/3073416. ISSN 1084-4309. S2CID 11150290. ^ a b c Bloch 2018, p. 26-28, §Item 7: Eliminate obsolete object references. ^ NullPointerException. Oracle. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Exceptions in Java. Artima.com. Archived from the original on January 21, 2009. Retrieved August 10, 2010. ^ Java HotSpot™ Virtual Machine Performance Enhancements. Oracle.com. Archived from the original on May 29, 2017. Retrieved April 26, 2017. ^ Operator Overloading (C# vs Java). C# for Java Developers. Microsoft. Archived from the original on January 7, 2015. Retrieved December 10, 2014. ^ Multiple Inheritance of State, Implementation, and Type. The Java Tutorials. Oracle. Archived from the original on November 9, 2014. Retrieved December 10, 2014. ^ Deprecated APIs, Features, and Options. Oracle. Archived from the original on June 19, 2019. Retrieved May 31, 2019. ^ Applet (Java Platform SE 7). Docs. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ What Is a JSP Page? - The Java EE 5 Tutorial. docs.oracle.com. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ Trail: Creating a GUI With JFC/Swing (The Java Tutorials). docs.oracle.com. Archived from the original on April 29, 2020. Retrieved May 1, 2020. ^ Removed from JDK 11, JavaFX 11 arrives as a standalone module. InfoWorld. September 20, 2018. Archived from the original on October 14, 2020. Retrieved October 13, 2020. ^ Getting Started with JavaFX: Hello World, JavaFX Style. JavaFX 2 Tutorials and Documentation. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ Java and Scala's Type Systems are Unsound (PDF). Archived (PDF) from the original on November 28, 2016. Retrieved February 20, 2017. ^ Arnold, Ken (June 27, 2005). Generics Considered Harmful. java.net. Archived from the original on October 10, 2007. Retrieved September 10, 2015. ^ Owens, Sean R. Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof). Archived from the original on February 20, 2009. Retrieved July 4, 2011. ^ Kahan, William (March 1, 1998). How Java's Floating-Point Hurts Everyone Everywhere – ACM 1998 Workshop on Java (Stanford) (PDF). Electrical Engineering & Computer Science, University of California at Berkeley. Archived (PDF) from the original on September 5, 2012. Retrieved June 4, 2011. ^ Have you checked the Java?. Archived from the original on September 21, 2012. Retrieved December 23, 2011. ^ Chidester, Ashlan. Java Persistence API, Jenkins and AWS. ISBN 9798224253951. Retrieved September 16, 2024. ^ Cadenhead, Rogers (November 20, 2017), Understanding How Java Programs Work, archived from the original on August 13, 2021, retrieved March 26, 2019 ^ Woolf, Nicky (May 26, 2016). Google wins six-year legal battle with Oracle over Android code copyright. The Guardian. ISSN 0261-3077. Archived from the original on March 26, 2019. Retrieved March 26, 2019. ^ a b Bloch 2018, pp. 1–4, § 1 Introduction. ^ java.nio (Java Platform SE 8). docs.oracle.com. ^ Java Networking. docs.oracle.com. ^ HttpClient (Java SE 11 & JDK 11). docs.oracle.com. ^ Collections Framework Overview. Java Documentation. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ Java Security Overview. Java Documentation. Oracle. Archived from the original on January 3, 2015. Retrieved December 18, 2014. ^ Trail: Internationalization. The Java Tutorials. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ How to Write Doc Comments for the Javadoc Tool. Oracle Technology Network. Oracle. Archived from the original on December 18, 2014. Retrieved December 18, 2014. ^ Niccolai, James (January 24, 2001). Sun, Microsoft settle Java lawsuit. JavaWorld. IDG News Service. Archived from the original on July 14, 2020. Retrieved July 13, 2020. ^ van Gurp, Jilles (November 13, 2007). Google Android: Initial Impressions and Criticism. Javalobby. Archived from the original on August 28, 2008. Retrieved March 7, 2009. Frankly, I don't understand why Google intends to ignore the vast amount of existing implementation out there. It seems like a bad case of not invented here to me. Ultimately, this will slow adoption. There are already too many Java platforms for the mobile world and this is yet another one ^ Mullin, Joe (May 7, 2012). Google guilty of infringement in Oracle trial; future legal headaches loom. Law & Disorder. Ars Technica. Archived from the original on May 8, 2012. Retrieved May 8, 2012. ^ Mullin, Joe (May 31, 2012). Google wins crucial API ruling, Oracle's case decimated. Ars Technica. Archived from the original on March 12, 2017. Retrieved June 1, 2012. ^ Rosenblatt, Seth (May 9, 2014). Court sides with Oracle over Android in Java patent appeal. CNET. Archived from the original on May 10, 2014. Retrieved May 10, 2014. ^ Mullin, Joe (May 26, 2016). Google beats Oracle—Android makes fair use of Java APIs. Ars Technica. Archived from the original on January 20, 2017. Retrieved May 26, 2016. ^ Farivar, Cyrus (March 27, 2018). Google's use of the Java API packages was not fair, appeals court rules. Ars Technica. Archived from the original on September 24, 2019. Retrieved August 6, 2019. ^ Lee, Timothy (April 23, 2019). Google asks Supreme Court to overrule disastrous ruling on API copyrights. Ars Technica. Archived from the original on April 23, 2019. Retrieved April 23, 2019. ^ Google LLC v. Oracle America, Inc 593 U. S. ____ (2021) (PDF). Archived (PDF) from the original on April 5, 2021. Retrieved April 6, 2021.",
    "bibliography": "Bloch, Joshua (2018). Effective Java: Programming Language Guide (Third ed.). Addison-Wesley. ISBN 978-0-13-468599-1. Gosling, James; Joy, Bill; Steele, Guy L. Jr.; Bracha, Gilad (2005). The Java Language Specification (3rd ed.). Addison-Wesley. ISBN 0-321-24678-0. Archived from the original on February 14, 2012. Retrieved February 8, 2019. Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad; Buckley, Alex (2014). The Java® Language Specification (PDF) (Java SE 8 ed.). Archived (PDF) from the original on October 21, 2014. Retrieved November 18, 2014. Lindholm, Tim; Yellin, Frank (1999). The Java Virtual Machine Specification (2nd ed.). Addison-Wesley. ISBN 0-201-43294-3. Archived from the original on September 25, 2011. Retrieved February 8, 2019.",
    "external_links": "Java at Wikipedia's sister projects Definitions from WiktionaryMedia from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from WikiversityData from Wikidata Wikiversity has learning resources about Java Platform, Enterprise Edition/Java EE Tutorial OpenJDK, Oracle JDK builds, Adoptium vteJava (software platform)Platforms JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK GraalVM Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Pack200 Modules Major third-partytechnologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations JVM languages Java BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Oxygene CommunityConferences JavaOne Devoxx Organizations Apache Software Foundation Eclipse Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal vteSun MicrosystemsAcquired by OracleHardwareSystems Sun-1 Sun-2 Sun-3 Sun386i Sun-4 SPARCstation/server/center 1 2 4 5 10 20 IPC IPX LX ZX SPARCclassic Netra Ultra 1 2 5 10 24 30 60 80 Enterprise 10000 Blade server Blade workstation Fire 12K 15K E25K T2000 X4500 SPARC Enterprise JavaStation Java Workstation Ray Cobalt Qube Cobalt RaQ Processors SPARC MB86900 microSPARC SuperSPARC UltraSPARC UltraSPARC II UltraSPARC IIe UltraSPARC IIi Gemini UltraSPARC III UltraSPARC III Cu UltraSPARC IIIi UltraSPARC IV UltraSPARC T1 UltraSPARC T2 SPARC T3 SPARC T4 SPARC T5 Rock MAJC Other Sun4d SBus Fireplane LOM port MBus Modular Datacenter Neptune System Service Processor SPARC T series SPOT Ultra Port Architecture Visual Instruction Set Software SunOS Solaris NIS NIS+ NFS ZFS ZFS+ SunView NeWS OpenWindows Java Desktop System Studio Java StarOffice iPlanet Java System Sun Secure Global Desktop MySQL xVM GlassFish VirtualBox Storage StorageTek 5800 System StorageTek SL8500 Open Storage QFS ZFS Performance Cloud Constellation System Visualization System Grid Engine Lustre Research Sun Microsystems Laboratories picoJava Fortress Project Looking Glass Education BlueJ Global Education & Learning Community SCPs Community Common Development and Distribution License Java Community Process NetBeans OpenOffice.org OpenSolaris OpenSPARC OpenJDK Open Source University Meetup People Bill Joy Andy Bechtolsheim Scott McNealy Vinod Khosla Acquisitions Afara Websystems Cobalt Networks Gridware Lighthouse Design Montalvo Systems MySQL AB Pixo Procom Technology SavaJe StorageTek Tarantella Slogans The Network is the Computer Write once, run anywhere Category vteOracle CorporationCorporate directors Jeffrey Berg H. Raymond Bingham Michael Boskin Safra Catz Larry Ellison Héctor García-Molina Joseph Grundfest Jeffrey O. Henley Mark Hurd Jack F. Kemp Donald L. Lucas Naomi O. Seligman Acquisitions (list) Sun PeopleSoft Hyperion Siebel BEA JD Edwards RightNow Virtual Iron TimesTen Sunopsis NetSuite Cerner Databases Oracle Database MySQL InnoDB Berkeley DB TimesTen Rdb Essbase Programming languages Java PL/SQL IDEs JDeveloper Forms NetBeans Apex SQL Developer Developer Studio Middleware Fusion Middleware WebCenter SOA Suite WebLogic Server Coherence Tuxedo GlassFish Operating systems Oracle Linux Oracle Solaris Computer hardware Sun Fire SPARC (T-Series, Enterprise) StorageTek Computer appliances Oracle Exadata Oracle Exalogic Big Data Appliance Education and recognition Oracle Certification Program Category vteOracle free and open-source software (FOSS)SoftwareApplications OpenOffice.org VirtualBox Programming languages Java Databases Berkeley DB InnoDB MySQL Oracle NoSQL Database Frameworks anddevelopment tools DTrace GlassFish HotSpot Image Packaging System Java (software platform) Maxine Virtual Machine Memory Nashorn NetBeans OpenJDK VisualVM Operating systems OpenSolaris Oracle Linux Other Java Desktop System OCFS2 Oracle Grid Engine Oracle VM Server for x86 Related Google LLC v. Oracle America, Inc. vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherELMCIP",
    "document": "See also: Java (software platform) § History Duke, the Java mascot James Gosling, the creator of Java, in 2008 James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991. Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time. The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee, a type of coffee from Indonesia. Gosling designed Java with a C/C++-style syntax that system and application programmers would find familiar. Sun Microsystems released the first public implementation as Java 1.0 in 1996. It promised write once, run anywhere (WORA) functionality, providing no-cost run-times on popular platforms. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major web browsers soon incorporated the ability to run Java applets within web pages, and Java quickly became popular. The Java 1.0 compiler was re-written in Java by Arthur van Hoff to comply strictly with the Java 1.0 language specification. With the advent of Java 2 (released initially as J2SE 1.2 in December 1998 – 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as Java EE, Java ME, and Java SE, respectively. In 1997, Sun Microsystems approached the ISO/IEC JTC 1 standards body and later the Ecma International to formalize Java, but it soon withdrew from the process. Java remains a de facto standard, controlled through the Java Community Process. At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System. On November 13, 2006, Sun released much of its Java virtual machine (JVM) as free and open-source software (FOSS), under the terms of the GPL-2.0-only license. On May 8, 2007, Sun finished the process, making all of its JVM's core code available under free software/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright. Sun's vice-president Rich Green said that Sun's ideal role with regard to Java was as an evangelist. Following Oracle Corporation's acquisition of Sun Microsystems in 2009–10, Oracle has described itself as the steward of Java technology with a relentless commitment to fostering a community of participation and transparency. This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the Android SDK (see the Android section). On April 2, 2010, James Gosling resigned from Oracle. In January 2016, Oracle announced that Java run-time environments based on JDK 9 will discontinue the browser plugin. Java software runs on most devices from laptops to data centers, game consoles to scientific supercomputers. Oracle (and others) highly recommend uninstalling outdated and unsupported versions of Java, due to unresolved security issues in older versions. There were five primary goals in creating the Java language: It must be simple, object-oriented, and familiar. It must be robust and secure. It must be architecture-neutral and portable. It must execute with high performance. It must be interpreted, threaded, and dynamic. Main article: Java version history As of November 2024[update], Java 8, 11, 17, and 21 are supported as long-term support (LTS) versions, with Java 25, releasing in September 2025, as the next scheduled LTS version. Oracle released the last zero-cost public update for the legacy version Java 8 LTS in January 2019 for commercial use, although it will otherwise still support Java 8 with public updates for personal use indefinitely. Other vendors such as Adoptium continue to offer free builds of OpenJDK's long-term support (LTS) versions. These builds may include additional security patches and bug fixes. Major release versions of Java, along with their release dates: Version Date JDK Beta 1995 JDK 1.0 January 23, 1996 JDK 1.1 February 19, 1997 J2SE 1.2 December 8, 1998 J2SE 1.3 May 8, 2000 J2SE 1.4 February 6, 2002 J2SE 5.0 September 30, 2004 Java SE 6 December 11, 2006 Java SE 7 July 28, 2011 Java SE 8 (LTS) March 18, 2014 Java SE 9 September 21, 2017 Java SE 10 March 20, 2018 Java SE 11 (LTS) September 25, 2018 Java SE 12 March 19, 2019 Java SE 13 September 17, 2019 Java SE 14 March 17, 2020 Java SE 15 September 15, 2020 Java SE 16 March 16, 2021 Java SE 17 (LTS) September 14, 2021 Java SE 18 March 22, 2022 Java SE 19 September 20, 2022 Java SE 20 March 21, 2023 Java SE 21 (LTS) September 19, 2023 Java SE 22 March 19, 2024 Java SE 23 September 17, 2024 Java SE 24 18 March 2025 See also: Free Java implementations § Class library Java platform editions Java Card Java ME (Micro Edition) Java SE (Standard Edition) Jakarta EE (Enterprise Edition) JavaFX (bundled in Oracle's JDK from versions 8 to 10 but separately since 11) PersonalJava (Discontinued) vte Sun has defined and supports four editions of Java targeting different application environments and segmented many of its APIs so that they belong to one of the platforms. The platforms are: Java Card for smart-cards. Java Platform, Micro Edition (Java ME) – targeting environments with limited resources. Java Platform, Standard Edition (Java SE) – targeting workstation environments. Java Platform, Enterprise Edition (Java EE) – targeting large distributed enterprise or Internet environments. The classes in the Java APIs are organized into separate groups called packages. Each package contains a set of related interfaces, classes, subpackages and exceptions. Sun also provided an edition called Personal Java that has been superseded by later, standards-based Java ME configuration-profile pairings. Main articles: Java (software platform) and Java virtual machine One design goal of Java is portability, which means that programs written for the Java platform must run similarly on any combination of hardware and operating system with adequate run time support. This is achieved by compiling the Java language code to an intermediate representation called Java bytecode, instead of directly to architecture-specific machine code. Java bytecode instructions are analogous to machine code, but they are intended to be executed by a virtual machine (VM) written specifically for the host hardware. End-users commonly use a Java Runtime Environment (JRE) installed on their device for standalone Java applications or a web browser for Java applets. Standard libraries provide a generic way to access host-specific features such as graphics, threading, and networking. The use of universal bytecode makes porting simple. However, the overhead of interpreting bytecode into machine instructions made interpreted programs almost always run more slowly than native executables. Just-in-time (JIT) compilers that compile byte-codes to machine code during runtime were introduced from an early stage. Java's Hotspot compiler is actually two compilers in one; and with GraalVM (included in e.g. Java 11, but removed as of Java 16) allowing tiered compilation. Java itself is platform-independent and is adapted to the particular platform it is to run on by a Java virtual machine (JVM), which translates the Java bytecode into the platform's machine language. Main article: Java performance Programs written in Java have a reputation for being slower and requiring more memory than those written in C++. However, Java programs' execution speed improved significantly with the introduction of just-in-time compilation in 1997/1998 for Java 1.1, the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine, such as HotSpot becoming Sun's default JVM in 2000. With Java 1.5, the performance was improved with the addition of the java.util.concurrent package, including lock-free implementations of the ConcurrentMaps and other multi-core collections, and it was improved further with Java 1.6. Some platforms offer direct hardware support for Java; there are micro controllers that can run Java bytecode in hardware instead of a software Java virtual machine, and some ARM-based processors could have hardware support for executing Java bytecode through their Jazelle option, though support has mostly been dropped in current implementations of ARM. Java uses an automatic garbage collector to manage memory in the object lifecycle. The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the unreachable memory becomes eligible to be freed automatically by the garbage collector. Something similar to a memory leak may still occur if a programmer's code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use. If methods for a non-existent object are called, a null pointer exception is thrown. One of the ideas behind Java's automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the stack or explicitly allocated and deallocated from the heap. In the latter case, the responsibility of managing memory resides with the programmer. If the program does not deallocate an object, a memory leak occurs. If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable or crash. This can be partially remedied by the use of smart pointers, but these add overhead and complexity. Garbage collection does not prevent logical memory leaks, i.e. those where the memory is still referenced but never used. Garbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java. Java does not support C/C++ style pointer arithmetic, where object addresses can be arithmetically manipulated (e.g. by adding or subtracting an offset). This allows the garbage collector to relocate referenced objects and ensures type safety and security. As in C++ and some other object-oriented languages, variables of Java's primitive data types are either stored directly in fields (for objects) or on the stack (for methods) rather than on the heap, as is commonly true for non-primitive data types (but see escape analysis). This was a conscious decision by Java's designers for performance reasons. Java contains multiple types of garbage collectors. Since Java 9, HotSpot uses the Garbage First Garbage Collector (G1GC) as the default. However, there are also several other garbage collectors that can be used to manage the heap, such as the Z Garbage Collector (ZGC) introduced in Java 11, and Shenandoah GC, introduced in Java 12 but unavailable in Oracle-produced OpenJDK builds. Shenandoah is instead available in third-party builds of OpenJDK, such as Eclipse Temurin. For most applications in Java, G1GC is sufficient. In prior versions of Java, such as Java 8, the Parallel Garbage Collector was used as the default garbage collector. Having solved the memory management problem does not relieve the programmer of the burden of handling properly other kinds of resources, like network or database connections, file handles, etc., especially in the presence of exceptions. Main article: Java syntax This dependency graph of the Java Core classes was created with jdeps and Gephi. The syntax of Java is largely influenced by C++ and C. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language. All code is written inside classes, and every data item is an object, with the exception of the primitive data types, (i.e. integers, floating-point numbers, boolean values, and characters), which are not objects for performance reasons. Java reuses some popular aspects of C++ (such as the printf method). Unlike C++, Java does not support operator overloading or multiple inheritance for classes, though multiple inheritance is supported for interfaces. Java uses comments similar to those of C++. There are three different styles of comments: a single line style marked with two slashes (//), a multiple line style opened with /* and closed with */, and the Javadoc commenting style opened with /** and closed with */. The Javadoc style of commenting allows the user to run the Javadoc executable to create documentation for the program and can be read by some integrated development environments (IDEs) such as Eclipse to allow developers to access documentation within the IDE. The following is a simple example of a Hello, World! program that writes a message to the standard output: public class Example { public static void main(String[] args) { System.out.println(Hello World!); } } This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.Find sources: Java programming language – news · newspapers · books · scholar · JSTOR (May 2019) (Learn how and when to remove this message) Main article: Java applet Java applets were programs embedded in other applications, mainly in web pages displayed in web browsers. The Java applet API was deprecated with the release of Java 9 in 2017. Main article: Java servlet Java servlet technology provides Web developers with a simple, consistent mechanism for extending the functionality of a Web server and for accessing existing business systems. Servlets are server-side Java EE components that generate responses to requests from clients. Most of the time, this means generating HTML pages in response to HTTP requests, although there are a number of other standard servlet classes available, for example for WebSocket communication. The Java servlet API has to some extent been superseded (but still used under the hood) by two standard Java technologies for web services: the Java API for RESTful Web Services (JAX-RS 2.0) useful for AJAX, JSON and REST services, and the Java API for XML Web Services (JAX-WS) useful for SOAP Web Services. Typical implementations of these APIs on Application Servers or Servlet Containers use a standard servlet for handling all interactions with the HTTP requests and responses that delegate to the web service methods for the actual business logic. Main article: JavaServer Pages JavaServer Pages (JSP) are server-side Java EE components that generate responses, typically HTML pages, to HTTP requests from clients. JSPs embed Java code in an HTML page by using the special delimiters <% and %>. A JSP is compiled to a Java servlet, a Java application in its own right, the first time it is accessed. After that, the generated servlet creates the response. Main article: Swing (Java) Swing is a graphical user interface library for the Java SE platform. It is possible to specify a different look and feel through the pluggable look and feel system of Swing. Clones of Windows, GTK+, and Motif are supplied by Sun. Apple also provides an Aqua look and feel for macOS. Where prior implementations of these looks and feels may have been considered lacking, Swing in Java SE 6 addresses this problem by using more native GUI widget drawing routines of the underlying platforms. Main article: JavaFX JavaFX is a software platform for creating and delivering desktop applications, as well as rich web applications that can run across a wide variety of devices. JavaFX is intended to replace Swing as the standard graphical user interface (GUI) library for Java SE, but since JDK 11 JavaFX has not been in the core JDK and instead in a separate module. JavaFX has support for desktop computers and web browsers on Microsoft Windows, Linux, and macOS. JavaFX does not have support for native OS look and feels. Main article: Generics in Java In 2004, generics were added to the Java language, as part of J2SE 5.0. Prior to the introduction of generics, each variable declaration had to be of a specific type. For container classes, for example, this is a problem because there is no easy way to create a container that accepts only specific types of objects. Either the container operates on all subtypes of a class or interface, usually Object, or a different container class has to be created for each contained class. Generics allow compile-time type checking without having to create many container classes, each containing almost identical code. In addition to enabling more efficient code, certain runtime exceptions are prevented from occurring, by issuing compile-time errors. If Java prevented all runtime type errors (ClassCastExceptions) from occurring, it would be type safe. In 2016, the type system of Java was proven unsound in that it is possible to use generics to construct classes and methods that allow assignment of an instance of one class to a variable of another unrelated class. Such code is accepted by the compiler, but fails at run time with a class cast exception. Main article: Criticism of Java Criticisms directed at Java include the implementation of generics, speed, the handling of unsigned numbers, the implementation of floating-point arithmetic, and a history of security vulnerabilities in the primary Java VM implementation HotSpot. Developers have criticized the complexity and verbosity of the Java Persistence API (JPA), a standard part of Java EE. This has led to increased adoption of higher-level abstractions like Spring Data JPA, which aims to simplify database operations and reduce boilerplate code. The growing popularity of such frameworks suggests limitations in the standard JPA implementation's ease-of-use for modern Java development. Main article: Java Class Library The Java Class Library is the standard library, developed to support application development in Java. It is controlled by Oracle in cooperation with others through the Java Community Process program. Companies or individuals participating in this process can influence the design and development of the APIs. This process has been a subject of controversy during the 2010s. The class library contains features such as: The core libraries, which include: Input/output (I/O or IO) and non-blocking I/O (NIO), or IO/NIO Networking (new user agent (HTTP client) since Java 11) Reflective programming (reflection) Concurrent computing (concurrency) Generics Scripting, Compiler Functional programming (Lambda, streaming) Collection libraries that implement data structures such as lists, dictionaries, trees, sets, queues and double-ended queue, or stacks XML Processing (Parsing, Transforming, Validating) libraries Security Internationalization and localization libraries The integration libraries, which allow the application writer to communicate with external systems. These libraries include: The Java Database Connectivity (JDBC) API for database access Java Naming and Directory Interface (JNDI) for lookup and discovery Java remote method invocation (RMI) and Common Object Request Broker Architecture (CORBA) for distributed application development Java Management Extensions (JMX) for managing and monitoring applications User interface libraries, which include: The (heavyweight, or native) Abstract Window Toolkit (AWT), which provides GUI components, the means for laying out those components and the means for handling events from those components The (lightweight) Swing libraries, which are built on AWT but provide (non-native) implementations of the AWT widgetry APIs for audio capture, processing, and playback JavaFX A platform dependent implementation of the Java virtual machine that is the means by which the bytecodes of the Java libraries and third-party applications are executed Plugins, which enable applets to be run in web browsers Java Web Start, which allows Java applications to be efficiently distributed to end users across the Internet Licensing and documentation Main article: Javadoc Javadoc is a comprehensive documentation system, created by Sun Microsystems. It provides developers with an organized system for documenting their code. Javadoc comments have an extra asterisk at the beginning, i.e. the delimiters are /** and */, whereas the normal multi-line comments in Java are delimited by /* and */, and single-line comments start with //. See also: Free Java implementations and List of Java compilers This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.Find sources: Java programming language – news · newspapers · books · scholar · JSTOR (September 2023) (Learn how and when to remove this message) Oracle Corporation owns the official implementation of the Java SE platform, due to its acquisition of Sun Microsystems on January 27, 2010. This implementation is based on the original implementation of Java by Sun. The Oracle implementation is available for Windows, macOS, Linux, and Solaris. Because Java lacks any formal standardization recognized by Ecma International, ISO/IEC, ANSI, or other third-party standards organizations, the Oracle implementation is the de facto standard. The Oracle implementation is packaged into two different distributions: The Java Runtime Environment (JRE) which contains the parts of the Java SE platform required to run Java programs and is intended for end users, and the Java Development Kit (JDK), which is intended for software developers and includes development tools such as the Java compiler, Javadoc, Jar, and a debugger. Oracle has also released GraalVM, a high performance Java dynamic compiler and interpreter. OpenJDK is another Java SE implementation that is licensed under the GNU GPL. The implementation started when Sun began releasing the Java source code under the GPL. As of Java SE 7, OpenJDK is the official Java reference implementation. The goal of Java is to make all implementations of Java compatible. Historically, Sun's trademark license for usage of the Java brand insists that all implementations be compatible. This resulted in a legal dispute with Microsoft after Sun claimed that the Microsoft implementation did not support Java remote method invocation (RMI) or Java Native Interface (JNI) and had added platform-specific features of their own. Sun sued in 1997, and, in 2001, won a settlement of US$20 million, as well as a court order enforcing the terms of the license from Sun. As a result, Microsoft no longer ships Java with Windows. Platform-independent Java is essential to Java EE, and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications. The Java programming language requires the presence of a software platform in order for compiled programs to be executed. Oracle supplies the Java platform for use with Java. The Android SDK is an alternative software platform, used primarily for developing Android applications with its own GUI system. The Java language is a key pillar in Android, an open source mobile operating system. Although Android, built on the Linux kernel, is written largely in C, the Android SDK uses the Java language as the basis for Android applications but does not use any of its standard GUI, SE, ME or other established Java standards. The bytecode language supported by the Android SDK is incompatible with Java bytecode and runs on its own virtual machine, optimized for low-memory devices such as smartphones and tablet computers. Depending on the Android version, the bytecode is either interpreted by the Dalvik virtual machine or compiled into native code by the Android Runtime. Android does not provide the full Java SE standard library, although the Android SDK does include an independent implementation of a large subset of it. It supports Java 6 and some Java 7 features, offering an implementation compatible with the standard library (Apache Harmony). See also: Oracle America, Inc. v. Google, Inc. The use of Java-related technology in Android led to a legal dispute between Oracle and Google. On May 7, 2012, a San Francisco jury found that if APIs could be copyrighted, then Google had infringed Oracle's copyrights by the use of Java in Android devices. District Judge William Alsup ruled on May 31, 2012, that APIs cannot be copyrighted, but this was reversed by the United States Court of Appeals for the Federal Circuit in May 2014. On May 26, 2016, the district court decided in favor of Google, ruling the copyright infringement of the Java API in Android constitutes fair use. In March 2018, this ruling was overturned by the Appeals Court, which sent down the case of determining the damages to federal court in San Francisco. Google filed a petition for writ of certiorari with the Supreme Court of the United States in January 2019 to challenge the two rulings that were made by the Appeals Court in Oracle's favor. On April 5, 2021, the Court ruled 6–2 in Google's favor, that its use of Java APIs should be considered fair use. However, the court refused to rule on the copyrightability of APIs, choosing instead to determine their ruling by considering Java's API copyrightable purely for argument's sake. Computer programming portal C# C++ Dalvik, used in old Android versions, replaced by non-JIT Android Runtime Java Heterogeneous Distributed Computing List of Java APIs List of Java frameworks List of JVM languages List of Java virtual machines Comparison of C# and Java Comparison of Java and C++ Comparison of programming languages ^ Binstock, Andrew (May 20, 2015). Java's 20 Years of Innovation. Forbes. Archived from the original on March 14, 2016. Retrieved March 18, 2016. ^ Oracle Releases Java 24. ^ JDK 24. ^ a b c d Barbara Liskov with John Guttag (2000). Program Development in Java – Abstraction, Specification, and Object-Oriented Design. USA, Addison Wesley. ISBN 978-0-201-65768-5. ^ Chaudhary, Harry H. (July 28, 2014). Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans. Archived from the original on September 29, 2023. Retrieved May 29, 2016. ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language. Archived March 19, 2011, at the Wayback Machine Archived January 7, 2006, at the Wayback Machine ^ Gosling, James; McGilton, Henry (May 1996). The Java Language Environment. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad. The Java Language Specification, 2nd Edition. Archived from the original on August 5, 2011. Retrieved February 8, 2008. ^ The A-Z of Programming Languages: Modula-3. Computerworld. Archived from the original on January 5, 2009. Retrieved June 9, 2010. ^ Niklaus Wirth stated on a number of public occasions, e.g. in a lecture at the Polytechnic Museum, Moscow in September 2005 (several independent first-hand accounts in Russian exist, e.g. one with an audio recording: Filippova, Elena (September 22, 2005). Niklaus Wirth's lecture at the Polytechnic Museum in Moscow. Archived from the original on December 1, 2020. Retrieved November 20, 2011.), that the Sun Java design team licensed the Oberon compiler sources a number of years prior to the release of Java and examined it: a (relative) compactness, type safety, garbage collection, no multiple inheritance for classes – all these key overall design features are shared by Java and Oberon. ^ Patrick Naughton cites Objective-C as a strong influence on the design of the Java programming language, stating that notable direct derivatives include Java interfaces (derived from Objective-C's protocol) and primitive wrapper classes. Archived July 13, 2011, at the Wayback Machine ^ TechMetrix Research (1999). History of Java (PDF). Java Application Servers Report. Archived from the original (PDF) on December 29, 2010. The project went ahead under the name green and the language was based on an old model of UCSD Pascal, which makes it possible to generate interpretive code. ^ A Conversation with James Gosling. ACM Queue. Vol. 2, no. 5. Association for Computing Machinery. August 31, 2004. Archived from the original on July 16, 2015. Retrieved June 9, 2010. ^ The Java Language Team. About Microsoft's 'Delegates' (White Paper). JavaSoft, Sun Microsystems, Inc. Archived from the original on June 27, 2012. In the summer of 1996, Sun was designing the precursor to what is now the event model of the AWT and the JavaBeans component architecture. Borland contributed greatly to this process. We looked very carefully at Delphi Object Pascal and built a working prototype of bound method references in order to understand their interaction with the Java programming language and its APIs. ^ Chapel spec (Acknowledgements) (PDF). Cray Inc. October 1, 2015. Archived (PDF) from the original on February 5, 2016. Retrieved January 14, 2016. ^ Gambas Documentation Introduction. Gambas Website. Archived from the original on October 9, 2017. Retrieved October 9, 2017. ^ Facebook Q&A: Hack brings static typing to PHP world. InfoWorld. March 26, 2014. Archived from the original on February 13, 2015. Retrieved January 11, 2015. ^ Write once, run anywhere?. Computer Weekly. May 2, 2002. Archived from the original on August 13, 2021. Retrieved July 27, 2009. ^ a b c 1.2 Design Goals of the Java Programming Language. Oracle. January 1, 1999. Archived from the original on January 23, 2013. Retrieved January 14, 2013. ^ Melanson, Mike (August 9, 2022). Don't call it a comeback: Why Java is still champ. GitHub. Archived from the original on August 25, 2023. Retrieved October 15, 2023. ^ The top programming languages. The State of the Octoverse. GitHub. Archived from the original on August 2, 2023. Retrieved October 15, 2023. ^ McMillan, Robert (August 1, 2013). Is Java Losing Its Mojo?. Wired. Archived from the original on February 15, 2017. Retrieved October 15, 2023. ^ Byous, Jon (c. 1998). Java technology: The early years. Sun Developer Network. Sun Microsystems. Archived from the original on April 20, 2005. Retrieved April 22, 2005. ^ Object-oriented programming The History of Java Technology. Sun Developer Network. c. 1995. Archived from the original on February 10, 2010. Retrieved April 30, 2010. ^ Murphy, Kieron (October 4, 1996). So why did they decide to call it Java?. JavaWorld. Archived from the original on July 13, 2020. Retrieved July 13, 2020. ^ Kabutz, Heinz; Once Upon an Oak Archived April 13, 2007, at the Wayback Machine. Artima. Retrieved April 29, 2007. ^ JAVASOFT SHIPS JAVA 1.0. Archived from the original on March 10, 2007. Retrieved May 13, 2018. ^ Object-oriented Programming with Java: Essentials and Applications. Tata McGraw-Hill Education. p. 34. ^ JSG – Java Study Group. open-std.org. Archived from the original on August 25, 2006. Retrieved August 2, 2006. ^ Why Java Was – Not – Standardized Twice (PDF). Archived (PDF) from the original on January 13, 2014. Retrieved June 3, 2018. ^ What is ECMA—and why Microsoft cares. ZDNet. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Java Community Process website. Jcp.org. May 24, 2010. Archived from the original on August 8, 2006. Retrieved June 9, 2010. ^ JAVAONE: Sun – The bulk of Java is open sourced. GrnLight.net. Archived from the original on May 27, 2014. Retrieved May 26, 2014. ^ Sun's Evolving Role as Java Evangelist. O'Reilly Media. Archived from the original on September 15, 2010. Retrieved August 2, 2009. ^ Oracle and Java. oracle.com. Oracle Corporation. Archived from the original on January 31, 2010. Retrieved August 23, 2010. Oracle has been a leading and substantive supporter of Java since its emergence in 1995 and takes on the new role as steward of Java technology with a relentless commitment to fostering a community of participation and transparency. ^ Gosling, James (April 9, 2010). Time to move on... On a New Road. Archived from the original on November 5, 2010. Retrieved November 16, 2011. ^ Topic, Dalibor. Moving to a Plugin-Free Web. Archived from the original on March 16, 2016. Retrieved March 15, 2016. ^ Learn About Java Technology. Oracle. Archived from the original on November 24, 2011. Retrieved November 21, 2011. ^ Why should I uninstall older versions of Java from my system?. Oracle. Archived from the original on February 12, 2018. Retrieved September 24, 2021. ^ Oracle Java SE Support Roadmap. Oracle. September 13, 2021. Archived from the original on September 19, 2021. Retrieved September 18, 2021. ^ Temurin™ Support; Adoptium. adoptium.net. Archived from the original on March 29, 2024. Retrieved March 29, 2024. ^ JAVASOFT SHIPS JAVA 1.0. sun.com. Archived from the original on March 10, 2007. Retrieved February 5, 2008. ^ Chander, Sharat. Introducing Java SE 11. oracle.com. Archived from the original on September 26, 2018. Retrieved September 26, 2018. ^ Chander, Sharat (September 15, 2020). The Arrival of Java 15!. Oracle. Archived from the original on September 16, 2020. Retrieved September 15, 2020. ^ JDK 21. openjdk.org. Archived from the original on September 20, 2023. Retrieved September 20, 2023. ^ JDK 24. ^ Java Card Overview. Oracle Technology Network. Oracle. Archived from the original on January 7, 2015. Retrieved December 18, 2014. ^ Java Platform, Micro Edition (Java ME). Oracle Technology Network. Oracle. Archived from the original on January 4, 2015. Retrieved December 18, 2014. ^ Java SE. Oracle Technology Network. Oracle. Archived from the original on December 24, 2014. Retrieved December 18, 2014. ^ Java Platform, Enterprise Edition (Java EE). Oracle Technology Network. Oracle. Archived from the original on December 17, 2014. Retrieved December 18, 2014. ^ Deep Dive Into the New Java JIT Compiler – Graal | Baeldung. www.baeldung.com. August 6, 2021. Archived from the original on October 28, 2021. Retrieved October 13, 2021. ^ Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?. Programmer Interview. Archived from the original on January 19, 2015. Retrieved January 19, 2015. ^ a b Jelovic, Dejan. Why Java will always be slower than C++. Archived from the original on February 11, 2008. Retrieved February 15, 2008. ^ Hundt, Robert. Loop Recognition in C++/Java/Go/Scala (PDF). Archived (PDF) from the original on November 16, 2011. Retrieved July 12, 2012. ^ Symantec's Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1. Archived from the original on June 28, 2010. Retrieved August 1, 2009. ^ Salcic, Zoran; Park, Heejong; Teich, Jürgen; Malik, Avinash; Nadeem, Muhammad (July 22, 2017). Noc-HMP: A Heterogeneous Multicore Processor for Embedded Systems Designed in SystemJ. ACM Transactions on Design Automation of Electronic Systems. 22 (4): 73. doi:10.1145/3073416. ISSN 1084-4309. S2CID 11150290. ^ a b c Bloch 2018, p. 26-28, §Item 7: Eliminate obsolete object references. ^ NullPointerException. Oracle. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Exceptions in Java. Artima.com. Archived from the original on January 21, 2009. Retrieved August 10, 2010. ^ Java HotSpot™ Virtual Machine Performance Enhancements. Oracle.com. Archived from the original on May 29, 2017. Retrieved April 26, 2017. ^ Operator Overloading (C# vs Java). C# for Java Developers. Microsoft. Archived from the original on January 7, 2015. Retrieved December 10, 2014. ^ Multiple Inheritance of State, Implementation, and Type. The Java Tutorials. Oracle. Archived from the original on November 9, 2014. Retrieved December 10, 2014. ^ Deprecated APIs, Features, and Options. Oracle. Archived from the original on June 19, 2019. Retrieved May 31, 2019. ^ Applet (Java Platform SE 7). Docs. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ What Is a JSP Page? - The Java EE 5 Tutorial. docs.oracle.com. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ Trail: Creating a GUI With JFC/Swing (The Java Tutorials). docs.oracle.com. Archived from the original on April 29, 2020. Retrieved May 1, 2020. ^ Removed from JDK 11, JavaFX 11 arrives as a standalone module. InfoWorld. September 20, 2018. Archived from the original on October 14, 2020. Retrieved October 13, 2020. ^ Getting Started with JavaFX: Hello World, JavaFX Style. JavaFX 2 Tutorials and Documentation. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ Java and Scala's Type Systems are Unsound (PDF). Archived (PDF) from the original on November 28, 2016. Retrieved February 20, 2017. ^ Arnold, Ken (June 27, 2005). Generics Considered Harmful. java.net. Archived from the original on October 10, 2007. Retrieved September 10, 2015. ^ Owens, Sean R. Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof). Archived from the original on February 20, 2009. Retrieved July 4, 2011. ^ Kahan, William (March 1, 1998). How Java's Floating-Point Hurts Everyone Everywhere – ACM 1998 Workshop on Java (Stanford) (PDF). Electrical Engineering & Computer Science, University of California at Berkeley. Archived (PDF) from the original on September 5, 2012. Retrieved June 4, 2011. ^ Have you checked the Java?. Archived from the original on September 21, 2012. Retrieved December 23, 2011. ^ Chidester, Ashlan. Java Persistence API, Jenkins and AWS. ISBN 9798224253951. Retrieved September 16, 2024. ^ Cadenhead, Rogers (November 20, 2017), Understanding How Java Programs Work, archived from the original on August 13, 2021, retrieved March 26, 2019 ^ Woolf, Nicky (May 26, 2016). Google wins six-year legal battle with Oracle over Android code copyright. The Guardian. ISSN 0261-3077. Archived from the original on March 26, 2019. Retrieved March 26, 2019. ^ a b Bloch 2018, pp. 1–4, § 1 Introduction. ^ java.nio (Java Platform SE 8). docs.oracle.com. ^ Java Networking. docs.oracle.com. ^ HttpClient (Java SE 11 & JDK 11). docs.oracle.com. ^ Collections Framework Overview. Java Documentation. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ Java Security Overview. Java Documentation. Oracle. Archived from the original on January 3, 2015. Retrieved December 18, 2014. ^ Trail: Internationalization. The Java Tutorials. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ How to Write Doc Comments for the Javadoc Tool. Oracle Technology Network. Oracle. Archived from the original on December 18, 2014. Retrieved December 18, 2014. ^ Niccolai, James (January 24, 2001). Sun, Microsoft settle Java lawsuit. JavaWorld. IDG News Service. Archived from the original on July 14, 2020. Retrieved July 13, 2020. ^ van Gurp, Jilles (November 13, 2007). Google Android: Initial Impressions and Criticism. Javalobby. Archived from the original on August 28, 2008. Retrieved March 7, 2009. Frankly, I don't understand why Google intends to ignore the vast amount of existing implementation out there. It seems like a bad case of not invented here to me. Ultimately, this will slow adoption. There are already too many Java platforms for the mobile world and this is yet another one ^ Mullin, Joe (May 7, 2012). Google guilty of infringement in Oracle trial; future legal headaches loom. Law & Disorder. Ars Technica. Archived from the original on May 8, 2012. Retrieved May 8, 2012. ^ Mullin, Joe (May 31, 2012). Google wins crucial API ruling, Oracle's case decimated. Ars Technica. Archived from the original on March 12, 2017. Retrieved June 1, 2012. ^ Rosenblatt, Seth (May 9, 2014). Court sides with Oracle over Android in Java patent appeal. CNET. Archived from the original on May 10, 2014. Retrieved May 10, 2014. ^ Mullin, Joe (May 26, 2016). Google beats Oracle—Android makes fair use of Java APIs. Ars Technica. Archived from the original on January 20, 2017. Retrieved May 26, 2016. ^ Farivar, Cyrus (March 27, 2018). Google's use of the Java API packages was not fair, appeals court rules. Ars Technica. Archived from the original on September 24, 2019. Retrieved August 6, 2019. ^ Lee, Timothy (April 23, 2019). Google asks Supreme Court to overrule disastrous ruling on API copyrights. Ars Technica. Archived from the original on April 23, 2019. Retrieved April 23, 2019. ^ Google LLC v. Oracle America, Inc 593 U. S. ____ (2021) (PDF). Archived (PDF) from the original on April 5, 2021. Retrieved April 6, 2021. Bloch, Joshua (2018). Effective Java: Programming Language Guide (Third ed.). Addison-Wesley. ISBN 978-0-13-468599-1. Gosling, James; Joy, Bill; Steele, Guy L. Jr.; Bracha, Gilad (2005). The Java Language Specification (3rd ed.). Addison-Wesley. ISBN 0-321-24678-0. Archived from the original on February 14, 2012. Retrieved February 8, 2019. Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad; Buckley, Alex (2014). The Java® Language Specification (PDF) (Java SE 8 ed.). Archived (PDF) from the original on October 21, 2014. Retrieved November 18, 2014. Lindholm, Tim; Yellin, Frank (1999). The Java Virtual Machine Specification (2nd ed.). Addison-Wesley. ISBN 0-201-43294-3. Archived from the original on September 25, 2011. Retrieved February 8, 2019. Java at Wikipedia's sister projects Definitions from WiktionaryMedia from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from WikiversityData from Wikidata Wikiversity has learning resources about Java Platform, Enterprise Edition/Java EE Tutorial OpenJDK, Oracle JDK builds, Adoptium vteJava (software platform)Platforms JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK GraalVM Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Pack200 Modules Major third-partytechnologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations JVM languages Java BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Oxygene CommunityConferences JavaOne Devoxx Organizations Apache Software Foundation Eclipse Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal vteSun MicrosystemsAcquired by OracleHardwareSystems Sun-1 Sun-2 Sun-3 Sun386i Sun-4 SPARCstation/server/center 1 2 4 5 10 20 IPC IPX LX ZX SPARCclassic Netra Ultra 1 2 5 10 24 30 60 80 Enterprise 10000 Blade server Blade workstation Fire 12K 15K E25K T2000 X4500 SPARC Enterprise JavaStation Java Workstation Ray Cobalt Qube Cobalt RaQ Processors SPARC MB86900 microSPARC SuperSPARC UltraSPARC UltraSPARC II UltraSPARC IIe UltraSPARC IIi Gemini UltraSPARC III UltraSPARC III Cu UltraSPARC IIIi UltraSPARC IV UltraSPARC T1 UltraSPARC T2 SPARC T3 SPARC T4 SPARC T5 Rock MAJC Other Sun4d SBus Fireplane LOM port MBus Modular Datacenter Neptune System Service Processor SPARC T series SPOT Ultra Port Architecture Visual Instruction Set Software SunOS Solaris NIS NIS+ NFS ZFS ZFS+ SunView NeWS OpenWindows Java Desktop System Studio Java StarOffice iPlanet Java System Sun Secure Global Desktop MySQL xVM GlassFish VirtualBox Storage StorageTek 5800 System StorageTek SL8500 Open Storage QFS ZFS Performance Cloud Constellation System Visualization System Grid Engine Lustre Research Sun Microsystems Laboratories picoJava Fortress Project Looking Glass Education BlueJ Global Education & Learning Community SCPs Community Common Development and Distribution License Java Community Process NetBeans OpenOffice.org OpenSolaris OpenSPARC OpenJDK Open Source University Meetup People Bill Joy Andy Bechtolsheim Scott McNealy Vinod Khosla Acquisitions Afara Websystems Cobalt Networks Gridware Lighthouse Design Montalvo Systems MySQL AB Pixo Procom Technology SavaJe StorageTek Tarantella Slogans The Network is the Computer Write once, run anywhere Category vteOracle CorporationCorporate directors Jeffrey Berg H. Raymond Bingham Michael Boskin Safra Catz Larry Ellison Héctor García-Molina Joseph Grundfest Jeffrey O. Henley Mark Hurd Jack F. Kemp Donald L. Lucas Naomi O. Seligman Acquisitions (list) Sun PeopleSoft Hyperion Siebel BEA JD Edwards RightNow Virtual Iron TimesTen Sunopsis NetSuite Cerner Databases Oracle Database MySQL InnoDB Berkeley DB TimesTen Rdb Essbase Programming languages Java PL/SQL IDEs JDeveloper Forms NetBeans Apex SQL Developer Developer Studio Middleware Fusion Middleware WebCenter SOA Suite WebLogic Server Coherence Tuxedo GlassFish Operating systems Oracle Linux Oracle Solaris Computer hardware Sun Fire SPARC (T-Series, Enterprise) StorageTek Computer appliances Oracle Exadata Oracle Exalogic Big Data Appliance Education and recognition Oracle Certification Program Category vteOracle free and open-source software (FOSS)SoftwareApplications OpenOffice.org VirtualBox Programming languages Java Databases Berkeley DB InnoDB MySQL Oracle NoSQL Database Frameworks anddevelopment tools DTrace GlassFish HotSpot Image Packaging System Java (software platform) Maxine Virtual Machine Memory Nashorn NetBeans OpenJDK VisualVM Operating systems OpenSolaris Oracle Linux Other Java Desktop System OCFS2 Oracle Grid Engine Oracle VM Server for x86 Related Google LLC v. Oracle America, Inc. vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherELMCIP",
    "paradigm": "Multi-paradigm : generic , object-oriented ( class-based ), functional , imperative , reflective , concurrent",
    "first_appeared": "May 23, 1995 ; 30 years ago ( 1995-05-23 )",
    "stable_release": "Java SE 24",
    "typing_discipline": "Static, strong, safe , nominative , manifest",
    "influenced_by": "CLU , Simula67 , Lisp , Smalltalk , Ada 83 , C++ , C# , Eiffel , Mesa , Modula-3 , Oberon , Objective-C , UCSD Pascal , Object Pascal",
    "influenced": "Ada 2005 , ArkTS , BeanShell , C# , Chapel , Clojure , ECMAScript , Fantom , Gambas , Groovy , Hack , Haxe , J# , JavaScript , JS++ , Kotlin , PHP , Python , Scala , Seed7 , Vala",
    "stable_release_date": "2025-03-18T00:00:00Z"
  },
  {
    "title": "Assembly language",
    "url": "https://en.wikipedia.org/wiki/Assembly_language",
    "assembly_language_syntax": "Assembly language uses a mnemonic to represent, e.g., each low-level machine instruction or opcode, each directive, typically also each architectural register, flag, etc. Some of the mnemonics may be built-in and some user-defined. Many operations require one or more operands in order to form a complete instruction. Most assemblers permit named constants, registers, and labels for program and memory locations, and can calculate expressions for operands. Thus, programmers are freed from tedious repetitive calculations and assembler programs are much more readable than machine code. Depending on the architecture, these elements may also be combined for specific instructions or addressing modes using offsets or other data as well as fixed addresses. Many assemblers offer additional mechanisms to facilitate program development, to control the assembly process, and to aid debugging. Some are column oriented, with specific fields in specific columns; this was very common for machines using punched cards in the 1950s and early 1960s. Some assemblers have free-form syntax, with fields separated by delimiters, e.g., punctuation, white space. Some assemblers are hybrid, with, e.g., labels, in a specific column and other fields separated by delimiters; this became more common than column-oriented syntax in the 1960s.",
    "terminology": "A macro assembler is an assembler that includes a macroinstruction facility so that (parameterized) assembly language text can be represented by a name, and that name can be used to insert the expanded text into other code. Open code refers to any assembler input outside of a macro definition. A cross assembler (see also cross compiler) is an assembler that is run on a computer or operating system (the host system) of a different type from the system on which the resulting code is to run (the target system). Cross-assembling facilitates the development of programs for systems that do not have the resources to support software development, such as an embedded system or a microcontroller. In such a case, the resulting object code must be transferred to the target system, via read-only memory (ROM, EPROM, etc.), a programmer (when the read-only memory is integrated in the device, as in microcontrollers), or a data link using either an exact bit-by-bit copy of the object code or a text-based representation of that code (such as Intel hex or Motorola S-record). A high-level assembler is a program that provides language abstractions more often associated with high-level languages, such as advanced control structures (IF/THEN/ELSE, DO CASE, etc.) and high-level abstract data types, including structures/records, unions, classes, and sets. A microassembler is a program that helps prepare a microprogram to control the low level operation of a computer. A meta-assembler is a program that accepts the syntactic and semantic description of an assembly language, and generates an assembler for that language, or that accepts an assembler source file along with such a description and assembles the source file in accordance with that description. Meta-Symbol assemblers for the SDS 9 Series and SDS Sigma series of computers are meta-assemblers. Sperry Univac also provided a Meta-Assembler for the UNIVAC 1100/2200 series. inline assembler (or embedded assembler) is assembler code contained within a high-level language program. This is most often used in systems programs which need direct access to the hardware.",
    "assembler": "An assembler program creates object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. This representation typically includes an operation code (opcode) as well as other control bits and data. The assembler also calculates constant expressions and resolves symbolic names for memory locations and other entities. The use of symbolic references is a key feature of assemblers, saving tedious calculations and manual address updates after program modifications. Most assemblers also include macro facilities for performing textual substitution – e.g., to generate common short sequences of instructions as inline, instead of called subroutines. Some assemblers may also be able to perform some simple types of instruction set-specific optimizations. One concrete example of this may be the ubiquitous x86 assemblers from various vendors. Called jump-sizing, most of them are able to perform jump-instruction replacements (long jumps replaced by short or relative jumps) in any number of passes, on request. Others may even do simple rearrangement or insertion of instructions, such as some assemblers for RISC architectures that can help optimize a sensible instruction scheduling to exploit the CPU pipeline as efficiently as possible. Assemblers have been available since the 1950s, as the first step above machine language and before high-level programming languages such as Fortran, Algol, COBOL and Lisp. There have also been several classes of translators and semi-automatic code generators with properties similar to both assembly and high-level languages, with Speedcode as perhaps one of the better-known examples. There may be several assemblers with different syntax for a particular CPU or instruction set architecture. For instance, an instruction to add memory data to a register in a x86-family processor might be add eax,[ebx], in original Intel syntax, whereas this would be written addl (%ebx),%eax in the AT&T syntax used by the GNU Assembler. Despite different appearances, different syntactic forms generally generate the same numeric machine code. A single assembler may also have different modes in order to support variations in syntactic forms as well as their exact semantic interpretations (such as FASM-syntax, TASM-syntax, ideal mode, etc., in the special case of x86 assembly programming).",
    "number_of_passes": "There are two types of assemblers based on how many passes through the source are needed (how many times the assembler reads the source) to produce the object file. One-pass assemblers process the source code once. For symbols used before they are defined, the assembler will emit errata after the eventual definition, telling the linker or the loader to patch the locations where the as yet undefined symbols had been used. Multi-pass assemblers create a table with all symbols and their values in the first passes, then use the table in later passes to generate code. In both cases, the assembler must be able to determine the size of each instruction on the initial passes in order to calculate the addresses of subsequent symbols. This means that if the size of an operation referring to an operand defined later depends on the type or distance of the operand, the assembler will make a pessimistic estimate when first encountering the operation, and if necessary, pad it with one or more no-operation instructions in a later pass or the errata. In an assembler with peephole optimization, addresses may be recalculated between passes to allow replacing pessimistic code with code tailored to the exact distance from the target. The original reason for the use of one-pass assemblers was memory size and speed of assembly – often a second pass would require storing the symbol table in memory (to handle forward references), rewinding and rereading the program source on tape, or rereading a deck of cards or punched paper tape. Later computers with much larger memories (especially disc storage), had the space to perform all necessary processing without such re-reading. The advantage of the multi-pass assembler is that the absence of errata makes the linking process (or the program load if the assembler directly produces executable code) faster. Example: in the following code snippet, a one-pass assembler would be able to determine the address of the backward reference BKWD when assembling statement S2, but would not be able to determine the address of the forward reference FWD when assembling the branch statement S1; indeed, FWD may be undefined. A two-pass assembler would determine both addresses in pass 1, so they would be known when generating code in pass 2. S1 B FWD ... FWD EQU * ... BKWD EQU * ... S2 B BKWD",
    "high_level_assemblers": "More sophisticated high-level assemblers provide language abstractions such as: High-level procedure/function declarations and invocations Advanced control structures (IF/THEN/ELSE, SWITCH) High-level abstract data types, including structures/records, unions, classes, and sets Sophisticated macro processing (although available on ordinary assemblers since the late 1950s for, e.g., the IBM 700 series and IBM 7000 series, and since the 1960s for IBM System/360 (S/360), amongst other machines) Object-oriented programming features such as classes, objects, abstraction, polymorphism, and inheritance See Language design below for more details.",
    "assembly_language": "A program written in assembly language consists of a series of mnemonic processor instructions and meta-statements (known variously as declarative operations, directives, pseudo-instructions, pseudo-operations and pseudo-ops), comments and data. Assembly language instructions usually consist of an opcode mnemonic followed by an operand, which might be a list of data, arguments or parameters. Some instructions may be implied, which means the data upon which the instruction operates is implicitly defined by the instruction itself—such an instruction does not take an operand. The resulting statement is translated by an assembler into machine language instructions that can be loaded into memory and executed. For example, the instruction below tells an x86/IA-32 processor to move an immediate 8-bit value into a register. The binary code for this instruction is 10110 followed by a 3-bit identifier for which register to use. The identifier for the AL register is 000, so the following machine code loads the AL register with the data 01100001. 10110000 01100001 This binary computer code can be made more human-readable by expressing it in hexadecimal as follows. B0 61 Here, B0 means Move a copy of the following value into AL, and 61 is a hexadecimal representation of the value 01100001, which is 97 in decimal. Assembly language for the 8086 family provides the mnemonic MOV (an abbreviation of move) for instructions such as this, so the machine code above can be written as follows in assembly language, complete with an explanatory comment if required, after the semicolon. This is much easier to read and to remember. MOV AL, 61h ; Load AL with 97 decimal (61 hex) In some assembly languages (including this one) the same mnemonic, such as MOV, may be used for a family of related instructions for loading, copying and moving data, whether these are immediate values, values in registers, or memory locations pointed to by values in registers or by immediate (a.k.a. direct) addresses. Other assemblers may use separate opcode mnemonics such as L for move memory to register, ST for move register to memory, LR for move register to register, MVI for move immediate operand to memory, etc. If the same mnemonic is used for different instructions, that means that the mnemonic corresponds to several different binary instruction codes, excluding data (e.g. the 61h in this example), depending on the operands that follow the mnemonic. For example, for the x86/IA-32 CPUs, the Intel assembly language syntax MOV AL, AH represents an instruction that moves the contents of register AH into register AL. The[nb 3] hexadecimal form of this instruction is: 88 E0 The first byte, 88h, identifies a move between a byte-sized register and either another register or memory, and the second byte, E0h, is encoded (with three bit-fields) to specify that both operands are registers, the source is AH, and the destination is AL. In a case like this where the same mnemonic can represent more than one binary instruction, the assembler determines which instruction to generate by examining the operands. In the first example, the operand 61h is a valid hexadecimal numeric constant and is not a valid register name, so only the B0 instruction can be applicable. In the second example, the operand AH is a valid register name and not a valid numeric constant (hexadecimal, decimal, octal, or binary), so only the 88 instruction can be applicable. Assembly languages are always designed so that this sort of lack of ambiguity is universally enforced by their syntax. For example, in the Intel x86 assembly language, a hexadecimal constant must start with a numeral digit, so that the hexadecimal number 'A' (equal to decimal ten) would be written as 0Ah or 0AH, not AH, specifically so that it cannot appear to be the name of register AH. (The same rule also prevents ambiguity with the names of registers BH, CH, and DH, as well as with any user-defined symbol that ends with the letter H and otherwise contains only characters that are hexadecimal digits, such as the word BEACH.) Returning to the original example, while the x86 opcode 10110000 (B0) copies an 8-bit value into the AL register, 10110001 (B1) moves it into CL and 10110010 (B2) does so into DL. Assembly language examples for these follow. MOV AL, 1h ; Load AL with immediate value 1 MOV CL, 2h ; Load CL with immediate value 2 MOV DL, 3h ; Load DL with immediate value 3 The syntax of MOV can also be more complex as the following examples show. MOV EAX, [EBX] ; Move the 4 bytes in memory at the address contained in EBX into EAX MOV [ESI+EAX], CL ; Move the contents of CL into the byte at address ESI+EAX MOV DS, DX ; Move the contents of DX into segment register DS In each case, the MOV mnemonic is translated directly into one of the opcodes 88-8C, 8E, A0-A3, B0-BF, C6 or C7 by an assembler, and the programmer normally does not have to know or remember which. Transforming assembly language into machine code is the job of an assembler, and the reverse can at least partially be achieved by a disassembler. Unlike high-level languages, there is a one-to-one correspondence between many simple assembly statements and machine language instructions. However, in some cases, an assembler may provide pseudoinstructions (essentially macros) which expand into several machine language instructions to provide commonly needed functionality. For example, for a machine that lacks a branch if greater or equal instruction, an assembler may provide a pseudoinstruction that expands to the machine's set if less than and branch if zero (on the result of the set instruction). Most full-featured assemblers also provide a rich macro language (discussed below) which is used by vendors and programmers to generate more complex code and data sequences. Since the information about pseudoinstructions and macros defined in the assembler environment is not present in the object program, a disassembler cannot reconstruct the macro and pseudoinstruction invocations but can only disassemble the actual machine instructions that the assembler generated from those abstract assembly-language entities. Likewise, since comments in the assembly language source file are ignored by the assembler and have no effect on the object code it generates, a disassembler is always completely unable to recover source comments. Each computer architecture has its own machine language. Computers differ in the number and type of operations they support, in the different sizes and numbers of registers, and in the representations of data in storage. While most general-purpose computers are able to carry out essentially the same functionality, the ways they do so differ; the corresponding assembly languages reflect these differences. Multiple sets of mnemonics or assembly-language syntax may exist for a single instruction set, typically instantiated in different assembler programs. In these cases, the most popular one is usually that supplied by the CPU manufacturer and used in its documentation. Two examples of CPUs that have two different sets of mnemonics are the Intel 8080 family and the Intel 8086/8088. Because Intel claimed copyright on its assembly language mnemonics (on each page of their documentation published in the 1970s and early 1980s, at least), some companies that independently produced CPUs compatible with Intel instruction sets invented their own mnemonics. The Zilog Z80 CPU, an enhancement of the Intel 8080A, supports all the 8080A instructions plus many more; Zilog invented an entirely new assembly language, not only for the new instructions but also for all of the 8080A instructions. For example, where Intel uses the mnemonics MOV, MVI, LDA, STA, LXI, LDAX, STAX, LHLD, and SHLD for various data transfer instructions, the Z80 assembly language uses the mnemonic LD for all of them. A similar case is the NEC V20 and V30 CPUs, enhanced copies of the Intel 8086 and 8088, respectively. Like Zilog with the Z80, NEC invented new mnemonics for all of the 8086 and 8088 instructions, to avoid accusations of infringement of Intel's copyright. (It is questionable whether such copyrights can be valid, and later CPU companies such as AMD[nb 4] and Cyrix republished Intel's x86/IA-32 instruction mnemonics exactly with neither permission nor legal penalty.) It is doubtful whether in practice many people who programmed the V20 and V30 actually wrote in NEC's assembly language rather than Intel's; since any two assembly languages for the same instruction set architecture are isomorphic (somewhat like English and Pig Latin), there is no requirement to use a manufacturer's own published assembly language with that manufacturer's products.",
    "basic_elements": "There is a large degree of diversity in the way the authors of assemblers categorize statements and in the nomenclature that they use. In particular, some describe anything other than a machine mnemonic or extended mnemonic as a pseudo-operation (pseudo-op). A typical assembly language consists of 3 types of instruction statements that are used to define program operations: Opcode mnemonics Data definitions Assembly directives",
    "opcode_mnemonics_and_extended_mnemonics": "Instructions (statements) in assembly language are generally very simple, unlike those in high-level languages. Generally, a mnemonic is a symbolic name for a single executable machine language instruction (an opcode), and there is at least one opcode mnemonic defined for each machine language instruction. Each instruction typically consists of an operation or opcode plus zero or more operands. Most instructions refer to a single value or a pair of values. Operands can be immediate (value coded in the instruction itself), registers specified in the instruction or implied, or the addresses of data located elsewhere in storage. This is determined by the underlying processor architecture: the assembler merely reflects how this architecture works. Extended mnemonics are often used to specify a combination of an opcode with a specific operand, e.g., the System/360 assemblers use B as an extended mnemonic for BC with a mask of 15 and NOP (NO OPeration – do nothing for one step) for BC with a mask of 0. Extended mnemonics are often used to support specialized uses of instructions, often for purposes not obvious from the instruction name. For example, many CPU's do not have an explicit NOP instruction, but do have instructions that can be used for the purpose. In 8086 CPUs the instruction xchg ax,ax is used for nop, with nop being a pseudo-opcode to encode the instruction xchg ax,ax. Some disassemblers recognize this and will decode the xchg ax,ax instruction as nop. Similarly, IBM assemblers for System/360 and System/370 use the extended mnemonics NOP and NOPR for BC and BCR with zero masks. For the SPARC architecture, these are known as synthetic instructions. Some assemblers also support simple built-in macro-instructions that generate two or more machine instructions. For instance, with some Z80 assemblers the instruction ld hl,bc is recognized to generate ld l,c followed by ld h,b. These are sometimes known as pseudo-opcodes. Mnemonics are arbitrary symbols; in 1985 the IEEE published Standard 694 for a uniform set of mnemonics to be used by all assemblers. The standard has since been withdrawn.",
    "data_directives": "There are instructions used to define data elements to hold data and variables. They define the type of data, the length and the alignment of data. These instructions can also define whether the data is available to outside programs (programs assembled separately) or only to the program in which the data section is defined. Some assemblers classify these as pseudo-ops.",
    "assembly_directives": "Assembly directives, also called pseudo-opcodes, pseudo-operations or pseudo-ops, are commands given to an assembler directing it to perform operations other than assembling instructions. Directives affect how the assembler operates and may affect the object code, the symbol table, the listing file, and the values of internal assembler parameters. Sometimes the term pseudo-opcode is reserved for directives that generate object code, such as those that generate data. The names of pseudo-ops often start with a dot to distinguish them from machine instructions. Pseudo-ops can make the assembly of the program dependent on parameters input by a programmer, so that one program can be assembled in different ways, perhaps for different applications. Or, a pseudo-op can be used to manipulate presentation of a program to make it easier to read and maintain. Another common use of pseudo-ops is to reserve storage areas for run-time data and optionally initialize their contents to known values. Symbolic assemblers let programmers associate arbitrary names (labels or symbols) with memory locations and various constants. Usually, every constant and variable is given a name so instructions can reference those locations by name, thus promoting self-documenting code. In executable code, the name of each subroutine is associated with its entry point, so any calls to a subroutine can use its name. Inside subroutines, GOTO destinations are given labels. Some assemblers support local symbols which are often lexically distinct from normal symbols (e.g., the use of 10$ as a GOTO destination). Some assemblers, such as NASM, provide flexible symbol management, letting programmers manage different namespaces, automatically calculate offsets within data structures, and assign labels that refer to literal values or the result of simple computations performed by the assembler. Labels can also be used to initialize constants and variables with relocatable addresses. Assembly languages, like most other computer languages, allow comments to be added to program source code that will be ignored during assembly. Judicious commenting is essential in assembly language programs, as the meaning and purpose of a sequence of binary machine instructions can be difficult to determine. The raw (uncommented) assembly language generated by compilers or disassemblers is quite difficult to read when changes must be made.",
    "macros": "Many assemblers support predefined macros, and others support programmer-defined (and repeatedly re-definable) macros involving sequences of text lines in which variables and constants are embedded. The macro definition is most commonly[nb 5] a mixture of assembler statements, e.g., directives, symbolic machine instructions, and templates for assembler statements. This sequence of text lines may include opcodes or directives. Once a macro has been defined its name may be used in place of a mnemonic. When the assembler processes such a statement, it replaces the statement with the text lines associated with that macro, then processes them as if they existed in the source code file (including, in some assemblers, expansion of any macros existing in the replacement text). Macros in this sense date to IBM autocoders of the 1950s. Macro assemblers typically have directives to, e.g., define macros, define variables, set variables to the result of an arithmetic, logical or string expression, iterate, conditionally generate code. Some of those directives may be restricted to use within a macro definition, e.g., MEXIT in HLASM, while others may be permitted within open code (outside macro definitions), e.g., AIF and COPY in HLASM. In assembly language, the term macro represents a more comprehensive concept than it does in some other contexts, such as the pre-processor in the C programming language, where its #define directive typically is used to create short single line macros. Assembler macro instructions, like macros in PL/I and some other languages, can be lengthy programs by themselves, executed by interpretation by the assembler during assembly. Since macros can have 'short' names but expand to several or indeed many lines of code, they can be used to make assembly language programs appear to be far shorter, requiring fewer lines of source code, as with higher level languages. They can also be used to add higher levels of structure to assembly programs, optionally introduce embedded debugging code via parameters and other similar features. Macro assemblers often allow macros to take parameters. Some assemblers include quite sophisticated macro languages, incorporating such high-level language elements as optional parameters, symbolic variables, conditionals, string manipulation, and arithmetic operations, all usable during the execution of a given macro, and allowing macros to save context or exchange information. Thus a macro might generate numerous assembly language instructions or data definitions, based on the macro arguments. This could be used to generate record-style data structures or unrolled loops, for example, or could generate entire algorithms based on complex parameters. For instance, a sort macro could accept the specification of a complex sort key and generate code crafted for that specific key, not needing the run-time tests that would be required for a general procedure interpreting the specification. An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher-level language since such programmers are not working with a computer's lowest-level conceptual elements. Underlining this point, macros were used to implement an early virtual machine in SNOBOL4 (1967), which was written in the SNOBOL Implementation Language (SIL), an assembly language for a virtual machine. The target machine would translate this to its native code using a macro assembler. This allowed a high degree of portability for the time. Macros were used to customize large scale software systems for specific customers in the mainframe era and were also used by customer personnel to satisfy their employers' needs by making specific versions of manufacturer operating systems. This was done, for example, by systems programmers working with IBM's Conversational Monitor System / Virtual Machine (VM/CMS) and with IBM's real time transaction processing add-ons, Customer Information Control System CICS, and ACP/TPF, the airline/financial system that began in the 1970s and still runs many large computer reservation systems (CRS) and credit card systems today. It is also possible to use solely the macro processing abilities of an assembler to generate code written in completely different languages, for example, to generate a version of a program in COBOL using a pure macro assembler program containing lines of COBOL code inside assembly time operators instructing the assembler to generate arbitrary code. IBM OS/360 uses macros to perform system generation. The user specifies options by coding a series of assembler macros. Assembling these macros generates a job stream to build the system, including job control language and utility control statements. This is because, as was realized in the 1960s, the concept of macro processing is independent of the concept of assembly, the former being in modern terms more word processing, text processing, than generating object code. The concept of macro processing appeared, and appears, in the C programming language, which supports preprocessor instructions to set variables, and make conditional tests on their values. Unlike certain previous macro processors inside assemblers, the C preprocessor is not Turing-complete because it lacks the ability to either loop or go to, the latter allowing programs to loop. Despite the power of macro processing, it fell into disuse in many high level languages (major exceptions being C, C++ and PL/I) while remaining a perennial for assemblers. Macro parameter substitution is strictly by name: at macro processing time, the value of a parameter is textually substituted for its name. The most famous class of bugs resulting was the use of a parameter that itself was an expression and not a simple name when the macro writer expected a name. In the macro: foo: macro a load a*b the intention was that the caller would provide the name of a variable, and the global variable or constant b would be used to multiply a. If foo is called with the parameter a-c, the macro expansion of load a-c*b occurs. To avoid any possible ambiguity, users of macro processors can parenthesize formal parameters inside macro definitions, or callers can parenthesize the input parameters.",
    "support_for_structured_programming": "Packages of macros have been written providing structured programming elements to encode execution flow. The earliest example of this approach was in the Concept-14 macro set, originally proposed by Harlan Mills (March 1970), and implemented by Marvin Kessler at IBM's Federal Systems Division, which provided IF/ELSE/ENDIF and similar control flow blocks for OS/360 assembler programs. This was a way to reduce or eliminate the use of GOTO operations in assembly code, one of the main factors causing spaghetti code in assembly language. This approach was widely accepted in the early 1980s (the latter days of large-scale assembly language use). IBM's High Level Assembler Toolkit includes such a macro package. Another design was A-Natural, a stream-oriented assembler for 8080/Z80 processors from Whitesmiths Ltd. (developers of the Unix-like Idris operating system, and what was reported to be the first commercial C compiler). The language was classified as an assembler because it worked with raw machine elements such as opcodes, registers, and memory references; but it incorporated an expression syntax to indicate execution order. Parentheses and other special symbols, along with block-oriented structured programming constructs, controlled the sequence of the generated instructions. A-natural was built as the object language of a C compiler, rather than for hand-coding, but its logical syntax won some fans. There has been little apparent demand for more sophisticated assemblers since the decline of large-scale assembly language development. In spite of that, they are still being developed and applied in cases where resource constraints or peculiarities in the target system's architecture prevent the effective use of higher-level languages. Assemblers with a strong macro engine allow structured programming via macros, such as the switch macro provided with the Masm32 package (this code is a complete program): include \\masm32\\include\\masm32rt.inc ; use the Masm32 library .code demomain: REPEAT 20 switch rv(nrandom, 9) ; generate a number between 0 and 8 mov ecx, 7 case 0 print case 0 case ecx ; in contrast to most other programming languages, print case 7 ; the Masm32 switch allows variable cases case 1 .. 3 .if eax==1 print case 1 .elseif eax==2 print case 2 .else print cases 1 to 3: other .endif case 4, 6, 8 print cases 4, 6 or 8 default mov ebx, 19 ; print 20 stars .Repeat print * dec ebx .Until Sign? ; loop until the sign flag is set endsw print chr$(13, 10) ENDM exit end demomain",
    "use_of_assembly_language": "When the stored-program computer was introduced programs were written in machine code, and loaded into the computer from punched paper tape or toggled directly into memory from console switches.[citation needed] Kathleen Booth is credited with inventing assembly language based on theoretical work she began in 1947, while working on the ARC2 at Birkbeck, University of London following consultation by Andrew Booth (later her husband) with mathematician John von Neumann and physicist Herman Goldstine at the Institute for Advanced Study. In late 1948, the Electronic Delay Storage Automatic Calculator (EDSAC) had an assembler (named initial orders) integrated into its bootstrap program. It used one-letter mnemonics developed by David Wheeler, who is credited by the IEEE Computer Society as the creator of the first assembler. Reports on the EDSAC introduced the term assembly for the process of combining fields into an instruction word. SOAP (Symbolic Optimal Assembly Program) was an assembly language for the IBM 650 computer written by Stan Poley in 1955. Assembly languages eliminated much of the error-prone, tedious, and time-consuming first-generation programming needed with the earliest computers, freeing programmers from tedium such as remembering numeric codes and calculating addresses. They were once widely used for all sorts of programming. By the late 1950s their use had largely been supplanted by higher-level languages in the search for improved programming productivity. Today, assembly language is still used for direct hardware manipulation, access to specialized processor instructions, or to address critical performance issues. Typical uses are device drivers, low-level embedded systems, and real-time systems (see § Current usage). Numerous programs were written entirely in assembly language. The Burroughs MCP (1961) was the first computer for which an operating system was not developed entirely in assembly language; it was written in Executive Systems Problem Oriented Language (ESPOL), an Algol dialect. Many commercial applications were written in assembly language as well, including a large amount of the IBM mainframe software developed by large corporations. COBOL, FORTRAN and some PL/I eventually displaced assembly language, although a number of large organizations retained assembly-language application infrastructures well into the 1990s. Assembly language was the primary development language for 8-bit home computers such as the Apple II, Atari 8-bit computers, ZX Spectrum, and Commodore 64. Interpreted BASIC on these systems did not offer maximum execution speed and full use of facilities to take full advantage of the available hardware. Assembly language was the default choice for programming 8-bit consoles such as the Atari 2600 and Nintendo Entertainment System. Key software for IBM PC compatibles such as MS-DOS, Turbo Pascal, and the Lotus 1-2-3 spreadsheet was written in assembly language. As computer speed grew exponentially, assembly language became a tool for speeding up parts of programs, such as the rendering of Doom, rather than a dominant development language. In the 1990s, assembly language was used to maximise performance from systems such as the Sega Saturn, and as the primary language for arcade hardware using the TMS34010 integrated CPU/GPU such as Mortal Kombat and NBA Jam.",
    "current_usage": "There has been debate over the usefulness and performance of assembly language relative to high-level languages. Although assembly language has specific niche uses where it is important (see below), there are other tools for optimization. As of July 2017[update], the TIOBE index of programming language popularity ranks assembly language at 11, ahead of Visual Basic, for example. Assembler can be used to optimize for speed or optimize for size. In the case of speed optimization, modern optimizing compilers are claimed to render high-level languages into code that can run as fast as hand-written assembly, despite some counter-examples. The complexity of modern processors and memory sub-systems makes effective optimization increasingly difficult for compilers and assembly programmers alike. Increasing processor performance has meant that most CPUs sit idle most of the time, with delays caused by predictable bottlenecks such as cache misses, I/O operations and paging, making raw code execution speed a non-issue for many programmers. There are still certain computer programming domains in which the use of assembly programming is more common: Writing code for systems with older processors[clarification needed] that have limited high-level language options such as the Atari 2600, Commodore 64, and graphing calculators. Programs for these computers of the 1970s and 1980s are often written in the context of demoscene or retrogaming subcultures. Code that must interact directly with the hardware, for example in device drivers and interrupt handlers. In an embedded processor or DSP, high-repetition interrupts require the shortest number of cycles per interrupt, such as an interrupt that occurs 1000 or 10000 times a second. Programs that need to use processor-specific instructions not implemented in a compiler. A common example is the bitwise rotation instruction at the core of many encryption algorithms, as well as querying the parity of a byte or the 4-bit carry of an addition. Stand-alone executables that are required to execute without recourse to the run-time components or libraries associated with a high-level language, such as the firmware for telephones, automobile fuel and ignition systems, air-conditioning control systems,and security systems. Programs with performance-sensitive inner loops, where assembly language provides optimization opportunities that are difficult to achieve in a high-level language. For example, linear algebra with BLAS or discrete cosine transformation (e.g. SIMD assembly version from x264). Programs that create vectorized functions for programs in higher-level languages such as C. In the higher-level language this is sometimes aided by compiler intrinsic functions which map directly to SIMD mnemonics, but nevertheless result in a one-to-one assembly conversion specific for the given vector processor. Real-time programs such as simulations, flight navigation systems, and medical equipment. For example, in a fly-by-wire system, telemetry must be interpreted and acted upon within strict time constraints. Such systems must eliminate sources of unpredictable delays, which may be created by interpreted languages, automatic garbage collection, paging operations, or preemptive multitasking. Choosing assembly or lower-level languages for such systems gives programmers greater visibility and control over processing details. Cryptographic algorithms that must always take strictly the same time to execute, preventing timing attacks. Video encoders and decoders such as rav1e (an encoder for AV1) and dav1d (the reference decoder for AV1) contain assembly to leverage AVX2 and ARM Neon instructions when available. Modify and extend legacy code written for IBM mainframe computers. Situations where complete control over the environment is required, in extremely high-security situations where nothing can be taken for granted. Computer viruses, bootloaders, certain device drivers, or other items very close to the hardware or low-level operating system. Instruction set simulators for monitoring, tracing and debugging where additional overhead is kept to a minimum. Situations where no high-level language exists, on a new or specialized processor for which no cross compiler is available. Reverse engineering and modifying program files such as: existing binaries that may or may not have originally been written in a high-level language, for example when trying to recreate programs for which source code is not available or has been lost, or cracking copy protection of proprietary software. Video games (also termed ROM hacking), which is possible via several methods. The most widely employed method is altering program code at the assembly language level. Assembly language is still taught in most computer science and electronic engineering programs. Although few programmers today regularly work with assembly language as a tool, the underlying concepts remain important. Such fundamental topics as binary arithmetic, memory allocation, stack processing, character set encoding, interrupt processing, and compiler design would be hard to study in detail without a grasp of how a computer operates at the hardware level. Since a computer's behaviour is fundamentally defined by its instruction set, the logical way to learn such concepts is to study an assembly language. Most modern computers have similar instruction sets. Therefore, studying a single assembly language is sufficient to learn the basic concepts, recognize situations where the use of assembly language might be appropriate, and to see how efficient executable code can be created from high-level languages.",
    "typical_applications": "Assembly language is typically used in a system's boot code, the low-level code that initializes and tests the system hardware prior to booting the operating system and is often stored in ROM. (BIOS on IBM-compatible PC systems and CP/M is an example.) Assembly language is often used for low-level code, for instance for operating system kernels, which cannot rely on the availability of pre-existing system calls and must indeed implement them for the particular processor architecture on which the system will be running. Some compilers translate high-level languages into assembly first before fully compiling, allowing the assembly code to be viewed for debugging and optimization purposes. Some compilers for relatively low-level languages, such as Pascal or C, allow the programmer to embed assembly language directly in the source code (so called inline assembly). Programs using such facilities can then construct abstractions using different assembly language on each hardware platform. The system's portable code can then use these processor-specific components through a uniform interface. Assembly language is useful in reverse engineering. Many programs are distributed only in machine code form which is straightforward to translate into assembly language by a disassembler, but more difficult to translate into a higher-level language through a decompiler. Tools such as the Interactive Disassembler make extensive use of disassembly for such a purpose. This technique is used by hackers to crack commercial software, and competitors to produce software with similar results from competing companies. Assembly language is used to enhance speed of execution, especially in early personal computers with limited processing power and RAM. Assemblers can be used to generate blocks of data, with no high-level language overhead, from formatted and commented source code, to be used by other code.",
    "see_also": "Computer programming portal Compiler Comparison of assemblers Disassembler Hexadecimal Instruction set architecture Little man computer – an educational computer model with a base-10 assembly language Nibble Typed assembly language",
    "notes": "^ Other than meta-assemblers ^ However, that does not mean that the assembler programs implementing those languages are universal. ^ This is one of two redundant forms of this instruction that operate identically. The 8086 and several other CPUs from the late 1970s/early 1980s have redundancies in their instruction sets, because it was simpler for engineers to design these CPUs (to fit on silicon chips of limited sizes) with the redundant codes than to eliminate them (see don't-care terms). Each assembler will typically generate only one of two or more redundant instruction encodings, but a disassembler will usually recognize any of them. ^ AMD manufactured second-source Intel 8086, 8088, and 80286 CPUs, and perhaps 8080A and 8085A CPUs, under license from Intel, but starting with the 80386, Intel refused to share their x86 CPU designs with anyone—AMD sued about this for breach of contract—and AMD designed, made, and sold 32-bit and 64-bit x86-family CPUs without Intel's help or endorsement. ^ In 7070 Autocoder, a macro definition is a 7070 macro generator program that the assembler calls; Autocoder provides special macros for macro generators to use.",
    "references": "^ a b Assembler language. High Level Assembler for z/OS & z/VM & z/VSE Language Reference Version 1 Release 6. IBM. 2014 [1990]. SC26-4940-06. ^ Assembly: Review (PDF). Computer Science and Engineering. College of Engineering, Ohio State University. 2016. Archived (PDF) from the original on 2020-03-24. Retrieved 2020-03-24. ^ Archer, Benjamin (November 2016). Assembly Language For Students. North Charleston, South Carolina, US: CreateSpace Independent Publishing. ISBN 978-1-5403-7071-6. Assembly language may also be called symbolic machine code. ^ Streib, James T. (2020). Guide to Assembly Language. Undergraduate Topics in Computer Science. Cham: Springer International Publishing. doi:10.1007/978-3-030-35639-2. ISBN 978-3-030-35638-5. ISSN 1863-7310. S2CID 195930813. Programming in assembly language has the same benefits as programming in machine language, except it is easier. ^ Saxon, James A.; Plette, William S. (1962). Programming the IBM 1401, a self-instructional programmed manual. Englewood Cliffs, New Jersey, US: Prentice-Hall. LCCN 62-20615. (NB. Use of the term assembly program.) ^ Kornelis, A. F. (2010) [2003]. High Level Assembler – Opcodes overview, Assembler Directives. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ^ Macro instructions. High Level Assembler for z/OS & z/VM & z/VSE Language Reference Version 1 Release 6. IBM. 2014 [1990]. SC26-4940-06. ^ Booth, Andrew D; Britten, Kathleen HV (1947). Coding for A.R.C. (PDF). Institute for Advanced Study, Princeton. Retrieved 2022-11-04. ^ Wilkes, Maurice Vincent; Wheeler, David John; Gill, Stanley J. (1951). The preparation of programs for an electronic digital computer (Reprint 1982 ed.). Tomash Publishers. ISBN 978-0-93822803-5. OCLC 313593586. {{cite book}}: ISBN / Date incompatibility (help) ^ Fairhead, Harry (2017-11-16). History of Computer Languages - The Classical Decade, 1950s. I Programmer. Archived from the original on 2020-01-02. Retrieved 2020-03-06. ^ How do assembly languages depend on operating systems?. Stack Exchange. Stack Exchange Inc. 2011-07-28. Archived from the original on 2020-03-24. Retrieved 2020-03-24. (NB. System calls often vary, e.g. for MVS vs. VSE vs. VM/CMS; the binary/executable formats for different operating systems may also vary.) ^ Austerlitz, Howard (2003). Computer Programming Languages. Data Acquisition Techniques Using PCs. Elsevier. pp. 326–360. doi:10.1016/b978-012068377-2/50013-9. ISBN 9780120683772. Assembly language (or Assembler) is a compiled, low-level computer language. It is processor-dependent since it basically translates the Assembler's mnemonics directly into the commands a particular CPU understands, on a one-to-one basis. These Assembler mnemonics are the instruction set for that processor. ^ Carnes, Beau (2022-04-27). Learn Assembly Language Programming with ARM. freeCodeCamp.org. Retrieved 2022-06-21. Assembly language is often specific to a particular computer architecture so there are multiple types of assembly languages. ARM is an increasingly popular assembly language. ^ Brooks, Frederick P. (1986). No Silver Bullet—Essence and Accident in Software Engineering. Proceedings of the IFIP Tenth World Computing Conference. pp. 1069–1076. ^ Anguiano, Ricardo. linux kernel mainline 4.9 sloccount.txt. Gist. Retrieved 2022-05-04. ^ Daintith, John, ed. (2019). meta-assembler. A Dictionary of Computing. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ^ Xerox Data Systems (Oct 1975). Xerox Meta-Symbol Sigma 5-9 Computers Language and Operations Reference Manual (PDF). p. vi. Archived (PDF) from the original on 2022-10-09. Retrieved 2020-06-07. Used as a meta-assembler, it enables the user to design his own programming languages and to generate processors for such languages with a minimum of effort. ^ Sperry Univac Computer Systems (1977). Sperry Univac Computer Systems Meta-Assembler (MASM) Programmer Reference (PDF). Archived (PDF) from the original on 2022-10-09. Retrieved 2020-06-07. ^ How to Use Inline Assembly Language in C Code. gnu.org. Retrieved 2020-11-05. ^ a b c d Salomon, David (February 1993) [1992]. Written at California State University, Northridge, California, US. Chivers, Ian D. (ed.). Assemblers and Loaders (PDF). Ellis Horwood Series In Computers And Their Applications (1 ed.). Chicester, West Sussex, UK: Ellis Horwood Limited / Simon & Schuster International Group. pp. 7, 237–238. ISBN 0-13-052564-2. Archived (PDF) from the original on 2020-03-23. Retrieved 2008-10-01. (xiv+294+4 pages) ^ Finlayson, Ian; Davis, Brandon; Gavin, Peter; Uh, Gang-Ryung; Whalley, David; Själander, Magnus; Tyson, Gary (2013). Improving processor efficiency by statically pipelining instructions. Proceedings of the 14th ACM SIGPLAN/SIGBED conference on Languages, compilers and tools for embedded systems. pp. 33–44. doi:10.1145/2465554.2465559. ISBN 9781450320856. S2CID 8015812. ^ Beck, Leland L. (1996). 2. System Software: An Introduction to Systems Programming. Addison Wesley. ^ a b Hyde, Randall (September 2003) [1996-09-30]. Foreword (Why would anyone learn this stuff?) / Chapter 12 – Classes and Objects. The Art of Assembly Language (2 ed.). No Starch Press. ISBN 1-886411-97-2. Archived from the original on 2010-05-06. Retrieved 2020-06-22. Errata: (928 pages) ^ a b c d Intel Architecture Software Developer's Manual, Volume 2: Instruction Set Reference (PDF). Vol. 2. Intel Corporation. 1999. Archived from the original (PDF) on 2009-06-11. Retrieved 2010-11-18. ^ Ferrari, Adam; Batson, Alan; Lack, Mike; Jones, Anita (2018-11-19) [Spring 2006]. Evans, David (ed.). x86 Assembly Guide. Computer Science CS216: Program and Data Representation. University of Virginia. Archived from the original on 2020-03-24. Retrieved 2010-11-18. ^ The SPARC Architecture Manual, Version 8 (PDF). SPARC International. 1992. Archived from the original (PDF) on 2011-12-10. Retrieved 2011-12-10. ^ Moxham, James (1996). ZINT Z80 Interpreter. Z80 Op Codes for ZINT. Archived from the original on 2020-03-24. Retrieved 2013-07-21. ^ Hyde, Randall. Chapter 8. MASM: Directives & Pseudo-Opcodes (PDF). The Art of Computer Programming. Archived (PDF) from the original on 2020-03-24. Retrieved 2011-03-19. ^ 1401 Autocoder System, Program #1401-AU-037, Version 3, Modification Level 11 (PDF). 1965-12-07. Retrieved 2024-01-21. The following minor restriction or limitation is in effect with regard to the use of 1401 Autocoder when coding macro instructions ... ^ Griswold, Ralph E. (1972). Chapter 1. The Macro Implementation of SNOBOL4. San Francisco, California, US: W. H. Freeman and Company. ISBN 0-7167-0447-1. ^ Macros (C/C++), MSDN Library for Visual Studio 2008. Microsoft Corp. 2012-11-16. Archived from the original on 2020-03-24. Retrieved 2010-06-22. ^ Kessler, Marvin M. (1970-12-18). *Concept* Report 14 - Implementation of Macros To Permit Structured Programming in OS/360. MVS Software: Concept 14 Macros. Gaithersburg, Maryland, US: International Business Machines Corporation. Archived from the original on 2020-03-24. Retrieved 2009-05-25. ^ High Level Assembler Toolkit Feature Increases Programmer Productivity. Announcement Letters. IBM. 1995-12-12. A95-1432. Archived from the original on 2023-03-07. ^ Whitesmiths Ltd (1980-07-15). A-Natural Language Reference Manual. ^ assembly language: Definition and Much More from Answers.com. answers.com. Archived from the original on 2009-06-08. Retrieved 2008-06-19. ^ Provinciano, Brian (2005-04-17). NESHLA: The High Level, Open Source, 6502 Assembler for the Nintendo Entertainment System. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ^ Dufresne, Steven (2018-08-21). Kathleen Booth: Assembling Early Computers While Inventing Assembly. Archived from the original on 2020-03-24. Retrieved 2019-02-10. ^ a b Booth, Andrew Donald; Britten, Kathleen Hylda Valerie (September 1947) [August 1947]. General considerations in the design of an all purpose electronic digital computer (PDF) (2 ed.). The Institute for Advanced Study, Princeton, New Jersey, US: Birkbeck College, London. Archived (PDF) from the original on 2020-03-24. Retrieved 2019-02-10. The non-original ideas, contained in the following text, have been derived from a number of sources, ... It is felt, however, that acknowledgement should be made to Prof. John von Neumann and to Dr. Herman Goldstein for many fruitful discussions ... ^ Campbell-Kelly, Martin (April 1982). The Development of Computer Programming in Britain (1945 to 1955). IEEE Annals of the History of Computing. 4 (2): 121–139. doi:10.1109/MAHC.1982.10016. S2CID 14861159. ^ Campbell-Kelly, Martin (1980). Programming the EDSAC: Early Programming Activity at the University of Cambridge. IEEE Annals of the History of Computing. 2 (1): 7–36. doi:10.1109/MAHC.1980.10009. ^ 1985 Computer Pioneer Award 'For assembly language programming' David Wheeler. 2018-03-27. ^ Wilkes, Maurice Vincent (1949). The EDSAC – an Electronic Calculating Machine. Journal of Scientific Instruments. 26 (12): 385–391. Bibcode:1949JScI...26..385W. doi:10.1088/0950-7671/26/12/301. ^ da Cruz, Frank (2019-05-17). The IBM 650 Magnetic Drum Calculator. Computing History - A Chronology of Computing. Columbia University. Archived from the original on 2020-02-15. Retrieved 2012-01-17. ^ Abell, John C. Oct. 15, 1956: Fortran Forever Changes Computing's Fortunes. Wired. ISSN 1059-1028. Retrieved 2024-03-02. ^ Collen, Morris F. (March–April 1994). The Origins of Informatics. Journal of the American Medical Informatics Association. 1 (2): 96–97. doi:10.1136/jamia.1994.95236152. PMC 116189. PMID 7719803. ^ Pettus, Sam (2008-01-10). SegaBase Volume 6 - Saturn. Archived from the original on 2008-07-13. Retrieved 2008-07-25. ^ Kauler, Barry (1997-01-09). Windows Assembly Language and Systems Programming: 16- and 32-Bit Low-Level Programming for the PC and Windows. CRC Press. ISBN 978-1-48227572-8. Retrieved 2020-03-24. Always the debate rages about the applicability of assembly language in our modern programming world. ^ Hsieh, Paul (2020-03-24) [2016, 1996]. Programming Optimization. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ... design changes tend to affect performance more than ... one should not skip straight to assembly language until ... ^ TIOBE Index. TIOBE Software. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ^ Rusling, David A. (1999) [1996]. Chapter 2 Software Basics. The Linux Kernel. Archived from the original on 2020-03-24. Retrieved 2012-03-11. ^ a b Markoff, John Gregory (2005-11-28). Writing the Fastest Code, by Hand, for Fun: A Human Computer Keeps Speeding Up Chips. The New York Times. Seattle, Washington, US. Archived from the original on 2020-03-23. Retrieved 2010-03-04. ^ Bit-field-badness. hardwarebug.org. 2010-01-30. Archived from the original on 2010-02-05. Retrieved 2010-03-04. ^ GCC makes a mess. hardwarebug.org. 2009-05-13. Archived from the original on 2010-03-16. Retrieved 2010-03-04. ^ Hyde, Randall. The Great Debate. Archived from the original on 2008-06-16. Retrieved 2008-07-03. ^ Code sourcery fails again. hardwarebug.org. 2010-01-30. Archived from the original on 2010-04-02. Retrieved 2010-03-04. ^ Click, Cliff; Goetz, Brian. A Crash Course in Modern Hardware. Archived from the original on 2020-03-24. Retrieved 2014-05-01. ^ 68K Programming in Fargo II. Archived from the original on 2008-07-02. Retrieved 2008-07-03. ^ BLAS Benchmark-August2008. eigen.tuxfamily.org. 2008-08-01. Archived from the original on 2020-03-24. Retrieved 2010-03-04. ^ x264.git/common/x86/dct-32.asm. git.videolan.org. 2010-09-29. Archived from the original on 2012-03-04. Retrieved 2010-09-29. ^ rav1e/README.md at v0.6.3. GitHub. Archived from the original on 2023-02-22. Retrieved 2023-02-21. ^ README.md · 1.1.0 · VideoLAN / dav1d. 2023-02-13. Archived from the original on 2023-02-22. Retrieved 2023-02-21. ^ Bosworth, Edward (2016). Chapter 1 – Why Study Assembly Language. www.edwardbosworth.com. Archived from the original on 2020-03-24. Retrieved 2016-06-01. ^ z/OS Version 2 Release 3 DFSMS Macro Instructions for Data Sets (PDF). IBM. 2019-02-15. Archived (PDF) from the original on 2021-06-25. Retrieved 2021-09-14. ^ Paul, Matthias R. (2001) [1996], Specification and reference documentation for NECPINW, NECPINW.CPI - DOS code page switching driver for NEC Pinwriters (2.08 ed.), FILESPEC.TXT, NECPINW.ASM, EUROFONT.INC from NECPI208.ZIP, archived from the original on 2017-09-10, retrieved 2013-04-22 ^ Paul, Matthias R. (2002-05-13). [fd-dev] mkeyb. freedos-dev. Archived from the original on 2018-09-10. Retrieved 2018-09-10.",
    "further_reading": "Bartlett, Jonathan (2004). Programming from the Ground Up - An introduction to programming using linux assembly language. Bartlett Publishing. ISBN 0-9752838-4-7. Archived from the original on 2020-03-24. Retrieved 2020-03-24. Britton, Robert (2003). MIPS Assembly Language Programming. Prentice Hall. ISBN 0-13-142044-5. Calingaert, Peter (1979) [1978-11-05]. Written at University of North Carolina at Chapel Hill. Horowitz, Ellis (ed.). Assemblers, Compilers, and Program Translation. Computer software engineering series (1st printing, 1st ed.). Potomac, Maryland, US: Computer Science Press, Inc. ISBN 0-914894-23-4. ISSN 0888-2088. LCCN 78-21905. Retrieved 2020-03-20. (2+xiv+270+6 pages) Duntemann, Jeff (2000). Assembly Language Step-by-Step. Wiley. ISBN 0-471-37523-3. Hyde, Randall (2010). The Art of Assembly Language (2nd ed.). No Starch Press. ISBN 978-1593272074. Jorgensen, Ed. x86-64 Assembly Language Programming with Ubuntu (PDF). Kann, Charles W. (2015). Introduction to MIPS Assembly Language Programming. Archived from the original on 2020-03-24. Retrieved 2020-03-24. Kann, Charles W. (2021). Introduction to Assembly Language Programming: From Soup to Nuts: ARM Edition. Open Educational Resources. Norton, Peter; Socha, John (1986). Peter Norton's Assembly Language Book for the IBM PC. New York, US: Brady Books. Singer, Michael (1980). PDP-11. Assembler Language Programming and Machine Organization. New York, US: John Wiley & Sons. Sweetman, Dominic (1999). See MIPS Run. Morgan Kaufmann Publishers. ISBN 1-55860-410-3. Waldron, John (1998). Introduction to RISC Assembly Language Programming. Addison Wesley. ISBN 0-201-39828-1. ASM Community Book. 2009. Archived from the original on 2013-05-30. Retrieved 2013-05-30. (An online book full of helpful ASM info, tutorials and code examples by the ASM Community, archived at the internet archive.)",
    "external_links": "Assembly language at Wikipedia's sister projects Definitions from WiktionaryMedia from CommonsNews from WikinewsTextbooks from WikibooksResources from Wikiversity Assembly Language and Learning Assembly Language pages on WikiWikiWeb Assembly Language Programming Examples vteTypes of programming languagesLevel Machine Assembly Compiled Interpreted Low-level High-level Very high-level Esoteric Generation First Second Third Fourth Fifth vteEmbedded systemsGeneral terms ASIC Board support package Bootloader Consumer electronics Cross compiler Embedded database Embedded hypervisor Embedded OS Embedded software FPGA IoT Memory footprint Microcontroller Single-board computer Raspberry Pi SoC Firmware and controls Firmware Custom firmware Proprietary firmware Closed platform Crippleware Defective by Design Hacking of consumer electronics Homebrew (video games) iOS jailbreaking PlayStation 3 Jailbreak Rooting (Android) UEFI Vendor lock-in Boot loaders U-Boot Barebox Software libraries uClibc dietlibc Embedded GLIBC lwIP musl Programming tools Almquist shell BitBake Buildroot BusyBox OpenEmbedded Stand-alone shell Toybox Yocto Project Operating systems Linux on embedded systems Linux for mobile devices Light-weight Linux distribution Real-time operating system Windows IoT Win CE Programming languages Ada Assembly language CAPL Embedded C Embedded C++ Embedded Java MISRA C MicroPython Lightweight browsers List of open-source hardware Open-source robotics Authority control databases: National GermanyUnited StatesFranceBnF dataCzech RepublicIsrael Portal: Computer programming",
    "document": "Assembly language uses a mnemonic to represent, e.g., each low-level machine instruction or opcode, each directive, typically also each architectural register, flag, etc. Some of the mnemonics may be built-in and some user-defined. Many operations require one or more operands in order to form a complete instruction. Most assemblers permit named constants, registers, and labels for program and memory locations, and can calculate expressions for operands. Thus, programmers are freed from tedious repetitive calculations and assembler programs are much more readable than machine code. Depending on the architecture, these elements may also be combined for specific instructions or addressing modes using offsets or other data as well as fixed addresses. Many assemblers offer additional mechanisms to facilitate program development, to control the assembly process, and to aid debugging. Some are column oriented, with specific fields in specific columns; this was very common for machines using punched cards in the 1950s and early 1960s. Some assemblers have free-form syntax, with fields separated by delimiters, e.g., punctuation, white space. Some assemblers are hybrid, with, e.g., labels, in a specific column and other fields separated by delimiters; this became more common than column-oriented syntax in the 1960s. A macro assembler is an assembler that includes a macroinstruction facility so that (parameterized) assembly language text can be represented by a name, and that name can be used to insert the expanded text into other code. Open code refers to any assembler input outside of a macro definition. A cross assembler (see also cross compiler) is an assembler that is run on a computer or operating system (the host system) of a different type from the system on which the resulting code is to run (the target system). Cross-assembling facilitates the development of programs for systems that do not have the resources to support software development, such as an embedded system or a microcontroller. In such a case, the resulting object code must be transferred to the target system, via read-only memory (ROM, EPROM, etc.), a programmer (when the read-only memory is integrated in the device, as in microcontrollers), or a data link using either an exact bit-by-bit copy of the object code or a text-based representation of that code (such as Intel hex or Motorola S-record). A high-level assembler is a program that provides language abstractions more often associated with high-level languages, such as advanced control structures (IF/THEN/ELSE, DO CASE, etc.) and high-level abstract data types, including structures/records, unions, classes, and sets. A microassembler is a program that helps prepare a microprogram to control the low level operation of a computer. A meta-assembler is a program that accepts the syntactic and semantic description of an assembly language, and generates an assembler for that language, or that accepts an assembler source file along with such a description and assembles the source file in accordance with that description. Meta-Symbol assemblers for the SDS 9 Series and SDS Sigma series of computers are meta-assemblers. Sperry Univac also provided a Meta-Assembler for the UNIVAC 1100/2200 series. inline assembler (or embedded assembler) is assembler code contained within a high-level language program. This is most often used in systems programs which need direct access to the hardware. An assembler program creates object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents. This representation typically includes an operation code (opcode) as well as other control bits and data. The assembler also calculates constant expressions and resolves symbolic names for memory locations and other entities. The use of symbolic references is a key feature of assemblers, saving tedious calculations and manual address updates after program modifications. Most assemblers also include macro facilities for performing textual substitution – e.g., to generate common short sequences of instructions as inline, instead of called subroutines. Some assemblers may also be able to perform some simple types of instruction set-specific optimizations. One concrete example of this may be the ubiquitous x86 assemblers from various vendors. Called jump-sizing, most of them are able to perform jump-instruction replacements (long jumps replaced by short or relative jumps) in any number of passes, on request. Others may even do simple rearrangement or insertion of instructions, such as some assemblers for RISC architectures that can help optimize a sensible instruction scheduling to exploit the CPU pipeline as efficiently as possible. Assemblers have been available since the 1950s, as the first step above machine language and before high-level programming languages such as Fortran, Algol, COBOL and Lisp. There have also been several classes of translators and semi-automatic code generators with properties similar to both assembly and high-level languages, with Speedcode as perhaps one of the better-known examples. There may be several assemblers with different syntax for a particular CPU or instruction set architecture. For instance, an instruction to add memory data to a register in a x86-family processor might be add eax,[ebx], in original Intel syntax, whereas this would be written addl (%ebx),%eax in the AT&T syntax used by the GNU Assembler. Despite different appearances, different syntactic forms generally generate the same numeric machine code. A single assembler may also have different modes in order to support variations in syntactic forms as well as their exact semantic interpretations (such as FASM-syntax, TASM-syntax, ideal mode, etc., in the special case of x86 assembly programming). There are two types of assemblers based on how many passes through the source are needed (how many times the assembler reads the source) to produce the object file. One-pass assemblers process the source code once. For symbols used before they are defined, the assembler will emit errata after the eventual definition, telling the linker or the loader to patch the locations where the as yet undefined symbols had been used. Multi-pass assemblers create a table with all symbols and their values in the first passes, then use the table in later passes to generate code. In both cases, the assembler must be able to determine the size of each instruction on the initial passes in order to calculate the addresses of subsequent symbols. This means that if the size of an operation referring to an operand defined later depends on the type or distance of the operand, the assembler will make a pessimistic estimate when first encountering the operation, and if necessary, pad it with one or more no-operation instructions in a later pass or the errata. In an assembler with peephole optimization, addresses may be recalculated between passes to allow replacing pessimistic code with code tailored to the exact distance from the target. The original reason for the use of one-pass assemblers was memory size and speed of assembly – often a second pass would require storing the symbol table in memory (to handle forward references), rewinding and rereading the program source on tape, or rereading a deck of cards or punched paper tape. Later computers with much larger memories (especially disc storage), had the space to perform all necessary processing without such re-reading. The advantage of the multi-pass assembler is that the absence of errata makes the linking process (or the program load if the assembler directly produces executable code) faster. Example: in the following code snippet, a one-pass assembler would be able to determine the address of the backward reference BKWD when assembling statement S2, but would not be able to determine the address of the forward reference FWD when assembling the branch statement S1; indeed, FWD may be undefined. A two-pass assembler would determine both addresses in pass 1, so they would be known when generating code in pass 2. S1 B FWD ... FWD EQU * ... BKWD EQU * ... S2 B BKWD More sophisticated high-level assemblers provide language abstractions such as: High-level procedure/function declarations and invocations Advanced control structures (IF/THEN/ELSE, SWITCH) High-level abstract data types, including structures/records, unions, classes, and sets Sophisticated macro processing (although available on ordinary assemblers since the late 1950s for, e.g., the IBM 700 series and IBM 7000 series, and since the 1960s for IBM System/360 (S/360), amongst other machines) Object-oriented programming features such as classes, objects, abstraction, polymorphism, and inheritance See Language design below for more details. A program written in assembly language consists of a series of mnemonic processor instructions and meta-statements (known variously as declarative operations, directives, pseudo-instructions, pseudo-operations and pseudo-ops), comments and data. Assembly language instructions usually consist of an opcode mnemonic followed by an operand, which might be a list of data, arguments or parameters. Some instructions may be implied, which means the data upon which the instruction operates is implicitly defined by the instruction itself—such an instruction does not take an operand. The resulting statement is translated by an assembler into machine language instructions that can be loaded into memory and executed. For example, the instruction below tells an x86/IA-32 processor to move an immediate 8-bit value into a register. The binary code for this instruction is 10110 followed by a 3-bit identifier for which register to use. The identifier for the AL register is 000, so the following machine code loads the AL register with the data 01100001. 10110000 01100001 This binary computer code can be made more human-readable by expressing it in hexadecimal as follows. B0 61 Here, B0 means Move a copy of the following value into AL, and 61 is a hexadecimal representation of the value 01100001, which is 97 in decimal. Assembly language for the 8086 family provides the mnemonic MOV (an abbreviation of move) for instructions such as this, so the machine code above can be written as follows in assembly language, complete with an explanatory comment if required, after the semicolon. This is much easier to read and to remember. MOV AL, 61h ; Load AL with 97 decimal (61 hex) In some assembly languages (including this one) the same mnemonic, such as MOV, may be used for a family of related instructions for loading, copying and moving data, whether these are immediate values, values in registers, or memory locations pointed to by values in registers or by immediate (a.k.a. direct) addresses. Other assemblers may use separate opcode mnemonics such as L for move memory to register, ST for move register to memory, LR for move register to register, MVI for move immediate operand to memory, etc. If the same mnemonic is used for different instructions, that means that the mnemonic corresponds to several different binary instruction codes, excluding data (e.g. the 61h in this example), depending on the operands that follow the mnemonic. For example, for the x86/IA-32 CPUs, the Intel assembly language syntax MOV AL, AH represents an instruction that moves the contents of register AH into register AL. The[nb 3] hexadecimal form of this instruction is: 88 E0 The first byte, 88h, identifies a move between a byte-sized register and either another register or memory, and the second byte, E0h, is encoded (with three bit-fields) to specify that both operands are registers, the source is AH, and the destination is AL. In a case like this where the same mnemonic can represent more than one binary instruction, the assembler determines which instruction to generate by examining the operands. In the first example, the operand 61h is a valid hexadecimal numeric constant and is not a valid register name, so only the B0 instruction can be applicable. In the second example, the operand AH is a valid register name and not a valid numeric constant (hexadecimal, decimal, octal, or binary), so only the 88 instruction can be applicable. Assembly languages are always designed so that this sort of lack of ambiguity is universally enforced by their syntax. For example, in the Intel x86 assembly language, a hexadecimal constant must start with a numeral digit, so that the hexadecimal number 'A' (equal to decimal ten) would be written as 0Ah or 0AH, not AH, specifically so that it cannot appear to be the name of register AH. (The same rule also prevents ambiguity with the names of registers BH, CH, and DH, as well as with any user-defined symbol that ends with the letter H and otherwise contains only characters that are hexadecimal digits, such as the word BEACH.) Returning to the original example, while the x86 opcode 10110000 (B0) copies an 8-bit value into the AL register, 10110001 (B1) moves it into CL and 10110010 (B2) does so into DL. Assembly language examples for these follow. MOV AL, 1h ; Load AL with immediate value 1 MOV CL, 2h ; Load CL with immediate value 2 MOV DL, 3h ; Load DL with immediate value 3 The syntax of MOV can also be more complex as the following examples show. MOV EAX, [EBX] ; Move the 4 bytes in memory at the address contained in EBX into EAX MOV [ESI+EAX], CL ; Move the contents of CL into the byte at address ESI+EAX MOV DS, DX ; Move the contents of DX into segment register DS In each case, the MOV mnemonic is translated directly into one of the opcodes 88-8C, 8E, A0-A3, B0-BF, C6 or C7 by an assembler, and the programmer normally does not have to know or remember which. Transforming assembly language into machine code is the job of an assembler, and the reverse can at least partially be achieved by a disassembler. Unlike high-level languages, there is a one-to-one correspondence between many simple assembly statements and machine language instructions. However, in some cases, an assembler may provide pseudoinstructions (essentially macros) which expand into several machine language instructions to provide commonly needed functionality. For example, for a machine that lacks a branch if greater or equal instruction, an assembler may provide a pseudoinstruction that expands to the machine's set if less than and branch if zero (on the result of the set instruction). Most full-featured assemblers also provide a rich macro language (discussed below) which is used by vendors and programmers to generate more complex code and data sequences. Since the information about pseudoinstructions and macros defined in the assembler environment is not present in the object program, a disassembler cannot reconstruct the macro and pseudoinstruction invocations but can only disassemble the actual machine instructions that the assembler generated from those abstract assembly-language entities. Likewise, since comments in the assembly language source file are ignored by the assembler and have no effect on the object code it generates, a disassembler is always completely unable to recover source comments. Each computer architecture has its own machine language. Computers differ in the number and type of operations they support, in the different sizes and numbers of registers, and in the representations of data in storage. While most general-purpose computers are able to carry out essentially the same functionality, the ways they do so differ; the corresponding assembly languages reflect these differences. Multiple sets of mnemonics or assembly-language syntax may exist for a single instruction set, typically instantiated in different assembler programs. In these cases, the most popular one is usually that supplied by the CPU manufacturer and used in its documentation. Two examples of CPUs that have two different sets of mnemonics are the Intel 8080 family and the Intel 8086/8088. Because Intel claimed copyright on its assembly language mnemonics (on each page of their documentation published in the 1970s and early 1980s, at least), some companies that independently produced CPUs compatible with Intel instruction sets invented their own mnemonics. The Zilog Z80 CPU, an enhancement of the Intel 8080A, supports all the 8080A instructions plus many more; Zilog invented an entirely new assembly language, not only for the new instructions but also for all of the 8080A instructions. For example, where Intel uses the mnemonics MOV, MVI, LDA, STA, LXI, LDAX, STAX, LHLD, and SHLD for various data transfer instructions, the Z80 assembly language uses the mnemonic LD for all of them. A similar case is the NEC V20 and V30 CPUs, enhanced copies of the Intel 8086 and 8088, respectively. Like Zilog with the Z80, NEC invented new mnemonics for all of the 8086 and 8088 instructions, to avoid accusations of infringement of Intel's copyright. (It is questionable whether such copyrights can be valid, and later CPU companies such as AMD[nb 4] and Cyrix republished Intel's x86/IA-32 instruction mnemonics exactly with neither permission nor legal penalty.) It is doubtful whether in practice many people who programmed the V20 and V30 actually wrote in NEC's assembly language rather than Intel's; since any two assembly languages for the same instruction set architecture are isomorphic (somewhat like English and Pig Latin), there is no requirement to use a manufacturer's own published assembly language with that manufacturer's products. There is a large degree of diversity in the way the authors of assemblers categorize statements and in the nomenclature that they use. In particular, some describe anything other than a machine mnemonic or extended mnemonic as a pseudo-operation (pseudo-op). A typical assembly language consists of 3 types of instruction statements that are used to define program operations: Opcode mnemonics Data definitions Assembly directives Instructions (statements) in assembly language are generally very simple, unlike those in high-level languages. Generally, a mnemonic is a symbolic name for a single executable machine language instruction (an opcode), and there is at least one opcode mnemonic defined for each machine language instruction. Each instruction typically consists of an operation or opcode plus zero or more operands. Most instructions refer to a single value or a pair of values. Operands can be immediate (value coded in the instruction itself), registers specified in the instruction or implied, or the addresses of data located elsewhere in storage. This is determined by the underlying processor architecture: the assembler merely reflects how this architecture works. Extended mnemonics are often used to specify a combination of an opcode with a specific operand, e.g., the System/360 assemblers use B as an extended mnemonic for BC with a mask of 15 and NOP (NO OPeration – do nothing for one step) for BC with a mask of 0. Extended mnemonics are often used to support specialized uses of instructions, often for purposes not obvious from the instruction name. For example, many CPU's do not have an explicit NOP instruction, but do have instructions that can be used for the purpose. In 8086 CPUs the instruction xchg ax,ax is used for nop, with nop being a pseudo-opcode to encode the instruction xchg ax,ax. Some disassemblers recognize this and will decode the xchg ax,ax instruction as nop. Similarly, IBM assemblers for System/360 and System/370 use the extended mnemonics NOP and NOPR for BC and BCR with zero masks. For the SPARC architecture, these are known as synthetic instructions. Some assemblers also support simple built-in macro-instructions that generate two or more machine instructions. For instance, with some Z80 assemblers the instruction ld hl,bc is recognized to generate ld l,c followed by ld h,b. These are sometimes known as pseudo-opcodes. Mnemonics are arbitrary symbols; in 1985 the IEEE published Standard 694 for a uniform set of mnemonics to be used by all assemblers. The standard has since been withdrawn. There are instructions used to define data elements to hold data and variables. They define the type of data, the length and the alignment of data. These instructions can also define whether the data is available to outside programs (programs assembled separately) or only to the program in which the data section is defined. Some assemblers classify these as pseudo-ops. Assembly directives, also called pseudo-opcodes, pseudo-operations or pseudo-ops, are commands given to an assembler directing it to perform operations other than assembling instructions. Directives affect how the assembler operates and may affect the object code, the symbol table, the listing file, and the values of internal assembler parameters. Sometimes the term pseudo-opcode is reserved for directives that generate object code, such as those that generate data. The names of pseudo-ops often start with a dot to distinguish them from machine instructions. Pseudo-ops can make the assembly of the program dependent on parameters input by a programmer, so that one program can be assembled in different ways, perhaps for different applications. Or, a pseudo-op can be used to manipulate presentation of a program to make it easier to read and maintain. Another common use of pseudo-ops is to reserve storage areas for run-time data and optionally initialize their contents to known values. Symbolic assemblers let programmers associate arbitrary names (labels or symbols) with memory locations and various constants. Usually, every constant and variable is given a name so instructions can reference those locations by name, thus promoting self-documenting code. In executable code, the name of each subroutine is associated with its entry point, so any calls to a subroutine can use its name. Inside subroutines, GOTO destinations are given labels. Some assemblers support local symbols which are often lexically distinct from normal symbols (e.g., the use of 10$ as a GOTO destination). Some assemblers, such as NASM, provide flexible symbol management, letting programmers manage different namespaces, automatically calculate offsets within data structures, and assign labels that refer to literal values or the result of simple computations performed by the assembler. Labels can also be used to initialize constants and variables with relocatable addresses. Assembly languages, like most other computer languages, allow comments to be added to program source code that will be ignored during assembly. Judicious commenting is essential in assembly language programs, as the meaning and purpose of a sequence of binary machine instructions can be difficult to determine. The raw (uncommented) assembly language generated by compilers or disassemblers is quite difficult to read when changes must be made. Many assemblers support predefined macros, and others support programmer-defined (and repeatedly re-definable) macros involving sequences of text lines in which variables and constants are embedded. The macro definition is most commonly[nb 5] a mixture of assembler statements, e.g., directives, symbolic machine instructions, and templates for assembler statements. This sequence of text lines may include opcodes or directives. Once a macro has been defined its name may be used in place of a mnemonic. When the assembler processes such a statement, it replaces the statement with the text lines associated with that macro, then processes them as if they existed in the source code file (including, in some assemblers, expansion of any macros existing in the replacement text). Macros in this sense date to IBM autocoders of the 1950s. Macro assemblers typically have directives to, e.g., define macros, define variables, set variables to the result of an arithmetic, logical or string expression, iterate, conditionally generate code. Some of those directives may be restricted to use within a macro definition, e.g., MEXIT in HLASM, while others may be permitted within open code (outside macro definitions), e.g., AIF and COPY in HLASM. In assembly language, the term macro represents a more comprehensive concept than it does in some other contexts, such as the pre-processor in the C programming language, where its #define directive typically is used to create short single line macros. Assembler macro instructions, like macros in PL/I and some other languages, can be lengthy programs by themselves, executed by interpretation by the assembler during assembly. Since macros can have 'short' names but expand to several or indeed many lines of code, they can be used to make assembly language programs appear to be far shorter, requiring fewer lines of source code, as with higher level languages. They can also be used to add higher levels of structure to assembly programs, optionally introduce embedded debugging code via parameters and other similar features. Macro assemblers often allow macros to take parameters. Some assemblers include quite sophisticated macro languages, incorporating such high-level language elements as optional parameters, symbolic variables, conditionals, string manipulation, and arithmetic operations, all usable during the execution of a given macro, and allowing macros to save context or exchange information. Thus a macro might generate numerous assembly language instructions or data definitions, based on the macro arguments. This could be used to generate record-style data structures or unrolled loops, for example, or could generate entire algorithms based on complex parameters. For instance, a sort macro could accept the specification of a complex sort key and generate code crafted for that specific key, not needing the run-time tests that would be required for a general procedure interpreting the specification. An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher-level language since such programmers are not working with a computer's lowest-level conceptual elements. Underlining this point, macros were used to implement an early virtual machine in SNOBOL4 (1967), which was written in the SNOBOL Implementation Language (SIL), an assembly language for a virtual machine. The target machine would translate this to its native code using a macro assembler. This allowed a high degree of portability for the time. Macros were used to customize large scale software systems for specific customers in the mainframe era and were also used by customer personnel to satisfy their employers' needs by making specific versions of manufacturer operating systems. This was done, for example, by systems programmers working with IBM's Conversational Monitor System / Virtual Machine (VM/CMS) and with IBM's real time transaction processing add-ons, Customer Information Control System CICS, and ACP/TPF, the airline/financial system that began in the 1970s and still runs many large computer reservation systems (CRS) and credit card systems today. It is also possible to use solely the macro processing abilities of an assembler to generate code written in completely different languages, for example, to generate a version of a program in COBOL using a pure macro assembler program containing lines of COBOL code inside assembly time operators instructing the assembler to generate arbitrary code. IBM OS/360 uses macros to perform system generation. The user specifies options by coding a series of assembler macros. Assembling these macros generates a job stream to build the system, including job control language and utility control statements. This is because, as was realized in the 1960s, the concept of macro processing is independent of the concept of assembly, the former being in modern terms more word processing, text processing, than generating object code. The concept of macro processing appeared, and appears, in the C programming language, which supports preprocessor instructions to set variables, and make conditional tests on their values. Unlike certain previous macro processors inside assemblers, the C preprocessor is not Turing-complete because it lacks the ability to either loop or go to, the latter allowing programs to loop. Despite the power of macro processing, it fell into disuse in many high level languages (major exceptions being C, C++ and PL/I) while remaining a perennial for assemblers. Macro parameter substitution is strictly by name: at macro processing time, the value of a parameter is textually substituted for its name. The most famous class of bugs resulting was the use of a parameter that itself was an expression and not a simple name when the macro writer expected a name. In the macro: foo: macro a load a*b the intention was that the caller would provide the name of a variable, and the global variable or constant b would be used to multiply a. If foo is called with the parameter a-c, the macro expansion of load a-c*b occurs. To avoid any possible ambiguity, users of macro processors can parenthesize formal parameters inside macro definitions, or callers can parenthesize the input parameters. Packages of macros have been written providing structured programming elements to encode execution flow. The earliest example of this approach was in the Concept-14 macro set, originally proposed by Harlan Mills (March 1970), and implemented by Marvin Kessler at IBM's Federal Systems Division, which provided IF/ELSE/ENDIF and similar control flow blocks for OS/360 assembler programs. This was a way to reduce or eliminate the use of GOTO operations in assembly code, one of the main factors causing spaghetti code in assembly language. This approach was widely accepted in the early 1980s (the latter days of large-scale assembly language use). IBM's High Level Assembler Toolkit includes such a macro package. Another design was A-Natural, a stream-oriented assembler for 8080/Z80 processors from Whitesmiths Ltd. (developers of the Unix-like Idris operating system, and what was reported to be the first commercial C compiler). The language was classified as an assembler because it worked with raw machine elements such as opcodes, registers, and memory references; but it incorporated an expression syntax to indicate execution order. Parentheses and other special symbols, along with block-oriented structured programming constructs, controlled the sequence of the generated instructions. A-natural was built as the object language of a C compiler, rather than for hand-coding, but its logical syntax won some fans. There has been little apparent demand for more sophisticated assemblers since the decline of large-scale assembly language development. In spite of that, they are still being developed and applied in cases where resource constraints or peculiarities in the target system's architecture prevent the effective use of higher-level languages. Assemblers with a strong macro engine allow structured programming via macros, such as the switch macro provided with the Masm32 package (this code is a complete program): include \\masm32\\include\\masm32rt.inc ; use the Masm32 library .code demomain: REPEAT 20 switch rv(nrandom, 9) ; generate a number between 0 and 8 mov ecx, 7 case 0 print case 0 case ecx ; in contrast to most other programming languages, print case 7 ; the Masm32 switch allows variable cases case 1 .. 3 .if eax==1 print case 1 .elseif eax==2 print case 2 .else print cases 1 to 3: other .endif case 4, 6, 8 print cases 4, 6 or 8 default mov ebx, 19 ; print 20 stars .Repeat print * dec ebx .Until Sign? ; loop until the sign flag is set endsw print chr$(13, 10) ENDM exit end demomain When the stored-program computer was introduced programs were written in machine code, and loaded into the computer from punched paper tape or toggled directly into memory from console switches.[citation needed] Kathleen Booth is credited with inventing assembly language based on theoretical work she began in 1947, while working on the ARC2 at Birkbeck, University of London following consultation by Andrew Booth (later her husband) with mathematician John von Neumann and physicist Herman Goldstine at the Institute for Advanced Study. In late 1948, the Electronic Delay Storage Automatic Calculator (EDSAC) had an assembler (named initial orders) integrated into its bootstrap program. It used one-letter mnemonics developed by David Wheeler, who is credited by the IEEE Computer Society as the creator of the first assembler. Reports on the EDSAC introduced the term assembly for the process of combining fields into an instruction word. SOAP (Symbolic Optimal Assembly Program) was an assembly language for the IBM 650 computer written by Stan Poley in 1955. Assembly languages eliminated much of the error-prone, tedious, and time-consuming first-generation programming needed with the earliest computers, freeing programmers from tedium such as remembering numeric codes and calculating addresses. They were once widely used for all sorts of programming. By the late 1950s their use had largely been supplanted by higher-level languages in the search for improved programming productivity. Today, assembly language is still used for direct hardware manipulation, access to specialized processor instructions, or to address critical performance issues. Typical uses are device drivers, low-level embedded systems, and real-time systems (see § Current usage). Numerous programs were written entirely in assembly language. The Burroughs MCP (1961) was the first computer for which an operating system was not developed entirely in assembly language; it was written in Executive Systems Problem Oriented Language (ESPOL), an Algol dialect. Many commercial applications were written in assembly language as well, including a large amount of the IBM mainframe software developed by large corporations. COBOL, FORTRAN and some PL/I eventually displaced assembly language, although a number of large organizations retained assembly-language application infrastructures well into the 1990s. Assembly language was the primary development language for 8-bit home computers such as the Apple II, Atari 8-bit computers, ZX Spectrum, and Commodore 64. Interpreted BASIC on these systems did not offer maximum execution speed and full use of facilities to take full advantage of the available hardware. Assembly language was the default choice for programming 8-bit consoles such as the Atari 2600 and Nintendo Entertainment System. Key software for IBM PC compatibles such as MS-DOS, Turbo Pascal, and the Lotus 1-2-3 spreadsheet was written in assembly language. As computer speed grew exponentially, assembly language became a tool for speeding up parts of programs, such as the rendering of Doom, rather than a dominant development language. In the 1990s, assembly language was used to maximise performance from systems such as the Sega Saturn, and as the primary language for arcade hardware using the TMS34010 integrated CPU/GPU such as Mortal Kombat and NBA Jam. There has been debate over the usefulness and performance of assembly language relative to high-level languages. Although assembly language has specific niche uses where it is important (see below), there are other tools for optimization. As of July 2017[update], the TIOBE index of programming language popularity ranks assembly language at 11, ahead of Visual Basic, for example. Assembler can be used to optimize for speed or optimize for size. In the case of speed optimization, modern optimizing compilers are claimed to render high-level languages into code that can run as fast as hand-written assembly, despite some counter-examples. The complexity of modern processors and memory sub-systems makes effective optimization increasingly difficult for compilers and assembly programmers alike. Increasing processor performance has meant that most CPUs sit idle most of the time, with delays caused by predictable bottlenecks such as cache misses, I/O operations and paging, making raw code execution speed a non-issue for many programmers. There are still certain computer programming domains in which the use of assembly programming is more common: Writing code for systems with older processors[clarification needed] that have limited high-level language options such as the Atari 2600, Commodore 64, and graphing calculators. Programs for these computers of the 1970s and 1980s are often written in the context of demoscene or retrogaming subcultures. Code that must interact directly with the hardware, for example in device drivers and interrupt handlers. In an embedded processor or DSP, high-repetition interrupts require the shortest number of cycles per interrupt, such as an interrupt that occurs 1000 or 10000 times a second. Programs that need to use processor-specific instructions not implemented in a compiler. A common example is the bitwise rotation instruction at the core of many encryption algorithms, as well as querying the parity of a byte or the 4-bit carry of an addition. Stand-alone executables that are required to execute without recourse to the run-time components or libraries associated with a high-level language, such as the firmware for telephones, automobile fuel and ignition systems, air-conditioning control systems,and security systems. Programs with performance-sensitive inner loops, where assembly language provides optimization opportunities that are difficult to achieve in a high-level language. For example, linear algebra with BLAS or discrete cosine transformation (e.g. SIMD assembly version from x264). Programs that create vectorized functions for programs in higher-level languages such as C. In the higher-level language this is sometimes aided by compiler intrinsic functions which map directly to SIMD mnemonics, but nevertheless result in a one-to-one assembly conversion specific for the given vector processor. Real-time programs such as simulations, flight navigation systems, and medical equipment. For example, in a fly-by-wire system, telemetry must be interpreted and acted upon within strict time constraints. Such systems must eliminate sources of unpredictable delays, which may be created by interpreted languages, automatic garbage collection, paging operations, or preemptive multitasking. Choosing assembly or lower-level languages for such systems gives programmers greater visibility and control over processing details. Cryptographic algorithms that must always take strictly the same time to execute, preventing timing attacks. Video encoders and decoders such as rav1e (an encoder for AV1) and dav1d (the reference decoder for AV1) contain assembly to leverage AVX2 and ARM Neon instructions when available. Modify and extend legacy code written for IBM mainframe computers. Situations where complete control over the environment is required, in extremely high-security situations where nothing can be taken for granted. Computer viruses, bootloaders, certain device drivers, or other items very close to the hardware or low-level operating system. Instruction set simulators for monitoring, tracing and debugging where additional overhead is kept to a minimum. Situations where no high-level language exists, on a new or specialized processor for which no cross compiler is available. Reverse engineering and modifying program files such as: existing binaries that may or may not have originally been written in a high-level language, for example when trying to recreate programs for which source code is not available or has been lost, or cracking copy protection of proprietary software. Video games (also termed ROM hacking), which is possible via several methods. The most widely employed method is altering program code at the assembly language level. Assembly language is still taught in most computer science and electronic engineering programs. Although few programmers today regularly work with assembly language as a tool, the underlying concepts remain important. Such fundamental topics as binary arithmetic, memory allocation, stack processing, character set encoding, interrupt processing, and compiler design would be hard to study in detail without a grasp of how a computer operates at the hardware level. Since a computer's behaviour is fundamentally defined by its instruction set, the logical way to learn such concepts is to study an assembly language. Most modern computers have similar instruction sets. Therefore, studying a single assembly language is sufficient to learn the basic concepts, recognize situations where the use of assembly language might be appropriate, and to see how efficient executable code can be created from high-level languages. Assembly language is typically used in a system's boot code, the low-level code that initializes and tests the system hardware prior to booting the operating system and is often stored in ROM. (BIOS on IBM-compatible PC systems and CP/M is an example.) Assembly language is often used for low-level code, for instance for operating system kernels, which cannot rely on the availability of pre-existing system calls and must indeed implement them for the particular processor architecture on which the system will be running. Some compilers translate high-level languages into assembly first before fully compiling, allowing the assembly code to be viewed for debugging and optimization purposes. Some compilers for relatively low-level languages, such as Pascal or C, allow the programmer to embed assembly language directly in the source code (so called inline assembly). Programs using such facilities can then construct abstractions using different assembly language on each hardware platform. The system's portable code can then use these processor-specific components through a uniform interface. Assembly language is useful in reverse engineering. Many programs are distributed only in machine code form which is straightforward to translate into assembly language by a disassembler, but more difficult to translate into a higher-level language through a decompiler. Tools such as the Interactive Disassembler make extensive use of disassembly for such a purpose. This technique is used by hackers to crack commercial software, and competitors to produce software with similar results from competing companies. Assembly language is used to enhance speed of execution, especially in early personal computers with limited processing power and RAM. Assemblers can be used to generate blocks of data, with no high-level language overhead, from formatted and commented source code, to be used by other code. Computer programming portal Compiler Comparison of assemblers Disassembler Hexadecimal Instruction set architecture Little man computer – an educational computer model with a base-10 assembly language Nibble Typed assembly language ^ Other than meta-assemblers ^ However, that does not mean that the assembler programs implementing those languages are universal. ^ This is one of two redundant forms of this instruction that operate identically. The 8086 and several other CPUs from the late 1970s/early 1980s have redundancies in their instruction sets, because it was simpler for engineers to design these CPUs (to fit on silicon chips of limited sizes) with the redundant codes than to eliminate them (see don't-care terms). Each assembler will typically generate only one of two or more redundant instruction encodings, but a disassembler will usually recognize any of them. ^ AMD manufactured second-source Intel 8086, 8088, and 80286 CPUs, and perhaps 8080A and 8085A CPUs, under license from Intel, but starting with the 80386, Intel refused to share their x86 CPU designs with anyone—AMD sued about this for breach of contract—and AMD designed, made, and sold 32-bit and 64-bit x86-family CPUs without Intel's help or endorsement. ^ In 7070 Autocoder, a macro definition is a 7070 macro generator program that the assembler calls; Autocoder provides special macros for macro generators to use. ^ a b Assembler language. High Level Assembler for z/OS & z/VM & z/VSE Language Reference Version 1 Release 6. IBM. 2014 [1990]. SC26-4940-06. ^ Assembly: Review (PDF). Computer Science and Engineering. College of Engineering, Ohio State University. 2016. Archived (PDF) from the original on 2020-03-24. Retrieved 2020-03-24. ^ Archer, Benjamin (November 2016). Assembly Language For Students. North Charleston, South Carolina, US: CreateSpace Independent Publishing. ISBN 978-1-5403-7071-6. Assembly language may also be called symbolic machine code. ^ Streib, James T. (2020). Guide to Assembly Language. Undergraduate Topics in Computer Science. Cham: Springer International Publishing. doi:10.1007/978-3-030-35639-2. ISBN 978-3-030-35638-5. ISSN 1863-7310. S2CID 195930813. Programming in assembly language has the same benefits as programming in machine language, except it is easier. ^ Saxon, James A.; Plette, William S. (1962). Programming the IBM 1401, a self-instructional programmed manual. Englewood Cliffs, New Jersey, US: Prentice-Hall. LCCN 62-20615. (NB. Use of the term assembly program.) ^ Kornelis, A. F. (2010) [2003]. High Level Assembler – Opcodes overview, Assembler Directives. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ^ Macro instructions. High Level Assembler for z/OS & z/VM & z/VSE Language Reference Version 1 Release 6. IBM. 2014 [1990]. SC26-4940-06. ^ Booth, Andrew D; Britten, Kathleen HV (1947). Coding for A.R.C. (PDF). Institute for Advanced Study, Princeton. Retrieved 2022-11-04. ^ Wilkes, Maurice Vincent; Wheeler, David John; Gill, Stanley J. (1951). The preparation of programs for an electronic digital computer (Reprint 1982 ed.). Tomash Publishers. ISBN 978-0-93822803-5. OCLC 313593586. {{cite book}}: ISBN / Date incompatibility (help) ^ Fairhead, Harry (2017-11-16). History of Computer Languages - The Classical Decade, 1950s. I Programmer. Archived from the original on 2020-01-02. Retrieved 2020-03-06. ^ How do assembly languages depend on operating systems?. Stack Exchange. Stack Exchange Inc. 2011-07-28. Archived from the original on 2020-03-24. Retrieved 2020-03-24. (NB. System calls often vary, e.g. for MVS vs. VSE vs. VM/CMS; the binary/executable formats for different operating systems may also vary.) ^ Austerlitz, Howard (2003). Computer Programming Languages. Data Acquisition Techniques Using PCs. Elsevier. pp. 326–360. doi:10.1016/b978-012068377-2/50013-9. ISBN 9780120683772. Assembly language (or Assembler) is a compiled, low-level computer language. It is processor-dependent since it basically translates the Assembler's mnemonics directly into the commands a particular CPU understands, on a one-to-one basis. These Assembler mnemonics are the instruction set for that processor. ^ Carnes, Beau (2022-04-27). Learn Assembly Language Programming with ARM. freeCodeCamp.org. Retrieved 2022-06-21. Assembly language is often specific to a particular computer architecture so there are multiple types of assembly languages. ARM is an increasingly popular assembly language. ^ Brooks, Frederick P. (1986). No Silver Bullet—Essence and Accident in Software Engineering. Proceedings of the IFIP Tenth World Computing Conference. pp. 1069–1076. ^ Anguiano, Ricardo. linux kernel mainline 4.9 sloccount.txt. Gist. Retrieved 2022-05-04. ^ Daintith, John, ed. (2019). meta-assembler. A Dictionary of Computing. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ^ Xerox Data Systems (Oct 1975). Xerox Meta-Symbol Sigma 5-9 Computers Language and Operations Reference Manual (PDF). p. vi. Archived (PDF) from the original on 2022-10-09. Retrieved 2020-06-07. Used as a meta-assembler, it enables the user to design his own programming languages and to generate processors for such languages with a minimum of effort. ^ Sperry Univac Computer Systems (1977). Sperry Univac Computer Systems Meta-Assembler (MASM) Programmer Reference (PDF). Archived (PDF) from the original on 2022-10-09. Retrieved 2020-06-07. ^ How to Use Inline Assembly Language in C Code. gnu.org. Retrieved 2020-11-05. ^ a b c d Salomon, David (February 1993) [1992]. Written at California State University, Northridge, California, US. Chivers, Ian D. (ed.). Assemblers and Loaders (PDF). Ellis Horwood Series In Computers And Their Applications (1 ed.). Chicester, West Sussex, UK: Ellis Horwood Limited / Simon & Schuster International Group. pp. 7, 237–238. ISBN 0-13-052564-2. Archived (PDF) from the original on 2020-03-23. Retrieved 2008-10-01. (xiv+294+4 pages) ^ Finlayson, Ian; Davis, Brandon; Gavin, Peter; Uh, Gang-Ryung; Whalley, David; Själander, Magnus; Tyson, Gary (2013). Improving processor efficiency by statically pipelining instructions. Proceedings of the 14th ACM SIGPLAN/SIGBED conference on Languages, compilers and tools for embedded systems. pp. 33–44. doi:10.1145/2465554.2465559. ISBN 9781450320856. S2CID 8015812. ^ Beck, Leland L. (1996). 2. System Software: An Introduction to Systems Programming. Addison Wesley. ^ a b Hyde, Randall (September 2003) [1996-09-30]. Foreword (Why would anyone learn this stuff?) / Chapter 12 – Classes and Objects. The Art of Assembly Language (2 ed.). No Starch Press. ISBN 1-886411-97-2. Archived from the original on 2010-05-06. Retrieved 2020-06-22. Errata: (928 pages) ^ a b c d Intel Architecture Software Developer's Manual, Volume 2: Instruction Set Reference (PDF). Vol. 2. Intel Corporation. 1999. Archived from the original (PDF) on 2009-06-11. Retrieved 2010-11-18. ^ Ferrari, Adam; Batson, Alan; Lack, Mike; Jones, Anita (2018-11-19) [Spring 2006]. Evans, David (ed.). x86 Assembly Guide. Computer Science CS216: Program and Data Representation. University of Virginia. Archived from the original on 2020-03-24. Retrieved 2010-11-18. ^ The SPARC Architecture Manual, Version 8 (PDF). SPARC International. 1992. Archived from the original (PDF) on 2011-12-10. Retrieved 2011-12-10. ^ Moxham, James (1996). ZINT Z80 Interpreter. Z80 Op Codes for ZINT. Archived from the original on 2020-03-24. Retrieved 2013-07-21. ^ Hyde, Randall. Chapter 8. MASM: Directives & Pseudo-Opcodes (PDF). The Art of Computer Programming. Archived (PDF) from the original on 2020-03-24. Retrieved 2011-03-19. ^ 1401 Autocoder System, Program #1401-AU-037, Version 3, Modification Level 11 (PDF). 1965-12-07. Retrieved 2024-01-21. The following minor restriction or limitation is in effect with regard to the use of 1401 Autocoder when coding macro instructions ... ^ Griswold, Ralph E. (1972). Chapter 1. The Macro Implementation of SNOBOL4. San Francisco, California, US: W. H. Freeman and Company. ISBN 0-7167-0447-1. ^ Macros (C/C++), MSDN Library for Visual Studio 2008. Microsoft Corp. 2012-11-16. Archived from the original on 2020-03-24. Retrieved 2010-06-22. ^ Kessler, Marvin M. (1970-12-18). *Concept* Report 14 - Implementation of Macros To Permit Structured Programming in OS/360. MVS Software: Concept 14 Macros. Gaithersburg, Maryland, US: International Business Machines Corporation. Archived from the original on 2020-03-24. Retrieved 2009-05-25. ^ High Level Assembler Toolkit Feature Increases Programmer Productivity. Announcement Letters. IBM. 1995-12-12. A95-1432. Archived from the original on 2023-03-07. ^ Whitesmiths Ltd (1980-07-15). A-Natural Language Reference Manual. ^ assembly language: Definition and Much More from Answers.com. answers.com. Archived from the original on 2009-06-08. Retrieved 2008-06-19. ^ Provinciano, Brian (2005-04-17). NESHLA: The High Level, Open Source, 6502 Assembler for the Nintendo Entertainment System. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ^ Dufresne, Steven (2018-08-21). Kathleen Booth: Assembling Early Computers While Inventing Assembly. Archived from the original on 2020-03-24. Retrieved 2019-02-10. ^ a b Booth, Andrew Donald; Britten, Kathleen Hylda Valerie (September 1947) [August 1947]. General considerations in the design of an all purpose electronic digital computer (PDF) (2 ed.). The Institute for Advanced Study, Princeton, New Jersey, US: Birkbeck College, London. Archived (PDF) from the original on 2020-03-24. Retrieved 2019-02-10. The non-original ideas, contained in the following text, have been derived from a number of sources, ... It is felt, however, that acknowledgement should be made to Prof. John von Neumann and to Dr. Herman Goldstein for many fruitful discussions ... ^ Campbell-Kelly, Martin (April 1982). The Development of Computer Programming in Britain (1945 to 1955). IEEE Annals of the History of Computing. 4 (2): 121–139. doi:10.1109/MAHC.1982.10016. S2CID 14861159. ^ Campbell-Kelly, Martin (1980). Programming the EDSAC: Early Programming Activity at the University of Cambridge. IEEE Annals of the History of Computing. 2 (1): 7–36. doi:10.1109/MAHC.1980.10009. ^ 1985 Computer Pioneer Award 'For assembly language programming' David Wheeler. 2018-03-27. ^ Wilkes, Maurice Vincent (1949). The EDSAC – an Electronic Calculating Machine. Journal of Scientific Instruments. 26 (12): 385–391. Bibcode:1949JScI...26..385W. doi:10.1088/0950-7671/26/12/301. ^ da Cruz, Frank (2019-05-17). The IBM 650 Magnetic Drum Calculator. Computing History - A Chronology of Computing. Columbia University. Archived from the original on 2020-02-15. Retrieved 2012-01-17. ^ Abell, John C. Oct. 15, 1956: Fortran Forever Changes Computing's Fortunes. Wired. ISSN 1059-1028. Retrieved 2024-03-02. ^ Collen, Morris F. (March–April 1994). The Origins of Informatics. Journal of the American Medical Informatics Association. 1 (2): 96–97. doi:10.1136/jamia.1994.95236152. PMC 116189. PMID 7719803. ^ Pettus, Sam (2008-01-10). SegaBase Volume 6 - Saturn. Archived from the original on 2008-07-13. Retrieved 2008-07-25. ^ Kauler, Barry (1997-01-09). Windows Assembly Language and Systems Programming: 16- and 32-Bit Low-Level Programming for the PC and Windows. CRC Press. ISBN 978-1-48227572-8. Retrieved 2020-03-24. Always the debate rages about the applicability of assembly language in our modern programming world. ^ Hsieh, Paul (2020-03-24) [2016, 1996]. Programming Optimization. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ... design changes tend to affect performance more than ... one should not skip straight to assembly language until ... ^ TIOBE Index. TIOBE Software. Archived from the original on 2020-03-24. Retrieved 2020-03-24. ^ Rusling, David A. (1999) [1996]. Chapter 2 Software Basics. The Linux Kernel. Archived from the original on 2020-03-24. Retrieved 2012-03-11. ^ a b Markoff, John Gregory (2005-11-28). Writing the Fastest Code, by Hand, for Fun: A Human Computer Keeps Speeding Up Chips. The New York Times. Seattle, Washington, US. Archived from the original on 2020-03-23. Retrieved 2010-03-04. ^ Bit-field-badness. hardwarebug.org. 2010-01-30. Archived from the original on 2010-02-05. Retrieved 2010-03-04. ^ GCC makes a mess. hardwarebug.org. 2009-05-13. Archived from the original on 2010-03-16. Retrieved 2010-03-04. ^ Hyde, Randall. The Great Debate. Archived from the original on 2008-06-16. Retrieved 2008-07-03. ^ Code sourcery fails again. hardwarebug.org. 2010-01-30. Archived from the original on 2010-04-02. Retrieved 2010-03-04. ^ Click, Cliff; Goetz, Brian. A Crash Course in Modern Hardware. Archived from the original on 2020-03-24. Retrieved 2014-05-01. ^ 68K Programming in Fargo II. Archived from the original on 2008-07-02. Retrieved 2008-07-03. ^ BLAS Benchmark-August2008. eigen.tuxfamily.org. 2008-08-01. Archived from the original on 2020-03-24. Retrieved 2010-03-04. ^ x264.git/common/x86/dct-32.asm. git.videolan.org. 2010-09-29. Archived from the original on 2012-03-04. Retrieved 2010-09-29. ^ rav1e/README.md at v0.6.3. GitHub. Archived from the original on 2023-02-22. Retrieved 2023-02-21. ^ README.md · 1.1.0 · VideoLAN / dav1d. 2023-02-13. Archived from the original on 2023-02-22. Retrieved 2023-02-21. ^ Bosworth, Edward (2016). Chapter 1 – Why Study Assembly Language. www.edwardbosworth.com. Archived from the original on 2020-03-24. Retrieved 2016-06-01. ^ z/OS Version 2 Release 3 DFSMS Macro Instructions for Data Sets (PDF). IBM. 2019-02-15. Archived (PDF) from the original on 2021-06-25. Retrieved 2021-09-14. ^ Paul, Matthias R. (2001) [1996], Specification and reference documentation for NECPINW, NECPINW.CPI - DOS code page switching driver for NEC Pinwriters (2.08 ed.), FILESPEC.TXT, NECPINW.ASM, EUROFONT.INC from NECPI208.ZIP, archived from the original on 2017-09-10, retrieved 2013-04-22 ^ Paul, Matthias R. (2002-05-13). [fd-dev] mkeyb. freedos-dev. Archived from the original on 2018-09-10. Retrieved 2018-09-10. Bartlett, Jonathan (2004). Programming from the Ground Up - An introduction to programming using linux assembly language. Bartlett Publishing. ISBN 0-9752838-4-7. Archived from the original on 2020-03-24. Retrieved 2020-03-24. Britton, Robert (2003). MIPS Assembly Language Programming. Prentice Hall. ISBN 0-13-142044-5. Calingaert, Peter (1979) [1978-11-05]. Written at University of North Carolina at Chapel Hill. Horowitz, Ellis (ed.). Assemblers, Compilers, and Program Translation. Computer software engineering series (1st printing, 1st ed.). Potomac, Maryland, US: Computer Science Press, Inc. ISBN 0-914894-23-4. ISSN 0888-2088. LCCN 78-21905. Retrieved 2020-03-20. (2+xiv+270+6 pages) Duntemann, Jeff (2000). Assembly Language Step-by-Step. Wiley. ISBN 0-471-37523-3. Hyde, Randall (2010). The Art of Assembly Language (2nd ed.). No Starch Press. ISBN 978-1593272074. Jorgensen, Ed. x86-64 Assembly Language Programming with Ubuntu (PDF). Kann, Charles W. (2015). Introduction to MIPS Assembly Language Programming. Archived from the original on 2020-03-24. Retrieved 2020-03-24. Kann, Charles W. (2021). Introduction to Assembly Language Programming: From Soup to Nuts: ARM Edition. Open Educational Resources. Norton, Peter; Socha, John (1986). Peter Norton's Assembly Language Book for the IBM PC. New York, US: Brady Books. Singer, Michael (1980). PDP-11. Assembler Language Programming and Machine Organization. New York, US: John Wiley & Sons. Sweetman, Dominic (1999). See MIPS Run. Morgan Kaufmann Publishers. ISBN 1-55860-410-3. Waldron, John (1998). Introduction to RISC Assembly Language Programming. Addison Wesley. ISBN 0-201-39828-1. ASM Community Book. 2009. Archived from the original on 2013-05-30. Retrieved 2013-05-30. (An online book full of helpful ASM info, tutorials and code examples by the ASM Community, archived at the internet archive.) Assembly language at Wikipedia's sister projects Definitions from WiktionaryMedia from CommonsNews from WikinewsTextbooks from WikibooksResources from Wikiversity Assembly Language and Learning Assembly Language pages on WikiWikiWeb Assembly Language Programming Examples vteTypes of programming languagesLevel Machine Assembly Compiled Interpreted Low-level High-level Very high-level Esoteric Generation First Second Third Fourth Fifth vteEmbedded systemsGeneral terms ASIC Board support package Bootloader Consumer electronics Cross compiler Embedded database Embedded hypervisor Embedded OS Embedded software FPGA IoT Memory footprint Microcontroller Single-board computer Raspberry Pi SoC Firmware and controls Firmware Custom firmware Proprietary firmware Closed platform Crippleware Defective by Design Hacking of consumer electronics Homebrew (video games) iOS jailbreaking PlayStation 3 Jailbreak Rooting (Android) UEFI Vendor lock-in Boot loaders U-Boot Barebox Software libraries uClibc dietlibc Embedded GLIBC lwIP musl Programming tools Almquist shell BitBake Buildroot BusyBox OpenEmbedded Stand-alone shell Toybox Yocto Project Operating systems Linux on embedded systems Linux for mobile devices Light-weight Linux distribution Real-time operating system Windows IoT Win CE Programming languages Ada Assembly language CAPL Embedded C Embedded C++ Embedded Java MISRA C MicroPython Lightweight browsers List of open-source hardware Open-source robotics Authority control databases: National GermanyUnited StatesFranceBnF dataCzech RepublicIsrael Portal: Computer programming",
    "paradigm": "Imperative , unstructured , often metaprogramming (through macros ), certain assemblers are structured or object-oriented",
    "first_appeared": "1947 ; 78 years ago ( 1947 )",
    "typing_discipline": "None",
    "stable_release": "",
    "stable_release_date": "1947-01-01T00:00:00Z"
  },
  {
    "title": "Swift (programming language)",
    "url": "https://en.wikipedia.org/wiki/Swift_(programming_language)",
    "history": "Development of Swift started in July 2010 by Chris Lattner, with the eventual collaboration of many other programmers at Apple. Swift was motivated by the need for a replacement for Apple's earlier programming language Objective-C, which had been largely unchanged since the early 1980s and lacked modern language features. Swift took language ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. On June 2, 2014, the Apple Worldwide Developers Conference (WWDC) application became the first publicly released app written with Swift. A beta version of the programming language was released to registered Apple developers at the conference, but the company did not promise that the final version of Swift would be source code compatible with the test version. Apple planned to make source code converters available if needed for the full release. The Swift Programming Language, a free 500-page manual, was also released at WWDC, and is available on the Apple Books Store and the official website. Swift reached the 1.0 milestone on September 9, 2014, with the Gold Master of Xcode 6.0 for iOS. Swift 1.1 was released on October 22, 2014, alongside the launch of Xcode 6.1. Swift 1.2 was released on April 8, 2015, along with Xcode 6.3. Swift 2.0 was announced at WWDC 2015, and was made available for publishing apps in the App Store on September 21, 2015. Swift 3.0 was released on September 13, 2016. Swift 4.0 was released on September 19, 2017. Swift 4.1 was released on March 29, 2018. Swift won first place for Most Loved Programming Language in the Stack Overflow Developer Survey 2015 and second place in 2016. On December 3, 2015, the Swift language, supporting libraries, debugger, and package manager were open-sourced under the Apache 2.0 license with a Runtime Library Exception, and Swift.org was created to host the project. The source code is hosted on GitHub, where it is easy for anyone to get the code, build it themselves, and even create pull requests to contribute code back to the project. In December 2015, IBM announced its Swift Sandbox website, which allows developers to write Swift code in one pane and display output in another. The Swift Sandbox was deprecated in January 2018. During the WWDC 2016, Apple announced an iPad exclusive app, named Swift Playgrounds, intended to teach people how to code in Swift. The app is presented in a 3D video game-like interface which provides feedback when lines of code are placed in a certain order and executed. In January 2017, Chris Lattner announced his departure from Apple for a new position with Tesla Motors, with the Swift project lead role going to team veteran Ted Kremenek. During WWDC 2019, Apple announced SwiftUI with Xcode 11, which provides a framework for declarative UI structure design across all Apple platforms. Official downloads of the SDK and toolchain for the Ubuntu distribution of Linux have been available since Swift 2.2, with more distros added since Swift 5.2.4, CentOS and Amazon Linux. There is an unofficial SDK and native toolchain package for Android too.",
    "platforms": "The platforms Swift supports are Apple's operating systems (Darwin, iOS, iPadOS, macOS, tvOS, watchOS), Linux, Windows, and Android. A key aspect of Swift's design is its ability to interoperate with the huge body of existing Objective-C code developed for Apple products over the previous decades, such as Cocoa and the Cocoa Touch frameworks. On Apple platforms, it links with the Objective-C runtime library, which allows C, Objective-C, C++ and Swift code to run within one program.",
    "version_history": "Swiftversion Release date macOS Linux Windows 1.0 September 9, 2014 Yes No No 1.1 October 22, 2014 Yes No No 1.2 April 8, 2015 Yes No No 2.0 September 21, 2015 Yes No No 2.1 October 20, 2015 Yes No No 2.2 March 21, 2016 Yes Yes No 2.2.1 May 3, 2016 Yes Yes No 3.0 September 13, 2016 Yes Yes No 3.0.1 October 28, 2016 Yes Yes No 3.0.2 December 13, 2016 Yes Yes No 3.1 March 27, 2017 Yes Yes No 3.1.1 April 21, 2017 Yes Yes No 4.0 September 19, 2017 Yes Yes No 4.0.2 November 1, 2017 Yes Yes No 4.0.3 December 5, 2017 Yes Yes No 4.1 March 29, 2018 Yes Yes No 4.1.1 May 4, 2018 No Yes No 4.1.2 May 31, 2018 Yes Yes No 4.1.3 July 27, 2018 No Yes No 4.2 September 17, 2018 Yes Yes No 4.2.1 October 30, 2018 Yes Yes No 4.2.2 February 4, 2019 No Yes No 4.2.3 February 28, 2019 No Yes No 4.2.4 March 29, 2019 No Yes No 5.0 March 25, 2019 Yes Yes No 5.0.1 April 18, 2019 Yes Yes No 5.0.2 July 15, 2019 No Yes No 5.0.3 August 30, 2019 No Yes No 5.1 September 10, 2019 Yes Yes No 5.1.1 October 11, 2019 No Yes No 5.1.2 November 7, 2019 Yes Yes No 5.1.3 December 13, 2019 Yes Yes No 5.1.4 January 31, 2020 No Yes No 5.1.5 March 9, 2020 No Yes No 5.2 March 24, 2020 Yes Yes No 5.2.1 March 30, 2020 No Yes No 5.2.2 April 15, 2020 Yes Yes No 5.2.3 April 29, 2020 No Yes No 5.2.4 May 20, 2020 Yes Yes No 5.2.5 August 5, 2020 No Yes No 5.3 September 16, 2020 Yes Yes Yes 5.3.1 November 13, 2020 Yes Yes Yes 5.3.2 December 15, 2020 Yes Yes Yes 5.3.3 January 25, 2021 No Yes Yes 5.4 April 26, 2021 Yes Yes Yes 5.4.1 May 25, 2021 No Yes Yes 5.4.2 June 28, 2021 Yes Yes Yes 5.4.3 September 9, 2021 No Yes Yes 5.5 September 20, 2021 Yes Yes Yes 5.5.1 October 27, 2021 Yes Yes Yes 5.5.2 December 14, 2021 Yes Yes Yes 5.5.3 February 9, 2022 No Yes Yes 5.6 March 14, 2022 Yes Yes Yes 5.6.1 April 9, 2022 No Yes Yes 5.6.2 June 15, 2022 No Yes Yes 5.6.3 September 2, 2022 No Yes Yes 5.7 September 12, 2022 Yes Yes Yes 5.7.1 November 1, 2022 Yes Yes Yes 5.8 March 30, 2023 Yes Yes Yes 5.8.1 June 1, 2023 Yes Yes Yes 5.9 September 18, 2023 Yes Yes Yes 5.9.1 October 19, 2023 Yes Yes Yes 5.9.2 December 11, 2023 Yes Yes Yes 5.10 March 5, 2024 Yes Yes Yes 5.10.1 June 5, 2024 Yes Yes Yes 6.0 September 16, 2024 Yes Yes Yes 6.1 March 31, 2025 Yes Yes Yes",
    "features": "This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (June 2018) (Learn how and when to remove this message) Swift is a general purpose programming language that employs modern programming-language theory concepts and strives to present a simple, yet powerful syntax. Swift incorporates innovations and conventions from various programming languages, with notable inspiration from Objective-C, which it replaced as the primary development language on Apple Platforms. Swift was designed to be safe and friendly to new programmers while not sacrificing speed. By default Swift manages all memory automatically and ensures variables are always initialized before use. Array accesses are checked for out-of-bounds errors and integer operations are checked for overflow. Parameter names allow creating clear APIs. Protocols define interfaces that types may adopt, while extensions allow developers to add more function to existing types. Swift enables object-oriented programming with the support for classes, subtyping, and method overriding. Optionals allow nil values to be handled explicitly and safely. Concurrent programs can be written using async/await syntax, and actors isolate shared mutable state in order to eliminate data races.",
    "basic_syntax": "Swift's syntax is similar to C-style languages. Code begins executing in the global scope by default. Alternatively, the @main attribute can be applied to a structure, class, or enumeration declaration to indicate that it contains the program's entry point. Swift's Hello, World! program is: print(Hello, world!) The print(_:separator:terminator:) function used here is included in Swift's standard library, which is available to all programs without the need to import external modules. Statements in Swift don't have to end with a semicolon, however semicolons are required to separate multiple statements written on the same line. Single-line comments begin with // and continue until the end of the current line. Multiline comments are contained by /* and */ characters. Constants are declared with the let keyword and variables with the var keyword. Values must be initialized before they are read. Values may infer their type based on the type of the provided initial value. If the initial value is set after the value's declaration, a type must be declared explicitly. let highScoreThreshold = 1000 // A constant with type Int. The type was inferred based on the provided value. var currentScore = 980 // A variable with type Int. currentScore = 1200 // The value of variables can change over time. let playerMessage: String // A constant with explicit type String. if currentScore > highScoreThreshold { playerMessage = You are a top player! } else { playerMessage = Better luck next time. } print(playerMessage) // Prints You are a top player! Control flow in Swift is managed with if-else, guard, and switch statements, along with while and for-in loops. The if statements take a Boolean parameter and execute the body of the if statement if the condition is true, otherwise it executes the optional else body. if-let syntax provides syntactic sugar for checking for the existence of an optional value and unwrapping it at the same time. let someNumber = 42 if someNumber % 2 == 0 { // Use the remainder operator to find the remainder of someNumber divided by 2. print(\\(someNumber) is even.) } else { print(\\(someNumber) is odd.) } // Prints 42 is even. Functions are defined with the func keyword. Function parameters may have names which allow function calls to read like phrases. An underscore before the parameter name allows the argument label to be omitted from the call site. Tuples can be used by functions to return multiple pieces of data at once. func constructGreeting(for name: String) -> String { return Hello \\(name)! } let greeting = constructGreeting(for: Craig) print(greeting) // Prints Hello Craig! Functions, and anonymous functions known as closures, can be assigned to properties and passed around the program like any other value. func divideByTwo(_ aNum: Int) -> Int { return aNum / 2 } func multiplyByTwo(_ aNum: Int) -> Int { return aNum * 2 } let mathOperation = multiplyByTwo print(mathOperation(21)) // Prints 42 guard statements require that the given condition is true before continuing on past the guard statement, otherwise the body of the provided else clause is run. The else clause must exit control of the code block in which the guard statement appears. guard statements are useful for ensuring that certain requirements are met before continuing on with program execution. In particular they can be used to create an unwrapped version of an optional value that is guaranteed to be non-nil for the remainder of the enclosing scope. func divide(numerator: Int?, byDenominator denominator: Int) -> Int? { guard denominator != 0 else { print(Can't divide by 0.) return nil } guard let numerator else { print(The provided numerator is nil.) return nil } return numerator / denominator } let result = divide(numerator: 3, byDenominator: 0) print(Division result is: \\(result)) // Prints: // Can't divide by 0. // Division result is: nil. switch statements compare a value with multiple potential values and then executes an associated code block. switch statements must be made exhaustive, either by including cases for all possible values or by including a default case which is run when the provided value doesn't match any of the other cases. switch cases do not implicitly fall through, although they may explicitly do so with the fallthrough keyword. Pattern matching can be used in various ways inside switch statements. Here is an example of an integer being matched against a number of potential ranges: let someNumber = 42 switch someNumber { case ..<0: print(\\(someNumber) negative.) case 0: print(\\(someNumber) is 0.) case 1...9: print(\\(someNumber) greater than 0, but less than 10.) default: print(\\(someNumber) is greater than 9.) } // Prints 42 is greater than 9. for-in loops iterate over a sequence of values: let names = [Will, Anna, Bart] for name in names { print(name) } // Prints: // Will // Anna // Bart while loops iterate as long as the given Boolean condition evaluates to true: // Add together all the numbers from 1 to 5. var i = 1 var result = 0 while i <= 5 { // The loop performs its body as long as i is less than or equal to 5. result += i // Add i to the current result. i += 1 // Increment i by 1. } print(result) // Prints 15",
    "closure_support": "Swift supports closures, which are self-contained blocks of functionality that can be passed around and used in code, and can also be used as anonymous functions. Here are some examples: // Closure type, defined by its input and output values, can be specified outside the closure: let closure1: (Int, Int) -> Int = { arg1, arg2 in return arg1 + arg2 } // …or inside it: let closure2 = { (arg1: Int, arg2: Int) -> Int in return arg1 + arg2 } // In most cases, closure's return type can be inferred automatically by the compiler. let closure3 = { arg1: Int, arg2: Int in return arg1 + arg2 } Closures can be assigned to variables and constants, and can be passed into other functions or closures as parameters. Single-expression closures may drop the return keyword. Swift also has a trailing closure syntax, which allows the closure to be written after the end of the function call instead of within the function's parameter list. Parentheses can be omitted altogether if the closure is the function's only parameter: // This function takes a closure which receives no input parameters and returns an integer, // evaluates it, and uses the closure's return value (an Int) as the function's return value. func foo(closure bar: () -> Int) -> Int { return bar() } // Without trailing closure syntax: foo(closure: { return 1 }) // With trailing closure syntax, and implicit return: foo { 1 } Starting from version 5.3, Swift supports multiple trailing closures: // This function passes the return of the first closure as the parameter of the second, // and returns the second closure's result: func foo(bar: () -> Int, baz: (Int) -> Int) -> Int { return baz(bar()) } // With no trailing closures: foo(bar: { return 1 }, baz: { x in return x + 1 }) // With 1 trailing closure: foo(bar: { return 1 }) { x in return x + 1 } // With 2 trailing closures (only the first closure's argument name is omitted): foo { return 1 } baz: { x in return x + 1 } Swift will provide shorthand argument names for inline closures, removing the need to explicitly name all of the closures parameters. Arguments can be referred to with the names $0, $1, $2, and so on: let names = [Josephine, Steve, Chris, Barbara] // filter calls the given closure for each value in names. // Values with a character count less than 6 are kept, the others are dropped. let shortNames = names.filter { $0.count < 6 } print(shortNames) // Prints [Steve, Chris] Closures may capture values from their surrounding scope. The closure will refer to this captured value for as long as the closure exists: func makeMultiplier(withMultiple multiple: Int) -> (Int) -> (Int) { // Create and return a closure that takes in an Int and returns the input multiplied by the value of multiple. return { $0 * multiple } } let multiplier = makeMultiplier(withMultiple: 3) print(multiplier(3)) // Prints 9 print(multiplier(10)) // Prints 30",
    "string_support": "The Swift standard library includes unicode-compliant String and Character types. String values can be initialized with a String literal, a sequence of characters surrounded by double quotation marks. Strings can be concatenated with the + operator: var someString = Hello, someString +=  world! String interpolation allows for the creation of a new string from other values and expressions. Values written between parentheses preceded by a \\ will be inserted into the enclosing string literal: var currentScore = 980 print(Your score is \\(currentScore).) // Prints Your score is 980. A for-in loop can be used to iterate over the characters contained in a string: for character in Swift { print(character) } // S // w // i // f // t If the Foundation framework is imported, Swift invisibly bridges the String type to NSString (the String class commonly used in Objective-C).",
    "callable_objects": "This section is an excerpt from Callable object § In Swift.[edit] In Swift, callable objects are defined using callAsFunction. struct CallableStruct { var value: Int func callAsFunction(_ number: Int, scale: Int) { print(scale * (number + value)) } } let callable = CallableStruct(value: 100) callable(4, scale: 2) callable.callAsFunction(4, scale: 2) // Both function calls print 208.",
    "access_control": "Swift supports five access control levels for symbols: open, public, internal, fileprivate, and private. Unlike many object-oriented languages, these access controls ignore inheritance hierarchies: private indicates that a symbol is accessible only in the immediate scope, fileprivate indicates it is accessible only from within the file, internal indicates it is accessible within the containing module, public indicates it is accessible from any module, and open (only for classes and their methods) indicates that the class may be subclassed outside of the module.",
    "optionals_and_chaining": "An important feature in Swift is option types, which allow references or values to operate in a manner similar to the common pattern in C, where a pointer may either refer to a specific value or no value at all. This implies that non-optional types cannot result in a null-pointer error; the compiler can ensure this is not possible. Optional types are created with the Optional enum. To make an Integer that is nullable, one would use a declaration similar to var optionalInteger: Optional<Int>. As in C#, Swift also includes syntactic sugar for this, allowing one to indicate a variable is optional by placing a question mark after the type name, var optionalInteger: Int?. Variables or constants that are marked optional either have a value of the underlying type or are nil. Optional types wrap the base type, resulting in a different instance. String and String? are fundamentally different types, the former is of type String while the latter is an Optional that may be holding some String value. To access the value inside, assuming it is not nil, it must be unwrapped to expose the instance inside. This is performed with the ! operator: let myValue = anOptionalInstance!.someMethod() In this case, the ! operator unwraps anOptionalInstance to expose the instance inside, allowing the method call to be made on it. If anOptionalInstance is nil, a null-pointer error occurs, terminating the program. This is known as force unwrapping. Optionals may be safely unwrapped using optional chaining which first tests whether the instance is nil, and then unwrap it if it is non-null: let myValue = anOptionalInstance?.someMethod() In this case the runtime calls someMethod only if anOptionalInstance is not nil, suppressing the error. A ? must be placed after every optional property. If any of these properties are nil the entire expression evaluates as nil. The origin of the term chaining comes from the more common case where several method calls/getters are chained together. For instance: let aTenant = aBuilding.tenantList let theirLease = aTenant.leaseDetails let leaseStart = theirLease?.startDate can be reduced to: let leaseStart = aBuilding.tenantList.leaseDetails?.startDate Swift's use of optionals allows the compiler to use static dispatch because the unwrapping action is called on a defined instance (the wrapper), versus occurring in a runtime dispatch system.",
    "value_types": "In many object-oriented languages, objects are represented internally in two parts. The object is stored as a block of data placed on the heap, while the name (or handle) to that object is represented by a pointer. Objects are passed between methods by copying the value of the pointer, allowing the same underlying data on the heap to be accessed by anyone with a copy. In contrast, basic types like integers and floating-point values are represented directly; the handle contains the data, not a pointer to it, and that data is passed directly to methods by copying. These styles of access are termed pass-by-reference in the case of objects, and pass-by-value for basic types. Both concepts have their advantages and disadvantages. Objects are useful when the data is large, like the description of a window or the contents of a document. In these cases, access to that data is provided by copying a 32- or 64-bit value, versus copying an entire data structure. However, smaller values like integers are the same size as pointers (typically both are one word), so there is no advantage to passing a pointer, versus passing the value. Swift offers built-in support for objects using either pass-by-reference or pass-by-value semantics, the former using the class declaration and the latter using struct. Structs in Swift have almost all the same features as classes: methods, implementing protocols and using the extension mechanisms. For this reason, Apple terms all data generically as instances, versus objects or values. Structs do not support inheritance, however. The programmer is free to choose which semantics are more appropriate for each data structure in the application. Larger structures like windows would be defined as classes, allowing them to be passed around as pointers. Smaller structures, like a 2D point, can be defined as structs, which will be pass-by-value and allow direct access to their internal data with no indirection or reference counting. The performance improvement inherent to the pass-by-value concept is such that Swift uses these types for almost all common data types, including Int and Double, and types normally represented by objects, like String and Array. Using value types can result in significant performance improvements in user applications as well. Array, Dictionary, and Set all utilize copy on write so that their data are copied only if and when the program attempts to change a value in them. This means that the various accessors have what is in effect a pointer to the same data storage. So while the data is physically stored as one instance in memory, at the level of the application, these values are separate and physical separation is enforced by copy on write only if needed.",
    "extensions": "Extensions add new functionality to an existing type, without the need to subclass or even have access to the original source code. Extensions can add new methods, initializers, computed properties, subscripts, and protocol conformances. An example might be to add a spell checker to the base String type, which means all instances of String in the program gain the ability to spell-check. The system is also widely used as an organizational technique, allowing related code to be gathered into library-like extensions. Extensions are declared with the extension keyword. struct Rectangle { let width: Double let height: Double } extension Rectangle { var area: Double { return height * width } }",
    "protocol_oriented_programming": "Protocols promise that a particular type implements a set of methods or properties, meaning that other instances in the system can call those methods on any instance implementing that protocol. This is often used in modern object-oriented languages as a substitute for multiple inheritance, although the feature sets are not entirely similar. In Objective-C, and most other languages implementing the protocol concept, it is up to the programmer to ensure that the required methods are implemented in each class. Swift adds the ability to add these methods using extensions, and to use generic programming (generics) to implement them. Combined, these allow protocols to be written once and support a wide variety of instances. Also, the extension mechanism can be used to add protocol conformance to an object that does not list that protocol in its definition. For example, a protocol might be declared called Printable, which ensures that instances that conform to the protocol implement a description property and a printDetails() method requirement: // Define a protocol named Printable protocol Printable { var description: String { get } // A read-only property requirement func printDetails() // A method requirement } This protocol can now be adopted by other types: // Adopt the Printable protocol in a class class MyClass: Printable { var description: String { return An instance of MyClass } func printDetails() { print(description) } } Extensions can be used to add protocol conformance to types. Protocols themselves can also be extended to provide default implementations of their requirements. Adopters may define their own implementations, or they may use the default implementation: extension Printable { // All Printable instances will receive this implementation, or they may define their own. func printDetails() { print(description) } } // Bool now conforms to Printable, and inherits the printDetails() implementation above. extension Bool: Printable { var description: String { return An instance of Bool with value: \\(self) } } In Swift, like many modern languages supporting interfaces, protocols can be used as types, which means variables and methods can be defined by protocol instead of their specific type: func getSomethingPrintable() -> any Printable { return true } var someSortOfPrintableInstance = getSomethingPrintable() print(someSortOfPrintableInstance.description) // Prints An instance of Bool with value: true It does not matter what concrete type of someSortOfPrintableInstance is, the compiler will ensure that it conforms to the protocol and thus this code is safe. This syntax also means that collections can be based on protocols also, like let printableArray = [any Printable]. Both extensions and protocols are used extensively in Swift's standard library; in Swift 5.9, approximately 1.2 percent of all symbols within the standard library were protocols, and another 12.3 percent were protocol requirements or default implementations. For instance, Swift uses extensions to add the Equatable protocol to many of their basic types, like Strings and Arrays, allowing them to be compared with the == operator. The Equatable protocol also defines this default implementation: func !=<T : Equatable>(lhs: T, rhs: T) -> Bool This function defines a method that works on any instance conforming to Equatable, providing a not equals operator. Any instance, class or struct, automatically gains this implementation simply by conforming to Equatable. Protocols, extensions, and generics can be combined to create sophisticated APIs. For example, constraints allow types to conditionally adopt protocols or methods based on the characteristics of the adopting type. A common use case may be adding a method on collection types only when the elements contained within the collection are Equatable: extension Array where Element: Equatable { // allEqual will be available only on instances of Array that contain Equatable elements. func allEqual() -> Bool { for element in self { if element != self.first { return false } } return true } }",
    "concurrency": "Swift 5.5 introduced structured concurrency into the language. Structured concurrency uses Async/await syntax similar to Kotlin, JavaScript, and Rust. An async function is defined with the async keyword after the parameter list. When calling an async function the await keyword must be written before the function to indicate that execution will potentially suspend while calling function. While a function is suspended the program may run some other concurrent function in the same program. This syntax allows programs to clearly call out potential suspension points and avoid a version of the Pyramid of Doom caused by the previously widespread use of closure callbacks. func downloadText(name: String) async -> String { let result = // ... some asynchronous downloading code ... return result } let text = await downloadText(text1) The async let syntax allows multiple functions to run in parallel. await is again used to mark the point at which the program will suspend to wait for the completion of the async functions called earlier. // Each of these calls to downloadText will run in parallel. async let text1 = downloadText(name: text1) async let text2 = downloadText(name: text2) async let text3 = downloadText(name: text3) let textToPrint = await [text1, text2, text3] // Suspends until all three downloadText calls have returned. print(textToPrint) Tasks and TaskGroups can be created explicitly to create a dynamic number of child tasks during runtime: let taskHandle = Task { await downloadText(name: someText) } let result = await taskHandle.value Swift uses the Actor model to isolate mutable state, allowing different tasks to mutate shared state in a safe manner. Actors are declared with the actor keyword and are reference types, like classes. Only one task may access the mutable state of an actor at the same time. Actors may access and mutate their own internal state freely, but code running in separate tasks must mark each access with the await keyword to indicate that the code may suspend until other tasks finish accessing the actor's state. actor Directory { var names: [String] = [] func add(name: String) { names.append(name) } } let directory = Directory() // Code suspends until other tasks finish accessing the actor. await directory.add(name: Tucker) print(await directory.names)",
    "libraries_runtime_development": "On Apple systems, Swift uses the same runtime as the extant Objective-C system, but requires iOS 7 or macOS 10.9 or higher. It also depends on Grand Central Dispatch. Swift and Objective-C code can be used in one program, and by extension, C and C++ also. Beginning in Swift 5.9, C++ code can be used directly from Swift code. In the case of Objective-C, Swift has considerable access to the object model, and can be used to subclass, extend and use Objective-C code to provide protocol support. The converse is not true: a Swift class cannot be subclassed in Objective-C. To aid development of such programs, and the re-use of extant code, Xcode 6 and higher offers a semi-automated system that builds and maintains a bridging header to expose Objective-C code to Swift. This takes the form of an additional header file that simply defines or imports all of the Objective-C symbols that are needed by the project's Swift code. At that point, Swift can refer to the types, functions, and variables declared in those imports as though they were written in Swift. Objective-C code can also use Swift code directly, by importing an automatically maintained header file with Objective-C declarations of the project's Swift symbols. For instance, an Objective-C file in a mixed project called MyApp could access Swift classes or functions with the code #import MyApp-Swift.h. Not all symbols are available through this mechanism, however—use of Swift-specific features like generic types, non-object optional types, sophisticated enums, or even Unicode identifiers may render a symbol inaccessible from Objective-C. Swift also has limited support for attributes, metadata that is read by the development environment, and is not necessarily part of the compiled code. Like Objective-C, attributes use the @ syntax, but the currently available set is small. One example is the @IBOutlet attribute, which marks a given value in the code as an outlet, available for use within Interface Builder (IB). An outlet is a device that binds the value of the on-screen display to an object in code. On non-Apple systems, Swift does not depend on an Objective-C runtime or other Apple system libraries; a set of Swift Corelib implementations replace them. These include a swift-corelibs-foundation to stand in for the Foundation Kit, a swift-corelibs-libdispatch to stand in for the Grand Central Dispatch, and an swift-corelibs-xctest to stand in for the XCTest APIs from Xcode. As of 2019, with Xcode 11, Apple has also added a major new UI paradigm called SwiftUI. SwiftUI replaces the older Interface Builder paradigm with a new declarative development paradigm.",
    "memory_management": "Swift uses Automatic Reference Counting (ARC) to manage memory. Every instance of a class or closure maintains a reference count which keeps a running tally of the number of references the program is holding on to. When this count reaches 0 the instance is deallocated. This automatic deallocation removes the need for a garbage collector as instances are deallocated as soon as they are no longer needed. A strong reference cycle can occur if two instances each strongly reference each other (e.g. A references B, B references A). Since neither instances reference count can ever reach zero neither is ever deallocated, resulting in a memory leak. Swift provides the keywords weak and unowned to prevent strong reference cycles. These keywords allow an instance to be referenced without incrementing its reference count. weak references must be optional variables, since they can change and become nil. Attempting to access an unowned value that has already been deallocated results in a runtime error. A closure within a class can also create a strong reference cycle by capturing self references. Self references to be treated as weak or unowned can be indicated using a capture list. class Person { let name: String weak var home: Home? // Defined as a weak reference in order to break the reference cycle. weak references do not increment the reference count of the instance that they refer to. init(name: String) { self.name = name } deinit { print(De-initialized \\(name)) } } class Home { let address: String var owner: Person? init(address: String, owner: Person?) { self.address = address self.owner = owner } deinit { print(De-initialized \\(address)) } } var stacy: Person? = Person(name: Stacy) var house21b: Home? = Home(address: 21b Baker Street, owner: stacy) stacy?.home = house21b // stacy and house42b now refer to each other. stacy = nil // The reference count for stacy is now 1, because house21b is still holding a reference to it. house21b = nil // house21b's reference count drops to 0, which in turn drops stacy's count to 0 because house21b was the last instance holding a strong reference to stacy. // Prints: // De-initialized 21b Baker Street // De-initialized Stacy",
    "debugging": "A key element of the Swift system is its ability to be cleanly debugged and run within the development environment, using a read–eval–print loop (REPL), giving it interactive properties more in common with the scripting abilities of Python than traditional system programming languages. The REPL is further enhanced with playgrounds, interactive views running within the Xcode environment or Playgrounds app that respond to code or debugger changes on-the-fly. Playgrounds allow programmers to add in Swift code along with markdown documentation. Programmers can step through code and add breakpoints using LLDB either in a console or an IDE like Xcode.",
    "comparisons_to_other_languages": "Swift is considered a C family programming language and is similar to C in various ways: Most operators in C also appear in Swift, although some operators such as + have slightly different behavior. For example, in Swift, + traps on overflow, whereas &+ is used to denote the C-like behavior of wrapping on overflow. Curly braces are used to group statements. Variables are assigned using an equals sign, but compared using two consecutive equals signs. A new identity operator, ===, is provided to check if two data elements refer to the same object. Control statements while, if, and switch are similar, but have extended functions, e.g., a switch that takes non-integer cases, while and if supporting pattern matching and conditionally unwrapping optionals, for uses the for i in 1...10 syntax. Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them. It also has similarities to Objective-C: Basic numeric types: Int, UInt, Float, Double Class methods are inherited, like instance methods; self in class methods is the class the method was called on. Similar for...in enumeration syntax. Differences from Objective-C include: Statements need not end with semicolons (;), though these must be used to allow more than one statement on one line. No header files. Uses type inference. Generic programming. Functions are first-class objects. Enumeration cases can have associated data (algebraic data types). Operators can be redefined for classes (operator overloading), and new operators can be defined. Strings fully support Unicode. Most Unicode characters can be used in either identifiers or operators. No exception handling. Swift 2 introduces a different and incompatible error-handling model. Several features of earlier C-family languages that are easy to misuse have been removed: Pointers are not exposed by default. There is no need for the programmer to keep track of and mark names for referencing or dereferencing. Assignments return no value. This prevents the common error of writing i = 0 instead of i == 0 (which throws a compile-time error). No need to use break statements in switch blocks. Individual cases do not fall through to the next case unless the fallthrough statement is used. Variables and constants are always initialized and array bounds are always checked. Integer overflows, which result in undefined behavior for signed integers in C, are trapped as a run-time error in Swift. Programmers can choose to allow overflows by using the special arithmetical operators &+, &-, &*, &/ and &%. The properties min and max are defined in Swift for all integer types and can be used to safely check for potential overflows, versus relying on constants defined for each type in external libraries. The one-statement form of if and while, which allows for the omission of braces around the statement, is unsupported. C-style enumeration for (int i = 0; i < c; i++), which is prone to off-by-one errors, is unsupported (from Swift 3 onward). The pre- and post- increment and decrement operators (i++, --i ...) are unsupported (from Swift 3 onward), more so since C-style for statements are also unsupported from Swift 3 onward.",
    "development_and_other_implementations": "Because Swift can run on Linux, it is sometimes also used as a server-side language. Some web frameworks have been developed, such as IBM's Kitura (now discontinued), Perfect, Vapor, and Hummingbird. An official Server APIs work group has also been started by Apple, with members of the Swift developer community playing a central role. A second free implementation of Swift that targets Cocoa, Microsoft's Common Language Infrastructure (.NET Framework, now .NET), and the Java and Android platform exists as part of the Elements Compiler from RemObjects Software. Subsets of Swift have been ported to additional platforms, such as Arduino and Mac OS 9.",
    "see_also": "Computer programming portal Comparison of programming languages Objective-C D (programming language) Kotlin (programming language) Nim (programming language) Python (programming language) Realm (database)",
    "references": "^ U.S. patent no. 9329844 ^ Swift Has Reached 1.0. Apple. September 9, 2014. Retrieved March 8, 2015. ^ Swift 6.1 Released. March 31, 2025. Retrieved April 2, 2025. ^ Swift, Objectively. Dr. Dobb's. Swift is proprietary and closed: It is entirely controlled by Apple and there is no open source implementation. ^ Lattner, Chris (June 11, 2014). Re: [LLVMdev] [cfe-dev] [Advertisement] open positions in Apple's Swift compiler team. Archived from the original on July 14, 2014. Retrieved June 12, 2014. You can imagine that many of us want it to be open source and part of LLVM, but the discussion hasn't happened yet, and won't for some time. ^ Chris Lattner's Homepage. Chris Lattner. June 3, 2014. Retrieved June 3, 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ a b Lattner, Chris (June 3, 2014). Chris Lattner's Homepage. Chris Lattner. Retrieved June 3, 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ Building assert() in Swift, Part 2: __FILE__ and __LINE__. Retrieved September 25, 2014. ^ Influences - The Rust Reference. doc.rust-lang.org. Retrieved May 2, 2020. ^ influenced by - V documentation. github.com. Retrieved November 3, 2023. ^ Lardinois, Frederic (June 2, 2014). Apple Launches Swift, A New Programming Language For Writing iOS And OS X Apps. TechCrunch. Retrieved September 7, 2022. ^ Protocol-oriented Programming in Swift. Apple Inc. YouTube.[dead link] ^ Concepts are similar to Rust Traits. ^ Williams, Owen (June 2, 2014). Tim Berners-Lee's sixtieth birthday Apple announces Swift, a new programming language for iOS. The Next Web. Retrieved June 2, 2014. ^ Apple's new programming language Swift is now open source. The Verge. December 3, 2015. Retrieved December 5, 2015. ^ Apple Open Sources Swift in Latest Pitch to the Enterprise. CIO Journal. The Wall Street Journal Blogs. December 3, 2015. Retrieved December 5, 2015. ^ Looking back on Swift 3 and ahead to Swift 4. Swift Forums. July 29, 2016. Retrieved November 19, 2018. ^ Swift-Evolution. Swift Evolution. Retrieved November 19, 2018. ^ The RedMonk Programming Language Rankings: January 2018 – tecosystems. redmonk.com. March 7, 2018. Retrieved November 20, 2018. ^ Kremenek, Ted (March 25, 2019). Swift 5 Released!. ^ Kremenek, Ted (September 20, 2019). Swift 5.1 Released!. Archived from the original on February 26, 2022. Retrieved October 28, 2019. ^ Hudson, Paul (June 6, 2021). What's new in Swift 5.5?. HackingWithSwift.com. Hacking with Swift. Retrieved June 8, 2021. ^ Swift 5.9 Released. Swift.org. September 18, 2023. Retrieved October 9, 2023. ^ a b Borla, Holly (March 5, 2024). Swift 5.10 Released. Swift.org. Retrieved March 13, 2024. ^ Swift.org. Swift.org. March 2014. Retrieved April 28, 2024. ^ Borla, Holly (September 17, 2024). Announcing Swift 6. Swift.org. Retrieved October 15, 2024. ^ Borla, Holly (March 31, 2025). Swift 6.1 Released 6.1. swift.org. Retrieved April 29, 2025. ^ a b Platforms State of the Union, Session 102, Apple Worldwide Developers Conference, June 2, 2014 ^ The Swift Programming Language. Apple. June 2, 2014. Retrieved June 2, 2014. Documentation. Swift. ^ Swift Has Reached 1.0. September 9, 2014. Retrieved September 10, 2014. ^ Xcode 6.1 Release Notes. October 22, 2014. Retrieved January 23, 2015. ^ Xcode 6.3 Release Notes. April 8, 2015. Retrieved April 8, 2015. ^ Swift 2 Apps in the App Store. Swift Blog. Retrieved March 13, 2016. ^ Swift 3.0 Released!. Swift.org. September 13, 2016. Archived from the original on October 14, 2016. Retrieved October 26, 2016. ^ Swift 4.0 Released!. Swift.org. September 17, 2017. Archived from the original on March 28, 2019. Retrieved March 1, 2018. ^ Swift 4.1 Released!. Swift.org. March 29, 2018. Archived from the original on April 25, 2019. Retrieved March 30, 2018. ^ Stack Overflow Developer Survey Results 2015. ^ Stack Overflow Developer Survey Results 2016. ^ Swift.org and Open Source. Swift.org. Apple Inc. Retrieved February 25, 2019. ^ Introducing the IBM Swift Sandbox — Swift. Swift. Retrieved December 5, 2015. ^ Mayo, Benjamin (December 4, 2015). Write Swift code in a web browser with the IBM Swift Sandbox. 9to5Mac. Retrieved December 5, 2015. ^ After Apple open sources it, IBM puts Swift programming in the cloud. ZDNet. Retrieved December 5, 2015. ^ Swift Package Catalog and Swift Sandbox Deprecation. Retrieved November 9, 2018. ^ Swift Playgrounds. Apple Developer. Retrieved June 19, 2016. ^ Swift Playgrounds — Preview. Apple. Retrieved June 19, 2016. ^ Mayo, Benjamin (June 13, 2016). Apple announces Swift Playgrounds for iPad at WWDC, public release in fall. 9to5Mac. Retrieved June 19, 2016. ^ Cunningham, Andrew (January 10, 2017). Longtime Apple programmer and Swift creator leaves Apple for Tesla. Ars Technica. ^ Wuerthele, Mike (January 13, 2017). New Swift project head Ted Kremenek said to be running the show behind the scenes for some time. AppleInsider. ^ Daniel Eran Dilger (June 19, 2019). WWDC19: SwiftUI was the brightest star in a galaxy of new ideas. AppleInsider. Retrieved July 19, 2019. ^ Swift.org - Download Swift. Retrieved June 21, 2020. ^ Android SDKs for Swift. GitHub. Retrieved September 10, 2021. ^ swift-lang package versions. Retrieved September 10, 2021. ^ Readdle (January 15, 2020). Swift for Android: Our Experience and Tools. Medium. Retrieved August 20, 2020. ^ Anderson, Tim (March 30, 2020). Official tailored Swift for Windows support promised in 5.3: Swift on more platforms – provided you do not need a GUI. The Register. Retrieved September 18, 2020. ^ The Swift Linux Port. Swift.org. Apple Inc. December 3, 2015. Retrieved August 3, 2016. ^ Timmer, John (June 5, 2014). A fast look at Swift, Apple's new programming language. Ars Technica. Condé Nast. Retrieved June 6, 2014. ^ Kremenek, Ted (March 25, 2019). Swift 5 Released!. Swift.org. Retrieved March 28, 2019. ^ Download Swift. Swift.org. Apple. Retrieved December 15, 2020. ^ Kremenek, Ted (April 26, 2021). Swift 5.4 Released!. Swift.org. Apple. Archived from the original on April 26, 2021. Retrieved April 26, 2021. ^ Kremenek, Ted (March 14, 2022). Swift 5.6 Released!. Swift.org. Apple. Retrieved March 14, 2022. ^ Release Swift 5.6.1 Release · apple/Swift. GitHub. ^ Release Swift 5.6.2 Release · apple/Swift. GitHub. ^ Release Swift 5.6.3 Release · apple/Swift. GitHub. ^ Borla, Holly (September 12, 2022). Swift 5.7 Released!. Swift.org. Apple. Retrieved September 23, 2022. ^ Release Swift 5.7.1 Release · apple/Swift. GitHub. ^ Release Swift 5.8 Release · apple/Swift. GitHub. ^ Release Swift 5.8.1 Release · apple/swift. GitHub. Retrieved June 14, 2023. ^ Release Swift 5.9 Release · apple/swift. GitHub. Retrieved September 18, 2023. ^ Release Swift 5.9.1 Release · apple/swift. GitHub. Retrieved October 19, 2023. ^ Release Swift 5.9.2 Release · apple/swift. GitHub. Retrieved December 11, 2023. ^ Swift 5.10.1 Release. GitHub. Retrieved June 5, 2024. ^ Swift 6.0 Release. GitHub. Retrieved September 17, 2024. ^ Swift 6.1 Release. GitHub. Retrieved April 29, 2025. ^ Documentation. docs.swift.org. Retrieved November 17, 2023. ^ Eliminate data races using Swift Concurrency - WWDC22 - Videos. Apple Inc. Retrieved November 17, 2023. ^ a b Documentation. docs.swift.org. Retrieved October 15, 2023. ^ Documentation. docs.swift.org. Retrieved October 15, 2023. ^ Closures — The Swift Programming Language (Swift 5.5). docs.swift.org. Retrieved August 31, 2021. ^ Macomber, Kyle; Yaskevich, Yavel; Gregor, Doug; McCall, John. Multiple Trailing Closures. GitHub. Retrieved October 19, 2020. ^ Documentation. docs.swift.org. Retrieved October 16, 2023. ^ Strings and Characters. docs.swift.org. Retrieved October 16, 2023. ^ Declarations — The Swift Programming Language (Swift 5.6). docs.swift.org. Retrieved February 28, 2022. ^ Access Control. The Swift Programming Language. Apple Developer. Retrieved October 25, 2016. ^ Nullable Types, C# Programming Guide, Microsoft. Archived February 21, 2017, at the Wayback Machine. ^ Types. The Swift Programming Language. Apple Developer. Retrieved July 16, 2014. ^ a b Classes and Structures. The Swift Programming Language. Apple Developer. Archived from the original on March 25, 2016. ^ Guhit, Fiel (February 14, 2015). Performance Case Study on Swift 1.1, Swift 1.2, and Objective-C. Medium. Archived from the original on December 12, 2023. ^ Building Better Apps with Value Types. Apple. Archived from the original on June 21, 2015. ^ Extensions. docs.swift.org. Retrieved November 28, 2023. ^ Working with Protocols. Programming with Objective-C. Apple Developer Documentation Archive. September 17, 2014. Archived from the original on April 29, 2016. ^ NSCopying Protocol Reference. Apple. ^ Swift standard library statistics. swiftinit.org. Swiftinit. Retrieved October 2, 2023. ^ Thompson, Mattt (September 2, 2014). Swift Default Protocol Implementations. NSHipster. ^ swift-evolution/proposals/0304-structured-concurrency.md at main · apple/swift-evolution. GitHub. Retrieved October 16, 2023. ^ swift-evolution/proposals/0296-async-await.md at main · apple/swift-evolution. GitHub. Retrieved October 16, 2023. ^ Do Swift-based apps work on macOS 10.9/iOS 7 and lower?, StackOverflow ^ Inc, Apple (September 18, 2023). Swift 5.9 Released. Swift.org. Retrieved October 9, 2023. {{cite web}}: |last= has generic name (help) ^ Writing Swift Classes with Objective-C Behavior, Apple Inc. ^ Migrating Your Objective-C Code to Swift. ^ Swift and Objective-C in the Same Project, Apple Inc. ^ Apple: search corelib. GitHub. ^ Xcode - SwiftUI- Apple Developer. developer.apple.com. Retrieved February 1, 2021. ^ Lanier, Brian; Groff, Joe. Intermediate Swift. Apple. Retrieved July 3, 2014. ^ Metz, Cade. Why Coders Are Going Nuts Over Apple's New Programming Language. Wired. Retrieved July 16, 2014. ^ Error-Handling in Swift-Language. stackoverflow.com. ^ apple/swift-evolution. GitHub. Retrieved April 4, 2016. ^ apple/swift-evolution. GitHub. Retrieved April 4, 2016. ^ Barbosa, Greg (February 22, 2016). IBM brings Swift to the cloud, releases web framework Kitura written in Apple's programming language. 9to5Mac. Retrieved May 16, 2016. ^ Server APIs Work Group. Swift.org. October 25, 2016. Retrieved October 28, 2016. ^ Swift.org. Swift.org. Archived from the original on May 10, 2021. Retrieved October 28, 2016. ^ RemObjects Elements Compiler. Retrieved January 17, 2016. ^ Swift for Arduino. ^ Rose, Jordan (April 1, 2020). Swift on Mac OS 9. -dealloc.",
    "external_links": "Official website Swift at Apple Developer Swift source code on GitHub vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteSoftware by AppleOperatingsystems Apple DOS Apple III (SOS) Classic Mac OS Darwin iOS iPadOS GS/OS Lisa OS macOS (OS X) MacWorks XL ProDOS tvOS visionOS watchOS Consumer Bento Clips Final Cut Express Front Row GarageBand iCloud iDVD iLife iMovie iTunes iWork Keynote Pages Numbers iPhoto Logic Express Professional Aperture Apple Media Tool Apple Qmaster Color DVD Studio Pro FileMaker Final Cut Pro Motion Compressor Final Cut Studio Cinema Tools Logic Studio Logic Pro MacProject MacTerminal MainStage Shake Soundtrack Pro Education Classroom Bundled AppleWorks Books Calendar Contacts Mail Messages FaceTime MacDraw MacPaint MacWrite Music Passwords Photo Booth Photos Podcasts Safari TextEdit Server Apple Remote Desktop FoundationDB macOS Server WebObjects Xgrid Xsan Developer HyperCard iBooks Author Instruments Interface Builder Quartz Composer ResEdit Swift Xcode Internet .Mac Dashcode iAd Producer iChat iWeb MobileMe on Windows AirPort Utility AppleWorks Bonjour Boot Camp iCloud iTunes MobileMe QuickTime Software Update List of Apple II application software • List of Mac software • List of old Macintosh software Authority control databases: National GermanyUnited StatesFranceBnF dataIsrael",
    "document": "Development of Swift started in July 2010 by Chris Lattner, with the eventual collaboration of many other programmers at Apple. Swift was motivated by the need for a replacement for Apple's earlier programming language Objective-C, which had been largely unchanged since the early 1980s and lacked modern language features. Swift took language ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. On June 2, 2014, the Apple Worldwide Developers Conference (WWDC) application became the first publicly released app written with Swift. A beta version of the programming language was released to registered Apple developers at the conference, but the company did not promise that the final version of Swift would be source code compatible with the test version. Apple planned to make source code converters available if needed for the full release. The Swift Programming Language, a free 500-page manual, was also released at WWDC, and is available on the Apple Books Store and the official website. Swift reached the 1.0 milestone on September 9, 2014, with the Gold Master of Xcode 6.0 for iOS. Swift 1.1 was released on October 22, 2014, alongside the launch of Xcode 6.1. Swift 1.2 was released on April 8, 2015, along with Xcode 6.3. Swift 2.0 was announced at WWDC 2015, and was made available for publishing apps in the App Store on September 21, 2015. Swift 3.0 was released on September 13, 2016. Swift 4.0 was released on September 19, 2017. Swift 4.1 was released on March 29, 2018. Swift won first place for Most Loved Programming Language in the Stack Overflow Developer Survey 2015 and second place in 2016. On December 3, 2015, the Swift language, supporting libraries, debugger, and package manager were open-sourced under the Apache 2.0 license with a Runtime Library Exception, and Swift.org was created to host the project. The source code is hosted on GitHub, where it is easy for anyone to get the code, build it themselves, and even create pull requests to contribute code back to the project. In December 2015, IBM announced its Swift Sandbox website, which allows developers to write Swift code in one pane and display output in another. The Swift Sandbox was deprecated in January 2018. During the WWDC 2016, Apple announced an iPad exclusive app, named Swift Playgrounds, intended to teach people how to code in Swift. The app is presented in a 3D video game-like interface which provides feedback when lines of code are placed in a certain order and executed. In January 2017, Chris Lattner announced his departure from Apple for a new position with Tesla Motors, with the Swift project lead role going to team veteran Ted Kremenek. During WWDC 2019, Apple announced SwiftUI with Xcode 11, which provides a framework for declarative UI structure design across all Apple platforms. Official downloads of the SDK and toolchain for the Ubuntu distribution of Linux have been available since Swift 2.2, with more distros added since Swift 5.2.4, CentOS and Amazon Linux. There is an unofficial SDK and native toolchain package for Android too. The platforms Swift supports are Apple's operating systems (Darwin, iOS, iPadOS, macOS, tvOS, watchOS), Linux, Windows, and Android. A key aspect of Swift's design is its ability to interoperate with the huge body of existing Objective-C code developed for Apple products over the previous decades, such as Cocoa and the Cocoa Touch frameworks. On Apple platforms, it links with the Objective-C runtime library, which allows C, Objective-C, C++ and Swift code to run within one program. Swiftversion Release date macOS Linux Windows 1.0 September 9, 2014 Yes No No 1.1 October 22, 2014 Yes No No 1.2 April 8, 2015 Yes No No 2.0 September 21, 2015 Yes No No 2.1 October 20, 2015 Yes No No 2.2 March 21, 2016 Yes Yes No 2.2.1 May 3, 2016 Yes Yes No 3.0 September 13, 2016 Yes Yes No 3.0.1 October 28, 2016 Yes Yes No 3.0.2 December 13, 2016 Yes Yes No 3.1 March 27, 2017 Yes Yes No 3.1.1 April 21, 2017 Yes Yes No 4.0 September 19, 2017 Yes Yes No 4.0.2 November 1, 2017 Yes Yes No 4.0.3 December 5, 2017 Yes Yes No 4.1 March 29, 2018 Yes Yes No 4.1.1 May 4, 2018 No Yes No 4.1.2 May 31, 2018 Yes Yes No 4.1.3 July 27, 2018 No Yes No 4.2 September 17, 2018 Yes Yes No 4.2.1 October 30, 2018 Yes Yes No 4.2.2 February 4, 2019 No Yes No 4.2.3 February 28, 2019 No Yes No 4.2.4 March 29, 2019 No Yes No 5.0 March 25, 2019 Yes Yes No 5.0.1 April 18, 2019 Yes Yes No 5.0.2 July 15, 2019 No Yes No 5.0.3 August 30, 2019 No Yes No 5.1 September 10, 2019 Yes Yes No 5.1.1 October 11, 2019 No Yes No 5.1.2 November 7, 2019 Yes Yes No 5.1.3 December 13, 2019 Yes Yes No 5.1.4 January 31, 2020 No Yes No 5.1.5 March 9, 2020 No Yes No 5.2 March 24, 2020 Yes Yes No 5.2.1 March 30, 2020 No Yes No 5.2.2 April 15, 2020 Yes Yes No 5.2.3 April 29, 2020 No Yes No 5.2.4 May 20, 2020 Yes Yes No 5.2.5 August 5, 2020 No Yes No 5.3 September 16, 2020 Yes Yes Yes 5.3.1 November 13, 2020 Yes Yes Yes 5.3.2 December 15, 2020 Yes Yes Yes 5.3.3 January 25, 2021 No Yes Yes 5.4 April 26, 2021 Yes Yes Yes 5.4.1 May 25, 2021 No Yes Yes 5.4.2 June 28, 2021 Yes Yes Yes 5.4.3 September 9, 2021 No Yes Yes 5.5 September 20, 2021 Yes Yes Yes 5.5.1 October 27, 2021 Yes Yes Yes 5.5.2 December 14, 2021 Yes Yes Yes 5.5.3 February 9, 2022 No Yes Yes 5.6 March 14, 2022 Yes Yes Yes 5.6.1 April 9, 2022 No Yes Yes 5.6.2 June 15, 2022 No Yes Yes 5.6.3 September 2, 2022 No Yes Yes 5.7 September 12, 2022 Yes Yes Yes 5.7.1 November 1, 2022 Yes Yes Yes 5.8 March 30, 2023 Yes Yes Yes 5.8.1 June 1, 2023 Yes Yes Yes 5.9 September 18, 2023 Yes Yes Yes 5.9.1 October 19, 2023 Yes Yes Yes 5.9.2 December 11, 2023 Yes Yes Yes 5.10 March 5, 2024 Yes Yes Yes 5.10.1 June 5, 2024 Yes Yes Yes 6.0 September 16, 2024 Yes Yes Yes 6.1 March 31, 2025 Yes Yes Yes This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (June 2018) (Learn how and when to remove this message) Swift is a general purpose programming language that employs modern programming-language theory concepts and strives to present a simple, yet powerful syntax. Swift incorporates innovations and conventions from various programming languages, with notable inspiration from Objective-C, which it replaced as the primary development language on Apple Platforms. Swift was designed to be safe and friendly to new programmers while not sacrificing speed. By default Swift manages all memory automatically and ensures variables are always initialized before use. Array accesses are checked for out-of-bounds errors and integer operations are checked for overflow. Parameter names allow creating clear APIs. Protocols define interfaces that types may adopt, while extensions allow developers to add more function to existing types. Swift enables object-oriented programming with the support for classes, subtyping, and method overriding. Optionals allow nil values to be handled explicitly and safely. Concurrent programs can be written using async/await syntax, and actors isolate shared mutable state in order to eliminate data races. Swift's syntax is similar to C-style languages. Code begins executing in the global scope by default. Alternatively, the @main attribute can be applied to a structure, class, or enumeration declaration to indicate that it contains the program's entry point. Swift's Hello, World! program is: print(Hello, world!) The print(_:separator:terminator:) function used here is included in Swift's standard library, which is available to all programs without the need to import external modules. Statements in Swift don't have to end with a semicolon, however semicolons are required to separate multiple statements written on the same line. Single-line comments begin with // and continue until the end of the current line. Multiline comments are contained by /* and */ characters. Constants are declared with the let keyword and variables with the var keyword. Values must be initialized before they are read. Values may infer their type based on the type of the provided initial value. If the initial value is set after the value's declaration, a type must be declared explicitly. let highScoreThreshold = 1000 // A constant with type Int. The type was inferred based on the provided value. var currentScore = 980 // A variable with type Int. currentScore = 1200 // The value of variables can change over time. let playerMessage: String // A constant with explicit type String. if currentScore > highScoreThreshold { playerMessage = You are a top player! } else { playerMessage = Better luck next time. } print(playerMessage) // Prints You are a top player! Control flow in Swift is managed with if-else, guard, and switch statements, along with while and for-in loops. The if statements take a Boolean parameter and execute the body of the if statement if the condition is true, otherwise it executes the optional else body. if-let syntax provides syntactic sugar for checking for the existence of an optional value and unwrapping it at the same time. let someNumber = 42 if someNumber % 2 == 0 { // Use the remainder operator to find the remainder of someNumber divided by 2. print(\\(someNumber) is even.) } else { print(\\(someNumber) is odd.) } // Prints 42 is even. Functions are defined with the func keyword. Function parameters may have names which allow function calls to read like phrases. An underscore before the parameter name allows the argument label to be omitted from the call site. Tuples can be used by functions to return multiple pieces of data at once. func constructGreeting(for name: String) -> String { return Hello \\(name)! } let greeting = constructGreeting(for: Craig) print(greeting) // Prints Hello Craig! Functions, and anonymous functions known as closures, can be assigned to properties and passed around the program like any other value. func divideByTwo(_ aNum: Int) -> Int { return aNum / 2 } func multiplyByTwo(_ aNum: Int) -> Int { return aNum * 2 } let mathOperation = multiplyByTwo print(mathOperation(21)) // Prints 42 guard statements require that the given condition is true before continuing on past the guard statement, otherwise the body of the provided else clause is run. The else clause must exit control of the code block in which the guard statement appears. guard statements are useful for ensuring that certain requirements are met before continuing on with program execution. In particular they can be used to create an unwrapped version of an optional value that is guaranteed to be non-nil for the remainder of the enclosing scope. func divide(numerator: Int?, byDenominator denominator: Int) -> Int? { guard denominator != 0 else { print(Can't divide by 0.) return nil } guard let numerator else { print(The provided numerator is nil.) return nil } return numerator / denominator } let result = divide(numerator: 3, byDenominator: 0) print(Division result is: \\(result)) // Prints: // Can't divide by 0. // Division result is: nil. switch statements compare a value with multiple potential values and then executes an associated code block. switch statements must be made exhaustive, either by including cases for all possible values or by including a default case which is run when the provided value doesn't match any of the other cases. switch cases do not implicitly fall through, although they may explicitly do so with the fallthrough keyword. Pattern matching can be used in various ways inside switch statements. Here is an example of an integer being matched against a number of potential ranges: let someNumber = 42 switch someNumber { case ..<0: print(\\(someNumber) negative.) case 0: print(\\(someNumber) is 0.) case 1...9: print(\\(someNumber) greater than 0, but less than 10.) default: print(\\(someNumber) is greater than 9.) } // Prints 42 is greater than 9. for-in loops iterate over a sequence of values: let names = [Will, Anna, Bart] for name in names { print(name) } // Prints: // Will // Anna // Bart while loops iterate as long as the given Boolean condition evaluates to true: // Add together all the numbers from 1 to 5. var i = 1 var result = 0 while i <= 5 { // The loop performs its body as long as i is less than or equal to 5. result += i // Add i to the current result. i += 1 // Increment i by 1. } print(result) // Prints 15 Swift supports closures, which are self-contained blocks of functionality that can be passed around and used in code, and can also be used as anonymous functions. Here are some examples: // Closure type, defined by its input and output values, can be specified outside the closure: let closure1: (Int, Int) -> Int = { arg1, arg2 in return arg1 + arg2 } // …or inside it: let closure2 = { (arg1: Int, arg2: Int) -> Int in return arg1 + arg2 } // In most cases, closure's return type can be inferred automatically by the compiler. let closure3 = { arg1: Int, arg2: Int in return arg1 + arg2 } Closures can be assigned to variables and constants, and can be passed into other functions or closures as parameters. Single-expression closures may drop the return keyword. Swift also has a trailing closure syntax, which allows the closure to be written after the end of the function call instead of within the function's parameter list. Parentheses can be omitted altogether if the closure is the function's only parameter: // This function takes a closure which receives no input parameters and returns an integer, // evaluates it, and uses the closure's return value (an Int) as the function's return value. func foo(closure bar: () -> Int) -> Int { return bar() } // Without trailing closure syntax: foo(closure: { return 1 }) // With trailing closure syntax, and implicit return: foo { 1 } Starting from version 5.3, Swift supports multiple trailing closures: // This function passes the return of the first closure as the parameter of the second, // and returns the second closure's result: func foo(bar: () -> Int, baz: (Int) -> Int) -> Int { return baz(bar()) } // With no trailing closures: foo(bar: { return 1 }, baz: { x in return x + 1 }) // With 1 trailing closure: foo(bar: { return 1 }) { x in return x + 1 } // With 2 trailing closures (only the first closure's argument name is omitted): foo { return 1 } baz: { x in return x + 1 } Swift will provide shorthand argument names for inline closures, removing the need to explicitly name all of the closures parameters. Arguments can be referred to with the names $0, $1, $2, and so on: let names = [Josephine, Steve, Chris, Barbara] // filter calls the given closure for each value in names. // Values with a character count less than 6 are kept, the others are dropped. let shortNames = names.filter { $0.count < 6 } print(shortNames) // Prints [Steve, Chris] Closures may capture values from their surrounding scope. The closure will refer to this captured value for as long as the closure exists: func makeMultiplier(withMultiple multiple: Int) -> (Int) -> (Int) { // Create and return a closure that takes in an Int and returns the input multiplied by the value of multiple. return { $0 * multiple } } let multiplier = makeMultiplier(withMultiple: 3) print(multiplier(3)) // Prints 9 print(multiplier(10)) // Prints 30 The Swift standard library includes unicode-compliant String and Character types. String values can be initialized with a String literal, a sequence of characters surrounded by double quotation marks. Strings can be concatenated with the + operator: var someString = Hello, someString +=  world! String interpolation allows for the creation of a new string from other values and expressions. Values written between parentheses preceded by a \\ will be inserted into the enclosing string literal: var currentScore = 980 print(Your score is \\(currentScore).) // Prints Your score is 980. A for-in loop can be used to iterate over the characters contained in a string: for character in Swift { print(character) } // S // w // i // f // t If the Foundation framework is imported, Swift invisibly bridges the String type to NSString (the String class commonly used in Objective-C). This section is an excerpt from Callable object § In Swift.[edit] In Swift, callable objects are defined using callAsFunction. struct CallableStruct { var value: Int func callAsFunction(_ number: Int, scale: Int) { print(scale * (number + value)) } } let callable = CallableStruct(value: 100) callable(4, scale: 2) callable.callAsFunction(4, scale: 2) // Both function calls print 208. Swift supports five access control levels for symbols: open, public, internal, fileprivate, and private. Unlike many object-oriented languages, these access controls ignore inheritance hierarchies: private indicates that a symbol is accessible only in the immediate scope, fileprivate indicates it is accessible only from within the file, internal indicates it is accessible within the containing module, public indicates it is accessible from any module, and open (only for classes and their methods) indicates that the class may be subclassed outside of the module. An important feature in Swift is option types, which allow references or values to operate in a manner similar to the common pattern in C, where a pointer may either refer to a specific value or no value at all. This implies that non-optional types cannot result in a null-pointer error; the compiler can ensure this is not possible. Optional types are created with the Optional enum. To make an Integer that is nullable, one would use a declaration similar to var optionalInteger: Optional<Int>. As in C#, Swift also includes syntactic sugar for this, allowing one to indicate a variable is optional by placing a question mark after the type name, var optionalInteger: Int?. Variables or constants that are marked optional either have a value of the underlying type or are nil. Optional types wrap the base type, resulting in a different instance. String and String? are fundamentally different types, the former is of type String while the latter is an Optional that may be holding some String value. To access the value inside, assuming it is not nil, it must be unwrapped to expose the instance inside. This is performed with the ! operator: let myValue = anOptionalInstance!.someMethod() In this case, the ! operator unwraps anOptionalInstance to expose the instance inside, allowing the method call to be made on it. If anOptionalInstance is nil, a null-pointer error occurs, terminating the program. This is known as force unwrapping. Optionals may be safely unwrapped using optional chaining which first tests whether the instance is nil, and then unwrap it if it is non-null: let myValue = anOptionalInstance?.someMethod() In this case the runtime calls someMethod only if anOptionalInstance is not nil, suppressing the error. A ? must be placed after every optional property. If any of these properties are nil the entire expression evaluates as nil. The origin of the term chaining comes from the more common case where several method calls/getters are chained together. For instance: let aTenant = aBuilding.tenantList let theirLease = aTenant.leaseDetails let leaseStart = theirLease?.startDate can be reduced to: let leaseStart = aBuilding.tenantList.leaseDetails?.startDate Swift's use of optionals allows the compiler to use static dispatch because the unwrapping action is called on a defined instance (the wrapper), versus occurring in a runtime dispatch system. In many object-oriented languages, objects are represented internally in two parts. The object is stored as a block of data placed on the heap, while the name (or handle) to that object is represented by a pointer. Objects are passed between methods by copying the value of the pointer, allowing the same underlying data on the heap to be accessed by anyone with a copy. In contrast, basic types like integers and floating-point values are represented directly; the handle contains the data, not a pointer to it, and that data is passed directly to methods by copying. These styles of access are termed pass-by-reference in the case of objects, and pass-by-value for basic types. Both concepts have their advantages and disadvantages. Objects are useful when the data is large, like the description of a window or the contents of a document. In these cases, access to that data is provided by copying a 32- or 64-bit value, versus copying an entire data structure. However, smaller values like integers are the same size as pointers (typically both are one word), so there is no advantage to passing a pointer, versus passing the value. Swift offers built-in support for objects using either pass-by-reference or pass-by-value semantics, the former using the class declaration and the latter using struct. Structs in Swift have almost all the same features as classes: methods, implementing protocols and using the extension mechanisms. For this reason, Apple terms all data generically as instances, versus objects or values. Structs do not support inheritance, however. The programmer is free to choose which semantics are more appropriate for each data structure in the application. Larger structures like windows would be defined as classes, allowing them to be passed around as pointers. Smaller structures, like a 2D point, can be defined as structs, which will be pass-by-value and allow direct access to their internal data with no indirection or reference counting. The performance improvement inherent to the pass-by-value concept is such that Swift uses these types for almost all common data types, including Int and Double, and types normally represented by objects, like String and Array. Using value types can result in significant performance improvements in user applications as well. Array, Dictionary, and Set all utilize copy on write so that their data are copied only if and when the program attempts to change a value in them. This means that the various accessors have what is in effect a pointer to the same data storage. So while the data is physically stored as one instance in memory, at the level of the application, these values are separate and physical separation is enforced by copy on write only if needed. Extensions add new functionality to an existing type, without the need to subclass or even have access to the original source code. Extensions can add new methods, initializers, computed properties, subscripts, and protocol conformances. An example might be to add a spell checker to the base String type, which means all instances of String in the program gain the ability to spell-check. The system is also widely used as an organizational technique, allowing related code to be gathered into library-like extensions. Extensions are declared with the extension keyword. struct Rectangle { let width: Double let height: Double } extension Rectangle { var area: Double { return height * width } } Protocols promise that a particular type implements a set of methods or properties, meaning that other instances in the system can call those methods on any instance implementing that protocol. This is often used in modern object-oriented languages as a substitute for multiple inheritance, although the feature sets are not entirely similar. In Objective-C, and most other languages implementing the protocol concept, it is up to the programmer to ensure that the required methods are implemented in each class. Swift adds the ability to add these methods using extensions, and to use generic programming (generics) to implement them. Combined, these allow protocols to be written once and support a wide variety of instances. Also, the extension mechanism can be used to add protocol conformance to an object that does not list that protocol in its definition. For example, a protocol might be declared called Printable, which ensures that instances that conform to the protocol implement a description property and a printDetails() method requirement: // Define a protocol named Printable protocol Printable { var description: String { get } // A read-only property requirement func printDetails() // A method requirement } This protocol can now be adopted by other types: // Adopt the Printable protocol in a class class MyClass: Printable { var description: String { return An instance of MyClass } func printDetails() { print(description) } } Extensions can be used to add protocol conformance to types. Protocols themselves can also be extended to provide default implementations of their requirements. Adopters may define their own implementations, or they may use the default implementation: extension Printable { // All Printable instances will receive this implementation, or they may define their own. func printDetails() { print(description) } } // Bool now conforms to Printable, and inherits the printDetails() implementation above. extension Bool: Printable { var description: String { return An instance of Bool with value: \\(self) } } In Swift, like many modern languages supporting interfaces, protocols can be used as types, which means variables and methods can be defined by protocol instead of their specific type: func getSomethingPrintable() -> any Printable { return true } var someSortOfPrintableInstance = getSomethingPrintable() print(someSortOfPrintableInstance.description) // Prints An instance of Bool with value: true It does not matter what concrete type of someSortOfPrintableInstance is, the compiler will ensure that it conforms to the protocol and thus this code is safe. This syntax also means that collections can be based on protocols also, like let printableArray = [any Printable]. Both extensions and protocols are used extensively in Swift's standard library; in Swift 5.9, approximately 1.2 percent of all symbols within the standard library were protocols, and another 12.3 percent were protocol requirements or default implementations. For instance, Swift uses extensions to add the Equatable protocol to many of their basic types, like Strings and Arrays, allowing them to be compared with the == operator. The Equatable protocol also defines this default implementation: func !=<T : Equatable>(lhs: T, rhs: T) -> Bool This function defines a method that works on any instance conforming to Equatable, providing a not equals operator. Any instance, class or struct, automatically gains this implementation simply by conforming to Equatable. Protocols, extensions, and generics can be combined to create sophisticated APIs. For example, constraints allow types to conditionally adopt protocols or methods based on the characteristics of the adopting type. A common use case may be adding a method on collection types only when the elements contained within the collection are Equatable: extension Array where Element: Equatable { // allEqual will be available only on instances of Array that contain Equatable elements. func allEqual() -> Bool { for element in self { if element != self.first { return false } } return true } } Swift 5.5 introduced structured concurrency into the language. Structured concurrency uses Async/await syntax similar to Kotlin, JavaScript, and Rust. An async function is defined with the async keyword after the parameter list. When calling an async function the await keyword must be written before the function to indicate that execution will potentially suspend while calling function. While a function is suspended the program may run some other concurrent function in the same program. This syntax allows programs to clearly call out potential suspension points and avoid a version of the Pyramid of Doom caused by the previously widespread use of closure callbacks. func downloadText(name: String) async -> String { let result = // ... some asynchronous downloading code ... return result } let text = await downloadText(text1) The async let syntax allows multiple functions to run in parallel. await is again used to mark the point at which the program will suspend to wait for the completion of the async functions called earlier. // Each of these calls to downloadText will run in parallel. async let text1 = downloadText(name: text1) async let text2 = downloadText(name: text2) async let text3 = downloadText(name: text3) let textToPrint = await [text1, text2, text3] // Suspends until all three downloadText calls have returned. print(textToPrint) Tasks and TaskGroups can be created explicitly to create a dynamic number of child tasks during runtime: let taskHandle = Task { await downloadText(name: someText) } let result = await taskHandle.value Swift uses the Actor model to isolate mutable state, allowing different tasks to mutate shared state in a safe manner. Actors are declared with the actor keyword and are reference types, like classes. Only one task may access the mutable state of an actor at the same time. Actors may access and mutate their own internal state freely, but code running in separate tasks must mark each access with the await keyword to indicate that the code may suspend until other tasks finish accessing the actor's state. actor Directory { var names: [String] = [] func add(name: String) { names.append(name) } } let directory = Directory() // Code suspends until other tasks finish accessing the actor. await directory.add(name: Tucker) print(await directory.names) On Apple systems, Swift uses the same runtime as the extant Objective-C system, but requires iOS 7 or macOS 10.9 or higher. It also depends on Grand Central Dispatch. Swift and Objective-C code can be used in one program, and by extension, C and C++ also. Beginning in Swift 5.9, C++ code can be used directly from Swift code. In the case of Objective-C, Swift has considerable access to the object model, and can be used to subclass, extend and use Objective-C code to provide protocol support. The converse is not true: a Swift class cannot be subclassed in Objective-C. To aid development of such programs, and the re-use of extant code, Xcode 6 and higher offers a semi-automated system that builds and maintains a bridging header to expose Objective-C code to Swift. This takes the form of an additional header file that simply defines or imports all of the Objective-C symbols that are needed by the project's Swift code. At that point, Swift can refer to the types, functions, and variables declared in those imports as though they were written in Swift. Objective-C code can also use Swift code directly, by importing an automatically maintained header file with Objective-C declarations of the project's Swift symbols. For instance, an Objective-C file in a mixed project called MyApp could access Swift classes or functions with the code #import MyApp-Swift.h. Not all symbols are available through this mechanism, however—use of Swift-specific features like generic types, non-object optional types, sophisticated enums, or even Unicode identifiers may render a symbol inaccessible from Objective-C. Swift also has limited support for attributes, metadata that is read by the development environment, and is not necessarily part of the compiled code. Like Objective-C, attributes use the @ syntax, but the currently available set is small. One example is the @IBOutlet attribute, which marks a given value in the code as an outlet, available for use within Interface Builder (IB). An outlet is a device that binds the value of the on-screen display to an object in code. On non-Apple systems, Swift does not depend on an Objective-C runtime or other Apple system libraries; a set of Swift Corelib implementations replace them. These include a swift-corelibs-foundation to stand in for the Foundation Kit, a swift-corelibs-libdispatch to stand in for the Grand Central Dispatch, and an swift-corelibs-xctest to stand in for the XCTest APIs from Xcode. As of 2019, with Xcode 11, Apple has also added a major new UI paradigm called SwiftUI. SwiftUI replaces the older Interface Builder paradigm with a new declarative development paradigm. Swift uses Automatic Reference Counting (ARC) to manage memory. Every instance of a class or closure maintains a reference count which keeps a running tally of the number of references the program is holding on to. When this count reaches 0 the instance is deallocated. This automatic deallocation removes the need for a garbage collector as instances are deallocated as soon as they are no longer needed. A strong reference cycle can occur if two instances each strongly reference each other (e.g. A references B, B references A). Since neither instances reference count can ever reach zero neither is ever deallocated, resulting in a memory leak. Swift provides the keywords weak and unowned to prevent strong reference cycles. These keywords allow an instance to be referenced without incrementing its reference count. weak references must be optional variables, since they can change and become nil. Attempting to access an unowned value that has already been deallocated results in a runtime error. A closure within a class can also create a strong reference cycle by capturing self references. Self references to be treated as weak or unowned can be indicated using a capture list. class Person { let name: String weak var home: Home? // Defined as a weak reference in order to break the reference cycle. weak references do not increment the reference count of the instance that they refer to. init(name: String) { self.name = name } deinit { print(De-initialized \\(name)) } } class Home { let address: String var owner: Person? init(address: String, owner: Person?) { self.address = address self.owner = owner } deinit { print(De-initialized \\(address)) } } var stacy: Person? = Person(name: Stacy) var house21b: Home? = Home(address: 21b Baker Street, owner: stacy) stacy?.home = house21b // stacy and house42b now refer to each other. stacy = nil // The reference count for stacy is now 1, because house21b is still holding a reference to it. house21b = nil // house21b's reference count drops to 0, which in turn drops stacy's count to 0 because house21b was the last instance holding a strong reference to stacy. // Prints: // De-initialized 21b Baker Street // De-initialized Stacy A key element of the Swift system is its ability to be cleanly debugged and run within the development environment, using a read–eval–print loop (REPL), giving it interactive properties more in common with the scripting abilities of Python than traditional system programming languages. The REPL is further enhanced with playgrounds, interactive views running within the Xcode environment or Playgrounds app that respond to code or debugger changes on-the-fly. Playgrounds allow programmers to add in Swift code along with markdown documentation. Programmers can step through code and add breakpoints using LLDB either in a console or an IDE like Xcode. Swift is considered a C family programming language and is similar to C in various ways: Most operators in C also appear in Swift, although some operators such as + have slightly different behavior. For example, in Swift, + traps on overflow, whereas &+ is used to denote the C-like behavior of wrapping on overflow. Curly braces are used to group statements. Variables are assigned using an equals sign, but compared using two consecutive equals signs. A new identity operator, ===, is provided to check if two data elements refer to the same object. Control statements while, if, and switch are similar, but have extended functions, e.g., a switch that takes non-integer cases, while and if supporting pattern matching and conditionally unwrapping optionals, for uses the for i in 1...10 syntax. Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them. It also has similarities to Objective-C: Basic numeric types: Int, UInt, Float, Double Class methods are inherited, like instance methods; self in class methods is the class the method was called on. Similar for...in enumeration syntax. Differences from Objective-C include: Statements need not end with semicolons (;), though these must be used to allow more than one statement on one line. No header files. Uses type inference. Generic programming. Functions are first-class objects. Enumeration cases can have associated data (algebraic data types). Operators can be redefined for classes (operator overloading), and new operators can be defined. Strings fully support Unicode. Most Unicode characters can be used in either identifiers or operators. No exception handling. Swift 2 introduces a different and incompatible error-handling model. Several features of earlier C-family languages that are easy to misuse have been removed: Pointers are not exposed by default. There is no need for the programmer to keep track of and mark names for referencing or dereferencing. Assignments return no value. This prevents the common error of writing i = 0 instead of i == 0 (which throws a compile-time error). No need to use break statements in switch blocks. Individual cases do not fall through to the next case unless the fallthrough statement is used. Variables and constants are always initialized and array bounds are always checked. Integer overflows, which result in undefined behavior for signed integers in C, are trapped as a run-time error in Swift. Programmers can choose to allow overflows by using the special arithmetical operators &+, &-, &*, &/ and &%. The properties min and max are defined in Swift for all integer types and can be used to safely check for potential overflows, versus relying on constants defined for each type in external libraries. The one-statement form of if and while, which allows for the omission of braces around the statement, is unsupported. C-style enumeration for (int i = 0; i < c; i++), which is prone to off-by-one errors, is unsupported (from Swift 3 onward). The pre- and post- increment and decrement operators (i++, --i ...) are unsupported (from Swift 3 onward), more so since C-style for statements are also unsupported from Swift 3 onward. Because Swift can run on Linux, it is sometimes also used as a server-side language. Some web frameworks have been developed, such as IBM's Kitura (now discontinued), Perfect, Vapor, and Hummingbird. An official Server APIs work group has also been started by Apple, with members of the Swift developer community playing a central role. A second free implementation of Swift that targets Cocoa, Microsoft's Common Language Infrastructure (.NET Framework, now .NET), and the Java and Android platform exists as part of the Elements Compiler from RemObjects Software. Subsets of Swift have been ported to additional platforms, such as Arduino and Mac OS 9. Computer programming portal Comparison of programming languages Objective-C D (programming language) Kotlin (programming language) Nim (programming language) Python (programming language) Realm (database) ^ U.S. patent no. 9329844 ^ Swift Has Reached 1.0. Apple. September 9, 2014. Retrieved March 8, 2015. ^ Swift 6.1 Released. March 31, 2025. Retrieved April 2, 2025. ^ Swift, Objectively. Dr. Dobb's. Swift is proprietary and closed: It is entirely controlled by Apple and there is no open source implementation. ^ Lattner, Chris (June 11, 2014). Re: [LLVMdev] [cfe-dev] [Advertisement] open positions in Apple's Swift compiler team. Archived from the original on July 14, 2014. Retrieved June 12, 2014. You can imagine that many of us want it to be open source and part of LLVM, but the discussion hasn't happened yet, and won't for some time. ^ Chris Lattner's Homepage. Chris Lattner. June 3, 2014. Retrieved June 3, 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ a b Lattner, Chris (June 3, 2014). Chris Lattner's Homepage. Chris Lattner. Retrieved June 3, 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ Building assert() in Swift, Part 2: __FILE__ and __LINE__. Retrieved September 25, 2014. ^ Influences - The Rust Reference. doc.rust-lang.org. Retrieved May 2, 2020. ^ influenced by - V documentation. github.com. Retrieved November 3, 2023. ^ Lardinois, Frederic (June 2, 2014). Apple Launches Swift, A New Programming Language For Writing iOS And OS X Apps. TechCrunch. Retrieved September 7, 2022. ^ Protocol-oriented Programming in Swift. Apple Inc. YouTube.[dead link] ^ Concepts are similar to Rust Traits. ^ Williams, Owen (June 2, 2014). Tim Berners-Lee's sixtieth birthday Apple announces Swift, a new programming language for iOS. The Next Web. Retrieved June 2, 2014. ^ Apple's new programming language Swift is now open source. The Verge. December 3, 2015. Retrieved December 5, 2015. ^ Apple Open Sources Swift in Latest Pitch to the Enterprise. CIO Journal. The Wall Street Journal Blogs. December 3, 2015. Retrieved December 5, 2015. ^ Looking back on Swift 3 and ahead to Swift 4. Swift Forums. July 29, 2016. Retrieved November 19, 2018. ^ Swift-Evolution. Swift Evolution. Retrieved November 19, 2018. ^ The RedMonk Programming Language Rankings: January 2018 – tecosystems. redmonk.com. March 7, 2018. Retrieved November 20, 2018. ^ Kremenek, Ted (March 25, 2019). Swift 5 Released!. ^ Kremenek, Ted (September 20, 2019). Swift 5.1 Released!. Archived from the original on February 26, 2022. Retrieved October 28, 2019. ^ Hudson, Paul (June 6, 2021). What's new in Swift 5.5?. HackingWithSwift.com. Hacking with Swift. Retrieved June 8, 2021. ^ Swift 5.9 Released. Swift.org. September 18, 2023. Retrieved October 9, 2023. ^ a b Borla, Holly (March 5, 2024). Swift 5.10 Released. Swift.org. Retrieved March 13, 2024. ^ Swift.org. Swift.org. March 2014. Retrieved April 28, 2024. ^ Borla, Holly (September 17, 2024). Announcing Swift 6. Swift.org. Retrieved October 15, 2024. ^ Borla, Holly (March 31, 2025). Swift 6.1 Released 6.1. swift.org. Retrieved April 29, 2025. ^ a b Platforms State of the Union, Session 102, Apple Worldwide Developers Conference, June 2, 2014 ^ The Swift Programming Language. Apple. June 2, 2014. Retrieved June 2, 2014. Documentation. Swift. ^ Swift Has Reached 1.0. September 9, 2014. Retrieved September 10, 2014. ^ Xcode 6.1 Release Notes. October 22, 2014. Retrieved January 23, 2015. ^ Xcode 6.3 Release Notes. April 8, 2015. Retrieved April 8, 2015. ^ Swift 2 Apps in the App Store. Swift Blog. Retrieved March 13, 2016. ^ Swift 3.0 Released!. Swift.org. September 13, 2016. Archived from the original on October 14, 2016. Retrieved October 26, 2016. ^ Swift 4.0 Released!. Swift.org. September 17, 2017. Archived from the original on March 28, 2019. Retrieved March 1, 2018. ^ Swift 4.1 Released!. Swift.org. March 29, 2018. Archived from the original on April 25, 2019. Retrieved March 30, 2018. ^ Stack Overflow Developer Survey Results 2015. ^ Stack Overflow Developer Survey Results 2016. ^ Swift.org and Open Source. Swift.org. Apple Inc. Retrieved February 25, 2019. ^ Introducing the IBM Swift Sandbox — Swift. Swift. Retrieved December 5, 2015. ^ Mayo, Benjamin (December 4, 2015). Write Swift code in a web browser with the IBM Swift Sandbox. 9to5Mac. Retrieved December 5, 2015. ^ After Apple open sources it, IBM puts Swift programming in the cloud. ZDNet. Retrieved December 5, 2015. ^ Swift Package Catalog and Swift Sandbox Deprecation. Retrieved November 9, 2018. ^ Swift Playgrounds. Apple Developer. Retrieved June 19, 2016. ^ Swift Playgrounds — Preview. Apple. Retrieved June 19, 2016. ^ Mayo, Benjamin (June 13, 2016). Apple announces Swift Playgrounds for iPad at WWDC, public release in fall. 9to5Mac. Retrieved June 19, 2016. ^ Cunningham, Andrew (January 10, 2017). Longtime Apple programmer and Swift creator leaves Apple for Tesla. Ars Technica. ^ Wuerthele, Mike (January 13, 2017). New Swift project head Ted Kremenek said to be running the show behind the scenes for some time. AppleInsider. ^ Daniel Eran Dilger (June 19, 2019). WWDC19: SwiftUI was the brightest star in a galaxy of new ideas. AppleInsider. Retrieved July 19, 2019. ^ Swift.org - Download Swift. Retrieved June 21, 2020. ^ Android SDKs for Swift. GitHub. Retrieved September 10, 2021. ^ swift-lang package versions. Retrieved September 10, 2021. ^ Readdle (January 15, 2020). Swift for Android: Our Experience and Tools. Medium. Retrieved August 20, 2020. ^ Anderson, Tim (March 30, 2020). Official tailored Swift for Windows support promised in 5.3: Swift on more platforms – provided you do not need a GUI. The Register. Retrieved September 18, 2020. ^ The Swift Linux Port. Swift.org. Apple Inc. December 3, 2015. Retrieved August 3, 2016. ^ Timmer, John (June 5, 2014). A fast look at Swift, Apple's new programming language. Ars Technica. Condé Nast. Retrieved June 6, 2014. ^ Kremenek, Ted (March 25, 2019). Swift 5 Released!. Swift.org. Retrieved March 28, 2019. ^ Download Swift. Swift.org. Apple. Retrieved December 15, 2020. ^ Kremenek, Ted (April 26, 2021). Swift 5.4 Released!. Swift.org. Apple. Archived from the original on April 26, 2021. Retrieved April 26, 2021. ^ Kremenek, Ted (March 14, 2022). Swift 5.6 Released!. Swift.org. Apple. Retrieved March 14, 2022. ^ Release Swift 5.6.1 Release · apple/Swift. GitHub. ^ Release Swift 5.6.2 Release · apple/Swift. GitHub. ^ Release Swift 5.6.3 Release · apple/Swift. GitHub. ^ Borla, Holly (September 12, 2022). Swift 5.7 Released!. Swift.org. Apple. Retrieved September 23, 2022. ^ Release Swift 5.7.1 Release · apple/Swift. GitHub. ^ Release Swift 5.8 Release · apple/Swift. GitHub. ^ Release Swift 5.8.1 Release · apple/swift. GitHub. Retrieved June 14, 2023. ^ Release Swift 5.9 Release · apple/swift. GitHub. Retrieved September 18, 2023. ^ Release Swift 5.9.1 Release · apple/swift. GitHub. Retrieved October 19, 2023. ^ Release Swift 5.9.2 Release · apple/swift. GitHub. Retrieved December 11, 2023. ^ Swift 5.10.1 Release. GitHub. Retrieved June 5, 2024. ^ Swift 6.0 Release. GitHub. Retrieved September 17, 2024. ^ Swift 6.1 Release. GitHub. Retrieved April 29, 2025. ^ Documentation. docs.swift.org. Retrieved November 17, 2023. ^ Eliminate data races using Swift Concurrency - WWDC22 - Videos. Apple Inc. Retrieved November 17, 2023. ^ a b Documentation. docs.swift.org. Retrieved October 15, 2023. ^ Documentation. docs.swift.org. Retrieved October 15, 2023. ^ Closures — The Swift Programming Language (Swift 5.5). docs.swift.org. Retrieved August 31, 2021. ^ Macomber, Kyle; Yaskevich, Yavel; Gregor, Doug; McCall, John. Multiple Trailing Closures. GitHub. Retrieved October 19, 2020. ^ Documentation. docs.swift.org. Retrieved October 16, 2023. ^ Strings and Characters. docs.swift.org. Retrieved October 16, 2023. ^ Declarations — The Swift Programming Language (Swift 5.6). docs.swift.org. Retrieved February 28, 2022. ^ Access Control. The Swift Programming Language. Apple Developer. Retrieved October 25, 2016. ^ Nullable Types, C# Programming Guide, Microsoft. Archived February 21, 2017, at the Wayback Machine. ^ Types. The Swift Programming Language. Apple Developer. Retrieved July 16, 2014. ^ a b Classes and Structures. The Swift Programming Language. Apple Developer. Archived from the original on March 25, 2016. ^ Guhit, Fiel (February 14, 2015). Performance Case Study on Swift 1.1, Swift 1.2, and Objective-C. Medium. Archived from the original on December 12, 2023. ^ Building Better Apps with Value Types. Apple. Archived from the original on June 21, 2015. ^ Extensions. docs.swift.org. Retrieved November 28, 2023. ^ Working with Protocols. Programming with Objective-C. Apple Developer Documentation Archive. September 17, 2014. Archived from the original on April 29, 2016. ^ NSCopying Protocol Reference. Apple. ^ Swift standard library statistics. swiftinit.org. Swiftinit. Retrieved October 2, 2023. ^ Thompson, Mattt (September 2, 2014). Swift Default Protocol Implementations. NSHipster. ^ swift-evolution/proposals/0304-structured-concurrency.md at main · apple/swift-evolution. GitHub. Retrieved October 16, 2023. ^ swift-evolution/proposals/0296-async-await.md at main · apple/swift-evolution. GitHub. Retrieved October 16, 2023. ^ Do Swift-based apps work on macOS 10.9/iOS 7 and lower?, StackOverflow ^ Inc, Apple (September 18, 2023). Swift 5.9 Released. Swift.org. Retrieved October 9, 2023. {{cite web}}: |last= has generic name (help) ^ Writing Swift Classes with Objective-C Behavior, Apple Inc. ^ Migrating Your Objective-C Code to Swift. ^ Swift and Objective-C in the Same Project, Apple Inc. ^ Apple: search corelib. GitHub. ^ Xcode - SwiftUI- Apple Developer. developer.apple.com. Retrieved February 1, 2021. ^ Lanier, Brian; Groff, Joe. Intermediate Swift. Apple. Retrieved July 3, 2014. ^ Metz, Cade. Why Coders Are Going Nuts Over Apple's New Programming Language. Wired. Retrieved July 16, 2014. ^ Error-Handling in Swift-Language. stackoverflow.com. ^ apple/swift-evolution. GitHub. Retrieved April 4, 2016. ^ apple/swift-evolution. GitHub. Retrieved April 4, 2016. ^ Barbosa, Greg (February 22, 2016). IBM brings Swift to the cloud, releases web framework Kitura written in Apple's programming language. 9to5Mac. Retrieved May 16, 2016. ^ Server APIs Work Group. Swift.org. October 25, 2016. Retrieved October 28, 2016. ^ Swift.org. Swift.org. Archived from the original on May 10, 2021. Retrieved October 28, 2016. ^ RemObjects Elements Compiler. Retrieved January 17, 2016. ^ Swift for Arduino. ^ Rose, Jordan (April 1, 2020). Swift on Mac OS 9. -dealloc. Official website Swift at Apple Developer Swift source code on GitHub vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteSoftware by AppleOperatingsystems Apple DOS Apple III (SOS) Classic Mac OS Darwin iOS iPadOS GS/OS Lisa OS macOS (OS X) MacWorks XL ProDOS tvOS visionOS watchOS Consumer Bento Clips Final Cut Express Front Row GarageBand iCloud iDVD iLife iMovie iTunes iWork Keynote Pages Numbers iPhoto Logic Express Professional Aperture Apple Media Tool Apple Qmaster Color DVD Studio Pro FileMaker Final Cut Pro Motion Compressor Final Cut Studio Cinema Tools Logic Studio Logic Pro MacProject MacTerminal MainStage Shake Soundtrack Pro Education Classroom Bundled AppleWorks Books Calendar Contacts Mail Messages FaceTime MacDraw MacPaint MacWrite Music Passwords Photo Booth Photos Podcasts Safari TextEdit Server Apple Remote Desktop FoundationDB macOS Server WebObjects Xgrid Xsan Developer HyperCard iBooks Author Instruments Interface Builder Quartz Composer ResEdit Swift Xcode Internet .Mac Dashcode iAd Producer iChat iWeb MobileMe on Windows AirPort Utility AppleWorks Bonjour Boot Camp iCloud iTunes MobileMe QuickTime Software Update List of Apple II application software • List of Mac software • List of old Macintosh software Authority control databases: National GermanyUnited StatesFranceBnF dataIsrael",
    "paradigm": "Multi-paradigm : protocol-oriented , object-oriented , functional , imperative , block structured , declarative , concurrent",
    "first_appeared": "June 2, 2014 ; 11 years ago ( 2014-06-02 )",
    "stable_release": "6.1.2",
    "typing_discipline": "Static , strong , inferred",
    "influenced_by": "Objective-C , Rust , Haskell , Ruby , Python , C# , CLU , D",
    "influenced": "Rust , V (Vlang)",
    "stable_release_date": "2025-05-28T00:00:00Z"
  },
  {
    "title": "Lua",
    "url": "https://en.wikipedia.org/wiki/Lua",
    "history": "Lua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at the Pontifical Catholic University of Rio de Janeiro, in Brazil. From 1977 until 1992, Brazil had a policy of strong trade barriers (called a market reserve) for computer hardware and software, believing that Brazil could and should produce its own hardware and software. In that climate, Tecgraf's clients could not afford, either politically or financially, to buy customized software from abroad; under the market reserve, clients would have to go through a complex bureaucratic process to prove their needs couldn't be met by Brazilian companies. Those reasons led Tecgraf to implement the basic tools it needed from scratch. Lua's predecessors were the data-description/configuration languages Simple Object Language (SOL) and data-entry language (DEL). They had been independently developed at Tecgraf in 1992–1993 to add some flexibility into two different projects (both were interactive graphical programs for engineering applications at Petrobras company). There was a lack of any flow-control structures in SOL and DEL, and Petrobras felt a growing need to add full programming power to them. In The Evolution of Lua, the language's authors wrote: In 1993, the only real contender was Tcl, which had been explicitly designed to be embedded into applications. However, Tcl had unfamiliar syntax, did not offer good support for data description, and ran only on Unix platforms. We did not consider LISP or Scheme because of their unfriendly syntax. Python was still in its infancy. In the free, do-it-yourself atmosphere that then reigned in Tecgraf, it was quite natural that we should try to develop our own scripting language ... Because many potential users of the language were not professional programmers, the language should avoid cryptic syntax and semantics. The implementation of the new language should be highly portable, because Tecgraf's clients had a very diverse collection of computer platforms. Finally, since we expected that other Tecgraf products would also need to embed a scripting language, the new language should follow the example of SOL and be provided as a library with a C API. Lua 1.0 was designed in such a way that its object constructors, being then slightly different from the current light and flexible style, incorporated the data-description syntax of SOL (hence the name Lua: Sol meaning Sun in Portuguese, and Lua meaning Moon). Lua syntax for control structures was mostly borrowed from Modula (if, while, repeat/until), but also had taken influence from CLU (multiple assignments and multiple returns from function calls, as a simpler alternative to reference parameters or explicit pointers), C++ (neat idea of allowing a local variable to be declared only where we need it), SNOBOL and AWK (associative arrays). In an article published in Dr. Dobb's Journal, Lua's creators also state that LISP and Scheme with their single, ubiquitous data-structure mechanism (the list) were a major influence on their decision to develop the table as the primary data structure of Lua. Lua semantics have been increasingly influenced by Scheme over time, especially with the introduction of anonymous functions and full lexical scoping. Several features were added in new Lua versions. Versions of Lua prior to version 5.0 were released under a license similar to the BSD license. From version 5.0 onwards, Lua has been licensed under the MIT License. Both are permissive free software licences and are almost identical.",
    "features": "Lua is commonly described as a multi-paradigm language, providing a small set of general features that can be extended to fit different problem types. Lua does not contain explicit support for inheritance, but allows it to be implemented with metatables. Similarly, Lua allows programmers to implement namespaces, classes and other related features using its single table implementation; first-class functions allow the employment of many techniques from functional programming and full lexical scoping allows fine-grained information hiding to enforce the principle of least privilege. In general, Lua strives to provide simple, flexible meta-features that can be extended as needed, rather than supply a feature-set specific to one programming paradigm. As a result, the base language is light; the full reference interpreter is only about 247 kB compiled and easily adaptable to a broad range of applications. As a dynamically typed language intended for use as an extension language or scripting language, Lua is compact enough to fit on a variety of host platforms. It supports only a small number of atomic data structures such as Boolean values, numbers (double-precision floating point and 64-bit integers by default) and strings. Typical data structures such as arrays, sets, lists and records can be represented using Lua's single native data structure, the table, which is essentially a heterogeneous associative array. Lua implements a small set of advanced features such as first-class functions, garbage collection, closures, proper tail calls, coercion (automatic conversion between string and number values at run time), coroutines (cooperative multitasking) and dynamic module loading.",
    "syntax": "The classic Hello, World! program can be written as follows, with or without parentheses:[a] print(Hello, World!) print Hello, World! The declaration of a variable, without a value. local variable The declaration of a variable with a value of 10. local students = 10 A comment in Lua starts with a double-hyphen and runs to the end of the line, similar to Ada, Eiffel, Haskell, SQL and VHDL. Multi-line strings and comments are marked with double square brackets. -- Single line comment --[[ Multi-line comment --]] The factorial function is implemented in this example: function factorial(n) local x = 1 for i = 2, n do x = x * i end return x end",
    "control_flow": "Lua has one type of conditional test: if then end with optional else and elseif then execution control constructs. The generic if then end statement requires all three keywords: if condition then --statement body end An example of an if statement if x ~= 10 then print(x) end The else keyword may be added with an accompanying statement block to control execution when the if condition evaluates to false: if condition then --statement body else --statement body end An example of an if else statement if x == 10 then print(10) else print(x) end Execution may also be controlled according to multiple conditions using the elseif then keywords: if condition then --statement body elseif condition then --statement body else -- optional --optional default statement body end An example of an if elseif else statement if x == y then print(x = y) elseif x == z then print(x = z) else -- optional print(x does not equal any other variable) end Lua has four types of conditional loops: the while loop, the repeat loop (similar to a do while loop), the numeric for loop and the generic for loop. --condition = true while condition do --statements end repeat --statements until condition for i = first, last, delta do --delta may be negative, allowing the for loop to count down or up --statements --example: print(i) end This generic for loop would iterate over the table _G using the standard iterator function pairs, until it returns nil: for key, value in pairs(_G) do print(key, value) end Loops can also be nested (put inside of another loop). local grid = { { 11, 12, 13 }, { 21, 22, 23 }, { 31, 32, 33 } } for y, row in pairs(grid) do for x, value in pairs(row) do print(x, y, value) end end",
    "functions": "Lua's treatment of functions as first-class values is shown in the following example, where the print function's behavior is modified: do local oldprint = print -- Store current print function as oldprint function print(s) --[[ Redefine print function. The usual print function can still be used through oldprint. The new one has only one argument.]] oldprint(s == foo and bar or s) end end Any future calls to print will now be routed through the new function, and because of Lua's lexical scoping, the old print function will only be accessible by the new, modified print. Lua also supports closures, as demonstrated below: function addto(x) -- Return a new function that adds x to the argument return function(y) --[[ When we refer to the variable x, which is outside the current scope and whose lifetime would be shorter than that of this anonymous function, Lua creates a closure.]] return x + y end end fourplus = addto(4) print(fourplus(3)) -- Prints 7 --This can also be achieved by calling the function in the following way: print(addto(4)(3)) --[[ This is because we are calling the returned function from 'addto(4)' with the argument '3' directly. This also helps to reduce data cost and up performance if being called iteratively.]] A new closure for the variable x is created every time addto is called, so that each new anonymous function returned will always access its own x parameter. The closure is managed by Lua's garbage collector, just like any other object.",
    "tables": "Tables are the most important data structures (and, by design, the only built-in composite data type) in Lua and are the foundation of all user-created types. They are associative arrays with addition of automatic numeric key and special syntax. A table is a set of key and data pairs, where the data is referenced by key; in other words, it is a hashed heterogeneous associative array. Tables are created using the {} constructor syntax. a_table = {} -- Creates a new, empty table Tables are always passed by reference (see Call by sharing). A key (index) can be any value except nil and NaN, including functions. a_table = {x = 10} -- Creates a new table, with one entry mapping x to the number 10. print(a_table[x]) -- Prints the value associated with the string key, in this case 10. b_table = a_table b_table[x] = 20 -- The value in the table has been changed to 20. print(b_table[x]) -- Prints 20. print(a_table[x]) -- Also prints 20, because a_table and b_table both refer to the same table. A table is often used as structure (or record) by using strings as keys. Because such use is very common, Lua features a special syntax for accessing such fields. point = { x = 10, y = 20 } -- Create new table print(point[x]) -- Prints 10 print(point.x) -- Has exactly the same meaning as line above. The easier-to-read dot notation is just syntactic sugar. By using a table to store related functions, it can act as a namespace. Point = {} Point.new = function(x, y) return {x = x, y = y} -- return {[x] = x, [y] = y} end Point.set_x = function(point, x) point.x = x -- point[x] = x; end Tables are automatically assigned a numerical key, enabling them to be used as an array data type. The first automatic index is 1 rather than 0 as it is for many other programming languages (though an explicit index of 0 is allowed). A numeric key 1 is distinct from a string key 1. array = { a, b, c, d } -- Indices are assigned automatically. print(array) -- Prints b. Automatic indexing in Lua starts at 1. print(#array) -- Prints 4. # is the length operator for tables and strings. array = z -- Zero is a legal index. print(#array) -- Still prints 4, as Lua arrays are 1-based. The length of a table t is defined to be any integer index n such that t[n] is not nil and t[n+1] is nil; moreover, if t is nil, n can be zero. For a regular array, with non-nil values from 1 to a given n, its length is exactly that n, the index of its last value. If the array has holes (that is, nil values between other non-nil values), then #t can be any of the indices that directly precedes a nil value (that is, it may consider any such nil value as the end of the array). ExampleTable = { {1, 2, 3, 4}, {5, 6, 7, 8} } print(ExampleTable) -- Prints 3 print(ExampleTable) -- Prints 8 A table can be an array of objects. function Point(x, y) -- Point object constructor return { x = x, y = y } -- Creates and returns a new object (table) end array = { Point(10, 20), Point(30, 40), Point(50, 60) } -- Creates array of points -- array = { { x = 10, y = 20 }, { x = 30, y = 40 }, { x = 50, y = 60 } }; print(array.y) -- Prints 40 Using a hash map to emulate an array is normally slower than using an actual array; however, Lua tables are optimized for use as arrays to help avoid this issue.",
    "metatables": "Extensible semantics is a key feature of Lua, and the metatable concept allows powerful customization of tables. The following example demonstrates an infinite table. For any n, fibs[n] will give the n-th Fibonacci number using dynamic programming and memoization. fibs = { 1, 1 } -- Initial values for fibs and fibs. setmetatable(fibs, { __index = function(values, n) --[[__index is a function predefined by Lua, it is called if key n does not exist.]] values[n] = values[n - 1] + values[n - 2] -- Calculate and memoize fibs[n]. return values[n] end })",
    "object_oriented_programming": "Although Lua does not have a built-in concept of classes, object-oriented programming can be emulated using functions and tables. An object is formed by putting methods and fields in a table. Inheritance (both single and multiple) can be implemented with metatables, delegating nonexistent methods and fields to a parent object. There is no such concept as class with these techniques; rather, prototypes are used, similar to Self or JavaScript. New objects are created either with a factory method (that constructs new objects from scratch) or by cloning an existing object. Creating a basic vector object: local Vector = {} local VectorMeta = { __index = Vector} function Vector.new(x, y, z) -- The constructor return setmetatable({x = x, y = y, z = z}, VectorMeta) end function Vector.magnitude(self) -- Another method return math.sqrt(self.x^2 + self.y^2 + self.z^2) end local vec = Vector.new(0, 1, 0) -- Create a vector print(vec.magnitude(vec)) -- Call a method (output: 1) print(vec.x) -- Access a member variable (output: 0) Here, setmetatable tells Lua to look for an element in the Vector table if it is not present in the vec table. vec.magnitude, which is equivalent to vec[magnitude], first looks in the vec table for the magnitude element. The vec table does not have a magnitude element, but its metatable delegates to the Vector table for the magnitude element when it's not found in the vec table. Lua provides some syntactic sugar to facilitate object orientation. To declare member functions inside a prototype table, one can use function table:func(args), which is equivalent to function table.func(self, args). Calling class methods also makes use of the colon: object:func(args) is equivalent to object.func(object, args). That in mind, here is a corresponding class with : syntactic sugar: local Vector = {} Vector.__index = Vector function Vector:new(x, y, z) -- The constructor -- Since the function definition uses a colon, -- its first argument is self which refers -- to Vector return setmetatable({x = x, y = y, z = z}, self) end function Vector:magnitude() -- Another method -- Reference the implicit object using self return math.sqrt(self.x^2 + self.y^2 + self.z^2) end local vec = Vector:new(0, 1, 0) -- Create a vector print(vec:magnitude()) -- Call a method (output: 1) print(vec.x) -- Access a member variable (output: 0)",
    "inheritance": "Lua supports using metatables to give Lua class inheritance. In this example, we allow vectors to have their values multiplied by a constant in a derived class. local Vector = {} Vector.__index = Vector function Vector:new(x, y, z) -- The constructor -- Here, self refers to whatever class's new -- method we call. In a derived class, self will -- be the derived class; in the Vector class, self -- will be Vector return setmetatable({x = x, y = y, z = z}, self) end function Vector:magnitude() -- Another method -- Reference the implicit object using self return math.sqrt(self.x^2 + self.y^2 + self.z^2) end -- Example of class inheritance local VectorMult = {} VectorMult.__index = VectorMult setmetatable(VectorMult, Vector) -- Make VectorMult a child of Vector function VectorMult:multiply(value) self.x = self.x * value self.y = self.y * value self.z = self.z * value return self end local vec = VectorMult:new(0, 1, 0) -- Create a vector print(vec:magnitude()) -- Call a method (output: 1) print(vec.y) -- Access a member variable (output: 1) vec:multiply(2) -- Multiply all components of vector by 2 print(vec.y) -- Access member again (output: 2) Lua also supports multiple inheritance; __index can either be a function or a table. Operator overloading can also be done; Lua metatables can have elements such as __add, __sub and so on.",
    "implementation": "Lua programs are not interpreted directly from the textual Lua file, but are compiled into bytecode, which is then run on the Lua virtual machine (VM). The compiling process is typically invisible to the user and is performed during run-time, especially when a just-in-time compilation (JIT) compiler is used, but it can be done offline to increase loading performance or reduce the memory footprint of the host environment by leaving out the compiler. Lua bytecode can also be produced and executed from within Lua, using the dump function from the string library and the load/loadstring/loadfile functions. Lua version 5.3.4 is implemented in approximately 24,000 lines of C code. Like most CPUs, and unlike most virtual machines (which are stack-based), the Lua VM is register-based, and therefore more closely resembles most hardware design. The register architecture both avoids excessive copying of values, and reduces the total number of instructions per function. The virtual machine of Lua 5 is one of the first register-based pure VMs to have a wide use. Parrot and Android's Dalvik are two other well-known register-based VMs. PCScheme's VM was also register-based. This example is the bytecode listing of the factorial function defined above (as shown by the luac 5.1 compiler): function <factorial.lua:1,7> (9 instructions, 36 bytes at 0x8063c60) 1 param, 6 slots, 0 upvalues, 6 locals, 2 constants, 0 functions 1 LOADK 1 -1 ; 1 2 LOADK 2 -2 ; 2 3 MOVE 3 0 4 LOADK 4 -1 ; 1 5 FORPREP 2 1 ; to 7 6 MUL 1 1 5 7 FORLOOP 2 -2 ; to 6 8 RETURN 1 2 9 RETURN 0 1",
    "c_api": "Lua is intended to be embedded into other applications, and provides a C API for this purpose. The API is divided into two parts: the Lua core and the Lua auxiliary library. The Lua API's design eliminates the need for manual reference counting (management) in C code, unlike Python's API. The API, like the language, is minimalist. Advanced functions are provided by the auxiliary library, which consists largely of preprocessor macros which assist with complex table operations. The Lua C API is stack based. Lua provides functions to push and pop most simple C data types (integers, floats, etc.) to and from the stack, and functions to manipulate tables through the stack. The Lua stack is somewhat different from a traditional stack; the stack can be indexed directly, for example. Negative indices indicate offsets from the top of the stack. For example, −1 is the top (most recently pushed value), while positive indices indicate offsets from the bottom (oldest value). Marshalling data between C and Lua functions is also done using the stack. To call a Lua function, arguments are pushed onto the stack, and then the lua_call is used to call the actual function. When writing a C function to be directly called from Lua, the arguments are read from the stack. Here is an example of calling a Lua function from C: #include <stdio.h> #include <lua.h> // Lua main library (lua_*) #include <lauxlib.h> // Lua auxiliary library (luaL_*) int main(void) { // create a Lua state lua_State *L = luaL_newstate(); // load and execute a string if (luaL_dostring(L, function foo (x,y) return x+y end)) { lua_close(L); return -1; } // push value of global foo (the function defined above) // to the stack, followed by integers 5 and 3 lua_getglobal(L, foo); lua_pushinteger(L, 5); lua_pushinteger(L, 3); lua_call(L, 2, 1); // call a function with two arguments and one return value printf(Result: %d\\n, lua_tointeger(L, -1)); // print integer value of item at stack top lua_pop(L, 1); // return stack to original state lua_close(L); // close Lua state return 0; } Running this example gives: $ cc -o example example.c -llua $ ./example Result: 8 The C API also provides some special tables, located at various pseudo-indices in the Lua stack. At LUA_GLOBALSINDEX prior to Lua 5.2 is the globals table, _G from within Lua, which is the main namespace. There is also a registry located at LUA_REGISTRYINDEX where C programs can store Lua values for later retrieval.",
    "modules": "Besides standard library (core) modules it is possible to write extensions using the Lua API. Extension modules are shared objects which can be used to extend the functions of the interpreter by providing native facilities to Lua scripts. Lua scripts may load extension modules using require, just like modules written in Lua itself, or with package.loadlib. When a C library is loaded via require('foo') Lua will look for the function luaopen_foo and call it, which acts as any C function callable from Lua and generally returns a table filled with methods. A growing set of modules termed rocks are available through a package management system named LuaRocks, in the spirit of CPAN, RubyGems and Python eggs. Prewritten Lua bindings exist for most popular programming languages, including other scripting languages. For C++, there are a number of template-based approaches and some automatic binding generators.",
    "applications": "Main article: List of applications using Lua In video game development, Lua is widely used as a scripting language, mainly due to its perceived easiness to embed, fast execution, and short learning curve. Notable games which use Lua include Roblox, Garry's Mod, World of Warcraft, Payday 2, Phantasy Star Online 2, Dota 2, Crysis, and many others. Some games that do not natively support Lua programming or scripting, have this function added by mods, as ComputerCraft does for Minecraft. Also, Lua is used in non-video game software, such as Adobe Lightroom, Moho, iClone, Aerospike, and some system software in FreeBSD and NetBSD, and used as a template scripting language on MediaWiki using the Scribunto extension. In 2003, a poll conducted by GameDev.net showed Lua was the most popular scripting language for game programming. On 12 January 2012, Lua was announced as a winner of the Front Line Award 2011 from the magazine Game Developer in the category Programming Tools. Many non-game applications also use Lua for extensibility, such as LuaTeX, an implementation of the TeX type-setting language, Redis, a key-value database, ScyllaDB, a wide-column store, Neovim, a text editor, Nginx, a web server, Wireshark, a network packet analyzer and Pure Data, a visual audio programming language (through the pdlua extension). Through the Scribunto extension, Lua is available as a server-side scripting language in the MediaWiki software that runs Wikipedia and other wikis. Among its uses are allowing the integration of data from Wikidata into articles, and powering the automated taxobox system.",
    "languages_that_compile_to_lua": "MoonScript is a dynamic, whitespace-sensitive scripting language inspired by CoffeeScript, which is compiled into Lua. This means that instead of using do and end (or { and }) to delimit sections of code it uses line breaks and indentation style. A notable use of MoonScript is the video game distribution website Itch.io. Haxe supports compiling to some Lua targets, including Lua 5.1-5.3 and LuaJIT 2.0 and 2.1. Fennel, a Lisp dialect that targets Lua. Urn, a Lisp dialect built on Lua. Amulet, an ML-like functional programming language, which compiler emits Lua files. LunarML, Standard ML compiler that produces Lua/JavaScript",
    "dialects": "LuaJIT, a just-in-time compiler of Lua 5.1. Luau developed by Roblox Corporation, a derivative of and backwards-compatible with Lua 5.1 with gradual typing, additional features and a focus on performance. Luau has improved sandboxing to allow for running untrusted code in embedded applications. Ravi, a JIT-enabled Lua 5.3 language with optional static typing. JIT is guided by type information. Shine, a fork of LuaJIT with many extensions, including a module system and a macro system. Glua, a modified version embedded into the game Garry's Mod as its scripting language. Teal, a statically typed Lua dialect written in Lua. PICO-8, a fantasy video game console, uses a subset of Lua known as PICO-8 Lua. In addition, the Lua users community provides some power patches on top of the reference C implementation.",
    "see_also": "Comparison of programming languages",
    "notes": "^ Syntactic sugar, a table construct or literal string following an identifier is a valid function call.",
    "references": "^ [ANN] Lua 5.4.7 now available. 25 June 2024. Retrieved 27 June 2024. ^ Ring Team (5 December 2017). The Ring programming language and other languages. ring-lang.net. Archived from the original on 25 December 2018. Retrieved 5 December 2017. ^ a b Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Filho, Waldemar Celes (June 1996). Lua—An Extensible Extension Language. Software: Practice and Experience. 26 (6): 635–652. doi:10.1002/(SICI)1097-024X(199606)26:6<635::AID-SPE26>3.0.CO;2-P. S2CID 61066194. Retrieved 24 October 2015. ^ a b c About Lua. Lua.org. Retrieved 11 August 2011. ^ Takhteyev, Yuri (21 April 2013). From Brazil to Wikipedia. Foreign Affairs. Retrieved 25 April 2013. ^ a b c d Ierusalimschy, R.; Figueiredo, L. H.; Celes, W. (2007). The evolution of Lua (PDF). Proceedings of the third ACM SIGPLAN conference on History of programming languages. pp. 2–1–2–26. doi:10.1145/1238844.1238846. ISBN 978-1-59593-766-7. S2CID 475143. ^ The evolution of an extension language: a history of Lua. 2001. Retrieved 18 December 2008. ^ Figueiredo, L. H.; Ierusalimschy, R.; Celes, W. (December 1996). Lua: an Extensible Embedded Language. A few metamechanisms replace a host of features. Dr. Dobb's Journal. Vol. 21, no. 12. pp. 26–33. ^ Programming in Lua : 1. ^ Lua 5.0 Reference Manual, 2.5.7, Function Calls. ^ Lua 5.1 Reference Manual. 2014. Retrieved 27 February 2014. ^ Lua 5.1 Reference Manual. 2012. Retrieved 16 October 2012. ^ Lua 5.1 Source Code. 2006. Retrieved 24 March 2011. ^ Roberto Ierusalimschy. Programming in Lua, 4th Edition. p. 165. ^ Programming in Lua : 16.3. Lua. Retrieved 16 September 2021. ^ Metamethods Tutorial. lua-users wiki. Archived from the original on 16 September 2021. Retrieved 16 September 2021. ^ Ierusalimschy, R.; Figueiredo, L. H.; Celes, W. (2005). The implementation of Lua 5.0. J. Of Universal Comp. Sci. 11 (7): 1159–1176. doi:10.3217/jucs-011-07-1159. ^ Texas Instruments (1990). PC Scheme: Users Guide and Language Reference Manual, Trade Edition. MIP Press. ISBN 0-262-70040-9. ^ Man, Kein-Hong (2006). A No-Frills Introduction to Lua 5.1 VM Instructions (PDF). ^ a b Lua 5.2 Reference Manual. Lua.org. Retrieved 23 October 2012. ^ Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar (2011–2013). Changes in the API. Lua.org. Retrieved 9 May 2014. {{cite book}}: |work= ignored (help) ^ Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar. Lua 5.4 Reference Manual. Lua. Retrieved 1 June 2022. ^ LuaRocks. luarocks.org. Retrieved 24 May 2009. ^ Binding Code To Lua. Lua-users wiki. Archived from the original on 27 July 2009. Retrieved 24 May 2009. ^ Why is Lua considered a game language?. Stack Overflow. Archived from the original on 20 August 2013. Retrieved 22 April 2017. ^ Why Luau?. Luau. Retrieved 23 March 2022. ^ Introduction to Crysis server-side modding. Retrieved 23 March 2022. ^ Lua Functions. wow.gamepedia.com. Retrieved 1 March 2021. ^ Poll Results. Archived from the original on 7 December 2003. Retrieved 22 April 2017.{{cite web}}: CS1 maint: bot: original URL status unknown (link) ^ Front Line Award Winners Announced. Archived from the original on 15 June 2013. Retrieved 22 April 2017. ^ Extension:Scribunto - MediaWiki. MediaWiki.org. Retrieved 21 February 2019. ^ Wikidata:Infobox Tutorial - Wikidata. www.wikidata.org. Retrieved 21 December 2018. ^ Language Guide - MoonScript 0.5.0. moonscript.org. Retrieved 25 September 2020. ^ leaf (23 September 2020). leafo/moonscript. GitHub. Retrieved 25 September 2020. ^ a b Garzia, Andre Alves. Languages that compile to Lua. AndreGarzia.com. Retrieved 25 September 2020. ^ Urn: A Lisp implementation for Lua | Urn. urn-lang.com. Retrieved 12 January 2021. ^ Amulet ML. amulet.works. Retrieved 12 January 2021. ^ LunarML, Standard ML compiler that produces Lua/JavaScript. GitHub. ^ LuaJIT. LuaJIT. ^ Extensions. LuaJIT. ^ Why Luau?. Luau. Retrieved 3 August 2024. All of these motivated us to start reshaping Lua 5.1 that we started from into a new, derivative language that we call Luau. Our focus is on making the language more performant and feature-rich, and make it easier to write robust code through a combination of linting and type checking using a gradual type system. ^ Sandboxing. Luau. Retrieved 27 March 2025. ^ Ravi Programming Language. GitHub. ^ Hundt, Richard (22 April 2021). richardhundt/shine. GitHub. ^ Garry's Mod Wiki. wiki.facepunch.com. ^ teal-language/tl, Teal language, 23 December 2024, retrieved 23 December 2024 ^ Lua Power Patches. lua-users.org. Archived from the original on 18 May 2021. Retrieved 18 May 2021.",
    "further_reading": "Ierusalimschy, R. (2013). Programming in Lua (3rd ed.). Lua.org. ISBN 978-85-903798-5-0. (The 1st ed. is available online.) Gutschmidt, T. (2003). Game Programming with Python, Lua, and Ruby. Course Technology PTR. ISBN 978-1-59200-077-7. Schuytema, P.; Manyen, M. (2005). Game Development with Lua. Charles River Media. ISBN 978-1-58450-404-7. Jung, K.; Brown, A. (2007). Beginning Lua Programming. Wrox Press. ISBN 978-0-470-06917-2. Archived from the original on 8 July 2018. Retrieved 7 July 2018. Figueiredo, L. H.; Celes, W.; Ierusalimschy, R., eds. (2008). Lua Programming Gems. Lua.org. ISBN 978-85-903798-4-3. Takhteyev, Yuri (2012). Coding Places: Software Practice in a South American City. The MIT Press. ISBN 978-0-262-01807-4. Archived from the original on 2 November 2012. Chapters 6 and 7 are dedicated to Lua, while others look at software in Brazil more broadly. Varma, Jayant (2012). Learn Lua for iOS Game Development. Apress. ISBN 978-1-4302-4662-6. Matheson, Ash (29 April 2003). An Introduction to Lua. GameDev.net. Archived from the original on 18 December 2012. Retrieved 3 January 2013. Fieldhouse, Keith (16 February 2006). Introducing Lua. ONLamp.com. O'Reilly Media. Archived from the original on 12 March 2006. Retrieved 28 February 2006. Streicher, Martin (28 April 2006). Embeddable scripting with Lua. developerWorks. IBM. Archived from the original on 2 July 2009. Retrieved 7 July 2018. Quigley, Joseph (1 June 2007). A Look at Lua. Linux Journal. Hamilton, Naomi (11 September 2008). The A-Z of Programming Languages: Lua. Computerworld. IDG. Archived from the original on 8 July 2018. Retrieved 7 July 2018. Interview with Roberto Ierusalimschy. Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar (12 May 2011). Passing a Language through the Eye of a Needle. ACM Queue. 9 (5): 20–29. doi:10.1145/1978862.1983083. S2CID 19484689. How the embeddability of Lua impacted its design. Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar (November 2018). A Look at the Design of Lua. Communications of the ACM. 61 (11): 114–123. doi:10.1145/3186277. S2CID 53114923.[permanent dead link] Lua papers and theses",
    "external_links": "Wikibooks has a book on the topic of: Lua Programming Lua at Wikipedia's sister projects News from WikinewsTextbooks from WikibooksResources from Wikiversity Official website Lua Users Archived 16 December 2010 at the Wayback Machine, Community Lua Forum Archived 28 September 2021 at the Wayback Machine LuaDist Lua Rocks - Package manager Projects in Lua vteLua programmingPorts, distributions Plua LÖVE Solar2D Package manager LuaRocks IDEs Decoda SciTE Applications, frameworks OpenResty Prosody Torch Tarantool IUP List of applications using Lua vteFree and open-source softwareGeneral Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Softwarepackages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases: National GermanyUnited StatesFranceBnF dataIsrael Portals: Free and open-source software Computer programming",
    "document": "Lua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at the Pontifical Catholic University of Rio de Janeiro, in Brazil. From 1977 until 1992, Brazil had a policy of strong trade barriers (called a market reserve) for computer hardware and software, believing that Brazil could and should produce its own hardware and software. In that climate, Tecgraf's clients could not afford, either politically or financially, to buy customized software from abroad; under the market reserve, clients would have to go through a complex bureaucratic process to prove their needs couldn't be met by Brazilian companies. Those reasons led Tecgraf to implement the basic tools it needed from scratch. Lua's predecessors were the data-description/configuration languages Simple Object Language (SOL) and data-entry language (DEL). They had been independently developed at Tecgraf in 1992–1993 to add some flexibility into two different projects (both were interactive graphical programs for engineering applications at Petrobras company). There was a lack of any flow-control structures in SOL and DEL, and Petrobras felt a growing need to add full programming power to them. In The Evolution of Lua, the language's authors wrote: In 1993, the only real contender was Tcl, which had been explicitly designed to be embedded into applications. However, Tcl had unfamiliar syntax, did not offer good support for data description, and ran only on Unix platforms. We did not consider LISP or Scheme because of their unfriendly syntax. Python was still in its infancy. In the free, do-it-yourself atmosphere that then reigned in Tecgraf, it was quite natural that we should try to develop our own scripting language ... Because many potential users of the language were not professional programmers, the language should avoid cryptic syntax and semantics. The implementation of the new language should be highly portable, because Tecgraf's clients had a very diverse collection of computer platforms. Finally, since we expected that other Tecgraf products would also need to embed a scripting language, the new language should follow the example of SOL and be provided as a library with a C API. Lua 1.0 was designed in such a way that its object constructors, being then slightly different from the current light and flexible style, incorporated the data-description syntax of SOL (hence the name Lua: Sol meaning Sun in Portuguese, and Lua meaning Moon). Lua syntax for control structures was mostly borrowed from Modula (if, while, repeat/until), but also had taken influence from CLU (multiple assignments and multiple returns from function calls, as a simpler alternative to reference parameters or explicit pointers), C++ (neat idea of allowing a local variable to be declared only where we need it), SNOBOL and AWK (associative arrays). In an article published in Dr. Dobb's Journal, Lua's creators also state that LISP and Scheme with their single, ubiquitous data-structure mechanism (the list) were a major influence on their decision to develop the table as the primary data structure of Lua. Lua semantics have been increasingly influenced by Scheme over time, especially with the introduction of anonymous functions and full lexical scoping. Several features were added in new Lua versions. Versions of Lua prior to version 5.0 were released under a license similar to the BSD license. From version 5.0 onwards, Lua has been licensed under the MIT License. Both are permissive free software licences and are almost identical. Lua is commonly described as a multi-paradigm language, providing a small set of general features that can be extended to fit different problem types. Lua does not contain explicit support for inheritance, but allows it to be implemented with metatables. Similarly, Lua allows programmers to implement namespaces, classes and other related features using its single table implementation; first-class functions allow the employment of many techniques from functional programming and full lexical scoping allows fine-grained information hiding to enforce the principle of least privilege. In general, Lua strives to provide simple, flexible meta-features that can be extended as needed, rather than supply a feature-set specific to one programming paradigm. As a result, the base language is light; the full reference interpreter is only about 247 kB compiled and easily adaptable to a broad range of applications. As a dynamically typed language intended for use as an extension language or scripting language, Lua is compact enough to fit on a variety of host platforms. It supports only a small number of atomic data structures such as Boolean values, numbers (double-precision floating point and 64-bit integers by default) and strings. Typical data structures such as arrays, sets, lists and records can be represented using Lua's single native data structure, the table, which is essentially a heterogeneous associative array. Lua implements a small set of advanced features such as first-class functions, garbage collection, closures, proper tail calls, coercion (automatic conversion between string and number values at run time), coroutines (cooperative multitasking) and dynamic module loading. The classic Hello, World! program can be written as follows, with or without parentheses:[a] print(Hello, World!) print Hello, World! The declaration of a variable, without a value. local variable The declaration of a variable with a value of 10. local students = 10 A comment in Lua starts with a double-hyphen and runs to the end of the line, similar to Ada, Eiffel, Haskell, SQL and VHDL. Multi-line strings and comments are marked with double square brackets. -- Single line comment --[[ Multi-line comment --]] The factorial function is implemented in this example: function factorial(n) local x = 1 for i = 2, n do x = x * i end return x end Lua has one type of conditional test: if then end with optional else and elseif then execution control constructs. The generic if then end statement requires all three keywords: if condition then --statement body end An example of an if statement if x ~= 10 then print(x) end The else keyword may be added with an accompanying statement block to control execution when the if condition evaluates to false: if condition then --statement body else --statement body end An example of an if else statement if x == 10 then print(10) else print(x) end Execution may also be controlled according to multiple conditions using the elseif then keywords: if condition then --statement body elseif condition then --statement body else -- optional --optional default statement body end An example of an if elseif else statement if x == y then print(x = y) elseif x == z then print(x = z) else -- optional print(x does not equal any other variable) end Lua has four types of conditional loops: the while loop, the repeat loop (similar to a do while loop), the numeric for loop and the generic for loop. --condition = true while condition do --statements end repeat --statements until condition for i = first, last, delta do --delta may be negative, allowing the for loop to count down or up --statements --example: print(i) end This generic for loop would iterate over the table _G using the standard iterator function pairs, until it returns nil: for key, value in pairs(_G) do print(key, value) end Loops can also be nested (put inside of another loop). local grid = { { 11, 12, 13 }, { 21, 22, 23 }, { 31, 32, 33 } } for y, row in pairs(grid) do for x, value in pairs(row) do print(x, y, value) end end Lua's treatment of functions as first-class values is shown in the following example, where the print function's behavior is modified: do local oldprint = print -- Store current print function as oldprint function print(s) --[[ Redefine print function. The usual print function can still be used through oldprint. The new one has only one argument.]] oldprint(s == foo and bar or s) end end Any future calls to print will now be routed through the new function, and because of Lua's lexical scoping, the old print function will only be accessible by the new, modified print. Lua also supports closures, as demonstrated below: function addto(x) -- Return a new function that adds x to the argument return function(y) --[[ When we refer to the variable x, which is outside the current scope and whose lifetime would be shorter than that of this anonymous function, Lua creates a closure.]] return x + y end end fourplus = addto(4) print(fourplus(3)) -- Prints 7 --This can also be achieved by calling the function in the following way: print(addto(4)(3)) --[[ This is because we are calling the returned function from 'addto(4)' with the argument '3' directly. This also helps to reduce data cost and up performance if being called iteratively.]] A new closure for the variable x is created every time addto is called, so that each new anonymous function returned will always access its own x parameter. The closure is managed by Lua's garbage collector, just like any other object. Tables are the most important data structures (and, by design, the only built-in composite data type) in Lua and are the foundation of all user-created types. They are associative arrays with addition of automatic numeric key and special syntax. A table is a set of key and data pairs, where the data is referenced by key; in other words, it is a hashed heterogeneous associative array. Tables are created using the {} constructor syntax. a_table = {} -- Creates a new, empty table Tables are always passed by reference (see Call by sharing). A key (index) can be any value except nil and NaN, including functions. a_table = {x = 10} -- Creates a new table, with one entry mapping x to the number 10. print(a_table[x]) -- Prints the value associated with the string key, in this case 10. b_table = a_table b_table[x] = 20 -- The value in the table has been changed to 20. print(b_table[x]) -- Prints 20. print(a_table[x]) -- Also prints 20, because a_table and b_table both refer to the same table. A table is often used as structure (or record) by using strings as keys. Because such use is very common, Lua features a special syntax for accessing such fields. point = { x = 10, y = 20 } -- Create new table print(point[x]) -- Prints 10 print(point.x) -- Has exactly the same meaning as line above. The easier-to-read dot notation is just syntactic sugar. By using a table to store related functions, it can act as a namespace. Point = {} Point.new = function(x, y) return {x = x, y = y} -- return {[x] = x, [y] = y} end Point.set_x = function(point, x) point.x = x -- point[x] = x; end Tables are automatically assigned a numerical key, enabling them to be used as an array data type. The first automatic index is 1 rather than 0 as it is for many other programming languages (though an explicit index of 0 is allowed). A numeric key 1 is distinct from a string key 1. array = { a, b, c, d } -- Indices are assigned automatically. print(array) -- Prints b. Automatic indexing in Lua starts at 1. print(#array) -- Prints 4. # is the length operator for tables and strings. array = z -- Zero is a legal index. print(#array) -- Still prints 4, as Lua arrays are 1-based. The length of a table t is defined to be any integer index n such that t[n] is not nil and t[n+1] is nil; moreover, if t is nil, n can be zero. For a regular array, with non-nil values from 1 to a given n, its length is exactly that n, the index of its last value. If the array has holes (that is, nil values between other non-nil values), then #t can be any of the indices that directly precedes a nil value (that is, it may consider any such nil value as the end of the array). ExampleTable = { {1, 2, 3, 4}, {5, 6, 7, 8} } print(ExampleTable) -- Prints 3 print(ExampleTable) -- Prints 8 A table can be an array of objects. function Point(x, y) -- Point object constructor return { x = x, y = y } -- Creates and returns a new object (table) end array = { Point(10, 20), Point(30, 40), Point(50, 60) } -- Creates array of points -- array = { { x = 10, y = 20 }, { x = 30, y = 40 }, { x = 50, y = 60 } }; print(array.y) -- Prints 40 Using a hash map to emulate an array is normally slower than using an actual array; however, Lua tables are optimized for use as arrays to help avoid this issue. Extensible semantics is a key feature of Lua, and the metatable concept allows powerful customization of tables. The following example demonstrates an infinite table. For any n, fibs[n] will give the n-th Fibonacci number using dynamic programming and memoization. fibs = { 1, 1 } -- Initial values for fibs and fibs. setmetatable(fibs, { __index = function(values, n) --[[__index is a function predefined by Lua, it is called if key n does not exist.]] values[n] = values[n - 1] + values[n - 2] -- Calculate and memoize fibs[n]. return values[n] end }) Although Lua does not have a built-in concept of classes, object-oriented programming can be emulated using functions and tables. An object is formed by putting methods and fields in a table. Inheritance (both single and multiple) can be implemented with metatables, delegating nonexistent methods and fields to a parent object. There is no such concept as class with these techniques; rather, prototypes are used, similar to Self or JavaScript. New objects are created either with a factory method (that constructs new objects from scratch) or by cloning an existing object. Creating a basic vector object: local Vector = {} local VectorMeta = { __index = Vector} function Vector.new(x, y, z) -- The constructor return setmetatable({x = x, y = y, z = z}, VectorMeta) end function Vector.magnitude(self) -- Another method return math.sqrt(self.x^2 + self.y^2 + self.z^2) end local vec = Vector.new(0, 1, 0) -- Create a vector print(vec.magnitude(vec)) -- Call a method (output: 1) print(vec.x) -- Access a member variable (output: 0) Here, setmetatable tells Lua to look for an element in the Vector table if it is not present in the vec table. vec.magnitude, which is equivalent to vec[magnitude], first looks in the vec table for the magnitude element. The vec table does not have a magnitude element, but its metatable delegates to the Vector table for the magnitude element when it's not found in the vec table. Lua provides some syntactic sugar to facilitate object orientation. To declare member functions inside a prototype table, one can use function table:func(args), which is equivalent to function table.func(self, args). Calling class methods also makes use of the colon: object:func(args) is equivalent to object.func(object, args). That in mind, here is a corresponding class with : syntactic sugar: local Vector = {} Vector.__index = Vector function Vector:new(x, y, z) -- The constructor -- Since the function definition uses a colon, -- its first argument is self which refers -- to Vector return setmetatable({x = x, y = y, z = z}, self) end function Vector:magnitude() -- Another method -- Reference the implicit object using self return math.sqrt(self.x^2 + self.y^2 + self.z^2) end local vec = Vector:new(0, 1, 0) -- Create a vector print(vec:magnitude()) -- Call a method (output: 1) print(vec.x) -- Access a member variable (output: 0) Lua supports using metatables to give Lua class inheritance. In this example, we allow vectors to have their values multiplied by a constant in a derived class. local Vector = {} Vector.__index = Vector function Vector:new(x, y, z) -- The constructor -- Here, self refers to whatever class's new -- method we call. In a derived class, self will -- be the derived class; in the Vector class, self -- will be Vector return setmetatable({x = x, y = y, z = z}, self) end function Vector:magnitude() -- Another method -- Reference the implicit object using self return math.sqrt(self.x^2 + self.y^2 + self.z^2) end -- Example of class inheritance local VectorMult = {} VectorMult.__index = VectorMult setmetatable(VectorMult, Vector) -- Make VectorMult a child of Vector function VectorMult:multiply(value) self.x = self.x * value self.y = self.y * value self.z = self.z * value return self end local vec = VectorMult:new(0, 1, 0) -- Create a vector print(vec:magnitude()) -- Call a method (output: 1) print(vec.y) -- Access a member variable (output: 1) vec:multiply(2) -- Multiply all components of vector by 2 print(vec.y) -- Access member again (output: 2) Lua also supports multiple inheritance; __index can either be a function or a table. Operator overloading can also be done; Lua metatables can have elements such as __add, __sub and so on. Lua programs are not interpreted directly from the textual Lua file, but are compiled into bytecode, which is then run on the Lua virtual machine (VM). The compiling process is typically invisible to the user and is performed during run-time, especially when a just-in-time compilation (JIT) compiler is used, but it can be done offline to increase loading performance or reduce the memory footprint of the host environment by leaving out the compiler. Lua bytecode can also be produced and executed from within Lua, using the dump function from the string library and the load/loadstring/loadfile functions. Lua version 5.3.4 is implemented in approximately 24,000 lines of C code. Like most CPUs, and unlike most virtual machines (which are stack-based), the Lua VM is register-based, and therefore more closely resembles most hardware design. The register architecture both avoids excessive copying of values, and reduces the total number of instructions per function. The virtual machine of Lua 5 is one of the first register-based pure VMs to have a wide use. Parrot and Android's Dalvik are two other well-known register-based VMs. PCScheme's VM was also register-based. This example is the bytecode listing of the factorial function defined above (as shown by the luac 5.1 compiler): function <factorial.lua:1,7> (9 instructions, 36 bytes at 0x8063c60) 1 param, 6 slots, 0 upvalues, 6 locals, 2 constants, 0 functions 1 LOADK 1 -1 ; 1 2 LOADK 2 -2 ; 2 3 MOVE 3 0 4 LOADK 4 -1 ; 1 5 FORPREP 2 1 ; to 7 6 MUL 1 1 5 7 FORLOOP 2 -2 ; to 6 8 RETURN 1 2 9 RETURN 0 1 Lua is intended to be embedded into other applications, and provides a C API for this purpose. The API is divided into two parts: the Lua core and the Lua auxiliary library. The Lua API's design eliminates the need for manual reference counting (management) in C code, unlike Python's API. The API, like the language, is minimalist. Advanced functions are provided by the auxiliary library, which consists largely of preprocessor macros which assist with complex table operations. The Lua C API is stack based. Lua provides functions to push and pop most simple C data types (integers, floats, etc.) to and from the stack, and functions to manipulate tables through the stack. The Lua stack is somewhat different from a traditional stack; the stack can be indexed directly, for example. Negative indices indicate offsets from the top of the stack. For example, −1 is the top (most recently pushed value), while positive indices indicate offsets from the bottom (oldest value). Marshalling data between C and Lua functions is also done using the stack. To call a Lua function, arguments are pushed onto the stack, and then the lua_call is used to call the actual function. When writing a C function to be directly called from Lua, the arguments are read from the stack. Here is an example of calling a Lua function from C: #include <stdio.h> #include <lua.h> // Lua main library (lua_*) #include <lauxlib.h> // Lua auxiliary library (luaL_*) int main(void) { // create a Lua state lua_State *L = luaL_newstate(); // load and execute a string if (luaL_dostring(L, function foo (x,y) return x+y end)) { lua_close(L); return -1; } // push value of global foo (the function defined above) // to the stack, followed by integers 5 and 3 lua_getglobal(L, foo); lua_pushinteger(L, 5); lua_pushinteger(L, 3); lua_call(L, 2, 1); // call a function with two arguments and one return value printf(Result: %d\\n, lua_tointeger(L, -1)); // print integer value of item at stack top lua_pop(L, 1); // return stack to original state lua_close(L); // close Lua state return 0; } Running this example gives: $ cc -o example example.c -llua $ ./example Result: 8 The C API also provides some special tables, located at various pseudo-indices in the Lua stack. At LUA_GLOBALSINDEX prior to Lua 5.2 is the globals table, _G from within Lua, which is the main namespace. There is also a registry located at LUA_REGISTRYINDEX where C programs can store Lua values for later retrieval. Besides standard library (core) modules it is possible to write extensions using the Lua API. Extension modules are shared objects which can be used to extend the functions of the interpreter by providing native facilities to Lua scripts. Lua scripts may load extension modules using require, just like modules written in Lua itself, or with package.loadlib. When a C library is loaded via require('foo') Lua will look for the function luaopen_foo and call it, which acts as any C function callable from Lua and generally returns a table filled with methods. A growing set of modules termed rocks are available through a package management system named LuaRocks, in the spirit of CPAN, RubyGems and Python eggs. Prewritten Lua bindings exist for most popular programming languages, including other scripting languages. For C++, there are a number of template-based approaches and some automatic binding generators. Main article: List of applications using Lua In video game development, Lua is widely used as a scripting language, mainly due to its perceived easiness to embed, fast execution, and short learning curve. Notable games which use Lua include Roblox, Garry's Mod, World of Warcraft, Payday 2, Phantasy Star Online 2, Dota 2, Crysis, and many others. Some games that do not natively support Lua programming or scripting, have this function added by mods, as ComputerCraft does for Minecraft. Also, Lua is used in non-video game software, such as Adobe Lightroom, Moho, iClone, Aerospike, and some system software in FreeBSD and NetBSD, and used as a template scripting language on MediaWiki using the Scribunto extension. In 2003, a poll conducted by GameDev.net showed Lua was the most popular scripting language for game programming. On 12 January 2012, Lua was announced as a winner of the Front Line Award 2011 from the magazine Game Developer in the category Programming Tools. Many non-game applications also use Lua for extensibility, such as LuaTeX, an implementation of the TeX type-setting language, Redis, a key-value database, ScyllaDB, a wide-column store, Neovim, a text editor, Nginx, a web server, Wireshark, a network packet analyzer and Pure Data, a visual audio programming language (through the pdlua extension). Through the Scribunto extension, Lua is available as a server-side scripting language in the MediaWiki software that runs Wikipedia and other wikis. Among its uses are allowing the integration of data from Wikidata into articles, and powering the automated taxobox system. MoonScript is a dynamic, whitespace-sensitive scripting language inspired by CoffeeScript, which is compiled into Lua. This means that instead of using do and end (or { and }) to delimit sections of code it uses line breaks and indentation style. A notable use of MoonScript is the video game distribution website Itch.io. Haxe supports compiling to some Lua targets, including Lua 5.1-5.3 and LuaJIT 2.0 and 2.1. Fennel, a Lisp dialect that targets Lua. Urn, a Lisp dialect built on Lua. Amulet, an ML-like functional programming language, which compiler emits Lua files. LunarML, Standard ML compiler that produces Lua/JavaScript LuaJIT, a just-in-time compiler of Lua 5.1. Luau developed by Roblox Corporation, a derivative of and backwards-compatible with Lua 5.1 with gradual typing, additional features and a focus on performance. Luau has improved sandboxing to allow for running untrusted code in embedded applications. Ravi, a JIT-enabled Lua 5.3 language with optional static typing. JIT is guided by type information. Shine, a fork of LuaJIT with many extensions, including a module system and a macro system. Glua, a modified version embedded into the game Garry's Mod as its scripting language. Teal, a statically typed Lua dialect written in Lua. PICO-8, a fantasy video game console, uses a subset of Lua known as PICO-8 Lua. In addition, the Lua users community provides some power patches on top of the reference C implementation. Comparison of programming languages ^ Syntactic sugar, a table construct or literal string following an identifier is a valid function call. ^ [ANN] Lua 5.4.7 now available. 25 June 2024. Retrieved 27 June 2024. ^ Ring Team (5 December 2017). The Ring programming language and other languages. ring-lang.net. Archived from the original on 25 December 2018. Retrieved 5 December 2017. ^ a b Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Filho, Waldemar Celes (June 1996). Lua—An Extensible Extension Language. Software: Practice and Experience. 26 (6): 635–652. doi:10.1002/(SICI)1097-024X(199606)26:6<635::AID-SPE26>3.0.CO;2-P. S2CID 61066194. Retrieved 24 October 2015. ^ a b c About Lua. Lua.org. Retrieved 11 August 2011. ^ Takhteyev, Yuri (21 April 2013). From Brazil to Wikipedia. Foreign Affairs. Retrieved 25 April 2013. ^ a b c d Ierusalimschy, R.; Figueiredo, L. H.; Celes, W. (2007). The evolution of Lua (PDF). Proceedings of the third ACM SIGPLAN conference on History of programming languages. pp. 2–1–2–26. doi:10.1145/1238844.1238846. ISBN 978-1-59593-766-7. S2CID 475143. ^ The evolution of an extension language: a history of Lua. 2001. Retrieved 18 December 2008. ^ Figueiredo, L. H.; Ierusalimschy, R.; Celes, W. (December 1996). Lua: an Extensible Embedded Language. A few metamechanisms replace a host of features. Dr. Dobb's Journal. Vol. 21, no. 12. pp. 26–33. ^ Programming in Lua : 1. ^ Lua 5.0 Reference Manual, 2.5.7, Function Calls. ^ Lua 5.1 Reference Manual. 2014. Retrieved 27 February 2014. ^ Lua 5.1 Reference Manual. 2012. Retrieved 16 October 2012. ^ Lua 5.1 Source Code. 2006. Retrieved 24 March 2011. ^ Roberto Ierusalimschy. Programming in Lua, 4th Edition. p. 165. ^ Programming in Lua : 16.3. Lua. Retrieved 16 September 2021. ^ Metamethods Tutorial. lua-users wiki. Archived from the original on 16 September 2021. Retrieved 16 September 2021. ^ Ierusalimschy, R.; Figueiredo, L. H.; Celes, W. (2005). The implementation of Lua 5.0. J. Of Universal Comp. Sci. 11 (7): 1159–1176. doi:10.3217/jucs-011-07-1159. ^ Texas Instruments (1990). PC Scheme: Users Guide and Language Reference Manual, Trade Edition. MIP Press. ISBN 0-262-70040-9. ^ Man, Kein-Hong (2006). A No-Frills Introduction to Lua 5.1 VM Instructions (PDF). ^ a b Lua 5.2 Reference Manual. Lua.org. Retrieved 23 October 2012. ^ Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar (2011–2013). Changes in the API. Lua.org. Retrieved 9 May 2014. {{cite book}}: |work= ignored (help) ^ Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar. Lua 5.4 Reference Manual. Lua. Retrieved 1 June 2022. ^ LuaRocks. luarocks.org. Retrieved 24 May 2009. ^ Binding Code To Lua. Lua-users wiki. Archived from the original on 27 July 2009. Retrieved 24 May 2009. ^ Why is Lua considered a game language?. Stack Overflow. Archived from the original on 20 August 2013. Retrieved 22 April 2017. ^ Why Luau?. Luau. Retrieved 23 March 2022. ^ Introduction to Crysis server-side modding. Retrieved 23 March 2022. ^ Lua Functions. wow.gamepedia.com. Retrieved 1 March 2021. ^ Poll Results. Archived from the original on 7 December 2003. Retrieved 22 April 2017.{{cite web}}: CS1 maint: bot: original URL status unknown (link) ^ Front Line Award Winners Announced. Archived from the original on 15 June 2013. Retrieved 22 April 2017. ^ Extension:Scribunto - MediaWiki. MediaWiki.org. Retrieved 21 February 2019. ^ Wikidata:Infobox Tutorial - Wikidata. www.wikidata.org. Retrieved 21 December 2018. ^ Language Guide - MoonScript 0.5.0. moonscript.org. Retrieved 25 September 2020. ^ leaf (23 September 2020). leafo/moonscript. GitHub. Retrieved 25 September 2020. ^ a b Garzia, Andre Alves. Languages that compile to Lua. AndreGarzia.com. Retrieved 25 September 2020. ^ Urn: A Lisp implementation for Lua | Urn. urn-lang.com. Retrieved 12 January 2021. ^ Amulet ML. amulet.works. Retrieved 12 January 2021. ^ LunarML, Standard ML compiler that produces Lua/JavaScript. GitHub. ^ LuaJIT. LuaJIT. ^ Extensions. LuaJIT. ^ Why Luau?. Luau. Retrieved 3 August 2024. All of these motivated us to start reshaping Lua 5.1 that we started from into a new, derivative language that we call Luau. Our focus is on making the language more performant and feature-rich, and make it easier to write robust code through a combination of linting and type checking using a gradual type system. ^ Sandboxing. Luau. Retrieved 27 March 2025. ^ Ravi Programming Language. GitHub. ^ Hundt, Richard (22 April 2021). richardhundt/shine. GitHub. ^ Garry's Mod Wiki. wiki.facepunch.com. ^ teal-language/tl, Teal language, 23 December 2024, retrieved 23 December 2024 ^ Lua Power Patches. lua-users.org. Archived from the original on 18 May 2021. Retrieved 18 May 2021. Ierusalimschy, R. (2013). Programming in Lua (3rd ed.). Lua.org. ISBN 978-85-903798-5-0. (The 1st ed. is available online.) Gutschmidt, T. (2003). Game Programming with Python, Lua, and Ruby. Course Technology PTR. ISBN 978-1-59200-077-7. Schuytema, P.; Manyen, M. (2005). Game Development with Lua. Charles River Media. ISBN 978-1-58450-404-7. Jung, K.; Brown, A. (2007). Beginning Lua Programming. Wrox Press. ISBN 978-0-470-06917-2. Archived from the original on 8 July 2018. Retrieved 7 July 2018. Figueiredo, L. H.; Celes, W.; Ierusalimschy, R., eds. (2008). Lua Programming Gems. Lua.org. ISBN 978-85-903798-4-3. Takhteyev, Yuri (2012). Coding Places: Software Practice in a South American City. The MIT Press. ISBN 978-0-262-01807-4. Archived from the original on 2 November 2012. Chapters 6 and 7 are dedicated to Lua, while others look at software in Brazil more broadly. Varma, Jayant (2012). Learn Lua for iOS Game Development. Apress. ISBN 978-1-4302-4662-6. Matheson, Ash (29 April 2003). An Introduction to Lua. GameDev.net. Archived from the original on 18 December 2012. Retrieved 3 January 2013. Fieldhouse, Keith (16 February 2006). Introducing Lua. ONLamp.com. O'Reilly Media. Archived from the original on 12 March 2006. Retrieved 28 February 2006. Streicher, Martin (28 April 2006). Embeddable scripting with Lua. developerWorks. IBM. Archived from the original on 2 July 2009. Retrieved 7 July 2018. Quigley, Joseph (1 June 2007). A Look at Lua. Linux Journal. Hamilton, Naomi (11 September 2008). The A-Z of Programming Languages: Lua. Computerworld. IDG. Archived from the original on 8 July 2018. Retrieved 7 July 2018. Interview with Roberto Ierusalimschy. Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar (12 May 2011). Passing a Language through the Eye of a Needle. ACM Queue. 9 (5): 20–29. doi:10.1145/1978862.1983083. S2CID 19484689. How the embeddability of Lua impacted its design. Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar (November 2018). A Look at the Design of Lua. Communications of the ACM. 61 (11): 114–123. doi:10.1145/3186277. S2CID 53114923.[permanent dead link] Lua papers and theses Wikibooks has a book on the topic of: Lua Programming Lua at Wikipedia's sister projects News from WikinewsTextbooks from WikibooksResources from Wikiversity Official website Lua Users Archived 16 December 2010 at the Wayback Machine, Community Lua Forum Archived 28 September 2021 at the Wayback Machine LuaDist Lua Rocks - Package manager Projects in Lua vteLua programmingPorts, distributions Plua LÖVE Solar2D Package manager LuaRocks IDEs Decoda SciTE Applications, frameworks OpenResty Prosody Torch Tarantool IUP List of applications using Lua vteFree and open-source softwareGeneral Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Softwarepackages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases: National GermanyUnited StatesFranceBnF dataIsrael Portals: Free and open-source software Computer programming",
    "paradigm": "Multi-paradigm : scripting , imperative ( procedural , prototype-based , object-oriented ), functional , meta , reflective",
    "first_appeared": "1993 ; 32 years ago ( 1993 )",
    "stable_release": "5.4.8",
    "typing_discipline": "Dynamic , strong , duck",
    "influenced_by": "C++ , CLU , Modula , Scheme , SNOBOL",
    "influenced": "GameMonkey , Io , JavaScript , Julia , Red , Ring , Ruby , Squirrel , C-- , Luau ,",
    "stable_release_date": "2025-06-04T00:00:00Z"
  },
  {
    "title": "C Sharp (programming language)",
    "url": "https://en.wikipedia.org/wiki/C_Sharp_(programming_language)",
    "design_goals": "The Ecma standard lists these design goals for C#: The language is intended to be a simple, modern, general-purpose, object-oriented programming language. The language, and implementations thereof, should provide support for software engineering principles such as strong type checking, array bounds checking,: 58–59 detection of attempts to use uninitialized variables, and automatic garbage collection.: 563 Software robustness, durability, and programmer productivity are important. The language is intended for use in developing software components suitable for deployment in distributed environments. Portability is very important for source code and programmers, especially those already familiar with C and C++. Support for internationalization: 314 is very important. C# is intended to be suitable for writing applications for both hosted and embedded systems, ranging from the very large that use sophisticated operating systems, down to the very small having dedicated functions. Although C# applications are intended to be economical with regard to memory and processing power requirements, the language was not intended to compete directly on performance and size with C or assembly language.",
    "history": "C#'s former logos During the development of the .NET Framework, the class libraries were originally written using a managed code compiler system named Simple Managed C (SMC). In January 1999, Anders Hejlsberg formed a team to build a new language at the time called COOL, which stood for C-like Object Oriented Language. Microsoft had considered keeping the name COOL(C-like Object Oriented Language) as the final name of the language, but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000 Professional Developers Conference, the language had been renamed C#, and the class libraries and ASP.NET runtime were ported to C#. Hejlsberg is C#'s principal designer and lead architect at Microsoft, and was previously involved with the design of Turbo Pascal, Embarcadero Delphi (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and Visual J++. In interviews and technical papers, he has stated that flaws in most major programming languages (e.g. C++, Java, Delphi, and Smalltalk) drove the fundamentals of the Common Language Runtime (CLR), which, in turn, drove the design of the C# language. James Gosling, who created the Java programming language in 1994, and Bill Joy, a co-founder of Sun Microsystems, the originator of Java, called C# an imitation of Java; Gosling further said that [C# is] sort of Java with reliability, productivity and security deleted. In July 2000, Hejlsberg said that C# is not a Java clone and is much closer to C++ in its design. Since the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming two quite different languages. One of the first major departures came with the addition of generics to both languages, with vastly different implementations. C# uses of reification to provide first-class generic objects that can be used like any other class, with code generation performed at class-load time. Furthermore, C# has added several major features to accommodate functional-style programming, culminating in the LINQ extensions released with C# 3.0 and its supporting framework of lambda expressions, extension methods, and anonymous types. These features enable C# programmers to use functional programming techniques, such as closures, when it is advantageous to their application. The LINQ extensions and the functional imports help developers reduce the amount of boilerplate code included in common tasks such as querying a database, parsing an XML file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability. C# used to have a mascot called Andy (named after Anders Hejlsberg). It was retired on January 29, 2004. C# was originally submitted to the ISO/IEC JTC 1 subcommittee SC 22 for review, under ISO/IEC 23270:2003, was withdrawn and was then approved under ISO/IEC 23270:2006. The 23270:2006 is withdrawn under 23270:2018 and approved with this version.",
    "name": "Microsoft first used the name C# in 1988 for a variant of the C language designed for incremental compilation. That project was not completed, and the name was later reused. C-sharp musical note The name C sharp was inspired by the musical notation whereby a sharp symbol indicates that the written note should be made a semitone higher in pitch. This is similar to the language name of C++, where ++ indicates that a variable should be incremented by 1 after being evaluated. The sharp symbol also resembles a ligature of four + symbols (in a two-by-two grid), further implying that the language is an increment of C++. Due to technical limits of display (standard fonts, browsers, etc.), and most keyboard layouts lacking a sharp symbol (U+266F ♯ MUSIC SHARP SIGN (&sharp;)), the number sign (U+0023 # NUMBER SIGN (&num;)) was chosen to approximate the sharp symbol in the written name of the programming language. This convention is reflected in the ECMA-334 C# Language Specification. The sharp suffix has been used by a number of other Microsoft .NET compatible/compliant languages that are variants of existing languages, including J# (a .NET language also designed by Microsoft that is derived from Java 1.1), A# (from Ada), and the functional programming language F#. The original implementation of Eiffel for .NET was called Eiffel#, a name retired since the full Eiffel language is now supported. The suffix has also been used for libraries, such as Gtk# (a .NET wrapper for GTK and other GNOME libraries) and Cocoa# (a wrapper for Cocoa).",
    "versions": "Development of the text for standards (beginning with C# 6) is done on GitHub. C# 7 was submitted to Ecma and approved in December 2023. As of January 2024, the standard for C# 8 is currently under development, referencing the approved language proposals. C#version Language specification Date .NET Visual Studio Ecma ISO/IEC Microsoft 1.0 ECMA-334:2003, December 2002 ISO/IEC 23270:2003, April 2003 January 2002 January 2002 .NET Framework 1.0 Visual Studio .NET 2002 1.11.2 October 2003 April 2003 .NET Framework 1.1 Visual Studio .NET 2003 2.0 ECMA-334:2006, June 2006 ISO/IEC 23270:2006, September 2006 September 2005[d] November 2005 .NET Framework 2.0.NET Framework 3.0 Visual Studio 2005Visual Studio 2008 3.0 None August 2007 November 2007 .NET Framework 2.0 (Except LINQ).NET Framework 3.0 (Except LINQ).NET Framework 3.5 Visual Studio 2008 4.0 April 2010 April 2010 .NET Framework 4 Visual Studio 2010 5.0 ECMA-334:2017, December 2017 ISO/IEC 23270:2018, December 2018 June 2013 August 2012 .NET Framework 4.5 Visual Studio 2012Visual Studio 2013 6.0 ECMA-334:2022, June 2022 None Draft July 2015 .NET Framework 4.6.NET Core 1.0.NET Core 1.1 Visual Studio 2015 7.0 ECMA-334:2023, December 2023 ISO/IEC 20619:2023, September 2023 Specification proposal March 2017 .NET Framework 4.7 Visual Studio 2017 version 15.0 7.1 Specification proposal August 2017 .NET Core 2.0 Visual Studio 2017 version 15.3 7.2 Specification proposal November 2017 Visual Studio 2017 version 15.5 7.3 Specification proposal Archived March 7, 2021, at the Wayback Machine May 2018 .NET Core 2.1.NET Core 2.2.NET Framework 4.8 Visual Studio 2017 version 15.7 8.0 None Specification proposal September 2019 .NET Core 3.0.NET Core 3.1 Visual Studio 2019 version 16.3 9.0 Specification proposal November 2020 .NET 5.0 Visual Studio 2019 version 16.8 10.0 Specification proposal November 2021 .NET 6.0 Visual Studio 2022 version 17.0 11.0 Specification proposal November 2022 .NET 7.0 Visual Studio 2022 version 17.4 12.0 Specification proposal November 2023 .NET 8.0 Visual Studio 2022 version 17.8 13.0 Specification proposal November 2024 .NET 9.0 Visual Studio 2022 version 17.12",
    "syntax": "Main article: C# syntax See also: Syntax (programming languages) The core syntax of the C# language is similar to that of other C-style languages such as C, Objective-C, C++ and Java, particularly: Semicolons are used to denote the end of a statement. Curly brackets are used to group statements. Statements are commonly grouped into methods (functions), methods into classes, and classes into namespaces. Variables are assigned using an equals sign, but compared using two consecutive equals signs. Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them. class, int and void are used to define large-scale (usually main) program functions in scripts most of the time in C-style computer programming languages.",
    "distinguishing_features": "See also: Comparison of C# and Java Some notable features of C# that distinguish it from C, C++, and Java where noted, are:",
    "portability": "By design, C# is the programming language that most directly reflects the underlying Common Language Infrastructure (CLI). Most of its intrinsic types correspond to value-types implemented by the CLI (Common Language Infrastructure) framework. However, the language specification does not state the code generation requirements of the compiler: that is, it does not state that a C# compiler must target a Common Language Runtime (CLR), or generate Common Intermediate Language (CIL), or generate any other specific format. Some C# compilers can also generate machine code like traditional compilers of Objective-C, C, C++, Assembly and Fortran.",
    "typing": "C# supports strongly, implicitly typed variable declarations with the keyword var,: 470 and implicitly typed arrays with the keyword new[] followed by a collection initializer.: 80 : 58 Its type system is split into two families: Value types, like the built-in numeric types and user-defined structs, which are automatically handed over as copies when used as parameters, and reference types, including arrays, instances of classes, and strings, which only hand over a pointer to the respective object. Due to their special handling of the equality operator and their immutability, strings will nevertheless behave as if they were values, for all practical purposes. You can even use them as case labels. Where necessary, value types will be boxed automatically. C# supports a strict Boolean data type, bool. Statements that take conditions, such as while and if, require an expression of a type that implements the true operator, such as the Boolean type. While C++ also has a Boolean type, it can be freely converted to and from integers, and expressions such as if (a) require only that a is convertible to bool, allowing a to be an int, or a pointer. C# disallows this integer meaning true or false approach, on the grounds that forcing programmers to use expressions that return exactly bool can prevent certain types of programming mistakes such as if (a = b) (use of assignment = instead of equality ==). C# is more type safe than C++. The only implicit conversions by default are those that are considered safe, such as widening of integers. This is enforced at compile-time, during JIT, and, in some cases, at runtime. No implicit conversions occur between Booleans and integers, nor between enumeration members and integers (except for literal 0, which can be implicitly converted to any enumerated type). Any user-defined conversion must be explicitly marked as explicit or implicit, unlike C++ copy constructors and conversion operators, which are both implicit by default. C# has explicit support for covariance and contravariance in generic types,: 144 : 23 unlike C++ which has some degree of support for contravariance simply through the semantics of return types on virtual methods. Enumeration members are placed in their own scope. The C# language does not allow for global variables or functions. All methods and members must be declared within classes. Static members of public classes can substitute for global variables and functions. Local variables cannot shadow variables of the enclosing block, unlike C and C++, but may shadow type-level names.",
    "metaprogramming": "Metaprogramming can be achieved in several ways: Reflection is supported through .NET APIs, which enable scenarios such as type metadata inspection and dynamic method invocation. Expression trees represent code as an abstract syntax tree, where each node is an expression that can be inspected or executed. This enables dynamic modification of executable code at runtime. Expression trees introduce some homoiconicity to the language. Attributes, in C# parlance, are metadata that can be attached to types, members, or entire assemblies, equivalent to annotations in Java. Attributes are accessible both to the compiler and to code through reflection, allowing them to adjust their behaviour. Many of the native attributes duplicate the functionality of GCC's and VisualC++'s platform-dependent preprocessor directives.[citation needed] System.Reflection.Emit namespace, which contains classes that emit metadata and CIL (types, assemblies, etc.) at runtime. The .NET Compiler Platform (Roslyn) provides API access to language compilation services, allowing for the compilation of C# code from within .NET applications. It exposes APIs for syntactic (lexical) analysis of code, semantic analysis, dynamic compilation to CIL, and code emission. Source generators, a feature of the Roslyn C# compiler, enable compile time metaprogramming. During the compilation process, developers can inspect the code being compiled with the compiler's API and pass additional generated C# source code to be compiled.",
    "methods_and_functions": "A method in C# is a member of a class that can be invoked as a function (a sequence of instructions), rather than the mere value-holding capability of a field (i.e. class or instance variable). As in other syntactically similar languages, such as C++ and ANSI C, the signature of a method is a declaration comprising in order: any optional accessibility keywords (such as private), the explicit specification of its return type (such as int, or the keyword void if no value is returned), the name of the method, and finally, a parenthesized sequence of comma-separated parameter specifications, each consisting of a parameter's type, its formal name and optionally, a default value to be used whenever none is provided. Different from most other languages, call-by-reference parameters have to be marked both at the function definition and at the calling site, and you can choose between ref and out, the latter allowing handing over an uninitialized variable which will have a definite value on return. Additionally, you can specify a variable-sized argument list by applying the params keyword to the last parameter. Certain specific kinds of methods, such as those that simply get or set a field's value by returning or assigning it, do not require an explicitly stated full signature, but in the general case, the definition of a class includes the full signature declaration of its methods. Like C++, and unlike Java, C# programmers must use the scope modifier keyword virtual to allow methods to be overridden by subclasses. Unlike C++, you have to explicitly specify the keyword override when doing so. This is supposed to avoid confusion between overriding and newly overloading a function (i.e. hiding the former implementation). To do the latter, you have to specify the new keyword. You can use the keyword sealed to disallow further overrides for individual methods or whole classes. Extension methods in C# allow programmers to use static methods as if they were methods from a class's method table, allowing programmers to virtually add instance methods to a class that they feel should exist on that kind of objects (and instances of the respective derived classes).: 103–105 : 202–203 The type dynamic allows for run-time method binding, allowing for JavaScript-like method calls and run-time object composition.: 114–118 C# has support for strongly-typed function pointers via the keyword delegate. Like the Qt framework's pseudo-C++ signal and slot, C# has semantics specifically surrounding publish-subscribe style events, though C# uses delegates to do so. C# offers Java-like synchronized method calls, via the attribute [MethodImpl(MethodImplOptions.Synchronized)], and has support for mutually-exclusive locks via the keyword lock.",
    "property": "C# supports classes with properties. The properties can be simple accesor functions with a backing field, or implement arbitrary getter and setter functions. A property is read-only if there's no setter. Like with fields, there can be class and instance properties. The underlying methods can be virtual or abstract like any other method. Since C# 3.0 the syntactic sugar of auto-implemented properties is available, where the accessor (getter) and mutator (setter) encapsulate operations on a single field of a class.",
    "namespace": "A C# namespace provides the same level of code isolation as a Java package or a C++ namespace, with very similar rules and features to a package. Namespaces can be imported with the using syntax.",
    "memory_access": "In C#, memory address pointers can only be used within blocks specifically marked as unsafe, and programs with unsafe code need appropriate permissions to run. Most object access is done through safe object references, which always either point to a live object or have the well-defined null value; it is impossible to obtain a reference to a dead object (one that has been garbage collected), or to an arbitrary block of memory. An unsafe pointer can point to an instance of an unmanaged value type that does not contain any references to objects subject to garbage collections such as class instances, arrays or strings. Code that is not marked as unsafe can still store and manipulate pointers through the System.IntPtr type, but it cannot dereference them. Managed memory cannot be explicitly freed; instead, it is automatically garbage collected. Garbage collection addresses the problem of memory leaks by freeing the programmer of responsibility for releasing memory that is no longer needed in most cases. Code that retains references to objects longer than is required can still experience higher memory usage than necessary, however once the final reference to an object is released the memory is available for garbage collection.",
    "exceptions": "A range of standard exceptions are available to programmers. Methods in standard libraries regularly throw system exceptions in some circumstances and the range of exceptions thrown is normally documented. Custom exception classes can be defined for classes allowing handling to be put in place for particular circumstances as needed. The syntax for handling exceptions is the following: try { // something } catch (Exception ex) { // if error do this } finally { // always executes, regardless of error occurrence } Most of the time people call this a try-catch code block, because of the try and catch functions being used and accessible on all C# versions. try { // something here } catch (Exception ex) { // example return 0; } finally { return 1; } Depending on your plans, the finally part can be left out. If error handling is not required, the (Exception ex) parameter can be omitted as well. Also, there can be several catch parts handling different kinds of exceptions. Checked exceptions are not present in C# (in contrast to Java). This has been a conscious decision based on the issues of scalability and version management.",
    "polymorphism": "Unlike C++, C# does not support multiple inheritance, although a class can implement any number of interfaces (fully abstract classes). This was a design decision by the language's lead architect to avoid complications and to simplify architectural requirements throughout CLI. When implementing multiple interfaces that contain a method with the same name and taking parameters of the same type in the same order (i.e. the same signature), similar to Java, C# allows both a single method to cover all interfaces and if necessary specific methods for each interface. C# also offers function overloading (a.k.a. ad-hoc-polymorphism), i.e. methods with the same name, but distinguishable signatures. Unlike Java, C# additionally supports operator overloading. Since version 2.0, C# offers parametric polymorphism, i.e. classes with arbitrary or constrained type parameters, e.g. List<T>, a variable-sized array which only can contain elements of type T. There are certain kinds of constraints you can specify for the type parameters: Has to be type X (or one derived from it), has to implement a certain interface, has to be a reference type, has to be a value type, has to implement a public parameterless constructor. Most of them can be combined, and you can specify any number of interfaces.",
    "language_integrated_query_linq": "C# has the ability to utilize LINQ through the .NET Framework. A developer can query a variety of data sources, provided the IEnumerable<T> interface is implemented on the object. This includes XML documents, an ADO.NET dataset, and SQL databases. Using LINQ in C# brings advantages like IntelliSense support, strong filtering capabilities, type safety with compile error checking ability, and consistency for querying data over a variety of sources. There are several different language structures that can be utilized with C# and LINQ and they are query expressions, lambda expressions, anonymous types, implicitly typed variables, extension methods, and object initializers. LINQ has two syntaxes: query syntax and method syntax. However, the compiler always converts the query syntax to method syntax at compile time. using System.Linq; var numbers = new int[] { 5, 10, 8, 3, 6, 12 }; // Query syntax (SELECT num FROM numbers WHERE num % 2 = 0 ORDER BY num) var numQuery1 = from num in numbers where num % 2 == 0 orderby num select num; // Method syntax var numQuery2 = numbers .Where(num => num % 2 == 0) .OrderBy(n => n);",
    "functional_programming": "Though primarily an imperative language, C# always adds functional features over time, for example: Functions as first-class citizen – C# 1.0 delegates Higher-order functions – C# 1.0 together with delegates Anonymous functions – C# 2 anonymous delegates and C# 3 lambdas expressions Closures – C# 2 together with anonymous delegates and C# 3 together with lambdas expressions Type inference – C# 3 with implicitly typed local variables var and C# 9 target-typed new expressions new() List comprehension – C# 3 LINQ Tuples – .NET Framework 4.0 but it becomes popular when C# 7.0 introduced a new tuple type with language support Nested functions – C# 7.0 Pattern matching – C# 7.0 Immutability – C# 7.2 readonly struct C# 9 record types and Init only setters Type classes – C# 12 roles/extensions (in development)",
    "common_type_system": "C# has a unified type system. This unified type system is called Common Type System (CTS).: Part 2, Chapter 4: The Type System A unified type system implies that all types, including primitives such as integers, are subclasses of the System.Object class. For example, every type inherits a ToString() method.",
    "categories_of_data_types": "CTS separates data types into two categories: Reference types Value types Instances of value types neither have referential identity nor referential comparison semantics. Equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from System.ValueType, always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor because they already have an implicit one which initializes all contained data to the type-dependent default value (0, null, or alike). Examples of value types are all primitive types, such as int (a signed 32-bit integer), float (a 32-bit IEEE floating-point number), char (a 16-bit Unicode code unit), decimal (fixed-point numbers useful for handling currency amounts), and System.DateTime (identifies a specific point in time with nanosecond precision). Other examples are enum (enumerations) and struct (user defined structures). In contrast, reference types have the notion of referential identity, meaning that each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for System.String). Some operations are not always possible, such as creating an instance of a reference type, copying an existing instance, or performing a value comparison on two existing instances. Nevertheless, specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as ICloneable or IComparable). Examples of reference types are object (the ultimate base class for all other C# classes), System.String (a string of Unicode characters), and System.Array (a base class for all C# arrays). Both type categories are extensible with user-defined types.",
    "boxing_and_unboxing": "Boxing is the operation of converting a value-type object into a value of a corresponding reference type. Boxing in C# is implicit. Unboxing is the operation of converting a value of a reference type (previously boxed) into a value of a value type. Unboxing in C# requires an explicit type cast. A boxed object of type T can only be unboxed to a T (or a nullable T). Example: int foo = 42; // Value type. object bar = foo; // foo is boxed to bar. int foo2 = (int)bar; // Unboxed back to value type.",
    "libraries": "The C# specification details a minimum set of types and class libraries that the compiler expects to have available. In practice, C# is most often used with some implementation of the Common Language Infrastructure (CLI), which is standardized as ECMA-335 Common Language Infrastructure (CLI). In addition to the standard CLI specifications, there are many commercial and community class libraries that build on top of the .NET framework libraries to provide additional functionality. C# can make calls to any library included in the List of .NET libraries and frameworks.",
    "hello_world": "The following is a very simple C# program, a version of the classic Hello world example using the top-level statements feature introduced in C# 9: System.Console.WriteLine(Hello, world!); For code written as C# 8 or lower, the entry point logic of a program must be written in a Main method inside a type: using System; class Program { static void Main() { Console.WriteLine(Hello, world!); } } This code will display this text in the console window: Hello, world! Each line has a purpose: using System; The above line imports all types in the System namespace. For example, the Console class used later in the source code is defined in the System namespace, meaning it can be used without supplying the full name of the type (which includes the namespace). // A version of the classic Hello World program This line is a comment; it describes and documents the code for the programmer(s). class Program Above is a class definition for the Program class. Everything that follows between the pair of braces describes that class. { ... } The curly brackets demarcate the boundaries of a code block. In this first instance, they are marking the start and end of the Program class. static void Main() This declares the class member method where the program begins execution. The .NET runtime calls the Main method. Unlike in Java, the Main method does not need the public keyword, which tells the compiler that the method can be called from anywhere by any class. Writing static void Main(string[] args) is equivalent to writing private static void Main(string[] args). The static keyword makes the method accessible without an instance of Program. Each console application's Main entry point must be declared static otherwise the program would require an instance of Program, but any instance would require a program. To avoid that irresolvable circular dependency, C# compilers processing console applications (like that above) report an error if there is no static Main method. The void keyword declares that Main has no return value. (Note, however, that short programs can be written using Top Level Statements introduced in C# 9, as mentioned earlier.) Console.WriteLine(Hello, world!); This line writes the output. Console is a static class in the System namespace. It provides an interface to the standard input/output, and error streams for console applications. The program calls the Console method WriteLine, which displays on the console a line with the argument, the string Hello, world!.",
    "generics": "Further information: Generic programming With .NET 2.0 and C# 2.0, the community got more flexible collections than those in .NET 1.x. In the absence of generics, developers had to use collections such as ArrayList to store elements as objects of unspecified kind, which incurred performance overhead when boxing/unboxing/type-checking the contained items. Generics introduced a massive new feature in .NET that allowed developers to create type-safe data structures. This shift is particularly important in the context of converting legacy systems, where updating to generics can significantly enhance performance and maintainability by replacing outdated data structures with more efficient, type-safe alternatives. Example public class DataStore<T> { private T[] items = new T; private int count = 0; public void Add(T item) { items[count++] = item; } public T Get(int index) { return items[index]; } }",
    "standardization_and_licensing": "In August 2001, Microsoft, Hewlett-Packard and Intel co-sponsored the submission of specifications for C# as well as the Common Language Infrastructure (CLI) to the standards organization Ecma International. In December 2001, ECMA released ECMA-334 C# Language Specification. C# became an ISO/IEC standard in 2003 (ISO/IEC 23270:2003 - Information technology — Programming languages — C#). ECMA had previously adopted equivalent specifications as the 2nd edition of C#, in December 2002. In June 2005, ECMA approved edition 3 of the C# specification, and updated ECMA-334. Additions included partial classes, anonymous methods, nullable types, and generics (somewhat similar to C++ templates). In July 2005, ECMA submitted to ISO/IEC JTC 1/SC 22, via the latter's Fast-Track process, the standards and related TRs. This process usually takes 6–9 months. The C# language definition and the CLI are standardized under ISO/IEC and Ecma standards that provide reasonable and non-discriminatory licensing protection from patent claims. Microsoft initially agreed not to sue open-source developers for violating patents in non-profit projects for the part of the framework that is covered by the Open Specification Promise. Microsoft has also agreed not to enforce patents relating to Novell products against Novell's paying customers with the exception of a list of products that do not explicitly mention C#, .NET or Novell's implementation of .NET (The Mono Project). However, Novell maintained that Mono does not infringe any Microsoft patents. Microsoft also made a specific agreement not to enforce patent rights related to the Moonlight browser plugin, which depends on Mono, provided it is obtained through Novell. A decade later, Microsoft began developing free, open-source, and cross-platform tooling for C#, namely Visual Studio Code, .NET Core, and Roslyn. Mono joined Microsoft as a project of Xamarin, a Microsoft subsidiary.",
    "implementations": "Microsoft has developed open-source reference C# compilers and tools. The first compiler, Roslyn, compiles into intermediate language (IL), and the second one, RyuJIT, is a JIT (just-in-time) compiler, which is dynamic and does on-the-fly optimization and compiles the IL into native code for the front-end of the CPU. RyuJIT is open source and written in C++. Roslyn is entirely written in managed code (C#), has been opened up and functionality surfaced as APIs. It is thus enabling developers to create refactoring and diagnostics tools. Two branches of official implementation are .NET Framework (closed-source, Windows-only) and .NET Core (open-source, cross-platform); they eventually converged into one open-source implementation: .NET 5.0. At .NET Framework 4.6, a new JIT compiler replaced the former. Other C# compilers (some of which include an implementation of the Common Language Infrastructure and .NET class libraries): Mono, a Microsoft-sponsored project provides an open-source C# compiler, a complete open-source implementation of the CLI (including the required framework libraries as they appear in the ECMA specification,) and a nearly complete implementation of the NET class libraries up to .NET Framework 3.5. The Elements tool chain from RemObjects includes RemObjects C#, which compiles C# code to .NET's Common Intermediate Language, Java bytecode, Cocoa, Android bytecode, WebAssembly, and native machine code for Windows, macOS, and Linux. The DotGNU project (now discontinued) also provided an open-source C# compiler, a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and subset of some of the remaining Microsoft proprietary .NET class libraries up to .NET 2.0 (those not documented or included in the ECMA specification, but included in Microsoft's standard .NET Framework distribution). The Unity game engine uses C# as its primary scripting language. The Godot game engine has implemented an optional C# module due to a donation of $24,000 from Microsoft.",
    "see_also": "Computer programming portal C# topics C# syntax Comparison of C# and Java Comparison of C# and Visual Basic .NET .NET standard libraries IDEs Visual Studio Visual Studio Code Rider LINQPad MonoDevelop Morfik SharpDevelop Turbo C# Microsoft Visual Studio Express Xamarin Studio",
    "notes": "^ for async ^ By convention, a number sign is used for the second character in normal text; in artistic representations, sometimes a true sharp sign is used: C♯. However the ECMA 334 standard states: The name C# is written as the LATIN CAPITAL LETTER C (U+0043) followed by the NUMBER SIGN # (U+0023). ^ Language versions 1.0, 2.0, and 5.0 are available as ISO/IEC 23270. Beginning with version 7.0, the specification is available as ISO/IEC 20619 ^ The Microsoft C# 2.0 specification document only contains the new 2.0 features. For older features, use the 1.2 specification above.",
    "citations": "^ InfoQ eMag: A Preview of C# 7. Archived from the original on April 24, 2023. Retrieved November 11, 2016. ^ https://devblogs.microsoft.com/dotnet/announcing-dotnet-9/. {{cite web}}: Missing or empty |title= (help) ^ Torgersen, Mads (October 27, 2008). New features in C# 4.0. Microsoft. Archived from the original on January 3, 2012. Retrieved October 28, 2008. ^ a b The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.: dotnet/roslyn. November 13, 2019. Archived from the original on February 22, 2021. Retrieved February 13, 2015 – via GitHub. ^ CoreCLR is the runtime for .NET Core. It includes the garbage collector, JIT compiler, primitive data types and low-level classes.: dotnet/coreclr. November 13, 2019. Archived from the original on October 14, 2019. Retrieved March 8, 2017 – via GitHub. ^ a b Naugler, David (May 2007). C# 2.0 for C++ and Java programmer: conference workshop. Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. ^ Hamilton, Naomi (October 1, 2008). The A-Z of Programming Languages: C#. Computerworld. Archived from the original on March 24, 2010. Retrieved February 12, 2010. We all stand on the shoulders of giants here and every language builds on what went before it so we owe a lot to C, C++, Java, Delphi, all of these other things that came before us. (Anders Hejlsberg) ^ Chapel spec (Acknowledgments) (PDF). Cray Inc. October 1, 2015. Archived from the original (PDF) on February 5, 2016. Retrieved January 14, 2016. ^ Rich Hickey Q&A by Michael Fogus. Archived from the original on January 11, 2017. Retrieved January 11, 2017. ^ Borenszweig, Ary (June 14, 2016). Crystal 0.18.0 released!. Archived from the original on December 25, 2018. Retrieved August 7, 2017. It's heavily inspired by Ruby, and other languages (like C#, Go and Python). ^ Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013. YouTube. May 16, 2013. Archived from the original on December 21, 2021. Retrieved December 22, 2013. ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language Archived March 19, 2011, at the Wayback Machine Archived January 7, 2006, at the Wayback Machine ^ Cornelius, Barry (December 1, 2005). Java 5 catches up with C#. University of Oxford Computing Services. Archived from the original on March 6, 2023. Retrieved June 18, 2014. In my opinion, it is C# that has caused these radical changes to the Java language. (Barry Cornelius) ^ Influences - The Rust Reference. The Rust Reference. Archived from the original on January 26, 2019. Retrieved April 18, 2023. ^ Lattner, Chris (June 3, 2014). Chris Lattner's Homepage. Chris Lattner. Archived from the original on December 25, 2018. Retrieved May 12, 2020. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ a b c d e f g Skeet 2019. ^ a b c d e C# Language Specification (PDF) (4th ed.). Ecma International. June 2006. Archived (PDF) from the original on April 21, 2021. Retrieved January 26, 2012. ^ Dollard, Kathleen (November 14, 2023). Announcing C# 12. .NET Blog. Archived from the original on November 18, 2023. Retrieved November 18, 2023. ^ Seth, Gaurav (November 14, 2023). Announcing .NET 8. .NET Blog. Archived from the original on November 19, 2023. Retrieved November 18, 2023. ^ a b c d e f Albahari 2022. ^ Design Goals of C#. www.java-samples.com. Archived from the original on October 6, 2021. Retrieved October 6, 2021. ^ Zander, Jason (November 22, 2007). Couple of Historical Facts. Archived from the original on July 29, 2020. Retrieved February 23, 2009. ^ What language was ASP.Net originally written in?. November 28, 2006. Archived from the original on June 24, 2016. Retrieved February 21, 2008. ^ Hamilton, Naomi (October 1, 2008). The A-Z of Programming Languages: C#. Computerworld. Archived from the original on May 18, 2019. Retrieved October 1, 2008. ^ Details. nilsnaegele.com. Archived from the original on April 7, 2019. Retrieved April 7, 2019. ^ Why Microsoft's C# isn't. CNET: CBS Interactive. 2002. Archived from the original on August 14, 2023. Retrieved September 18, 2023. ^ Bill Joy (February 7, 2002). Microsoft's blind spot. cnet.com. Archived from the original on August 14, 2023. Retrieved September 18, 2023. ^ Osborn, John (August 1, 2000). Deep Inside C#: An Interview with Microsoft Chief Architect Anders Hejlsberg. O'Reilly Media. Archived from the original on January 9, 2010. Retrieved November 14, 2009. ^ Generics (C# Programming Guide). Microsoft. Archived from the original on August 26, 2011. Retrieved March 21, 2011. ^ Don Box and Anders Hejlsberg (February 2007). LINQ: .NET Language-Integrated Query. Microsoft. Archived from the original on August 24, 2011. Retrieved March 21, 2011. ^ Mercer, Ian (April 15, 2010). Why functional programming and LINQ is often better than procedural code. abodit.com. Archived from the original on July 11, 2011. Retrieved March 21, 2011. ^ Andy Retires. Dan Fernandez's Blog. Blogs.msdn.com. January 29, 2004. Archived from the original on January 19, 2016. Retrieved October 4, 2012. ^ Technical committees - JTC 1/SC 22 - Programming languages, their environments and system software interfaces. ISO. Archived from the original on September 27, 2012. Retrieved October 4, 2012. ^ ISO/IEC 23270:2003 - Information technology - C# Language Specification. Iso.org. August 23, 2006. Archived from the original on May 8, 2012. Retrieved October 4, 2012. ^ ISO/IEC 23270:2006 - Information technology - Programming languages - C#. Iso.org. January 26, 2012. Archived from the original on December 6, 2010. Retrieved October 4, 2012. ^ SO/IEC 23270:2018 Information technology — Programming languages — C#. ISO. Retrieved November 26, 2020. ^ Mariani, Rico (October 5, 2009). My History of Visual Studio (Part 1) – Rico Mariani's Performance Tidbits. Rico Mariani's Performance Tidbits. Archived from the original on May 27, 2018. Retrieved May 26, 2018. ^ Kovacs, James (September 7, 2007). C#/.NET History Lesson. Archived from the original on March 6, 2009. Retrieved June 18, 2009. ^ Hejlsberg, Anders (October 1, 2008). The A-Z of Programming Languages: C#. Computerworld. Archived from the original on April 2, 2015. Retrieved June 22, 2014. ^ Microsoft C# FAQ. Microsoft. Archived from the original on February 14, 2006. Retrieved March 25, 2008. ^ F# FAQ. Microsoft Research. Archived from the original on February 18, 2009. Retrieved June 18, 2009. ^ Simon, Raphael; Stapf, Emmanuel; Meyer, Bertrand (June 2002). Full Eiffel on the .NET Framework. Microsoft. Archived from the original on July 21, 2009. Retrieved June 18, 2009. ^ What's new in the C# 2.0 Language and Compiler. Microsoft. Archived from the original on December 18, 2010. Retrieved June 11, 2014. ^ Hejlsberg, Anders; Torgersen, Mads (April 30, 2007). Overview of C# 3.0. Microsoft Developer Network. Microsoft. Archived from the original on June 25, 2014. Retrieved June 11, 2014. ^ a b Using C# 3.0 from .NET 2.0. Danielmoth.com. May 13, 2007. Archived from the original on September 29, 2012. Retrieved October 4, 2012. ^ Hejlsberg, Anders (September 15, 2011). Future directions for C# and Visual Basic. Channel 9. BUILD2011. Microsoft. Archived from the original on September 23, 2011. Retrieved September 21, 2011. ^ An Introduction to New Features in C# 5.0. The Microsoft MVP Award Program Blog. Microsoft. March 26, 2012. Archived from the original on June 4, 2014. Retrieved June 11, 2014. ^ Languages features in C# 6 and VB 14. GitHub. dotnet/roslyn. Archived from the original on January 12, 2016. Retrieved February 13, 2015. ^ What's new in C# 7. Microsoft Docs. December 21, 2016. Archived from the original on November 1, 2017. ^ Torgersen, Mads (March 9, 2017). New Features in C# 7.0. .NET Blog. Microsoft. Archived from the original on April 11, 2017. Retrieved June 9, 2017. ^ Visual Studio 2017 version 15.0 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ What's new in C# 7.1. Microsoft Docs. Archived from the original on October 10, 2017. Retrieved October 9, 2017. ^ Visual Studio 2017 version 15.3 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on March 21, 2023. Retrieved April 19, 2023. ^ What's new in C# 7.2. Microsoft Docs. Archived from the original on December 1, 2017. Retrieved November 26, 2017. ^ Visual Studio 2017 version 15.5 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ What's new in C# 7.3. Microsoft Docs. Archived from the original on June 23, 2018. Retrieved June 23, 2018. ^ Visual Studio 2017 version 15.7 Release Notes. Microsoft Learn. July 13, 2022. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ What's new in C# 8.0. Microsoft Docs. March 9, 2023. Archived from the original on September 6, 2020. Retrieved April 14, 2019. ^ Visual Studio 2019 version 16.3 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ BillWagner. What's new in C# 9.0 - C# Guide. Microsoft Learn. Archived from the original on September 5, 2020. Retrieved October 15, 2020. ^ Visual Studio 2019 version 16.8 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ What's new in C# 10. Microsoft Learn. Archived from the original on February 8, 2022. Retrieved November 10, 2021. ^ Visual Studio 2022 version 17.0 Release Notes. Microsoft Learn. Archived from the original on July 16, 2023. Retrieved April 19, 2023. ^ What's new in C# 11. Microsoft Learn. Archived from the original on August 15, 2022. Retrieved August 8, 2022. ^ Visual Studio 2022 version 17.4 Release Notes. Microsoft Learn. Archived from the original on August 6, 2023. Retrieved April 19, 2023. ^ What's new in C# 12. Microsoft Learn. Archived from the original on July 20, 2023. Retrieved June 29, 2023. ^ Visual Studio 2022 version 17.8 Release Notes. Microsoft Learn. August 13, 2024. Archived from the original on October 6, 2024. Retrieved November 18, 2024. ^ What's new in C# 13. Microsoft Learn. Archived from the original on November 13, 2024. Retrieved November 18, 2024. ^ Visual Studio 2022 Release Notes. Microsoft Learn. November 12, 2024. Archived from the original on November 12, 2024. Retrieved November 18, 2024. ^ Novák et al. 2010. ^ stevewhims; mattwojo (October 20, 2022). Compiling Apps with .NET Native - UWP applications. learn.microsoft.com. Archived from the original on October 27, 2023. Retrieved October 27, 2023. ^ LakshanF; agocke; Rick-Anderson; et al. (September 12, 2023). Native AOT deployment overview - .NET. learn.microsoft.com. Archived from the original on November 11, 2023. Retrieved October 27, 2023.{{cite web}}: CS1 maint: numeric names: authors list (link) ^ Types/General, part of the official C# documentation. Microsoft. Archived from the original on March 29, 2024. Retrieved April 6, 2024. ^ BillWagner. Expression Trees (C#). Microsoft Learn. Archived from the original on May 15, 2021. Retrieved May 14, 2021. ^ Attribute Class. ^ dotnet-bot. System.Reflection.Emit Namespace. learn.microsoft.com. Archived from the original on April 28, 2023. Retrieved April 28, 2023. ^ McAllister, Neil (October 20, 2011). Microsoft's Roslyn: Reinventing the compiler as we know it. InfoWorld. Archived from the original on March 5, 2022. Retrieved March 5, 2022. ^ Introducing C# Source Generators. .NET Blog. April 29, 2020. Archived from the original on May 7, 2021. Retrieved May 14, 2021. ^ Classes/fields, part of the official C# documentation. February 7, 2024. ^ out (C# Reference). March 30, 2024. ^ Method parameters/params modifier, part of the official C# documentation. May 21, 2024. ^ a b Classes/properties, part of the official C# documentation. February 7, 2024. ^ virtual (C# Reference). Microsoft Learn. September 15, 2021. Archived from the original on August 30, 2018. Retrieved April 4, 2018. ^ new modifier, part of the official C# documentation. April 12, 2023. ^ Abstract and Sealed Classes and Class Members - C#. October 27, 2021. ^ Auto-Implemented Properties (C# Programming Guide). Archived from the original on October 29, 2020. Retrieved September 12, 2020. ^ using directive - C# Reference. Microsoft Docs. Archived from the original on April 14, 2019. Retrieved April 14, 2019. ^ BillWagner. Unsafe code, pointers to data, and function pointers. Microsoft Learn. Archived from the original on July 4, 2021. Retrieved June 20, 2021. ^ How to create user-defined exceptions. Archived from the original on January 26, 2021. Retrieved September 12, 2020. ^ Exception-handling statements, part of the official C# documentation. Microsoft Learn. April 22, 2023. Retrieved June 26, 2024. ^ Venners, Bill; Eckel, Bruce (August 18, 2003). The Trouble with Checked Exceptions. Archived from the original on February 18, 2015. Retrieved March 30, 2010. ^ Expressions/Overload resolution, part of the official C# documentation. Microsoft Learn. February 7, 2024. Retrieved April 7, 2024. ^ BillWagner. Operator overloading - C# reference. Microsoft Learn. Archived from the original on June 24, 2021. Retrieved June 20, 2021. ^ Types/Constructed Types, part of the official C# documentation. Microsoft Learn. Retrieved April 7, 2024. ^ Classes/Type Parameter constraints, part of the official C# documentation. Microsoft Learn. February 7, 2024. Retrieved April 7, 2024. ^ Zhang, Xue Dong; Teng, Zi Mu; Zhao, Dong Wang (September 2014). Research of the Database Access Technology Under.NET Framework. Applied Mechanics and Materials. 644–650: 3077–3080. doi:10.4028/www.scientific.net/AMM.644-650.3077. S2CID 62201466. ProQuest 1565579768. ^ Otey, Michael (February 2006). LINQ to the Future. SQL Server Magazine. Vol. 8, no. 2. pp. 17–21. ProQuest 214859896. ^ Sheldon, William (November 2010). New Features in LINQ. SQL Server Magazine. Vol. 12, no. 11. pp. 37–40. ProQuest 770609095. ^ BillWagner (September 15, 2021). Query Syntax and Method Syntax in LINQ (C#). learn.microsoft.com. Archived from the original on May 23, 2023. Retrieved May 23, 2023. ^ erikdietrich (March 9, 2023). The history of C# - C# Guide. learn.microsoft.com. Archived from the original on April 28, 2023. Retrieved April 28, 2023. ^ The functional journey of C# - Mads Torgersen - NDC Copenhagen 2022, August 17, 2022, archived from the original on May 15, 2023, retrieved May 15, 2023 ^ The Beauty of Closures. csharpindepth.com. Archived from the original on May 19, 2023. Retrieved April 28, 2023. ^ a b BillWagner. Anonymous functions - C# Programming Guide. Microsoft Learn. Archived from the original on April 15, 2021. Retrieved May 15, 2021. ^ a b c What's New in C# 7.0. Microsoft Docs. Archived from the original on August 6, 2020. Retrieved April 14, 2019. ^ C# 9.0 on the record. .NET Blog. November 10, 2020. Archived from the original on May 15, 2021. Retrieved May 15, 2021. ^ BillWagner (June 30, 2022). init keyword - C# Reference. learn.microsoft.com. Archived from the original on May 19, 2023. Retrieved May 19, 2023. ^ The .NET Compiler Platform, .NET Platform, April 28, 2023, archived from the original on April 28, 2023, retrieved April 28, 2023 ^ a b c d Archer 2001. ^ Lippert, Eric (March 19, 2009). Representation and Identity. Fabulous Adventures In Coding. Blogs.msdn.com. Archived from the original on July 12, 2011. Retrieved October 4, 2012. ^ Framework Libraries. Microsoft Learn. April 19, 2023. Archived from the original on July 14, 2019. Retrieved July 14, 2019. ^ BillWagner. What's new in C# 9.0 - C# Guide. Microsoft Learn. Archived from the original on September 5, 2020. Retrieved May 14, 2021. ^ BillWagner. Main() and command-line arguments. Microsoft Learn. Archived from the original on August 5, 2021. Retrieved August 5, 2021. ^ Unlocking the Power of C# Generics: A Comprehensive Guide. April 24, 2024. ^ Patent Pledge for Open Source Developers. March 16, 2023. Archived from the original on December 7, 2017. Retrieved October 28, 2017. ^ Patent Cooperation Agreement - Microsoft & Novell Interoperability Collaboration. Microsoft. November 2, 2006. Archived from the original on May 17, 2009. Retrieved July 5, 2009. Microsoft, on behalf of itself and its Subsidiaries (collectively Microsoft), hereby covenants not to sue Novell's Customers and Novell's Subsidiaries' Customers for infringement under Covered Patents of Microsoft on account of such a Customer's use of specific copies of a Covered Product as distributed by Novell or its Subsidiaries (collectively Novell) for which Novell has received Revenue (directly or indirectly) for such specific copies; provided the foregoing covenant is limited to use by such Customer (i) of such specific copies that are authorized by Novell in consideration for such Revenue, and (ii) within the scope authorized by Novell in consideration for such Revenue. ^ Definitions. Microsoft. November 2, 2006. Archived from the original on November 4, 2012. Retrieved July 5, 2009. ^ Steinman, Justin (November 7, 2006). Novell Answers Questions from the Community. Archived from the original on July 16, 2013. Retrieved July 5, 2009. We maintain that Mono does not infringe any Microsoft patents. ^ Covenant to Downstream Recipients of Moonlight - Microsoft & Novell Interoperability Collaboration. Microsoft. September 28, 2007. Archived from the original on September 23, 2010. Retrieved March 8, 2008. Downstream Recipient means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through an Intermediate Recipient... Microsoft reserves the right to update (including discontinue) the foregoing covenant... Moonlight Implementation means only those specific portions of Moonlight 1.0 or Moonlight 1.1 that run only as a plug-in to a browser on a Personal Computer and are not licensed under GPLv3 or a Similar License. ^ a b The RyuJIT transition is complete!. microsoft.com. June 19, 2018. Archived from the original on July 19, 2019. Retrieved July 20, 2021. ^ Managed Execution Process. microsoft.com. Archived from the original on December 23, 2017. Retrieved July 20, 2021. ^ coreclr/src/jit/. github.com. Archived from the original on January 9, 2019. Retrieved July 20, 2021. ^ C# Guide. Microsoft Learn. Archived from the original on August 13, 2022. Retrieved July 28, 2017. ^ 5.0.8. microsoft.com. Archived from the original on April 23, 2020. Retrieved July 20, 2021. ^ Mitigation: New 64-bit JIT Compiler. microsoft.com. Archived from the original on April 5, 2018. Retrieved July 20, 2021. ^ Etcheverry, Ignacio (October 21, 2017). Introducing C# in Godot. Godot Engine. Archived from the original on October 26, 2018. Retrieved October 26, 2018.",
    "sources": "Albahari, Joseph (2022). C# 10 in a Nutshell (First ed.). O'Reilly. ISBN 978-1-098-12195-2. Archer, Tom (2001). Part 2, Chapter 4: The Type System. Inside C#. Redmond, Washington: Microsoft Press. ISBN 0-7356-1288-9. Novák, István; Velvart, Andras; Granicz, Adam; Balássy, György; Hajdrik, Attila; Sellers, Mitchel; Hillar, Gastón C.; Molnár, Ágnes; Kanjilal, Joydip (2010). Visual Studio 2010 and .NET 4 Six-in-One. Wrox Press. ISBN 978-0470499481. Skeet, Jon (2019). C# in Depth (Fourth ed.). Manning. ISBN 978-1617294532.",
    "further_reading": "Drayton, Peter; Albahari, Ben; Neward, Ted (2002). C# Language Pocket Reference. O'Reilly. ISBN 0-596-00429-X. Petzold, Charles (2002). Programming Microsoft Windows with C#. Microsoft Press. ISBN 0-7356-1370-2.",
    "external_links": "C# Language Specification C# Programming Guide ISO C# Language Specification C# Compiler Platform (Roslyn) source code vteCommon Language InfrastructureArchitecture Application domain Code Access Security Common Intermediate Language instructions Common Type System Platform Invocation Services Virtual Execution System Components Assembly Delegate Global Assembly Cache Manifest Metadata Standard Libraries ImplementationsMicrosoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono DotGNU LanguagesMajor languages C# Visual Basic F# PowerShell Other Axum A# Boo Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Small Basic Comparison C# and Java C# and Visual Basic .NET Visual Basic and Visual Basic .NET vteMicrosoft free and open-source software (FOSS)Overview Microsoft and open source Shared Source Initiative SoftwareApplications 3D Movie Maker Atom Conference XP Family.Show File Manager Open Live Writer Microsoft PowerToys Terminal Windows Calculator Windows Console Windows Package Manager WorldWide Telescope XML Notepad Video games Allegiance Programminglanguages Bosque C# Dafny F# F* GW-BASIC IronPython IronRuby Lean P Power Fx PowerShell Project Verona Q# Small Basic Online TypeScript Visual Basic Frameworks,development tools .NET .NET Framework .NET Gadgeteer .NET MAUI .NET Micro Framework AirSim ASP.NET ASP.NET AJAX ASP.NET Core ASP.NET MVC ASP.NET Razor ASP.NET Web Forms Avalonia Babylon.js BitFunnel Blazor C++/WinRT CCF ChakraCore CLR Profiler Dapr DeepSpeed DiskSpd Dryad Dynamic Language Runtime eBPF on Windows Electron Entity Framework Fluent Design System Fluid Framework Infer.NET LightGBM Managed Extensibility Framework Microsoft Automatic Graph Layout Microsoft C++ Standard Library Microsoft Cognitive Toolkit Microsoft Design Language Microsoft Detours Microsoft Enterprise Library Microsoft SEAL mimalloc Mixed Reality Toolkit ML.NET mod_mono Mono MonoDevelop MSBuild MsQuic Neural Network Intelligence npm NuGet OneFuzz Open Management Infrastructure Open Neural Network Exchange Open Service Mesh Open XML SDK Orleans Playwright ProcDump ProcMon Python Tools for Visual Studio R Tools for Visual Studio RecursiveExtractor Roslyn Sandcastle SignalR StyleCop SVNBridge T2 Temporal Prover Text Template Transformation Toolkit TLA+ Toolbox U-Prove vcpkg Virtual File System for Git Voldemort VoTT Vowpal Wabbit Windows App SDK Windows Communication Foundation Windows Driver Frameworks KMDF UMDF Windows Forms Windows Presentation Foundation Windows Template Library Windows UI Library WinJS WinObjC WiX XDP for Windows XSP xUnit.net Z3 Theorem Prover Operating systems MS-DOS (v1.25, v2.0 & v4.0) Barrelfish SONiC Azure Linux Other ChronoZoom Extensible Storage Engine FlexWiki FourQ Gollum Project Mu ReactiveX SILK TLAPS TPM 2.0 Reference Implementation WikiBhasha Licenses Microsoft Public License Microsoft Reciprocal License Forges CodePlex GitHub Related .NET Foundation F# Software Foundation Microsoft Open Specification Promise Open Letter to Hobbyists Open Source Security Foundation Outercurve Foundation Category vteStandards of Ecma InternationalApplication interfaces ANSI escape code APIW Common Language Infrastructure Office Open XML OpenXPS File systems (tape) Advanced Intelligent Tape DDS DLT Super DLT Linear Tape-Open (Ultrium-1) VXA File systems (disk) CD-ROM CD File System (CDFS) FAT FAT12 FAT16 FAT16B FD UDF Ultra Density Optical Universal Media Disc Holographic Versatile Disc Graphics Universal 3D Programming languages C++/CLI C# Eiffel JavaScript (E4X, ECMAScript) Dart Minimal BASIC Full BASIC Radio link interfaces NFC UWB Other ECMA-35 JSON List of Ecma standards (1961 – present) vteInternational Organization for Standardization (ISO) standardsList of ISO standards – ISO romanizations – IEC standards1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40500 42010 45001 50001 55000 56000 80000 Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteIEC standardsIEC 60027 60034 60038 60062 60063 60068 60112 60228 60269 60297 60309 60320 60364 60446 60559 60601 60870 60870-5 60870-6 60906-1 60908 60929 60958 60980-344 61030 61131 61131-3 61131-9 61158 61162 61334 61355 61360 61400 61499 61508 61511 61784 61850 61851 61883 61960 61968 61970 62014-4 62026 62056 62061 62196 62262 62264 62304 62325 62351 62365 62366 62379 62386 62455 62680 62682 62700 63110 63119 63382 ISO/IEC 646 1989 2022 4909 5218 6429 6523 7810 7811 7812 7813 7816 7942 8613 8632 8652 8859 9126 9293 9496 9529 9592 9593 9899 9945 9995 10021 10116 10165 10179 10279 10646 10967 11172 11179 11404 11544 11801 12207 13250 13346 13522-5 13568 13816 13818 14443 14496 14651 14882 15288 15291 15408 15444 15445 15504 15511 15693 15897 15938 16262 16485 17024 17025 18004 18014 18181 19752 19757 19770 19788 20000 20802 21000 21827 22275 22537 23000 23003 23008 23270 23360 24707 24727 24744 24752 26300 27000 27000-series 27002 27040 29110 29119 33001 38500 39075 42010 80000 81346 Related International Electrotechnical Commission Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherELMCIP",
    "document": "The Ecma standard lists these design goals for C#: The language is intended to be a simple, modern, general-purpose, object-oriented programming language. The language, and implementations thereof, should provide support for software engineering principles such as strong type checking, array bounds checking,: 58–59 detection of attempts to use uninitialized variables, and automatic garbage collection.: 563 Software robustness, durability, and programmer productivity are important. The language is intended for use in developing software components suitable for deployment in distributed environments. Portability is very important for source code and programmers, especially those already familiar with C and C++. Support for internationalization: 314 is very important. C# is intended to be suitable for writing applications for both hosted and embedded systems, ranging from the very large that use sophisticated operating systems, down to the very small having dedicated functions. Although C# applications are intended to be economical with regard to memory and processing power requirements, the language was not intended to compete directly on performance and size with C or assembly language. C#'s former logos During the development of the .NET Framework, the class libraries were originally written using a managed code compiler system named Simple Managed C (SMC). In January 1999, Anders Hejlsberg formed a team to build a new language at the time called COOL, which stood for C-like Object Oriented Language. Microsoft had considered keeping the name COOL(C-like Object Oriented Language) as the final name of the language, but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000 Professional Developers Conference, the language had been renamed C#, and the class libraries and ASP.NET runtime were ported to C#. Hejlsberg is C#'s principal designer and lead architect at Microsoft, and was previously involved with the design of Turbo Pascal, Embarcadero Delphi (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and Visual J++. In interviews and technical papers, he has stated that flaws in most major programming languages (e.g. C++, Java, Delphi, and Smalltalk) drove the fundamentals of the Common Language Runtime (CLR), which, in turn, drove the design of the C# language. James Gosling, who created the Java programming language in 1994, and Bill Joy, a co-founder of Sun Microsystems, the originator of Java, called C# an imitation of Java; Gosling further said that [C# is] sort of Java with reliability, productivity and security deleted. In July 2000, Hejlsberg said that C# is not a Java clone and is much closer to C++ in its design. Since the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming two quite different languages. One of the first major departures came with the addition of generics to both languages, with vastly different implementations. C# uses of reification to provide first-class generic objects that can be used like any other class, with code generation performed at class-load time. Furthermore, C# has added several major features to accommodate functional-style programming, culminating in the LINQ extensions released with C# 3.0 and its supporting framework of lambda expressions, extension methods, and anonymous types. These features enable C# programmers to use functional programming techniques, such as closures, when it is advantageous to their application. The LINQ extensions and the functional imports help developers reduce the amount of boilerplate code included in common tasks such as querying a database, parsing an XML file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability. C# used to have a mascot called Andy (named after Anders Hejlsberg). It was retired on January 29, 2004. C# was originally submitted to the ISO/IEC JTC 1 subcommittee SC 22 for review, under ISO/IEC 23270:2003, was withdrawn and was then approved under ISO/IEC 23270:2006. The 23270:2006 is withdrawn under 23270:2018 and approved with this version. Microsoft first used the name C# in 1988 for a variant of the C language designed for incremental compilation. That project was not completed, and the name was later reused. C-sharp musical note The name C sharp was inspired by the musical notation whereby a sharp symbol indicates that the written note should be made a semitone higher in pitch. This is similar to the language name of C++, where ++ indicates that a variable should be incremented by 1 after being evaluated. The sharp symbol also resembles a ligature of four + symbols (in a two-by-two grid), further implying that the language is an increment of C++. Due to technical limits of display (standard fonts, browsers, etc.), and most keyboard layouts lacking a sharp symbol (U+266F ♯ MUSIC SHARP SIGN (&sharp;)), the number sign (U+0023 # NUMBER SIGN (&num;)) was chosen to approximate the sharp symbol in the written name of the programming language. This convention is reflected in the ECMA-334 C# Language Specification. The sharp suffix has been used by a number of other Microsoft .NET compatible/compliant languages that are variants of existing languages, including J# (a .NET language also designed by Microsoft that is derived from Java 1.1), A# (from Ada), and the functional programming language F#. The original implementation of Eiffel for .NET was called Eiffel#, a name retired since the full Eiffel language is now supported. The suffix has also been used for libraries, such as Gtk# (a .NET wrapper for GTK and other GNOME libraries) and Cocoa# (a wrapper for Cocoa). Development of the text for standards (beginning with C# 6) is done on GitHub. C# 7 was submitted to Ecma and approved in December 2023. As of January 2024, the standard for C# 8 is currently under development, referencing the approved language proposals. C#version Language specification Date .NET Visual Studio Ecma ISO/IEC Microsoft 1.0 ECMA-334:2003, December 2002 ISO/IEC 23270:2003, April 2003 January 2002 January 2002 .NET Framework 1.0 Visual Studio .NET 2002 1.11.2 October 2003 April 2003 .NET Framework 1.1 Visual Studio .NET 2003 2.0 ECMA-334:2006, June 2006 ISO/IEC 23270:2006, September 2006 September 2005[d] November 2005 .NET Framework 2.0.NET Framework 3.0 Visual Studio 2005Visual Studio 2008 3.0 None August 2007 November 2007 .NET Framework 2.0 (Except LINQ).NET Framework 3.0 (Except LINQ).NET Framework 3.5 Visual Studio 2008 4.0 April 2010 April 2010 .NET Framework 4 Visual Studio 2010 5.0 ECMA-334:2017, December 2017 ISO/IEC 23270:2018, December 2018 June 2013 August 2012 .NET Framework 4.5 Visual Studio 2012Visual Studio 2013 6.0 ECMA-334:2022, June 2022 None Draft July 2015 .NET Framework 4.6.NET Core 1.0.NET Core 1.1 Visual Studio 2015 7.0 ECMA-334:2023, December 2023 ISO/IEC 20619:2023, September 2023 Specification proposal March 2017 .NET Framework 4.7 Visual Studio 2017 version 15.0 7.1 Specification proposal August 2017 .NET Core 2.0 Visual Studio 2017 version 15.3 7.2 Specification proposal November 2017 Visual Studio 2017 version 15.5 7.3 Specification proposal Archived March 7, 2021, at the Wayback Machine May 2018 .NET Core 2.1.NET Core 2.2.NET Framework 4.8 Visual Studio 2017 version 15.7 8.0 None Specification proposal September 2019 .NET Core 3.0.NET Core 3.1 Visual Studio 2019 version 16.3 9.0 Specification proposal November 2020 .NET 5.0 Visual Studio 2019 version 16.8 10.0 Specification proposal November 2021 .NET 6.0 Visual Studio 2022 version 17.0 11.0 Specification proposal November 2022 .NET 7.0 Visual Studio 2022 version 17.4 12.0 Specification proposal November 2023 .NET 8.0 Visual Studio 2022 version 17.8 13.0 Specification proposal November 2024 .NET 9.0 Visual Studio 2022 version 17.12 Main article: C# syntax See also: Syntax (programming languages) The core syntax of the C# language is similar to that of other C-style languages such as C, Objective-C, C++ and Java, particularly: Semicolons are used to denote the end of a statement. Curly brackets are used to group statements. Statements are commonly grouped into methods (functions), methods into classes, and classes into namespaces. Variables are assigned using an equals sign, but compared using two consecutive equals signs. Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them. class, int and void are used to define large-scale (usually main) program functions in scripts most of the time in C-style computer programming languages. See also: Comparison of C# and Java Some notable features of C# that distinguish it from C, C++, and Java where noted, are: By design, C# is the programming language that most directly reflects the underlying Common Language Infrastructure (CLI). Most of its intrinsic types correspond to value-types implemented by the CLI (Common Language Infrastructure) framework. However, the language specification does not state the code generation requirements of the compiler: that is, it does not state that a C# compiler must target a Common Language Runtime (CLR), or generate Common Intermediate Language (CIL), or generate any other specific format. Some C# compilers can also generate machine code like traditional compilers of Objective-C, C, C++, Assembly and Fortran. C# supports strongly, implicitly typed variable declarations with the keyword var,: 470 and implicitly typed arrays with the keyword new[] followed by a collection initializer.: 80 : 58 Its type system is split into two families: Value types, like the built-in numeric types and user-defined structs, which are automatically handed over as copies when used as parameters, and reference types, including arrays, instances of classes, and strings, which only hand over a pointer to the respective object. Due to their special handling of the equality operator and their immutability, strings will nevertheless behave as if they were values, for all practical purposes. You can even use them as case labels. Where necessary, value types will be boxed automatically. C# supports a strict Boolean data type, bool. Statements that take conditions, such as while and if, require an expression of a type that implements the true operator, such as the Boolean type. While C++ also has a Boolean type, it can be freely converted to and from integers, and expressions such as if (a) require only that a is convertible to bool, allowing a to be an int, or a pointer. C# disallows this integer meaning true or false approach, on the grounds that forcing programmers to use expressions that return exactly bool can prevent certain types of programming mistakes such as if (a = b) (use of assignment = instead of equality ==). C# is more type safe than C++. The only implicit conversions by default are those that are considered safe, such as widening of integers. This is enforced at compile-time, during JIT, and, in some cases, at runtime. No implicit conversions occur between Booleans and integers, nor between enumeration members and integers (except for literal 0, which can be implicitly converted to any enumerated type). Any user-defined conversion must be explicitly marked as explicit or implicit, unlike C++ copy constructors and conversion operators, which are both implicit by default. C# has explicit support for covariance and contravariance in generic types,: 144 : 23 unlike C++ which has some degree of support for contravariance simply through the semantics of return types on virtual methods. Enumeration members are placed in their own scope. The C# language does not allow for global variables or functions. All methods and members must be declared within classes. Static members of public classes can substitute for global variables and functions. Local variables cannot shadow variables of the enclosing block, unlike C and C++, but may shadow type-level names. Metaprogramming can be achieved in several ways: Reflection is supported through .NET APIs, which enable scenarios such as type metadata inspection and dynamic method invocation. Expression trees represent code as an abstract syntax tree, where each node is an expression that can be inspected or executed. This enables dynamic modification of executable code at runtime. Expression trees introduce some homoiconicity to the language. Attributes, in C# parlance, are metadata that can be attached to types, members, or entire assemblies, equivalent to annotations in Java. Attributes are accessible both to the compiler and to code through reflection, allowing them to adjust their behaviour. Many of the native attributes duplicate the functionality of GCC's and VisualC++'s platform-dependent preprocessor directives.[citation needed] System.Reflection.Emit namespace, which contains classes that emit metadata and CIL (types, assemblies, etc.) at runtime. The .NET Compiler Platform (Roslyn) provides API access to language compilation services, allowing for the compilation of C# code from within .NET applications. It exposes APIs for syntactic (lexical) analysis of code, semantic analysis, dynamic compilation to CIL, and code emission. Source generators, a feature of the Roslyn C# compiler, enable compile time metaprogramming. During the compilation process, developers can inspect the code being compiled with the compiler's API and pass additional generated C# source code to be compiled. A method in C# is a member of a class that can be invoked as a function (a sequence of instructions), rather than the mere value-holding capability of a field (i.e. class or instance variable). As in other syntactically similar languages, such as C++ and ANSI C, the signature of a method is a declaration comprising in order: any optional accessibility keywords (such as private), the explicit specification of its return type (such as int, or the keyword void if no value is returned), the name of the method, and finally, a parenthesized sequence of comma-separated parameter specifications, each consisting of a parameter's type, its formal name and optionally, a default value to be used whenever none is provided. Different from most other languages, call-by-reference parameters have to be marked both at the function definition and at the calling site, and you can choose between ref and out, the latter allowing handing over an uninitialized variable which will have a definite value on return. Additionally, you can specify a variable-sized argument list by applying the params keyword to the last parameter. Certain specific kinds of methods, such as those that simply get or set a field's value by returning or assigning it, do not require an explicitly stated full signature, but in the general case, the definition of a class includes the full signature declaration of its methods. Like C++, and unlike Java, C# programmers must use the scope modifier keyword virtual to allow methods to be overridden by subclasses. Unlike C++, you have to explicitly specify the keyword override when doing so. This is supposed to avoid confusion between overriding and newly overloading a function (i.e. hiding the former implementation). To do the latter, you have to specify the new keyword. You can use the keyword sealed to disallow further overrides for individual methods or whole classes. Extension methods in C# allow programmers to use static methods as if they were methods from a class's method table, allowing programmers to virtually add instance methods to a class that they feel should exist on that kind of objects (and instances of the respective derived classes).: 103–105 : 202–203 The type dynamic allows for run-time method binding, allowing for JavaScript-like method calls and run-time object composition.: 114–118 C# has support for strongly-typed function pointers via the keyword delegate. Like the Qt framework's pseudo-C++ signal and slot, C# has semantics specifically surrounding publish-subscribe style events, though C# uses delegates to do so. C# offers Java-like synchronized method calls, via the attribute [MethodImpl(MethodImplOptions.Synchronized)], and has support for mutually-exclusive locks via the keyword lock. C# supports classes with properties. The properties can be simple accesor functions with a backing field, or implement arbitrary getter and setter functions. A property is read-only if there's no setter. Like with fields, there can be class and instance properties. The underlying methods can be virtual or abstract like any other method. Since C# 3.0 the syntactic sugar of auto-implemented properties is available, where the accessor (getter) and mutator (setter) encapsulate operations on a single field of a class. A C# namespace provides the same level of code isolation as a Java package or a C++ namespace, with very similar rules and features to a package. Namespaces can be imported with the using syntax. In C#, memory address pointers can only be used within blocks specifically marked as unsafe, and programs with unsafe code need appropriate permissions to run. Most object access is done through safe object references, which always either point to a live object or have the well-defined null value; it is impossible to obtain a reference to a dead object (one that has been garbage collected), or to an arbitrary block of memory. An unsafe pointer can point to an instance of an unmanaged value type that does not contain any references to objects subject to garbage collections such as class instances, arrays or strings. Code that is not marked as unsafe can still store and manipulate pointers through the System.IntPtr type, but it cannot dereference them. Managed memory cannot be explicitly freed; instead, it is automatically garbage collected. Garbage collection addresses the problem of memory leaks by freeing the programmer of responsibility for releasing memory that is no longer needed in most cases. Code that retains references to objects longer than is required can still experience higher memory usage than necessary, however once the final reference to an object is released the memory is available for garbage collection. A range of standard exceptions are available to programmers. Methods in standard libraries regularly throw system exceptions in some circumstances and the range of exceptions thrown is normally documented. Custom exception classes can be defined for classes allowing handling to be put in place for particular circumstances as needed. The syntax for handling exceptions is the following: try { // something } catch (Exception ex) { // if error do this } finally { // always executes, regardless of error occurrence } Most of the time people call this a try-catch code block, because of the try and catch functions being used and accessible on all C# versions. try { // something here } catch (Exception ex) { // example return 0; } finally { return 1; } Depending on your plans, the finally part can be left out. If error handling is not required, the (Exception ex) parameter can be omitted as well. Also, there can be several catch parts handling different kinds of exceptions. Checked exceptions are not present in C# (in contrast to Java). This has been a conscious decision based on the issues of scalability and version management. Unlike C++, C# does not support multiple inheritance, although a class can implement any number of interfaces (fully abstract classes). This was a design decision by the language's lead architect to avoid complications and to simplify architectural requirements throughout CLI. When implementing multiple interfaces that contain a method with the same name and taking parameters of the same type in the same order (i.e. the same signature), similar to Java, C# allows both a single method to cover all interfaces and if necessary specific methods for each interface. C# also offers function overloading (a.k.a. ad-hoc-polymorphism), i.e. methods with the same name, but distinguishable signatures. Unlike Java, C# additionally supports operator overloading. Since version 2.0, C# offers parametric polymorphism, i.e. classes with arbitrary or constrained type parameters, e.g. List<T>, a variable-sized array which only can contain elements of type T. There are certain kinds of constraints you can specify for the type parameters: Has to be type X (or one derived from it), has to implement a certain interface, has to be a reference type, has to be a value type, has to implement a public parameterless constructor. Most of them can be combined, and you can specify any number of interfaces. C# has the ability to utilize LINQ through the .NET Framework. A developer can query a variety of data sources, provided the IEnumerable<T> interface is implemented on the object. This includes XML documents, an ADO.NET dataset, and SQL databases. Using LINQ in C# brings advantages like IntelliSense support, strong filtering capabilities, type safety with compile error checking ability, and consistency for querying data over a variety of sources. There are several different language structures that can be utilized with C# and LINQ and they are query expressions, lambda expressions, anonymous types, implicitly typed variables, extension methods, and object initializers. LINQ has two syntaxes: query syntax and method syntax. However, the compiler always converts the query syntax to method syntax at compile time. using System.Linq; var numbers = new int[] { 5, 10, 8, 3, 6, 12 }; // Query syntax (SELECT num FROM numbers WHERE num % 2 = 0 ORDER BY num) var numQuery1 = from num in numbers where num % 2 == 0 orderby num select num; // Method syntax var numQuery2 = numbers .Where(num => num % 2 == 0) .OrderBy(n => n); Though primarily an imperative language, C# always adds functional features over time, for example: Functions as first-class citizen – C# 1.0 delegates Higher-order functions – C# 1.0 together with delegates Anonymous functions – C# 2 anonymous delegates and C# 3 lambdas expressions Closures – C# 2 together with anonymous delegates and C# 3 together with lambdas expressions Type inference – C# 3 with implicitly typed local variables var and C# 9 target-typed new expressions new() List comprehension – C# 3 LINQ Tuples – .NET Framework 4.0 but it becomes popular when C# 7.0 introduced a new tuple type with language support Nested functions – C# 7.0 Pattern matching – C# 7.0 Immutability – C# 7.2 readonly struct C# 9 record types and Init only setters Type classes – C# 12 roles/extensions (in development) C# has a unified type system. This unified type system is called Common Type System (CTS).: Part 2, Chapter 4: The Type System A unified type system implies that all types, including primitives such as integers, are subclasses of the System.Object class. For example, every type inherits a ToString() method. CTS separates data types into two categories: Reference types Value types Instances of value types neither have referential identity nor referential comparison semantics. Equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from System.ValueType, always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor because they already have an implicit one which initializes all contained data to the type-dependent default value (0, null, or alike). Examples of value types are all primitive types, such as int (a signed 32-bit integer), float (a 32-bit IEEE floating-point number), char (a 16-bit Unicode code unit), decimal (fixed-point numbers useful for handling currency amounts), and System.DateTime (identifies a specific point in time with nanosecond precision). Other examples are enum (enumerations) and struct (user defined structures). In contrast, reference types have the notion of referential identity, meaning that each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for System.String). Some operations are not always possible, such as creating an instance of a reference type, copying an existing instance, or performing a value comparison on two existing instances. Nevertheless, specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as ICloneable or IComparable). Examples of reference types are object (the ultimate base class for all other C# classes), System.String (a string of Unicode characters), and System.Array (a base class for all C# arrays). Both type categories are extensible with user-defined types. Boxing is the operation of converting a value-type object into a value of a corresponding reference type. Boxing in C# is implicit. Unboxing is the operation of converting a value of a reference type (previously boxed) into a value of a value type. Unboxing in C# requires an explicit type cast. A boxed object of type T can only be unboxed to a T (or a nullable T). Example: int foo = 42; // Value type. object bar = foo; // foo is boxed to bar. int foo2 = (int)bar; // Unboxed back to value type. The C# specification details a minimum set of types and class libraries that the compiler expects to have available. In practice, C# is most often used with some implementation of the Common Language Infrastructure (CLI), which is standardized as ECMA-335 Common Language Infrastructure (CLI). In addition to the standard CLI specifications, there are many commercial and community class libraries that build on top of the .NET framework libraries to provide additional functionality. C# can make calls to any library included in the List of .NET libraries and frameworks. The following is a very simple C# program, a version of the classic Hello world example using the top-level statements feature introduced in C# 9: System.Console.WriteLine(Hello, world!); For code written as C# 8 or lower, the entry point logic of a program must be written in a Main method inside a type: using System; class Program { static void Main() { Console.WriteLine(Hello, world!); } } This code will display this text in the console window: Hello, world! Each line has a purpose: using System; The above line imports all types in the System namespace. For example, the Console class used later in the source code is defined in the System namespace, meaning it can be used without supplying the full name of the type (which includes the namespace). // A version of the classic Hello World program This line is a comment; it describes and documents the code for the programmer(s). class Program Above is a class definition for the Program class. Everything that follows between the pair of braces describes that class. { ... } The curly brackets demarcate the boundaries of a code block. In this first instance, they are marking the start and end of the Program class. static void Main() This declares the class member method where the program begins execution. The .NET runtime calls the Main method. Unlike in Java, the Main method does not need the public keyword, which tells the compiler that the method can be called from anywhere by any class. Writing static void Main(string[] args) is equivalent to writing private static void Main(string[] args). The static keyword makes the method accessible without an instance of Program. Each console application's Main entry point must be declared static otherwise the program would require an instance of Program, but any instance would require a program. To avoid that irresolvable circular dependency, C# compilers processing console applications (like that above) report an error if there is no static Main method. The void keyword declares that Main has no return value. (Note, however, that short programs can be written using Top Level Statements introduced in C# 9, as mentioned earlier.) Console.WriteLine(Hello, world!); This line writes the output. Console is a static class in the System namespace. It provides an interface to the standard input/output, and error streams for console applications. The program calls the Console method WriteLine, which displays on the console a line with the argument, the string Hello, world!. Further information: Generic programming With .NET 2.0 and C# 2.0, the community got more flexible collections than those in .NET 1.x. In the absence of generics, developers had to use collections such as ArrayList to store elements as objects of unspecified kind, which incurred performance overhead when boxing/unboxing/type-checking the contained items. Generics introduced a massive new feature in .NET that allowed developers to create type-safe data structures. This shift is particularly important in the context of converting legacy systems, where updating to generics can significantly enhance performance and maintainability by replacing outdated data structures with more efficient, type-safe alternatives. Example public class DataStore<T> { private T[] items = new T; private int count = 0; public void Add(T item) { items[count++] = item; } public T Get(int index) { return items[index]; } } In August 2001, Microsoft, Hewlett-Packard and Intel co-sponsored the submission of specifications for C# as well as the Common Language Infrastructure (CLI) to the standards organization Ecma International. In December 2001, ECMA released ECMA-334 C# Language Specification. C# became an ISO/IEC standard in 2003 (ISO/IEC 23270:2003 - Information technology — Programming languages — C#). ECMA had previously adopted equivalent specifications as the 2nd edition of C#, in December 2002. In June 2005, ECMA approved edition 3 of the C# specification, and updated ECMA-334. Additions included partial classes, anonymous methods, nullable types, and generics (somewhat similar to C++ templates). In July 2005, ECMA submitted to ISO/IEC JTC 1/SC 22, via the latter's Fast-Track process, the standards and related TRs. This process usually takes 6–9 months. The C# language definition and the CLI are standardized under ISO/IEC and Ecma standards that provide reasonable and non-discriminatory licensing protection from patent claims. Microsoft initially agreed not to sue open-source developers for violating patents in non-profit projects for the part of the framework that is covered by the Open Specification Promise. Microsoft has also agreed not to enforce patents relating to Novell products against Novell's paying customers with the exception of a list of products that do not explicitly mention C#, .NET or Novell's implementation of .NET (The Mono Project). However, Novell maintained that Mono does not infringe any Microsoft patents. Microsoft also made a specific agreement not to enforce patent rights related to the Moonlight browser plugin, which depends on Mono, provided it is obtained through Novell. A decade later, Microsoft began developing free, open-source, and cross-platform tooling for C#, namely Visual Studio Code, .NET Core, and Roslyn. Mono joined Microsoft as a project of Xamarin, a Microsoft subsidiary. Microsoft has developed open-source reference C# compilers and tools. The first compiler, Roslyn, compiles into intermediate language (IL), and the second one, RyuJIT, is a JIT (just-in-time) compiler, which is dynamic and does on-the-fly optimization and compiles the IL into native code for the front-end of the CPU. RyuJIT is open source and written in C++. Roslyn is entirely written in managed code (C#), has been opened up and functionality surfaced as APIs. It is thus enabling developers to create refactoring and diagnostics tools. Two branches of official implementation are .NET Framework (closed-source, Windows-only) and .NET Core (open-source, cross-platform); they eventually converged into one open-source implementation: .NET 5.0. At .NET Framework 4.6, a new JIT compiler replaced the former. Other C# compilers (some of which include an implementation of the Common Language Infrastructure and .NET class libraries): Mono, a Microsoft-sponsored project provides an open-source C# compiler, a complete open-source implementation of the CLI (including the required framework libraries as they appear in the ECMA specification,) and a nearly complete implementation of the NET class libraries up to .NET Framework 3.5. The Elements tool chain from RemObjects includes RemObjects C#, which compiles C# code to .NET's Common Intermediate Language, Java bytecode, Cocoa, Android bytecode, WebAssembly, and native machine code for Windows, macOS, and Linux. The DotGNU project (now discontinued) also provided an open-source C# compiler, a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and subset of some of the remaining Microsoft proprietary .NET class libraries up to .NET 2.0 (those not documented or included in the ECMA specification, but included in Microsoft's standard .NET Framework distribution). The Unity game engine uses C# as its primary scripting language. The Godot game engine has implemented an optional C# module due to a donation of $24,000 from Microsoft. Computer programming portal C# topics C# syntax Comparison of C# and Java Comparison of C# and Visual Basic .NET .NET standard libraries IDEs Visual Studio Visual Studio Code Rider LINQPad MonoDevelop Morfik SharpDevelop Turbo C# Microsoft Visual Studio Express Xamarin Studio ^ for async ^ By convention, a number sign is used for the second character in normal text; in artistic representations, sometimes a true sharp sign is used: C♯. However the ECMA 334 standard states: The name C# is written as the LATIN CAPITAL LETTER C (U+0043) followed by the NUMBER SIGN # (U+0023). ^ Language versions 1.0, 2.0, and 5.0 are available as ISO/IEC 23270. Beginning with version 7.0, the specification is available as ISO/IEC 20619 ^ The Microsoft C# 2.0 specification document only contains the new 2.0 features. For older features, use the 1.2 specification above. ^ InfoQ eMag: A Preview of C# 7. Archived from the original on April 24, 2023. Retrieved November 11, 2016. ^ https://devblogs.microsoft.com/dotnet/announcing-dotnet-9/. {{cite web}}: Missing or empty |title= (help) ^ Torgersen, Mads (October 27, 2008). New features in C# 4.0. Microsoft. Archived from the original on January 3, 2012. Retrieved October 28, 2008. ^ a b The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.: dotnet/roslyn. November 13, 2019. Archived from the original on February 22, 2021. Retrieved February 13, 2015 – via GitHub. ^ CoreCLR is the runtime for .NET Core. It includes the garbage collector, JIT compiler, primitive data types and low-level classes.: dotnet/coreclr. November 13, 2019. Archived from the original on October 14, 2019. Retrieved March 8, 2017 – via GitHub. ^ a b Naugler, David (May 2007). C# 2.0 for C++ and Java programmer: conference workshop. Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. ^ Hamilton, Naomi (October 1, 2008). The A-Z of Programming Languages: C#. Computerworld. Archived from the original on March 24, 2010. Retrieved February 12, 2010. We all stand on the shoulders of giants here and every language builds on what went before it so we owe a lot to C, C++, Java, Delphi, all of these other things that came before us. (Anders Hejlsberg) ^ Chapel spec (Acknowledgments) (PDF). Cray Inc. October 1, 2015. Archived from the original (PDF) on February 5, 2016. Retrieved January 14, 2016. ^ Rich Hickey Q&A by Michael Fogus. Archived from the original on January 11, 2017. Retrieved January 11, 2017. ^ Borenszweig, Ary (June 14, 2016). Crystal 0.18.0 released!. Archived from the original on December 25, 2018. Retrieved August 7, 2017. It's heavily inspired by Ruby, and other languages (like C#, Go and Python). ^ Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013. YouTube. May 16, 2013. Archived from the original on December 21, 2021. Retrieved December 22, 2013. ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language Archived March 19, 2011, at the Wayback Machine Archived January 7, 2006, at the Wayback Machine ^ Cornelius, Barry (December 1, 2005). Java 5 catches up with C#. University of Oxford Computing Services. Archived from the original on March 6, 2023. Retrieved June 18, 2014. In my opinion, it is C# that has caused these radical changes to the Java language. (Barry Cornelius) ^ Influences - The Rust Reference. The Rust Reference. Archived from the original on January 26, 2019. Retrieved April 18, 2023. ^ Lattner, Chris (June 3, 2014). Chris Lattner's Homepage. Chris Lattner. Archived from the original on December 25, 2018. Retrieved May 12, 2020. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ a b c d e f g Skeet 2019. ^ a b c d e C# Language Specification (PDF) (4th ed.). Ecma International. June 2006. Archived (PDF) from the original on April 21, 2021. Retrieved January 26, 2012. ^ Dollard, Kathleen (November 14, 2023). Announcing C# 12. .NET Blog. Archived from the original on November 18, 2023. Retrieved November 18, 2023. ^ Seth, Gaurav (November 14, 2023). Announcing .NET 8. .NET Blog. Archived from the original on November 19, 2023. Retrieved November 18, 2023. ^ a b c d e f Albahari 2022. ^ Design Goals of C#. www.java-samples.com. Archived from the original on October 6, 2021. Retrieved October 6, 2021. ^ Zander, Jason (November 22, 2007). Couple of Historical Facts. Archived from the original on July 29, 2020. Retrieved February 23, 2009. ^ What language was ASP.Net originally written in?. November 28, 2006. Archived from the original on June 24, 2016. Retrieved February 21, 2008. ^ Hamilton, Naomi (October 1, 2008). The A-Z of Programming Languages: C#. Computerworld. Archived from the original on May 18, 2019. Retrieved October 1, 2008. ^ Details. nilsnaegele.com. Archived from the original on April 7, 2019. Retrieved April 7, 2019. ^ Why Microsoft's C# isn't. CNET: CBS Interactive. 2002. Archived from the original on August 14, 2023. Retrieved September 18, 2023. ^ Bill Joy (February 7, 2002). Microsoft's blind spot. cnet.com. Archived from the original on August 14, 2023. Retrieved September 18, 2023. ^ Osborn, John (August 1, 2000). Deep Inside C#: An Interview with Microsoft Chief Architect Anders Hejlsberg. O'Reilly Media. Archived from the original on January 9, 2010. Retrieved November 14, 2009. ^ Generics (C# Programming Guide). Microsoft. Archived from the original on August 26, 2011. Retrieved March 21, 2011. ^ Don Box and Anders Hejlsberg (February 2007). LINQ: .NET Language-Integrated Query. Microsoft. Archived from the original on August 24, 2011. Retrieved March 21, 2011. ^ Mercer, Ian (April 15, 2010). Why functional programming and LINQ is often better than procedural code. abodit.com. Archived from the original on July 11, 2011. Retrieved March 21, 2011. ^ Andy Retires. Dan Fernandez's Blog. Blogs.msdn.com. January 29, 2004. Archived from the original on January 19, 2016. Retrieved October 4, 2012. ^ Technical committees - JTC 1/SC 22 - Programming languages, their environments and system software interfaces. ISO. Archived from the original on September 27, 2012. Retrieved October 4, 2012. ^ ISO/IEC 23270:2003 - Information technology - C# Language Specification. Iso.org. August 23, 2006. Archived from the original on May 8, 2012. Retrieved October 4, 2012. ^ ISO/IEC 23270:2006 - Information technology - Programming languages - C#. Iso.org. January 26, 2012. Archived from the original on December 6, 2010. Retrieved October 4, 2012. ^ SO/IEC 23270:2018 Information technology — Programming languages — C#. ISO. Retrieved November 26, 2020. ^ Mariani, Rico (October 5, 2009). My History of Visual Studio (Part 1) – Rico Mariani's Performance Tidbits. Rico Mariani's Performance Tidbits. Archived from the original on May 27, 2018. Retrieved May 26, 2018. ^ Kovacs, James (September 7, 2007). C#/.NET History Lesson. Archived from the original on March 6, 2009. Retrieved June 18, 2009. ^ Hejlsberg, Anders (October 1, 2008). The A-Z of Programming Languages: C#. Computerworld. Archived from the original on April 2, 2015. Retrieved June 22, 2014. ^ Microsoft C# FAQ. Microsoft. Archived from the original on February 14, 2006. Retrieved March 25, 2008. ^ F# FAQ. Microsoft Research. Archived from the original on February 18, 2009. Retrieved June 18, 2009. ^ Simon, Raphael; Stapf, Emmanuel; Meyer, Bertrand (June 2002). Full Eiffel on the .NET Framework. Microsoft. Archived from the original on July 21, 2009. Retrieved June 18, 2009. ^ What's new in the C# 2.0 Language and Compiler. Microsoft. Archived from the original on December 18, 2010. Retrieved June 11, 2014. ^ Hejlsberg, Anders; Torgersen, Mads (April 30, 2007). Overview of C# 3.0. Microsoft Developer Network. Microsoft. Archived from the original on June 25, 2014. Retrieved June 11, 2014. ^ a b Using C# 3.0 from .NET 2.0. Danielmoth.com. May 13, 2007. Archived from the original on September 29, 2012. Retrieved October 4, 2012. ^ Hejlsberg, Anders (September 15, 2011). Future directions for C# and Visual Basic. Channel 9. BUILD2011. Microsoft. Archived from the original on September 23, 2011. Retrieved September 21, 2011. ^ An Introduction to New Features in C# 5.0. The Microsoft MVP Award Program Blog. Microsoft. March 26, 2012. Archived from the original on June 4, 2014. Retrieved June 11, 2014. ^ Languages features in C# 6 and VB 14. GitHub. dotnet/roslyn. Archived from the original on January 12, 2016. Retrieved February 13, 2015. ^ What's new in C# 7. Microsoft Docs. December 21, 2016. Archived from the original on November 1, 2017. ^ Torgersen, Mads (March 9, 2017). New Features in C# 7.0. .NET Blog. Microsoft. Archived from the original on April 11, 2017. Retrieved June 9, 2017. ^ Visual Studio 2017 version 15.0 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ What's new in C# 7.1. Microsoft Docs. Archived from the original on October 10, 2017. Retrieved October 9, 2017. ^ Visual Studio 2017 version 15.3 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on March 21, 2023. Retrieved April 19, 2023. ^ What's new in C# 7.2. Microsoft Docs. Archived from the original on December 1, 2017. Retrieved November 26, 2017. ^ Visual Studio 2017 version 15.5 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ What's new in C# 7.3. Microsoft Docs. Archived from the original on June 23, 2018. Retrieved June 23, 2018. ^ Visual Studio 2017 version 15.7 Release Notes. Microsoft Learn. July 13, 2022. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ What's new in C# 8.0. Microsoft Docs. March 9, 2023. Archived from the original on September 6, 2020. Retrieved April 14, 2019. ^ Visual Studio 2019 version 16.3 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ BillWagner. What's new in C# 9.0 - C# Guide. Microsoft Learn. Archived from the original on September 5, 2020. Retrieved October 15, 2020. ^ Visual Studio 2019 version 16.8 Release Notes. Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023. ^ What's new in C# 10. Microsoft Learn. Archived from the original on February 8, 2022. Retrieved November 10, 2021. ^ Visual Studio 2022 version 17.0 Release Notes. Microsoft Learn. Archived from the original on July 16, 2023. Retrieved April 19, 2023. ^ What's new in C# 11. Microsoft Learn. Archived from the original on August 15, 2022. Retrieved August 8, 2022. ^ Visual Studio 2022 version 17.4 Release Notes. Microsoft Learn. Archived from the original on August 6, 2023. Retrieved April 19, 2023. ^ What's new in C# 12. Microsoft Learn. Archived from the original on July 20, 2023. Retrieved June 29, 2023. ^ Visual Studio 2022 version 17.8 Release Notes. Microsoft Learn. August 13, 2024. Archived from the original on October 6, 2024. Retrieved November 18, 2024. ^ What's new in C# 13. Microsoft Learn. Archived from the original on November 13, 2024. Retrieved November 18, 2024. ^ Visual Studio 2022 Release Notes. Microsoft Learn. November 12, 2024. Archived from the original on November 12, 2024. Retrieved November 18, 2024. ^ Novák et al. 2010. ^ stevewhims; mattwojo (October 20, 2022). Compiling Apps with .NET Native - UWP applications. learn.microsoft.com. Archived from the original on October 27, 2023. Retrieved October 27, 2023. ^ LakshanF; agocke; Rick-Anderson; et al. (September 12, 2023). Native AOT deployment overview - .NET. learn.microsoft.com. Archived from the original on November 11, 2023. Retrieved October 27, 2023.{{cite web}}: CS1 maint: numeric names: authors list (link) ^ Types/General, part of the official C# documentation. Microsoft. Archived from the original on March 29, 2024. Retrieved April 6, 2024. ^ BillWagner. Expression Trees (C#). Microsoft Learn. Archived from the original on May 15, 2021. Retrieved May 14, 2021. ^ Attribute Class. ^ dotnet-bot. System.Reflection.Emit Namespace. learn.microsoft.com. Archived from the original on April 28, 2023. Retrieved April 28, 2023. ^ McAllister, Neil (October 20, 2011). Microsoft's Roslyn: Reinventing the compiler as we know it. InfoWorld. Archived from the original on March 5, 2022. Retrieved March 5, 2022. ^ Introducing C# Source Generators. .NET Blog. April 29, 2020. Archived from the original on May 7, 2021. Retrieved May 14, 2021. ^ Classes/fields, part of the official C# documentation. February 7, 2024. ^ out (C# Reference). March 30, 2024. ^ Method parameters/params modifier, part of the official C# documentation. May 21, 2024. ^ a b Classes/properties, part of the official C# documentation. February 7, 2024. ^ virtual (C# Reference). Microsoft Learn. September 15, 2021. Archived from the original on August 30, 2018. Retrieved April 4, 2018. ^ new modifier, part of the official C# documentation. April 12, 2023. ^ Abstract and Sealed Classes and Class Members - C#. October 27, 2021. ^ Auto-Implemented Properties (C# Programming Guide). Archived from the original on October 29, 2020. Retrieved September 12, 2020. ^ using directive - C# Reference. Microsoft Docs. Archived from the original on April 14, 2019. Retrieved April 14, 2019. ^ BillWagner. Unsafe code, pointers to data, and function pointers. Microsoft Learn. Archived from the original on July 4, 2021. Retrieved June 20, 2021. ^ How to create user-defined exceptions. Archived from the original on January 26, 2021. Retrieved September 12, 2020. ^ Exception-handling statements, part of the official C# documentation. Microsoft Learn. April 22, 2023. Retrieved June 26, 2024. ^ Venners, Bill; Eckel, Bruce (August 18, 2003). The Trouble with Checked Exceptions. Archived from the original on February 18, 2015. Retrieved March 30, 2010. ^ Expressions/Overload resolution, part of the official C# documentation. Microsoft Learn. February 7, 2024. Retrieved April 7, 2024. ^ BillWagner. Operator overloading - C# reference. Microsoft Learn. Archived from the original on June 24, 2021. Retrieved June 20, 2021. ^ Types/Constructed Types, part of the official C# documentation. Microsoft Learn. Retrieved April 7, 2024. ^ Classes/Type Parameter constraints, part of the official C# documentation. Microsoft Learn. February 7, 2024. Retrieved April 7, 2024. ^ Zhang, Xue Dong; Teng, Zi Mu; Zhao, Dong Wang (September 2014). Research of the Database Access Technology Under.NET Framework. Applied Mechanics and Materials. 644–650: 3077–3080. doi:10.4028/www.scientific.net/AMM.644-650.3077. S2CID 62201466. ProQuest 1565579768. ^ Otey, Michael (February 2006). LINQ to the Future. SQL Server Magazine. Vol. 8, no. 2. pp. 17–21. ProQuest 214859896. ^ Sheldon, William (November 2010). New Features in LINQ. SQL Server Magazine. Vol. 12, no. 11. pp. 37–40. ProQuest 770609095. ^ BillWagner (September 15, 2021). Query Syntax and Method Syntax in LINQ (C#). learn.microsoft.com. Archived from the original on May 23, 2023. Retrieved May 23, 2023. ^ erikdietrich (March 9, 2023). The history of C# - C# Guide. learn.microsoft.com. Archived from the original on April 28, 2023. Retrieved April 28, 2023. ^ The functional journey of C# - Mads Torgersen - NDC Copenhagen 2022, August 17, 2022, archived from the original on May 15, 2023, retrieved May 15, 2023 ^ The Beauty of Closures. csharpindepth.com. Archived from the original on May 19, 2023. Retrieved April 28, 2023. ^ a b BillWagner. Anonymous functions - C# Programming Guide. Microsoft Learn. Archived from the original on April 15, 2021. Retrieved May 15, 2021. ^ a b c What's New in C# 7.0. Microsoft Docs. Archived from the original on August 6, 2020. Retrieved April 14, 2019. ^ C# 9.0 on the record. .NET Blog. November 10, 2020. Archived from the original on May 15, 2021. Retrieved May 15, 2021. ^ BillWagner (June 30, 2022). init keyword - C# Reference. learn.microsoft.com. Archived from the original on May 19, 2023. Retrieved May 19, 2023. ^ The .NET Compiler Platform, .NET Platform, April 28, 2023, archived from the original on April 28, 2023, retrieved April 28, 2023 ^ a b c d Archer 2001. ^ Lippert, Eric (March 19, 2009). Representation and Identity. Fabulous Adventures In Coding. Blogs.msdn.com. Archived from the original on July 12, 2011. Retrieved October 4, 2012. ^ Framework Libraries. Microsoft Learn. April 19, 2023. Archived from the original on July 14, 2019. Retrieved July 14, 2019. ^ BillWagner. What's new in C# 9.0 - C# Guide. Microsoft Learn. Archived from the original on September 5, 2020. Retrieved May 14, 2021. ^ BillWagner. Main() and command-line arguments. Microsoft Learn. Archived from the original on August 5, 2021. Retrieved August 5, 2021. ^ Unlocking the Power of C# Generics: A Comprehensive Guide. April 24, 2024. ^ Patent Pledge for Open Source Developers. March 16, 2023. Archived from the original on December 7, 2017. Retrieved October 28, 2017. ^ Patent Cooperation Agreement - Microsoft & Novell Interoperability Collaboration. Microsoft. November 2, 2006. Archived from the original on May 17, 2009. Retrieved July 5, 2009. Microsoft, on behalf of itself and its Subsidiaries (collectively Microsoft), hereby covenants not to sue Novell's Customers and Novell's Subsidiaries' Customers for infringement under Covered Patents of Microsoft on account of such a Customer's use of specific copies of a Covered Product as distributed by Novell or its Subsidiaries (collectively Novell) for which Novell has received Revenue (directly or indirectly) for such specific copies; provided the foregoing covenant is limited to use by such Customer (i) of such specific copies that are authorized by Novell in consideration for such Revenue, and (ii) within the scope authorized by Novell in consideration for such Revenue. ^ Definitions. Microsoft. November 2, 2006. Archived from the original on November 4, 2012. Retrieved July 5, 2009. ^ Steinman, Justin (November 7, 2006). Novell Answers Questions from the Community. Archived from the original on July 16, 2013. Retrieved July 5, 2009. We maintain that Mono does not infringe any Microsoft patents. ^ Covenant to Downstream Recipients of Moonlight - Microsoft & Novell Interoperability Collaboration. Microsoft. September 28, 2007. Archived from the original on September 23, 2010. Retrieved March 8, 2008. Downstream Recipient means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through an Intermediate Recipient... Microsoft reserves the right to update (including discontinue) the foregoing covenant... Moonlight Implementation means only those specific portions of Moonlight 1.0 or Moonlight 1.1 that run only as a plug-in to a browser on a Personal Computer and are not licensed under GPLv3 or a Similar License. ^ a b The RyuJIT transition is complete!. microsoft.com. June 19, 2018. Archived from the original on July 19, 2019. Retrieved July 20, 2021. ^ Managed Execution Process. microsoft.com. Archived from the original on December 23, 2017. Retrieved July 20, 2021. ^ coreclr/src/jit/. github.com. Archived from the original on January 9, 2019. Retrieved July 20, 2021. ^ C# Guide. Microsoft Learn. Archived from the original on August 13, 2022. Retrieved July 28, 2017. ^ 5.0.8. microsoft.com. Archived from the original on April 23, 2020. Retrieved July 20, 2021. ^ Mitigation: New 64-bit JIT Compiler. microsoft.com. Archived from the original on April 5, 2018. Retrieved July 20, 2021. ^ Etcheverry, Ignacio (October 21, 2017). Introducing C# in Godot. Godot Engine. Archived from the original on October 26, 2018. Retrieved October 26, 2018. Albahari, Joseph (2022). C# 10 in a Nutshell (First ed.). O'Reilly. ISBN 978-1-098-12195-2. Archer, Tom (2001). Part 2, Chapter 4: The Type System. Inside C#. Redmond, Washington: Microsoft Press. ISBN 0-7356-1288-9. Novák, István; Velvart, Andras; Granicz, Adam; Balássy, György; Hajdrik, Attila; Sellers, Mitchel; Hillar, Gastón C.; Molnár, Ágnes; Kanjilal, Joydip (2010). Visual Studio 2010 and .NET 4 Six-in-One. Wrox Press. ISBN 978-0470499481. Skeet, Jon (2019). C# in Depth (Fourth ed.). Manning. ISBN 978-1617294532. Drayton, Peter; Albahari, Ben; Neward, Ted (2002). C# Language Pocket Reference. O'Reilly. ISBN 0-596-00429-X. Petzold, Charles (2002). Programming Microsoft Windows with C#. Microsoft Press. ISBN 0-7356-1370-2. C# Language Specification C# Programming Guide ISO C# Language Specification C# Compiler Platform (Roslyn) source code vteCommon Language InfrastructureArchitecture Application domain Code Access Security Common Intermediate Language instructions Common Type System Platform Invocation Services Virtual Execution System Components Assembly Delegate Global Assembly Cache Manifest Metadata Standard Libraries ImplementationsMicrosoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono DotGNU LanguagesMajor languages C# Visual Basic F# PowerShell Other Axum A# Boo Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Small Basic Comparison C# and Java C# and Visual Basic .NET Visual Basic and Visual Basic .NET vteMicrosoft free and open-source software (FOSS)Overview Microsoft and open source Shared Source Initiative SoftwareApplications 3D Movie Maker Atom Conference XP Family.Show File Manager Open Live Writer Microsoft PowerToys Terminal Windows Calculator Windows Console Windows Package Manager WorldWide Telescope XML Notepad Video games Allegiance Programminglanguages Bosque C# Dafny F# F* GW-BASIC IronPython IronRuby Lean P Power Fx PowerShell Project Verona Q# Small Basic Online TypeScript Visual Basic Frameworks,development tools .NET .NET Framework .NET Gadgeteer .NET MAUI .NET Micro Framework AirSim ASP.NET ASP.NET AJAX ASP.NET Core ASP.NET MVC ASP.NET Razor ASP.NET Web Forms Avalonia Babylon.js BitFunnel Blazor C++/WinRT CCF ChakraCore CLR Profiler Dapr DeepSpeed DiskSpd Dryad Dynamic Language Runtime eBPF on Windows Electron Entity Framework Fluent Design System Fluid Framework Infer.NET LightGBM Managed Extensibility Framework Microsoft Automatic Graph Layout Microsoft C++ Standard Library Microsoft Cognitive Toolkit Microsoft Design Language Microsoft Detours Microsoft Enterprise Library Microsoft SEAL mimalloc Mixed Reality Toolkit ML.NET mod_mono Mono MonoDevelop MSBuild MsQuic Neural Network Intelligence npm NuGet OneFuzz Open Management Infrastructure Open Neural Network Exchange Open Service Mesh Open XML SDK Orleans Playwright ProcDump ProcMon Python Tools for Visual Studio R Tools for Visual Studio RecursiveExtractor Roslyn Sandcastle SignalR StyleCop SVNBridge T2 Temporal Prover Text Template Transformation Toolkit TLA+ Toolbox U-Prove vcpkg Virtual File System for Git Voldemort VoTT Vowpal Wabbit Windows App SDK Windows Communication Foundation Windows Driver Frameworks KMDF UMDF Windows Forms Windows Presentation Foundation Windows Template Library Windows UI Library WinJS WinObjC WiX XDP for Windows XSP xUnit.net Z3 Theorem Prover Operating systems MS-DOS (v1.25, v2.0 & v4.0) Barrelfish SONiC Azure Linux Other ChronoZoom Extensible Storage Engine FlexWiki FourQ Gollum Project Mu ReactiveX SILK TLAPS TPM 2.0 Reference Implementation WikiBhasha Licenses Microsoft Public License Microsoft Reciprocal License Forges CodePlex GitHub Related .NET Foundation F# Software Foundation Microsoft Open Specification Promise Open Letter to Hobbyists Open Source Security Foundation Outercurve Foundation Category vteStandards of Ecma InternationalApplication interfaces ANSI escape code APIW Common Language Infrastructure Office Open XML OpenXPS File systems (tape) Advanced Intelligent Tape DDS DLT Super DLT Linear Tape-Open (Ultrium-1) VXA File systems (disk) CD-ROM CD File System (CDFS) FAT FAT12 FAT16 FAT16B FD UDF Ultra Density Optical Universal Media Disc Holographic Versatile Disc Graphics Universal 3D Programming languages C++/CLI C# Eiffel JavaScript (E4X, ECMAScript) Dart Minimal BASIC Full BASIC Radio link interfaces NFC UWB Other ECMA-35 JSON List of Ecma standards (1961 – present) vteInternational Organization for Standardization (ISO) standardsList of ISO standards – ISO romanizations – IEC standards1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40500 42010 45001 50001 55000 56000 80000 Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteIEC standardsIEC 60027 60034 60038 60062 60063 60068 60112 60228 60269 60297 60309 60320 60364 60446 60559 60601 60870 60870-5 60870-6 60906-1 60908 60929 60958 60980-344 61030 61131 61131-3 61131-9 61158 61162 61334 61355 61360 61400 61499 61508 61511 61784 61850 61851 61883 61960 61968 61970 62014-4 62026 62056 62061 62196 62262 62264 62304 62325 62351 62365 62366 62379 62386 62455 62680 62682 62700 63110 63119 63382 ISO/IEC 646 1989 2022 4909 5218 6429 6523 7810 7811 7812 7813 7816 7942 8613 8632 8652 8859 9126 9293 9496 9529 9592 9593 9899 9945 9995 10021 10116 10165 10179 10279 10646 10967 11172 11179 11404 11544 11801 12207 13250 13346 13522-5 13568 13816 13818 14443 14496 14651 14882 15288 15291 15408 15444 15445 15504 15511 15693 15897 15938 16262 16485 17024 17025 18004 18014 18181 19752 19757 19770 19788 20000 20802 21000 21827 22275 22537 23000 23003 23008 23270 23360 24707 24727 24744 24752 26300 27000 27000-series 27002 27040 29110 29119 33001 38500 39075 42010 80000 81346 Related International Electrotechnical Commission Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherELMCIP",
    "paradigm": "Multi-paradigm : structured , imperative , object-oriented , event-driven , task-driven , functional , generic , reflective , concurrent",
    "first_appeared": "2000 ; 25 years ago ( 2000 )",
    "stable_release": "13.0",
    "typing_discipline": "Static , dynamic , strong , safe , nominative , partly inferred",
    "influenced_by": "C++ , Cω , Eiffel , F# , Haskell , Scala , Icon , J# , J++ , Java , JavaScript , ML , Modula-3 , Object Pascal , VB",
    "influenced": "Chapel , Clojure , Crystal , D , J# , Dart , F# , Hack , Java , Kotlin , Nemerle , Oxygene , Rust , Swift , Vala , TypeScript",
    "stable_release_date": "2024-11-12T00:00:00Z"
  },
  {
    "title": "C (programming language)",
    "url": "https://en.wikipedia.org/wiki/C_(programming_language)",
    "overview": "Dennis Ritchie (right), the inventor of the C programming language, with Ken Thompson C is an imperative, procedural language in the ALGOL tradition. It has a static type system. In C, all executable code is contained within subroutines (also called functions, though not in the sense of functional programming). Function parameters are passed by value, although arrays are passed as pointers, i.e. the address of the first item in the array. Pass-by-reference is simulated in C by explicitly passing pointers to the thing being referenced. C program source text is free-form code. Semicolons terminate statements, while curly braces are used to group statements into blocks. The C language also exhibits the following characteristics: The language has a small, fixed number of keywords, including a full set of control flow primitives: if/else, for, do/while, while, and switch. User-defined names are not distinguished from keywords by any kind of sigil. It has a large number of arithmetic, bitwise, and logic operators: +,+=,++,&,||, etc. More than one assignment may be performed in a single statement. Functions: Function return values can be ignored, when not needed. Function and data pointers permit ad hoc run-time polymorphism. Functions may not be defined within the lexical scope of other functions. Variables may be defined within a function, with scope. A function may call itself, so recursion is supported. Data typing is static, but weakly enforced; all data has a type, but implicit conversions are possible. User-defined (typedef) and compound types are possible. Heterogeneous aggregate data types (struct) allow related data elements to be accessed and assigned as a unit. The contents of whole structs cannot be compared using a single built-in operator (the elements must be compared individually). Union is a structure with overlapping members; it allows multiple data types to share the same memory location. Array indexing is a secondary notation, defined in terms of pointer arithmetic. Whole arrays cannot be assigned or compared using a single built-in operator. There is no array keyword in use or definition; instead, square brackets indicate arrays syntactically, for example month. Enumerated types are possible with the enum keyword. They are freely interconvertible with integers. Strings are not a distinct data type, but are conventionally implemented as null-terminated character arrays. Low-level access to computer memory is possible by converting machine addresses to pointers. Procedures (subroutines not returning values) are a special case of function, with an empty return type void. Memory can be allocated to a program with calls to library routines. A preprocessor performs macro definition, source code file inclusion, and conditional compilation. There is a basic form of modularity: files can be compiled separately and linked together, with control over which functions and data objects are visible to other files via static and extern attributes. Complex functionality such as I/O, string manipulation, and mathematical functions are consistently delegated to library routines. The generated code after compilation has relatively straightforward needs on the underlying platform, which makes it suitable for creating operating systems and for use in embedded systems. While C does not include certain features found in other languages (such as object orientation and garbage collection), these can be implemented or emulated, often through the use of external libraries (e.g., the GLib Object System or the Boehm garbage collector).",
    "relations_to_other_languages": "Main article: List of C-family programming languages Many later languages have borrowed directly or indirectly from C, including C++, C#, Unix's C shell, D, Go, Java, JavaScript (including transpilers), Julia, Limbo, LPC, Objective-C, Perl, PHP, Python, Ruby, Rust, Swift, Verilog and SystemVerilog (hardware description languages). These languages have drawn many of their control structures and other basic features from C. Most of them also express highly similar syntax to C, and they tend to combine the recognizable expression and statement syntax of C with underlying type systems, data models, and semantics that can be radically different.",
    "early_developments": "Timeline of C language Year Informalname Officialstandard 1972 first release — 1978 K&R C — 1989,1990 ANSI C, C89,ISO C, C90 ANSI X3.159-1989ISO/IEC 9899:1990 1999 C99, C9X ISO/IEC 9899:1999 2011 C11, C1X ISO/IEC 9899:2011 2018 C17, C18 ISO/IEC 9899:2018 2024 C23, C2X ISO/IEC 9899:2024 TBA C2Y The origin of C is closely tied to the development of the Unix operating system, originally implemented in assembly language on a PDP-7 by Dennis Ritchie and Ken Thompson, incorporating several ideas from colleagues. Eventually, they decided to port the operating system to a PDP-11. The original PDP-11 version of Unix was also developed in assembly language.",
    "b": "Main article: B (programming language) Thompson wanted a programming language for developing utilities for the new platform. He first tried writing a Fortran compiler, but he soon gave up the idea and instead created a cut-down version of the recently developed systems programming language called BCPL. The official description of BCPL was not available at the time, and Thompson modified the syntax to be less 'wordy' and similar to a simplified ALGOL known as SMALGOL. He called the result B, describing it as BCPL semantics with a lot of SMALGOL syntax. Like BCPL, B had a bootstrapping compiler to facilitate porting to new machines. Ultimately, few utilities were written in B because it was too slow and could not take advantage of PDP-11 features such as byte addressability.",
    "new_b_and_first_c_release": "In 1971 Ritchie started to improve B, to use the features of the more-powerful PDP-11. A significant addition was a character data type. He called this New B (NB). Thompson started to use NB to write the Unix kernel, and his requirements shaped the direction of the language development. Through to 1972, richer types were added to the NB language: NB had arrays of int and char. Pointers, the ability to generate pointers to other types, arrays of all types, and types to be returned from functions were all also added. Arrays within expressions became pointers. A new compiler was written, and the language was renamed C. The C compiler and some utilities made with it were included in Version 2 Unix, which is also known as Research Unix.",
    "structures_and_unix_kernel_re_write": "At Version 4 Unix, released in November 1973, the Unix kernel was extensively re-implemented in C. By this time, the C language had acquired some powerful features such as struct types. The preprocessor was introduced around 1973 at the urging of Alan Snyder and also in recognition of the usefulness of the file-inclusion mechanisms available in BCPL and PL/I. Its original version provided only included files and simple string replacements: #include and #define of parameterless macros. Soon after that, it was extended, mostly by Mike Lesk and then by John Reiser, to incorporate macros with arguments and conditional compilation. Unix was one of the first operating system kernels implemented in a language other than assembly. Earlier instances include the Multics system (which was written in PL/I) and Master Control Program (MCP) for the Burroughs B5000 (which was written in ALGOL) in 1961. In around 1977, Ritchie and Stephen C. Johnson made further changes to the language to facilitate portability of the Unix operating system. Johnson's Portable C Compiler served as the basis for several implementations of C on new platforms.",
    "kr_c": "The cover of the book The C Programming Language, first edition, by Brian Kernighan and Dennis Ritchie In 1978 Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language. Known as K&R from the initials of its authors, the book served for many years as an informal specification of the language. The version of C that it describes is commonly referred to as K&R C. As this was released in 1978, it is now also referred to as C78. The second edition of the book covers the later ANSI C standard, described below. K&R introduced several language features: Standard I/O library long int data type unsigned int data type Compound assignment operators of the form =op (such as =-) were changed to the form op= (that is, -=) to remove the semantic ambiguity created by constructs such as i=-10, which had been interpreted as i =- 10 (decrement i by 10) instead of the possibly intended i = -10 (let i be −10). Even after the publication of the 1989 ANSI standard, for many years K&R C was still considered the lowest common denominator to which C programmers restricted themselves when maximum portability was desired, since many older compilers were still in use, and because carefully written K&R C code can be legal Standard C as well. In early versions of C, only functions that return types other than int must be declared if used before the function definition; functions used without prior declaration were presumed to return type int. For example: long some_function(); /* This is a function declaration, so the compiler can know the name and return type of this function. */ /* int */ other_function(); /* Another function declaration. Because this is an early version of C, there is an implicit 'int' type here. A comment shows where the explicit 'int' type specifier would be required in later versions. */ /* int */ calling_function() /* This is a function definition, including the body of the code following in the { curly brackets }. Because no return type is specified, the function implicitly returns an 'int' in this early version of C. */ { long test1; register /* int */ test2; /* Again, note that 'int' is not required here. The 'int' type specifier */ /* in the comment would be required in later versions of C. */ /* The 'register' keyword indicates to the compiler that this variable should */ /* ideally be stored in a register as opposed to within the stack frame. */ test1 = some_function(); if (test1 > 1) test2 = 0; else test2 = other_function(); return test2; } The int type specifiers which are commented out could be omitted in K&R C, but are required in later standards. Since K&R function declarations did not include any information about function arguments, function parameter type checks were not performed, although some compilers would issue a warning message if a local function was called with the wrong number of arguments, or if different calls to an external function used different numbers or types of arguments. Separate tools such as Unix's lint utility were developed that (among other things) could check for consistency of function use across multiple source files. In the years following the publication of K&R C, several features were added to the language, supported by compilers from AT&T (in particular PCC) and some other vendors. These included: void functions (i.e., functions with no return value) functions returning struct or union types (previously only a single pointer, integer or float could be returned) assignment for struct data types enumerated types (previously, preprocessor definitions for integer fixed values were used, e.g. #define GREEN 3) The large number of extensions and lack of agreement on a standard library, together with the language popularity and the fact that not even the Unix compilers precisely implemented the K&R specification, led to the necessity of standardization.",
    "ansi_c_and_iso_c": "Main article: ANSI C During the late 1970s and 1980s, versions of C were implemented for a wide variety of mainframe computers, minicomputers, and microcomputers, including the IBM PC, as its popularity began to increase significantly. In 1983 the American National Standards Institute (ANSI) formed a committee, X3J11, to establish a standard specification of C. X3J11 based the C standard on the Unix implementation; however, the non-portable portion of the Unix C library was handed off to the IEEE working group 1003 to become the basis for the 1988 POSIX standard. In 1989, the C standard was ratified as ANSI X3.159-1989 Programming Language C. This version of the language is often referred to as ANSI C, Standard C, or sometimes C89. In 1990 the ANSI C standard (with formatting changes) was adopted by the International Organization for Standardization (ISO) as ISO/IEC 9899:1990, which is sometimes called C90. Therefore, the terms C89 and C90 refer to the same programming language. ANSI, like other national standards bodies, no longer develops the C standard independently, but defers to the international C standard, maintained by the working group ISO/IEC JTC1/SC22/WG14. National adoption of an update to the international standard typically occurs within a year of ISO publication. One of the aims of the C standardization process was to produce a superset of K&R C, incorporating many of the subsequently introduced unofficial features. The standards committee also included several additional features such as function prototypes (borrowed from C++), void pointers, support for international character sets and locales, and preprocessor enhancements. Although the syntax for parameter declarations was augmented to include the style used in C++, the K&R interface continued to be permitted, for compatibility with existing source code. C89 is supported by current C compilers, and most modern C code is based on it. Any program written only in Standard C and without any hardware-dependent assumptions will run correctly on any platform with a conforming C implementation, within its resource limits. Without such precautions, programs may compile only on a certain platform or with a particular compiler, due, for example, to the use of non-standard libraries, such as GUI libraries, or to a reliance on compiler- or platform-specific attributes such as the exact size of data types and byte endianness. In cases where code must be compilable by either standard-conforming or K&R C-based compilers, the __STDC__ macro can be used to split the code into Standard and K&R sections to prevent the use on a K&R C-based compiler of features available only in Standard C. After the ANSI/ISO standardization process, the C language specification remained relatively static for several years. In 1995, Normative Amendment 1 to the 1990 C standard (ISO/IEC 9899/AMD1:1995, known informally as C95) was published, to correct some details and to add more extensive support for international character sets.",
    "c": "Main article: C23 (C standard revision) C23 is an informal name for the current major C language standard revision. It was informally known as C2X through most of its development. C23 was published in October 2024 as ISO/IEC 9899:2024. The standard macro __STDC_VERSION__ is defined as 202311L to indicate that C23 support is available.",
    "cy": "C2Y is an informal name for the next major C language standard revision, after C23 (C2X), that is hoped to be released later in the 2020s, hence the '2' in C2Y. An early working draft of C2Y was released in February 2024 as N3220 by the working group ISO/IEC JTC1/SC22/WG14.",
    "embedded_c": "Main article: Embedded C Historically, embedded C programming requires non-standard extensions to the C language to support exotic features such as fixed-point arithmetic, multiple distinct memory banks, and basic I/O operations. In 2008, the C Standards Committee published a technical report extending the C language to address these issues by providing a common standard for all implementations to adhere to. It includes a number of features not available in normal C, such as fixed-point arithmetic, named address spaces, and basic I/O hardware addressing.",
    "syntax": "Main article: C syntax C has a formal grammar specified by the C standard. Line endings are generally not significant in C; however, line boundaries do have significance during the preprocessing phase. Comments may appear either between the delimiters /* and */, or (since C99) following // until the end of the line. Comments delimited by /* and */ do not nest, and these sequences of characters are not interpreted as comment delimiters if they appear inside string or character literals. C source files contain declarations and function definitions. Function definitions, in turn, contain declarations and statements. Declarations either define new types using keywords such as struct, union, and enum, or assign types to and perhaps reserve storage for new variables, usually by writing the type followed by the variable name. Keywords such as char and int specify built-in types. Sections of code are enclosed in braces ({ and }, sometimes called curly brackets) to limit the scope of declarations and to act as a single statement for control structures. As an imperative language, C uses statements to specify actions. The most common statement is an expression statement, consisting of an expression to be evaluated, followed by a semicolon; as a side effect of the evaluation, functions may be called and variables assigned new values. To modify the normal sequential execution of statements, C provides several control-flow statements identified by reserved keywords. Structured programming is supported by if ... [else] conditional execution and by do ... while, while, and for iterative execution (looping). The for statement has separate initialization, testing, and reinitialization expressions, any or all of which can be omitted. break and continue can be used within the loop. Break is used to leave the innermost enclosing loop statement and continue is used to skip to its reinitialisation. There is also a non-structured goto statement which branches directly to the designated label within the function. switch selects a case to be executed based on the value of an integer expression. Different from many other languages, control-flow will fall through to the next case unless terminated by a break. Expressions can use a variety of built-in operators and may contain function calls. The order in which arguments to functions and operands to most operators are evaluated is unspecified. The evaluations may even be interleaved. However, all side effects (including storage to variables) will occur before the next sequence point; sequence points include the end of each expression statement, and the entry to and return from each function call. Sequence points also occur during evaluation of expressions containing certain operators (&&, ||, ?: and the comma operator). This permits a high degree of object code optimization by the compiler, but requires C programmers to take more care to obtain reliable results than is needed for other programming languages. Kernighan and Ritchie say in the Introduction of The C Programming Language: C, like any other language, has its blemishes. Some of the operators have the wrong precedence; some parts of the syntax could be better. The C standard did not attempt to correct many of these blemishes, because of the impact of such changes on already existing software.",
    "character_set": "The basic C source character set includes the following characters: Lowercase and uppercase letters of the ISO basic Latin alphabet: a–z, A–Z Decimal digits: 0–9 Graphic characters: !  # % & ' ( ) * + , - . / : ; < = > ? [ \\ ] ^ _ { | } ~ Whitespace characters: space, horizontal tab, vertical tab, form feed, newline The newline character indicates the end of a text line; it need not correspond to an actual single character, although for convenience C treats it as such. Additional multi-byte encoded characters may be used in string literals, but they are not entirely portable. Since C99 multi-national Unicode characters can be embedded portably within C source text by using \\uXXXX or \\UXXXXXXXX encoding (where X denotes a hexadecimal character). The basic C execution character set contains the same characters, along with representations for alert, backspace, and carriage return. Run-time support for extended character sets has increased with each revision of the C standard.",
    "reserved_words": "The following reserved words are case sensitive. C89 has 32 reserved words, also known as 'keywords', which cannot be used for any purposes other than those for which they are predefined: auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while C99 added five more reserved words: (‡ indicates an alternative spelling alias for a C23 keyword) inline restrict _Bool ‡ _Complex _Imaginary C11 added seven more reserved words: (‡ indicates an alternative spelling alias for a C23 keyword) _Alignas ‡ _Alignof ‡ _Atomic _Generic _Noreturn _Static_assert ‡ _Thread_local ‡ C23 reserved fifteen more words: alignas alignof bool constexpr false nullptr static_assert thread_local true typeof typeof_unqual _BitInt _Decimal32 _Decimal64 _Decimal128 Most of the recently reserved words begin with an underscore followed by a capital letter, because identifiers of that form were previously reserved by the C standard for use only by implementations. Since existing program source code should not have been using these identifiers, it would not be affected when C implementations started supporting these extensions to the programming language. Some standard headers do define more convenient synonyms for underscored identifiers. Some of those words were added as keywords with their conventional spelling in C23 and the corresponding macros were removed. Prior to C89, entry was reserved as a keyword. In the second edition of their book The C Programming Language, which describes what became known as C89, Kernighan and Ritchie wrote, The ... [keyword] entry, formerly reserved but never used, is no longer reserved. and The stillborn entry keyword is withdrawn.",
    "operators": "Main article: Operators in C and C++ C supports a rich set of operators, which are symbols used within an expression to specify the manipulations to be performed while evaluating that expression. C has operators for: arithmetic: +, -, *, /, % assignment: = augmented assignment: +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>= bitwise logic: ~, &, |, ^ bitwise shifts: <<, >> Boolean logic: !, &&, || conditional evaluation: ? : equality testing: ==, != calling functions: ( ) increment and decrement: ++, -- member selection: ., -> object size: sizeof type: typeof, typeof_unqual since C23 order relations: <, <=, >, >= reference and dereference: &, *, [ ] sequencing: , subexpression grouping: ( ) type conversion: (typename) C uses the operator = (used in mathematics to express equality) to indicate assignment, following the precedent of Fortran and PL/I, but unlike ALGOL and its derivatives. C uses the operator == to test for equality. The similarity between the operators for assignment and equality may result in the accidental use of one in place of the other, and in many cases the mistake does not produce an error message (although some compilers produce warnings). For example, the conditional expression if (a == b + 1) might mistakenly be written as if (a = b + 1), which will be evaluated as true unless the value of a is 0 after the assignment. The C operator precedence is not always intuitive. For example, the operator == binds more tightly than (is executed prior to) the operators & (bitwise AND) and | (bitwise OR) in expressions such as x & 1 == 0, which must be written as (x & 1) == 0 if that is the coder's intent.",
    "data_types": "Main article: C data types This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed. (October 2012) (Learn how and when to remove this message) The type system in C is static and weakly typed, which makes it similar to the type system of ALGOL descendants such as Pascal. There are built-in types for integers of various sizes, both signed and unsigned, floating-point numbers, and enumerated types (enum). Integer type char is often used for single-byte characters. C99 added a Boolean data type. There are also derived types including arrays, pointers, records (struct), and unions (union). C is often used in low-level systems programming where escapes from the type system may be necessary. The compiler attempts to ensure type correctness of most expressions, but the programmer can override the checks in various ways, either by using a type cast to explicitly convert a value from one type to another, or by using pointers or unions to reinterpret the underlying bits of a data object in some other way. Some find C's declaration syntax unintuitive, particularly for function pointers. (Ritchie's idea was to declare identifiers in contexts resembling their use: declaration reflects use.) C's usual arithmetic conversions allow for efficient code to be generated, but can sometimes produce unexpected results. For example, a comparison of signed and unsigned integers of equal width requires a conversion of the signed value to unsigned. This can generate unexpected results if the signed value is negative.",
    "pointers": "C supports the use of pointers, a type of reference that records the address or location of an object or function in memory. Pointers can be dereferenced to access data stored at the address pointed to, or to invoke a pointed-to function. Pointers can be manipulated using assignment or pointer arithmetic. The run-time representation of a pointer value is typically a raw memory address (perhaps augmented by an offset-within-word field), but since a pointer's type includes the type of the thing pointed to, expressions including pointers can be type-checked at compile time. Pointer arithmetic is automatically scaled by the size of the pointed-to data type. Pointers are used for many purposes in C. Text strings are commonly manipulated using pointers into arrays of characters. Dynamic memory allocation is performed using pointers; the result of a malloc is usually cast to the data type of the data to be stored. Many data types, such as trees, are commonly implemented as dynamically allocated struct objects linked together using pointers. Pointers to other pointers are often used in multi-dimensional arrays and arrays of struct objects. Pointers to functions (function pointers) are useful for passing functions as arguments to higher-order functions (such as qsort or bsearch), in dispatch tables, or as callbacks to event handlers. A null pointer value explicitly points to no valid location. Dereferencing a null pointer value is undefined, often resulting in a segmentation fault. Null pointer values are useful for indicating special cases such as no next pointer in the final node of a linked list, or as an error indication from functions returning pointers. In appropriate contexts in source code, such as for assigning to a pointer variable, a null pointer constant can be written as 0, with or without explicit casting to a pointer type, as the NULL macro defined by several standard headers or, since C23 with the constant nullptr. In conditional contexts, null pointer values evaluate to false, while all other pointer values evaluate to true. Void pointers (void *) point to objects of unspecified type, and can therefore be used as generic data pointers. Since the size and type of the pointed-to object is not known, void pointers cannot be dereferenced, nor is pointer arithmetic on them allowed, although they can easily be (and in many contexts implicitly are) converted to and from any other object pointer type. Careless use of pointers is potentially dangerous. Because they are typically unchecked, a pointer variable can be made to point to any arbitrary location, which can cause undesirable effects. Although properly used pointers point to safe places, they can be made to point to unsafe places by using invalid pointer arithmetic; the objects they point to may continue to be used after deallocation (dangling pointers); they may be used without having been initialized (wild pointers); or they may be directly assigned an unsafe value using a cast, union, or through another corrupt pointer. In general, C is permissive in allowing manipulation of and conversion between pointer types, although compilers typically provide options for various levels of checking. Some other programming languages address these problems by using more restrictive reference types.",
    "arrays": "See also: C string handling Array types in C are traditionally of a fixed, static size specified at compile time. The more recent C99 standard also allows a form of variable-length arrays. However, it is also possible to allocate a block of memory (of arbitrary size) at run-time, using the standard library's malloc function, and treat it as an array. Since arrays are always accessed (in effect) via pointers, array accesses are typically not checked against the underlying array size, although some compilers may provide bounds checking as an option. Array bounds violations are therefore possible and can lead to various repercussions, including illegal memory accesses, corruption of data, buffer overruns, and run-time exceptions. C does not have a special provision for declaring multi-dimensional arrays, but rather relies on recursion within the type system to declare arrays of arrays, which effectively accomplishes the same thing. The index values of the resulting multi-dimensional array can be thought of as increasing in row-major order. Multi-dimensional arrays are commonly used in numerical algorithms (mainly from applied linear algebra) to store matrices. The structure of the C array is well suited to this particular task. However, in early versions of C the bounds of the array must be known fixed values or else explicitly passed to any subroutine that requires them, and dynamically sized arrays of arrays cannot be accessed using double indexing. (A workaround for this was to allocate the array with an additional row vector of pointers to the columns.) C99 introduced variable-length arrays which address this issue. The following example using modern C (C99 or later) shows allocation of a two-dimensional array on the heap and the use of multi-dimensional array indexing for accesses (which can use bounds-checking on many C compilers): int func(int N, int M) { float (*p)[N] [M] = malloc(sizeof *p); if (p == 0) return -1; for (int i = 0; i < N; i++) for (int j = 0; j < M; j++) (*p)[i] [j] = i + j; print_array(N, M, p); free(p); return 1; } And here is a similar implementation using C99's Auto VLA feature:[d] int func(int N, int M) { // Caution: checks should be made to ensure N*M*sizeof(float) does NOT exceed limitations for auto VLAs and is within available size of stack. float p[N] [M]; // auto VLA is held on the stack, and sized when the function is invoked for (int i = 0; i < N; i++) for (int j = 0; j < M; j++) p[i] [j] = i + j; print_array(N, M, p); // no need to free(p) since it will disappear when the function exits, along with the rest of the stack frame return 1; }",
    "arraypointer_interchangeability": "The subscript notation x[i] (where x designates a pointer) is syntactic sugar for *(x+i). Taking advantage of the compiler's knowledge of the pointer type, the address that x + i points to is not the base address (pointed to by x) incremented by i bytes, but rather is defined to be the base address incremented by i multiplied by the size of an element that x points to. Thus, x[i] designates the i+1th element of the array. Furthermore, in most expression contexts (a notable exception is as operand of sizeof), an expression of array type is automatically converted to a pointer to the array's first element. This implies that an array is never copied as a whole when named as an argument to a function, but rather only the address of its first element is passed. Therefore, although function calls in C use pass-by-value semantics, arrays are in effect passed by reference. The total size of an array x can be determined by applying sizeof to an expression of array type. The size of an element can be determined by applying the operator sizeof to any dereferenced element of an array A, as in n = sizeof A. Thus, the number of elements in a declared array A can be determined as sizeof A / sizeof A. Note, that if only a pointer to the first element is available as it is often the case in C code because of the automatic conversion described above, the information about the full type of the array and its length are lost.",
    "memory_management": "One of the most important functions of a programming language is to provide facilities for managing memory and the objects that are stored in memory. C provides three principal ways to allocate memory for objects: Static memory allocation: space for the object is provided in the binary at compile-time; these objects have an extent (or lifetime) as long as the binary which contains them is loaded into memory. Automatic memory allocation: temporary objects can be stored on the stack, and this space is automatically freed and reusable after the block in which they are declared is exited. Dynamic memory allocation: blocks of memory of arbitrary size can be requested at run-time using library functions such as malloc from a region of memory called the heap; these blocks persist until subsequently freed for reuse by calling the library function realloc or free. These three approaches are appropriate in different situations and have various trade-offs. For example, static memory allocation has little allocation overhead, automatic allocation may involve slightly more overhead, and dynamic memory allocation can potentially have a great deal of overhead for both allocation and deallocation. The persistent nature of static objects is useful for maintaining state information across function calls, automatic allocation is easy to use but stack space is typically much more limited and transient than either static memory or heap space, and dynamic memory allocation allows convenient allocation of objects whose size is known only at run-time. Most C programs make extensive use of all three. Where possible, automatic or static allocation is usually simplest because the storage is managed by the compiler, freeing the programmer of the potentially error-prone chore of manually allocating and releasing storage. However, many data structures can change in size at runtime, and since static allocations (and automatic allocations before C99) must have a fixed size at compile-time, there are many situations in which dynamic allocation is necessary. Prior to the C99 standard, variable-sized arrays were a common example of this. (See the article on C dynamic memory allocation for an example of dynamically allocated arrays.) Unlike automatic allocation, which can fail at run time with uncontrolled consequences, the dynamic allocation functions return an indication (in the form of a null pointer value) when the required storage cannot be allocated. (Static allocation that is too large is usually detected by the linker or loader, before the program can even begin execution.) Unless otherwise specified, static objects contain zero or null pointer values upon program startup. Automatically and dynamically allocated objects are initialized only if an initial value is explicitly specified; otherwise they initially have indeterminate values (typically, whatever bit pattern happens to be present in the storage, which might not even represent a valid value for that type). If the program attempts to access an uninitialized value, the results are undefined. Many modern compilers try to detect and warn about this problem, but both false positives and false negatives can occur. Heap memory allocation has to be synchronized with its actual usage in any program to be reused as much as possible. For example, if the only pointer to a heap memory allocation goes out of scope or has its value overwritten before it is deallocated explicitly, then that memory cannot be recovered for later reuse and is essentially lost to the program, a phenomenon known as a memory leak. Conversely, it is possible for memory to be freed, but is referenced subsequently, leading to unpredictable results. Typically, the failure symptoms appear in a portion of the program unrelated to the code that causes the error, making it difficult to diagnose the failure. Such issues are ameliorated in languages with automatic garbage collection.",
    "libraries": "The C programming language uses libraries as its primary method of extension. In C, a library is a set of functions contained within a single archive file. Each library typically has a header file, which contains the prototypes of the functions contained within the library that may be used by a program, and declarations of special data types and macro symbols used with these functions. For a program to use a library, it must include the library's header file, and the library must be linked with the program, which in many cases requires compiler flags (e.g., -lm, shorthand for link the math library). The most common C library is the C standard library, which is specified by the ISO and ANSI C standards and comes with every C implementation (implementations which target limited environments such as embedded systems may provide only a subset of the standard library). This library supports stream input and output, memory allocation, mathematics, character strings, and time values. Several separate standard headers (for example, stdio.h) specify the interfaces for these and other standard library facilities. Another common set of C library functions are those used by applications specifically targeted for Unix and Unix-like systems, especially functions which provide an interface to the kernel. These functions are detailed in various standards such as POSIX and the Single UNIX Specification. Since many programs have been written in C, there are a wide variety of other libraries available. Libraries are often written in C because C compilers generate efficient object code; programmers then create interfaces to the library so that the routines can be used from higher-level languages like Java, Perl, and Python.",
    "file_handling_and_streams": "File input and output (I/O) is not part of the C language itself but instead is handled by libraries (such as the C standard library) and their associated header files (e.g. stdio.h). File handling is generally implemented through high-level I/O which works through streams. A stream is from this perspective a data flow that is independent of devices, while a file is a concrete device. The high-level I/O is done through the association of a stream to a file. In the C standard library, a buffer (a memory area or queue) is temporarily used to store data before it is sent to the final destination. This reduces the time spent waiting for slower devices, for example a hard drive or solid-state drive. Low-level I/O functions are not part of the standard C library[clarification needed] but are generally part of bare metal programming (programming that is independent of any operating system such as most embedded programming). With few exceptions, implementations include low-level I/O.",
    "language_tools": "This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed. (July 2014) (Learn how and when to remove this message) A number of tools have been developed to help C programmers find and fix statements with undefined behavior or possibly erroneous expressions, with greater rigor than that provided by the compiler. Automated source code checking and auditing tools exist, such as Lint. A common practice is to use Lint to detect questionable code when a program is first written. Once a program passes Lint, it is then compiled using the C compiler. Also, many compilers can optionally warn about syntactically valid constructs that are likely to actually be errors. MISRA C is a proprietary set of guidelines to avoid such questionable code, developed for embedded systems. There are also compilers, libraries, and operating system level mechanisms for performing actions that are not a standard part of C, such as bounds checking for arrays, detection of buffer overflow, serialization, dynamic memory tracking, and automatic garbage collection. Memory management checking tools like Purify or Valgrind and linking with libraries containing special versions of the memory allocation functions can help uncover runtime errors in memory usage.",
    "rationale_for_use_in_systems_programming": "Some software written in C C is widely used for systems programming in implementing operating systems and embedded system applications. This is for several reasons: The C language permits platform hardware and memory to be accessed with pointers and type punning, so system-specific features (e.g. Control/Status Registers, I/O registers) can be configured and used with code written in C – it allows fullest control of the platform it is running on. The code generated after compilation does not demand many system features, and can be invoked from some boot code in a straightforward manner – it is simple to execute. The C language statements and expressions typically map well on to sequences of instructions for the target processor, and consequently there is a low run-time demand on system resources – it is fast to execute. With its rich set of operators, the C language can use many of the features of target CPUs. Where a particular CPU has more esoteric instructions, a language variant can be constructed with perhaps intrinsic functions to exploit those instructions – it can use practically all the target CPU's features. The language makes it easy to overlay structures onto blocks of binary data, allowing the data to be comprehended, navigated and modified – it can write data structures, even file systems. The language supports a rich set of operators, including bit manipulation, for integer arithmetic and logic, and perhaps different sizes of floating point numbers – it can process appropriately-structured data effectively. C is a fairly small language, with only a handful of statements, and without too many features that generate extensive target code – it is comprehensible. C has direct control over memory allocation and deallocation, which gives reasonable efficiency and predictable timing to memory-handling operations, without any concerns for sporadic stop-the-world garbage collection events – it has predictable performance. C permits the use and implementation of different memory allocation schemes, including a typical malloc and free; a more sophisticated mechanism with arenas; or a version for an OS kernel that may suit DMA, use within interrupt handlers, or integrated with the virtual memory system. Depending on the linker and environment, C code can also call libraries written in assembly language, and may be called from assembly language – it interoperates well with other lower-level code. C and its calling conventions and linker structures are commonly used in conjunction with other high-level languages, with calls both to C and from C supported – it interoperates well with other high-level code. C has a very mature and broad ecosystem, including libraries, frameworks, open source compilers, debuggers and utilities, and is the de facto standard. It is likely the drivers already exist in C, or that there is a similar CPU architecture as a back-end of a C compiler, so there is reduced incentive to choose another language.",
    "used_for_computationally_intensive_libraries": "C enables programmers to create efficient implementations of algorithms and data structures, because the layer of abstraction from hardware is thin, and its overhead is low, an important criterion for computationally intensive programs. For example, the GNU Multiple Precision Arithmetic Library, the GNU Scientific Library, Mathematica, and MATLAB are completely or partially written in C. Many languages support calling library functions in C, for example, the Python-based framework NumPy uses C for the high-performance and hardware-interacting aspects.",
    "games": "Computer games are often built from a combination of languages. C has featured significantly, especially for those games attempting to obtain best performance from computer platforms. Examples include Doom from 1993.",
    "c_as_an_intermediate_language": "C is sometimes used as an intermediate language by implementations of other languages. This approach may be used for portability or convenience; by using C as an intermediate language, additional machine-specific code generators are not necessary. C has some features, such as line-number preprocessor directives and optional superfluous commas at the end of initializer lists, that support compilation of generated code. However, some of C's shortcomings have prompted the development of other C-based languages specifically designed for use as intermediate languages, such as C--. Also, contemporary major compilers GCC and LLVM both feature an intermediate representation that is not C, and those compilers support front ends for many languages including C.",
    "other_languages_written_in_c": "A consequence of C's wide availability and efficiency is that compilers, libraries and interpreters of other programming languages are often implemented in C. For example, the reference implementations of Python, Perl, Ruby, and PHP are written in C.",
    "once_used_for_web_development": "Historically, C was sometimes used for web development using the Common Gateway Interface (CGI) as a gateway for information between the web application, the server, and the browser. C may have been chosen over interpreted languages because of its speed, stability, and near-universal availability. It is no longer common practice for web development to be done in C, and many other web development languages are popular. Applications where C-based web development continues include the HTTP configuration pages on routers, IoT devices and similar, although even here some projects have parts in higher-level languages e.g. the use of Lua within OpenWRT.",
    "web_servers": "The two most popular web servers, Apache HTTP Server and Nginx, are both written in C. These web servers interact with the operating system, listen on TCP ports for HTTP requests, and then serve up static web content, or cause the execution of other languages handling to 'render' content such as PHP, which is itself primarily written in C. C's close-to-the-metal approach allows for the construction of these high-performance software systems.",
    "end_user_applications": "C has also been widely used to implement end-user applications. However, such applications can also be written in newer, higher-level languages.",
    "limitations": "the power of assembly language and the convenience of ... assembly language— Dennis Ritchie While C has been popular, influential and hugely successful, it has drawbacks, including: The standard dynamic memory handling with malloc and free is error prone. Improper use can lead to memory leaks and dangling pointers. The use of pointers and the direct manipulation of memory means corruption of memory is possible, perhaps due to programmer error, or insufficient checking of bad data. There is some type checking, but it does not apply to areas like variadic functions, and the type checking can be trivially or inadvertently circumvented. It is weakly typed. Since the code generated by the compiler contains few checks itself, there is a burden on the programmer to consider all possible outcomes, to protect against buffer overruns, array bounds checking, stack overflows, memory exhaustion, and consider race conditions, thread isolation, etc. The use of pointers and the run-time manipulation of these means there may be two ways to access the same data (aliasing), which is not determinable at compile time. This means that some optimisations that may be available to other languages are not possible in C. FORTRAN is considered faster. Some of the standard library functions, e.g. scanf or strncat, can lead to buffer overruns. There is limited standardisation in support for low-level variants in generated code, for example: different function calling conventions and ABI; different structure packing conventions; different byte ordering within larger integers (including endianness). In many language implementations, some of these options may be handled with the preprocessor directive #pragma, and some with additional keywords e.g. use __cdecl calling convention. The directive and options are not consistently supported. String handling using the standard library is code-intensive, with explicit memory management required. The language does not directly support object orientation, introspection, run-time expression evaluation, generics, etc. There are few guards against inappropriate use of language features, which may lead to unmaintainable code. In particular, the C preprocessor can hide troubling effects such as double evaluation and worse. This facility for tricky code has been celebrated with competitions such as the International Obfuscated C Code Contest and the Underhanded C Contest. C lacks standard support for exception handling and only offers return codes for error checking. The setjmp and longjmp standard library functions have been used to implement a try-catch mechanism via macros. For some purposes, restricted styles of C have been adopted, e.g. MISRA C or CERT C, in an attempt to reduce the opportunity for bugs. Databases such as CWE attempt to count the ways C etc. has vulnerabilities, along with recommendations for mitigation. There are tools that can mitigate against some of the drawbacks. Contemporary C compilers include checks which may generate warnings to help identify many potential bugs.",
    "related_languages": "The TIOBE index graph, showing a comparison of the popularity of various programming languages Main article: List of C-family programming languages C has both directly and indirectly influenced many later languages such as C++ and Java. The most pervasive influence has been syntactical; all of the languages mentioned combine the statement and (more or less recognizably) expression syntax of C with type systems, data models or large-scale program structures that differ from those of C, sometimes radically. Several C or near-C interpreters exist, including Ch and CINT, which can also be used for scripting. When object-oriented programming languages became popular, C++ and Objective-C were two different extensions of C that provided object-oriented capabilities. Both languages were originally implemented as source-to-source compilers; source code was translated into C, and then compiled with a C compiler. The C++ programming language (originally named C with Classes) was devised by Bjarne Stroustrup as an approach to providing object-oriented functionality with a C-like syntax. C++ adds greater typing strength, scoping, and other tools useful in object-oriented programming, and permits generic programming via templates. Nearly a superset of C, C++ now[when?] supports most of C, with a few exceptions. Objective-C was originally a very thin layer on top of C, and remains a strict superset of C that permits object-oriented programming using a hybrid dynamic/static typing paradigm. Objective-C derives its syntax from both C and Smalltalk: syntax that involves preprocessing, expressions, function declarations, and function calls is inherited from C, while the syntax for object-oriented features was originally taken from Smalltalk. In addition to C++ and Objective-C, Ch, Cilk, and Unified Parallel C are nearly supersets of C.",
    "see_also": "Computer programming portalFree and open-source software portal Compatibility of C and C++ Comparison of Pascal and C Comparison of programming languages International Obfuscated C Code Contest List of C-family programming languages List of C compilers",
    "notes": "^ The original example code will compile on most modern compilers that are not in strict standard compliance mode, but it does not fully conform to the requirements of either C89 or C99. In fact, C99 requires that a diagnostic message be produced. ^ The main function actually has two arguments, int argc and char *argv[], respectively, which can be used to handle command-line arguments. The ISO C standard (section 5.1.2.2.1) requires both forms of main to be supported, which is special treatment not afforded to any other function. ^ Prior to C99, an explicit return 0; statement was required at the end of the main function. ^ Code of print_array (not shown) slightly differs,[why?] too.",
    "references": "^ a b Prinz, Peter; Crawford, Tony (December 16, 2005). C in a Nutshell. O'Reilly Media, Inc. p. 3. ISBN 9780596550714. ^ Ritchie (1993): Thompson had made a brief attempt to produce a system coded in an early version of C—before structures—in 1972, but gave up the effort. ^ N3221 – Editor's Report, Post January 2024 Strasbourg France Meeting. ISO/IEC JTC1/SC22/WG14. Open Standards. February 21, 2024. Retrieved May 24, 2024. ^ Ritchie (1993): The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of. ^ a b Verilog HDL (and C) (PDF). The Research School of Computer Science at the Australian National University. June 3, 2010. Archived from the original (PDF) on November 6, 2013. Retrieved August 19, 2013. 1980s: Verilog first introduced; Verilog inspired by the C programming language ^ The name is based on, and pronounced like the letter C in the English alphabet. the c programming language sound. English Chinese Dictionary. Archived from the original on November 17, 2022. Retrieved November 17, 2022. ^ Munoz, Daniel. After All These Years, the World is Still Powered by C Programming | Toptal. Toptal Engineering Blog. Retrieved June 15, 2024. ^ C Language Drops to Lowest Popularity Rating. Developer.com. August 9, 2016. Archived from the original on August 22, 2022. Retrieved August 1, 2022. ^ a b c d e f Ritchie (1993) ^ Programming Language Popularity. 2009. Archived from the original on January 16, 2009. Retrieved January 16, 2009. ^ TIOBE Programming Community Index. 2009. Archived from the original on May 4, 2009. Retrieved May 6, 2009. ^ Ward, Terry A. (August 1983). Annotated C / A Bibliography of the C Language. Byte. p. 268. Retrieved January 31, 2015. ^ TIOBE Index for September 2024. Archived from the original on September 18, 2024. Retrieved September 20, 2024. ^ Ritchie, Dennis. BCPL to B to C. lysator.liu.se. Archived from the original on December 12, 2019. Retrieved September 10, 2019. ^ a b c d e Jensen, Richard (December 9, 2020). A damn stupid thing to do—the origins of C. Ars Technica. Archived from the original on March 28, 2022. Retrieved March 28, 2022. ^ a b Johnson, S. C.; Ritchie, D. M. (1978). Portability of C Programs and the UNIX System. Bell System Tech. J. 57 (6): 2021–2048. CiteSeerX 10.1.1.138.35. doi:10.1002/j.1538-7305.1978.tb02141.x. ISSN 0005-8580. S2CID 17510065. (Note: The PDF is an OCR scan of the original, and contains a rendering of IBM 370 as IBM 310.) ^ McIlroy, M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971–1986 (PDF) (Technical report). CSTR. Bell Labs. p. 10. 139. Archived (PDF) from the original on November 11, 2017. Retrieved February 1, 2015. ^ Kernighan, Brian W.; Ritchie, Dennis M. (February 1978). The C Programming Language (1st ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110163-0. ^ C manual pages. FreeBSD Miscellaneous Information Manual (FreeBSD 13.0 ed.). May 30, 2011. Archived from the original on January 21, 2021. Retrieved January 15, 2021. Archived January 21, 2021, at the Wayback Machine ^ Kernighan, Brian W.; Ritchie, Dennis M. (March 1988). The C Programming Language (2nd ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110362-7. ^ Stroustrup, Bjarne (2002). Sibling rivalry: C and C++ (PDF) (Report). AT&T Labs. Archived (PDF) from the original on August 24, 2014. Retrieved April 14, 2014. ^ Rationale for American National Standard for Information Systems – Programming Language – C. Archived from the original on July 17, 2024. Retrieved July 17, 2024. ^ C Integrity. International Organization for Standardization. March 30, 1995. Archived from the original on July 25, 2018. Retrieved July 24, 2018. ^ JTC1/SC22/WG14 – C. Home page. ISO/IEC. Archived from the original on February 12, 2018. Retrieved June 2, 2011. ^ Andrew Binstock (October 12, 2011). Interview with Herb Sutter. Dr. Dobbs. Archived from the original on August 2, 2013. Retrieved September 7, 2013. ^ WG14-N3132 : Revised C23 Schedule (PDF). open-std.org. June 4, 2023. Archived (PDF) from the original on June 9, 2023. ^ WG14-N3220 : Working Draft, C2y (PDF). open-std.org. February 21, 2024. Archived (PDF) from the original on February 26, 2024. ^ TR 18037: Embedded C (PDF). open-std.org. April 4, 2006. ISO/IEC JTC1 SC22 WG14 N1169. Archived (PDF) from the original on February 25, 2021. Retrieved July 26, 2011. ^ Harbison, Samuel P.; Steele, Guy L. (2002). C: A Reference Manual (5th ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-089592-9. Contains a BNF grammar for C. ^ Kernighan & Ritchie (1988), p. 192. ^ Kernighan & Ritchie (1978), p. 3. ^ ISO/IEC 9899:201x (ISO C11) Committee Draft (PDF). open-std.org. December 2, 2010. Archived (PDF) from the original on December 22, 2017. Retrieved September 16, 2011. ^ Kernighan & Ritchie (1988), pp. 192, 259. ^ 10 Common Programming Mistakes in C++. Cs.ucr.edu. Archived from the original on October 21, 2008. Retrieved June 26, 2009. ^ Schultz, Thomas (2004). C and the 8051 (3rd ed.). Otsego, MI: PageFree Publishing Inc. p. 20. ISBN 978-1-58961-237-2. Retrieved February 10, 2012. ^ Kernighan & Ritchie (1978), p. 6. ^ a b c d e f g Klemens, Ben (2013). 21st Century C. O'Reilly Media. ISBN 978-1-4493-2714-9. ^ Feuer, Alan R.; Gehani, Narain H. (March 1982). Comparison of the Programming Languages C and Pascal. ACM Computing Surveys. 14 (1): 73–92. doi:10.1145/356869.356872. S2CID 3136859. ^ Kernighan & Ritchie (1988), p. 122. ^ For example, gcc provides _FORTIFY_SOURCE. Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE). fedoraproject.org. Archived from the original on January 7, 2007. Retrieved August 5, 2012. ^ เอี่ยมสิริวงศ์, โอภาศ (2016). Programming with C. Bangkok, Thailand: SE-EDUCATION PUBLIC COMPANY LIMITED. pp. 225–230. ISBN 978-616-08-2740-4. ^ Raymond, Eric S. (October 11, 1996). The New Hacker's Dictionary (3rd ed.). MIT Press. p. 432. ISBN 978-0-262-68092-9. Retrieved August 5, 2012. ^ Man Page for lint (freebsd Section 1). unix.com. May 24, 2001. Retrieved July 15, 2014. ^ CS107 Valgrind Memcheck. web.stanford.edu. Retrieved June 23, 2023. ^ Hastings, Reed; Joyce, Bob. Purify: Fast Detection of Memory Leaks and Access Errors (PDF). Pure Software Inc.: 9. ^ Dale, Nell B.; Weems, Chip (2014). Programming and problem solving with C++ (6th ed.). Burlington, Massachusetts: Jones & Bartlett Learning. ISBN 978-1449694289. OCLC 894992484. ^ Development of Doom. DoomWiki.org. March 2, 2025. Retrieved March 2, 2025. ^ C – the mother of all languages. ICT Academy at IITK. November 13, 2018. Archived from the original on May 31, 2021. Retrieved October 11, 2022. ^ 1. Extending Python with C or C++. Python 3.10.7 documentation. Archived from the original on November 5, 2012. Retrieved October 11, 2022. ^ Conrad, Michael (January 22, 2018). An overview of the Perl 5 engine. Opensource.com. Archived from the original on May 26, 2022. Retrieved October 11, 2022. ^ To Ruby From C and C++. Ruby Programming Language. Archived from the original on August 12, 2013. Retrieved October 11, 2022. ^ Para, Michael (August 3, 2022). What is PHP? How to Write Your First PHP Program. freeCodeCamp. Archived from the original on August 4, 2022. Retrieved October 11, 2022. ^ Dr. Dobb's Sourcebook. U.S.: Miller Freeman, Inc. November–December 1995. ^ Using C for CGI Programming. linuxjournal.com. March 1, 2005. Archived from the original on February 13, 2010. Retrieved January 4, 2010. ^ Perkins, Luc (September 17, 2013). Web development in C: crazy? Or crazy like a fox?. Medium. Archived from the original on October 4, 2014. Retrieved April 8, 2022. ^ Munoz, Daniel. After All These Years, the World is Still Powered by C Programming. Toptal Engineering Blog. Retrieved November 17, 2023. ^ Metz, Cade. Dennis Ritchie: The Shoulders Steve Jobs Stood On. Wired. Archived from the original on April 12, 2022. Retrieved April 19, 2022. ^ Internet Security Research Group. What is memory safety and why does it matter?. Prossimo. Retrieved March 3, 2025. ^ corob-msft (March 31, 2022). Pragma directives and the __pragma and _Pragma keywords. Microsoft Learn. Archived from the original on September 24, 2022. Retrieved September 24, 2022. ^ Pragmas (The C Preprocessor). GCC, the GNU Compiler Collection. Archived from the original on June 17, 2002. Retrieved September 24, 2022. ^ Pragmas. Intel C++ Compiler Classic Developer Guide and Reference. Intel. Archived from the original on April 10, 2022. Retrieved April 10, 2022. ^ In praise of the C preprocessor. apenwarr. August 13, 2007. Retrieved July 9, 2023. ^ Roberts, Eric S. (March 21, 1989). Implementing Exceptions in C (PDF). DEC Systems Research Center. SRC-RR-40. Archived (PDF) from the original on January 15, 2017. Retrieved January 4, 2022. ^ McMillan, Robert (August 1, 2013). Is Java Losing Its Mojo?. Wired. Archived from the original on February 15, 2017. Retrieved March 5, 2017. ^ O'Regan, Gerard (September 24, 2015). Pillars of computing : a compendium of select, pivotal technology firms. Springer. ISBN 978-3319214641. OCLC 922324121. ^ Rauchwerger, Lawrence (2004). Languages and compilers for parallel computing : 16th international workshop, LCPC 2003, College Station, TX, USA, October 2–4, 2003 : revised papers. Springer. ISBN 978-3540246442. OCLC 57965544. ^ Stroustrup, Bjarne (1993). A History of C++: 1979–1991 (PDF). Archived (PDF) from the original on February 2, 2019. Retrieved June 9, 2011.",
    "sources": "Ritchie, Dennis M. (March 1993). The Development of the C Language. ACM SIGPLAN Notices. 28 (3). ACM: 201–208. doi:10.1145/155360.155580. By courtesy of the author, also at Ritchie, Dennis M. Chistory. www.bell-labs.com. Retrieved March 29, 2022. Ritchie, Dennis M. (1993). The Development of the C Language. The Second ACM SIGPLAN Conference on History of Programming Languages (HOPL-II). ACM. pp. 201–208. doi:10.1145/154766.155580. ISBN 0-89791-570-4. Archived from the original on April 11, 2019. Retrieved November 4, 2014. Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). Prentice Hall. ISBN 0-13-110362-8.",
    "further_reading": "Plauger, P.J. (1992). The Standard C Library (1 ed.). Prentice Hall. ISBN 978-0131315099. (source) Banahan, M.; Brady, D.; Doran, M. (1991). The C Book: Featuring the ANSI C Standard (2 ed.). Addison-Wesley. ISBN 978-0201544336. (free) Feuer, Alan R. (1985). The C Puzzle Book (1 ed.). Prentice Hall. ISBN 0131099345. Harbison, Samuel; Steele, Guy Jr. (2002). C: A Reference Manual (5 ed.). Pearson. ISBN 978-0130895929. (archive) King, K.N. (2008). C Programming: A Modern Approach (2 ed.). W. W. Norton. ISBN 978-0393979503. (archive) Griffiths, David; Griffiths, Dawn (2012). Head First C (1 ed.). O'Reilly. ISBN 978-1449399917. Perry, Greg; Miller, Dean (2013). C Programming: Absolute Beginner's Guide (3 ed.). Que. ISBN 978-0789751980. Deitel, Paul; Deitel, Harvey (2015). C: How to Program (8 ed.). Pearson. ISBN 978-0133976892. Gustedt, Jens (2019). Modern C (2 ed.). Manning. ISBN 978-1617295812. (free)",
    "external_links": "C (programming language) at Wikipedia's sister projects Media from CommonsNews from WikinewsQuotations from WikiquoteTextbooks from WikibooksResources from Wikiversity ISO C Working Group official website ISO/IEC 9899, publicly available official C documents, including the C99 Rationale C99 with Technical corrigenda TC1, TC2, and TC3 included (PDF). Archived (PDF) from the original on October 25, 2007. (3.61 MB) comp.lang.c Frequently Asked Questions A History of C, by Dennis Ritchie C Library Reference and Examples vteC programming language ANSI C C99 C11 C17 C23 Embedded C MISRA C Features Functions Header files Operators String Syntax Preprocessor Data types Standard library Char File I/O Math Dynamic memory String Time Variadic POSIX Implementations Bionic libhybris dietlibc glibc EGLIBC klibc Windows CRT musl Newlib uClibc Compilers ACK Borland Turbo C Clang GCC ICC LCC Norcroft C PCC SDCC TCC Visual C++ (MSVC) Watcom C/C++ IDEs Anjuta CLion Code::Blocks CodeLite Eclipse Geany GNOME Builder KDevelop NetBeans Visual Studio Comparison withother languages Compatibility of C and C++ Comparison with Pascal Descendantlanguages Alef C++ C# D Objective-C Go Vala Zig Designer Dennis Ritchie Category vteIntegrated development environmentsC, C++Open source Arduino IDE Code::Blocks CodeLite Dev-C++ Eclipse Emacs Geany GNOME Builder Kakoune KDevelop NetBeans QDevelop Qt Creator TheIDE Vi–Vim OpenWatcom Freeware DevEco Studio Oracle Developer Studio Visual Studio Code Visual Studio Community Xcode Retail C++Builder Eclipse-based CodeWarrior MyEclipse Visual Studio By JetBrains IntelliJ IDEA CLion LabWindows/CVI IBM Rational Software Architect Understand SlickEdit Discontinued Anjuta By JetBrains AppCode VisualAge Visual C++ Express MonoDevelop SharpDevelop Borland Turbo C, C++ QuickC JavaOpen source Anjuta BlueJ DrJava Eclipse Geany Greenfoot IntelliJ IDEA Community Edition Android Studio NetBeans DevEco Studio Freeware jGRASP JDeveloper Retail JCreator MyEclipse JetBrains IntelliJ IDEA SlickEdit Understand Discontinued Metrowerks CodeWarrior Pro for Java JBuilder Sun Java Studio Creator (superseded by NetBeans) VisualAge (superseded by Eclipse) Visual Café (aka Espresso, superseded by JBuilder) Visual J++ Xelfi (became NetBeans) JavaScriptOpen source Vim Visual Studio Code Atom Chromium DevEco Studio CLI (.NET)Open source Visual Studio Code PascalABC.NET Freeware Visual Studio Community Retail Visual Studio Rider Understand Discontinued Xamarin Studio MonoDevelop SharpDevelop Visual Basic Express Visual Web Developer Express Visual J# Express Visual Studio Express for Windows Phone Visual C++ Express Visual C# Express Express for Desktop Express for Web Express for Windows Flash Adobe Flash Builder FlashDevelop Powerflasher FDT PHPOpen source Aptana NetBeans Komodo Edit Komodo IDE KDevelop Proprietary Codelobster PhpStorm PHPEdit SlickEdit Zend Studio R RStudio R Tools for Visual Studio PythonOpen source Anjuta IDLE Eric Light Table Ninja-IDE PyDev PyScripter PIDA Spyder Komodo Edit Komodo IDE KDevelop Vim Visual Studio Code Thonny DevEco Studio Proprietary PyCharm PythonAnywhere Visual Studio Code SlickEdit Wing IDE Pascal,Object PascalOpen source Free Pascal IDE Lazarus Dev-Pascal GNAVI PascalABC.NET Freeware Delphi Community Retail Delphi Discontinued Turbo Pascal Virtual Pascal Borland Kylix QuickPascal BASICOpen source Basic-256 Microsoft Small Basic SdlBasic Gambas Basic4GL VisualFBEditor / WinFBE InForm Freeware FutureBASIC RapidQ Visual Studio Community Retail Visual Studio NS Basic PureBasic GLBasic Liberty BASIC Xojo Discontinued CA-Realizer MonoDevelop QuickBASIC QBasic SharpDevelop Visual Basic Visual Basic Express GoOpen source Vim Visual Studio Code (VSCode) Eclipse Freeware Cloud9 IDE Retail GoLand Haxe IntelliJ IDEA VS Code Sublime Text Powerflasher FDT POP-11 Poplog Online AWS Cloud9 IDE Eclipse Che SourceLair Comparison Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef",
    "document": "Dennis Ritchie (right), the inventor of the C programming language, with Ken Thompson C is an imperative, procedural language in the ALGOL tradition. It has a static type system. In C, all executable code is contained within subroutines (also called functions, though not in the sense of functional programming). Function parameters are passed by value, although arrays are passed as pointers, i.e. the address of the first item in the array. Pass-by-reference is simulated in C by explicitly passing pointers to the thing being referenced. C program source text is free-form code. Semicolons terminate statements, while curly braces are used to group statements into blocks. The C language also exhibits the following characteristics: The language has a small, fixed number of keywords, including a full set of control flow primitives: if/else, for, do/while, while, and switch. User-defined names are not distinguished from keywords by any kind of sigil. It has a large number of arithmetic, bitwise, and logic operators: +,+=,++,&,||, etc. More than one assignment may be performed in a single statement. Functions: Function return values can be ignored, when not needed. Function and data pointers permit ad hoc run-time polymorphism. Functions may not be defined within the lexical scope of other functions. Variables may be defined within a function, with scope. A function may call itself, so recursion is supported. Data typing is static, but weakly enforced; all data has a type, but implicit conversions are possible. User-defined (typedef) and compound types are possible. Heterogeneous aggregate data types (struct) allow related data elements to be accessed and assigned as a unit. The contents of whole structs cannot be compared using a single built-in operator (the elements must be compared individually). Union is a structure with overlapping members; it allows multiple data types to share the same memory location. Array indexing is a secondary notation, defined in terms of pointer arithmetic. Whole arrays cannot be assigned or compared using a single built-in operator. There is no array keyword in use or definition; instead, square brackets indicate arrays syntactically, for example month. Enumerated types are possible with the enum keyword. They are freely interconvertible with integers. Strings are not a distinct data type, but are conventionally implemented as null-terminated character arrays. Low-level access to computer memory is possible by converting machine addresses to pointers. Procedures (subroutines not returning values) are a special case of function, with an empty return type void. Memory can be allocated to a program with calls to library routines. A preprocessor performs macro definition, source code file inclusion, and conditional compilation. There is a basic form of modularity: files can be compiled separately and linked together, with control over which functions and data objects are visible to other files via static and extern attributes. Complex functionality such as I/O, string manipulation, and mathematical functions are consistently delegated to library routines. The generated code after compilation has relatively straightforward needs on the underlying platform, which makes it suitable for creating operating systems and for use in embedded systems. While C does not include certain features found in other languages (such as object orientation and garbage collection), these can be implemented or emulated, often through the use of external libraries (e.g., the GLib Object System or the Boehm garbage collector). Main article: List of C-family programming languages Many later languages have borrowed directly or indirectly from C, including C++, C#, Unix's C shell, D, Go, Java, JavaScript (including transpilers), Julia, Limbo, LPC, Objective-C, Perl, PHP, Python, Ruby, Rust, Swift, Verilog and SystemVerilog (hardware description languages). These languages have drawn many of their control structures and other basic features from C. Most of them also express highly similar syntax to C, and they tend to combine the recognizable expression and statement syntax of C with underlying type systems, data models, and semantics that can be radically different. Timeline of C language Year Informalname Officialstandard 1972 first release — 1978 K&R C — 1989,1990 ANSI C, C89,ISO C, C90 ANSI X3.159-1989ISO/IEC 9899:1990 1999 C99, C9X ISO/IEC 9899:1999 2011 C11, C1X ISO/IEC 9899:2011 2018 C17, C18 ISO/IEC 9899:2018 2024 C23, C2X ISO/IEC 9899:2024 TBA C2Y The origin of C is closely tied to the development of the Unix operating system, originally implemented in assembly language on a PDP-7 by Dennis Ritchie and Ken Thompson, incorporating several ideas from colleagues. Eventually, they decided to port the operating system to a PDP-11. The original PDP-11 version of Unix was also developed in assembly language. Main article: B (programming language) Thompson wanted a programming language for developing utilities for the new platform. He first tried writing a Fortran compiler, but he soon gave up the idea and instead created a cut-down version of the recently developed systems programming language called BCPL. The official description of BCPL was not available at the time, and Thompson modified the syntax to be less 'wordy' and similar to a simplified ALGOL known as SMALGOL. He called the result B, describing it as BCPL semantics with a lot of SMALGOL syntax. Like BCPL, B had a bootstrapping compiler to facilitate porting to new machines. Ultimately, few utilities were written in B because it was too slow and could not take advantage of PDP-11 features such as byte addressability. In 1971 Ritchie started to improve B, to use the features of the more-powerful PDP-11. A significant addition was a character data type. He called this New B (NB). Thompson started to use NB to write the Unix kernel, and his requirements shaped the direction of the language development. Through to 1972, richer types were added to the NB language: NB had arrays of int and char. Pointers, the ability to generate pointers to other types, arrays of all types, and types to be returned from functions were all also added. Arrays within expressions became pointers. A new compiler was written, and the language was renamed C. The C compiler and some utilities made with it were included in Version 2 Unix, which is also known as Research Unix. At Version 4 Unix, released in November 1973, the Unix kernel was extensively re-implemented in C. By this time, the C language had acquired some powerful features such as struct types. The preprocessor was introduced around 1973 at the urging of Alan Snyder and also in recognition of the usefulness of the file-inclusion mechanisms available in BCPL and PL/I. Its original version provided only included files and simple string replacements: #include and #define of parameterless macros. Soon after that, it was extended, mostly by Mike Lesk and then by John Reiser, to incorporate macros with arguments and conditional compilation. Unix was one of the first operating system kernels implemented in a language other than assembly. Earlier instances include the Multics system (which was written in PL/I) and Master Control Program (MCP) for the Burroughs B5000 (which was written in ALGOL) in 1961. In around 1977, Ritchie and Stephen C. Johnson made further changes to the language to facilitate portability of the Unix operating system. Johnson's Portable C Compiler served as the basis for several implementations of C on new platforms. The cover of the book The C Programming Language, first edition, by Brian Kernighan and Dennis Ritchie In 1978 Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language. Known as K&R from the initials of its authors, the book served for many years as an informal specification of the language. The version of C that it describes is commonly referred to as K&R C. As this was released in 1978, it is now also referred to as C78. The second edition of the book covers the later ANSI C standard, described below. K&R introduced several language features: Standard I/O library long int data type unsigned int data type Compound assignment operators of the form =op (such as =-) were changed to the form op= (that is, -=) to remove the semantic ambiguity created by constructs such as i=-10, which had been interpreted as i =- 10 (decrement i by 10) instead of the possibly intended i = -10 (let i be −10). Even after the publication of the 1989 ANSI standard, for many years K&R C was still considered the lowest common denominator to which C programmers restricted themselves when maximum portability was desired, since many older compilers were still in use, and because carefully written K&R C code can be legal Standard C as well. In early versions of C, only functions that return types other than int must be declared if used before the function definition; functions used without prior declaration were presumed to return type int. For example: long some_function(); /* This is a function declaration, so the compiler can know the name and return type of this function. */ /* int */ other_function(); /* Another function declaration. Because this is an early version of C, there is an implicit 'int' type here. A comment shows where the explicit 'int' type specifier would be required in later versions. */ /* int */ calling_function() /* This is a function definition, including the body of the code following in the { curly brackets }. Because no return type is specified, the function implicitly returns an 'int' in this early version of C. */ { long test1; register /* int */ test2; /* Again, note that 'int' is not required here. The 'int' type specifier */ /* in the comment would be required in later versions of C. */ /* The 'register' keyword indicates to the compiler that this variable should */ /* ideally be stored in a register as opposed to within the stack frame. */ test1 = some_function(); if (test1 > 1) test2 = 0; else test2 = other_function(); return test2; } The int type specifiers which are commented out could be omitted in K&R C, but are required in later standards. Since K&R function declarations did not include any information about function arguments, function parameter type checks were not performed, although some compilers would issue a warning message if a local function was called with the wrong number of arguments, or if different calls to an external function used different numbers or types of arguments. Separate tools such as Unix's lint utility were developed that (among other things) could check for consistency of function use across multiple source files. In the years following the publication of K&R C, several features were added to the language, supported by compilers from AT&T (in particular PCC) and some other vendors. These included: void functions (i.e., functions with no return value) functions returning struct or union types (previously only a single pointer, integer or float could be returned) assignment for struct data types enumerated types (previously, preprocessor definitions for integer fixed values were used, e.g. #define GREEN 3) The large number of extensions and lack of agreement on a standard library, together with the language popularity and the fact that not even the Unix compilers precisely implemented the K&R specification, led to the necessity of standardization. Main article: ANSI C During the late 1970s and 1980s, versions of C were implemented for a wide variety of mainframe computers, minicomputers, and microcomputers, including the IBM PC, as its popularity began to increase significantly. In 1983 the American National Standards Institute (ANSI) formed a committee, X3J11, to establish a standard specification of C. X3J11 based the C standard on the Unix implementation; however, the non-portable portion of the Unix C library was handed off to the IEEE working group 1003 to become the basis for the 1988 POSIX standard. In 1989, the C standard was ratified as ANSI X3.159-1989 Programming Language C. This version of the language is often referred to as ANSI C, Standard C, or sometimes C89. In 1990 the ANSI C standard (with formatting changes) was adopted by the International Organization for Standardization (ISO) as ISO/IEC 9899:1990, which is sometimes called C90. Therefore, the terms C89 and C90 refer to the same programming language. ANSI, like other national standards bodies, no longer develops the C standard independently, but defers to the international C standard, maintained by the working group ISO/IEC JTC1/SC22/WG14. National adoption of an update to the international standard typically occurs within a year of ISO publication. One of the aims of the C standardization process was to produce a superset of K&R C, incorporating many of the subsequently introduced unofficial features. The standards committee also included several additional features such as function prototypes (borrowed from C++), void pointers, support for international character sets and locales, and preprocessor enhancements. Although the syntax for parameter declarations was augmented to include the style used in C++, the K&R interface continued to be permitted, for compatibility with existing source code. C89 is supported by current C compilers, and most modern C code is based on it. Any program written only in Standard C and without any hardware-dependent assumptions will run correctly on any platform with a conforming C implementation, within its resource limits. Without such precautions, programs may compile only on a certain platform or with a particular compiler, due, for example, to the use of non-standard libraries, such as GUI libraries, or to a reliance on compiler- or platform-specific attributes such as the exact size of data types and byte endianness. In cases where code must be compilable by either standard-conforming or K&R C-based compilers, the __STDC__ macro can be used to split the code into Standard and K&R sections to prevent the use on a K&R C-based compiler of features available only in Standard C. After the ANSI/ISO standardization process, the C language specification remained relatively static for several years. In 1995, Normative Amendment 1 to the 1990 C standard (ISO/IEC 9899/AMD1:1995, known informally as C95) was published, to correct some details and to add more extensive support for international character sets. Main article: C23 (C standard revision) C23 is an informal name for the current major C language standard revision. It was informally known as C2X through most of its development. C23 was published in October 2024 as ISO/IEC 9899:2024. The standard macro __STDC_VERSION__ is defined as 202311L to indicate that C23 support is available. C2Y is an informal name for the next major C language standard revision, after C23 (C2X), that is hoped to be released later in the 2020s, hence the '2' in C2Y. An early working draft of C2Y was released in February 2024 as N3220 by the working group ISO/IEC JTC1/SC22/WG14. Main article: Embedded C Historically, embedded C programming requires non-standard extensions to the C language to support exotic features such as fixed-point arithmetic, multiple distinct memory banks, and basic I/O operations. In 2008, the C Standards Committee published a technical report extending the C language to address these issues by providing a common standard for all implementations to adhere to. It includes a number of features not available in normal C, such as fixed-point arithmetic, named address spaces, and basic I/O hardware addressing. Main article: C syntax C has a formal grammar specified by the C standard. Line endings are generally not significant in C; however, line boundaries do have significance during the preprocessing phase. Comments may appear either between the delimiters /* and */, or (since C99) following // until the end of the line. Comments delimited by /* and */ do not nest, and these sequences of characters are not interpreted as comment delimiters if they appear inside string or character literals. C source files contain declarations and function definitions. Function definitions, in turn, contain declarations and statements. Declarations either define new types using keywords such as struct, union, and enum, or assign types to and perhaps reserve storage for new variables, usually by writing the type followed by the variable name. Keywords such as char and int specify built-in types. Sections of code are enclosed in braces ({ and }, sometimes called curly brackets) to limit the scope of declarations and to act as a single statement for control structures. As an imperative language, C uses statements to specify actions. The most common statement is an expression statement, consisting of an expression to be evaluated, followed by a semicolon; as a side effect of the evaluation, functions may be called and variables assigned new values. To modify the normal sequential execution of statements, C provides several control-flow statements identified by reserved keywords. Structured programming is supported by if ... [else] conditional execution and by do ... while, while, and for iterative execution (looping). The for statement has separate initialization, testing, and reinitialization expressions, any or all of which can be omitted. break and continue can be used within the loop. Break is used to leave the innermost enclosing loop statement and continue is used to skip to its reinitialisation. There is also a non-structured goto statement which branches directly to the designated label within the function. switch selects a case to be executed based on the value of an integer expression. Different from many other languages, control-flow will fall through to the next case unless terminated by a break. Expressions can use a variety of built-in operators and may contain function calls. The order in which arguments to functions and operands to most operators are evaluated is unspecified. The evaluations may even be interleaved. However, all side effects (including storage to variables) will occur before the next sequence point; sequence points include the end of each expression statement, and the entry to and return from each function call. Sequence points also occur during evaluation of expressions containing certain operators (&&, ||, ?: and the comma operator). This permits a high degree of object code optimization by the compiler, but requires C programmers to take more care to obtain reliable results than is needed for other programming languages. Kernighan and Ritchie say in the Introduction of The C Programming Language: C, like any other language, has its blemishes. Some of the operators have the wrong precedence; some parts of the syntax could be better. The C standard did not attempt to correct many of these blemishes, because of the impact of such changes on already existing software. The basic C source character set includes the following characters: Lowercase and uppercase letters of the ISO basic Latin alphabet: a–z, A–Z Decimal digits: 0–9 Graphic characters: !  # % & ' ( ) * + , - . / : ; < = > ? [ \\ ] ^ _ { | } ~ Whitespace characters: space, horizontal tab, vertical tab, form feed, newline The newline character indicates the end of a text line; it need not correspond to an actual single character, although for convenience C treats it as such. Additional multi-byte encoded characters may be used in string literals, but they are not entirely portable. Since C99 multi-national Unicode characters can be embedded portably within C source text by using \\uXXXX or \\UXXXXXXXX encoding (where X denotes a hexadecimal character). The basic C execution character set contains the same characters, along with representations for alert, backspace, and carriage return. Run-time support for extended character sets has increased with each revision of the C standard. The following reserved words are case sensitive. C89 has 32 reserved words, also known as 'keywords', which cannot be used for any purposes other than those for which they are predefined: auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while C99 added five more reserved words: (‡ indicates an alternative spelling alias for a C23 keyword) inline restrict _Bool ‡ _Complex _Imaginary C11 added seven more reserved words: (‡ indicates an alternative spelling alias for a C23 keyword) _Alignas ‡ _Alignof ‡ _Atomic _Generic _Noreturn _Static_assert ‡ _Thread_local ‡ C23 reserved fifteen more words: alignas alignof bool constexpr false nullptr static_assert thread_local true typeof typeof_unqual _BitInt _Decimal32 _Decimal64 _Decimal128 Most of the recently reserved words begin with an underscore followed by a capital letter, because identifiers of that form were previously reserved by the C standard for use only by implementations. Since existing program source code should not have been using these identifiers, it would not be affected when C implementations started supporting these extensions to the programming language. Some standard headers do define more convenient synonyms for underscored identifiers. Some of those words were added as keywords with their conventional spelling in C23 and the corresponding macros were removed. Prior to C89, entry was reserved as a keyword. In the second edition of their book The C Programming Language, which describes what became known as C89, Kernighan and Ritchie wrote, The ... [keyword] entry, formerly reserved but never used, is no longer reserved. and The stillborn entry keyword is withdrawn. Main article: Operators in C and C++ C supports a rich set of operators, which are symbols used within an expression to specify the manipulations to be performed while evaluating that expression. C has operators for: arithmetic: +, -, *, /, % assignment: = augmented assignment: +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>= bitwise logic: ~, &, |, ^ bitwise shifts: <<, >> Boolean logic: !, &&, || conditional evaluation: ? : equality testing: ==, != calling functions: ( ) increment and decrement: ++, -- member selection: ., -> object size: sizeof type: typeof, typeof_unqual since C23 order relations: <, <=, >, >= reference and dereference: &, *, [ ] sequencing: , subexpression grouping: ( ) type conversion: (typename) C uses the operator = (used in mathematics to express equality) to indicate assignment, following the precedent of Fortran and PL/I, but unlike ALGOL and its derivatives. C uses the operator == to test for equality. The similarity between the operators for assignment and equality may result in the accidental use of one in place of the other, and in many cases the mistake does not produce an error message (although some compilers produce warnings). For example, the conditional expression if (a == b + 1) might mistakenly be written as if (a = b + 1), which will be evaluated as true unless the value of a is 0 after the assignment. The C operator precedence is not always intuitive. For example, the operator == binds more tightly than (is executed prior to) the operators & (bitwise AND) and | (bitwise OR) in expressions such as x & 1 == 0, which must be written as (x & 1) == 0 if that is the coder's intent. Main article: C data types This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed. (October 2012) (Learn how and when to remove this message) The type system in C is static and weakly typed, which makes it similar to the type system of ALGOL descendants such as Pascal. There are built-in types for integers of various sizes, both signed and unsigned, floating-point numbers, and enumerated types (enum). Integer type char is often used for single-byte characters. C99 added a Boolean data type. There are also derived types including arrays, pointers, records (struct), and unions (union). C is often used in low-level systems programming where escapes from the type system may be necessary. The compiler attempts to ensure type correctness of most expressions, but the programmer can override the checks in various ways, either by using a type cast to explicitly convert a value from one type to another, or by using pointers or unions to reinterpret the underlying bits of a data object in some other way. Some find C's declaration syntax unintuitive, particularly for function pointers. (Ritchie's idea was to declare identifiers in contexts resembling their use: declaration reflects use.) C's usual arithmetic conversions allow for efficient code to be generated, but can sometimes produce unexpected results. For example, a comparison of signed and unsigned integers of equal width requires a conversion of the signed value to unsigned. This can generate unexpected results if the signed value is negative. C supports the use of pointers, a type of reference that records the address or location of an object or function in memory. Pointers can be dereferenced to access data stored at the address pointed to, or to invoke a pointed-to function. Pointers can be manipulated using assignment or pointer arithmetic. The run-time representation of a pointer value is typically a raw memory address (perhaps augmented by an offset-within-word field), but since a pointer's type includes the type of the thing pointed to, expressions including pointers can be type-checked at compile time. Pointer arithmetic is automatically scaled by the size of the pointed-to data type. Pointers are used for many purposes in C. Text strings are commonly manipulated using pointers into arrays of characters. Dynamic memory allocation is performed using pointers; the result of a malloc is usually cast to the data type of the data to be stored. Many data types, such as trees, are commonly implemented as dynamically allocated struct objects linked together using pointers. Pointers to other pointers are often used in multi-dimensional arrays and arrays of struct objects. Pointers to functions (function pointers) are useful for passing functions as arguments to higher-order functions (such as qsort or bsearch), in dispatch tables, or as callbacks to event handlers. A null pointer value explicitly points to no valid location. Dereferencing a null pointer value is undefined, often resulting in a segmentation fault. Null pointer values are useful for indicating special cases such as no next pointer in the final node of a linked list, or as an error indication from functions returning pointers. In appropriate contexts in source code, such as for assigning to a pointer variable, a null pointer constant can be written as 0, with or without explicit casting to a pointer type, as the NULL macro defined by several standard headers or, since C23 with the constant nullptr. In conditional contexts, null pointer values evaluate to false, while all other pointer values evaluate to true. Void pointers (void *) point to objects of unspecified type, and can therefore be used as generic data pointers. Since the size and type of the pointed-to object is not known, void pointers cannot be dereferenced, nor is pointer arithmetic on them allowed, although they can easily be (and in many contexts implicitly are) converted to and from any other object pointer type. Careless use of pointers is potentially dangerous. Because they are typically unchecked, a pointer variable can be made to point to any arbitrary location, which can cause undesirable effects. Although properly used pointers point to safe places, they can be made to point to unsafe places by using invalid pointer arithmetic; the objects they point to may continue to be used after deallocation (dangling pointers); they may be used without having been initialized (wild pointers); or they may be directly assigned an unsafe value using a cast, union, or through another corrupt pointer. In general, C is permissive in allowing manipulation of and conversion between pointer types, although compilers typically provide options for various levels of checking. Some other programming languages address these problems by using more restrictive reference types. See also: C string handling Array types in C are traditionally of a fixed, static size specified at compile time. The more recent C99 standard also allows a form of variable-length arrays. However, it is also possible to allocate a block of memory (of arbitrary size) at run-time, using the standard library's malloc function, and treat it as an array. Since arrays are always accessed (in effect) via pointers, array accesses are typically not checked against the underlying array size, although some compilers may provide bounds checking as an option. Array bounds violations are therefore possible and can lead to various repercussions, including illegal memory accesses, corruption of data, buffer overruns, and run-time exceptions. C does not have a special provision for declaring multi-dimensional arrays, but rather relies on recursion within the type system to declare arrays of arrays, which effectively accomplishes the same thing. The index values of the resulting multi-dimensional array can be thought of as increasing in row-major order. Multi-dimensional arrays are commonly used in numerical algorithms (mainly from applied linear algebra) to store matrices. The structure of the C array is well suited to this particular task. However, in early versions of C the bounds of the array must be known fixed values or else explicitly passed to any subroutine that requires them, and dynamically sized arrays of arrays cannot be accessed using double indexing. (A workaround for this was to allocate the array with an additional row vector of pointers to the columns.) C99 introduced variable-length arrays which address this issue. The following example using modern C (C99 or later) shows allocation of a two-dimensional array on the heap and the use of multi-dimensional array indexing for accesses (which can use bounds-checking on many C compilers): int func(int N, int M) { float (*p)[N] [M] = malloc(sizeof *p); if (p == 0) return -1; for (int i = 0; i < N; i++) for (int j = 0; j < M; j++) (*p)[i] [j] = i + j; print_array(N, M, p); free(p); return 1; } And here is a similar implementation using C99's Auto VLA feature:[d] int func(int N, int M) { // Caution: checks should be made to ensure N*M*sizeof(float) does NOT exceed limitations for auto VLAs and is within available size of stack. float p[N] [M]; // auto VLA is held on the stack, and sized when the function is invoked for (int i = 0; i < N; i++) for (int j = 0; j < M; j++) p[i] [j] = i + j; print_array(N, M, p); // no need to free(p) since it will disappear when the function exits, along with the rest of the stack frame return 1; } The subscript notation x[i] (where x designates a pointer) is syntactic sugar for *(x+i). Taking advantage of the compiler's knowledge of the pointer type, the address that x + i points to is not the base address (pointed to by x) incremented by i bytes, but rather is defined to be the base address incremented by i multiplied by the size of an element that x points to. Thus, x[i] designates the i+1th element of the array. Furthermore, in most expression contexts (a notable exception is as operand of sizeof), an expression of array type is automatically converted to a pointer to the array's first element. This implies that an array is never copied as a whole when named as an argument to a function, but rather only the address of its first element is passed. Therefore, although function calls in C use pass-by-value semantics, arrays are in effect passed by reference. The total size of an array x can be determined by applying sizeof to an expression of array type. The size of an element can be determined by applying the operator sizeof to any dereferenced element of an array A, as in n = sizeof A. Thus, the number of elements in a declared array A can be determined as sizeof A / sizeof A. Note, that if only a pointer to the first element is available as it is often the case in C code because of the automatic conversion described above, the information about the full type of the array and its length are lost. One of the most important functions of a programming language is to provide facilities for managing memory and the objects that are stored in memory. C provides three principal ways to allocate memory for objects: Static memory allocation: space for the object is provided in the binary at compile-time; these objects have an extent (or lifetime) as long as the binary which contains them is loaded into memory. Automatic memory allocation: temporary objects can be stored on the stack, and this space is automatically freed and reusable after the block in which they are declared is exited. Dynamic memory allocation: blocks of memory of arbitrary size can be requested at run-time using library functions such as malloc from a region of memory called the heap; these blocks persist until subsequently freed for reuse by calling the library function realloc or free. These three approaches are appropriate in different situations and have various trade-offs. For example, static memory allocation has little allocation overhead, automatic allocation may involve slightly more overhead, and dynamic memory allocation can potentially have a great deal of overhead for both allocation and deallocation. The persistent nature of static objects is useful for maintaining state information across function calls, automatic allocation is easy to use but stack space is typically much more limited and transient than either static memory or heap space, and dynamic memory allocation allows convenient allocation of objects whose size is known only at run-time. Most C programs make extensive use of all three. Where possible, automatic or static allocation is usually simplest because the storage is managed by the compiler, freeing the programmer of the potentially error-prone chore of manually allocating and releasing storage. However, many data structures can change in size at runtime, and since static allocations (and automatic allocations before C99) must have a fixed size at compile-time, there are many situations in which dynamic allocation is necessary. Prior to the C99 standard, variable-sized arrays were a common example of this. (See the article on C dynamic memory allocation for an example of dynamically allocated arrays.) Unlike automatic allocation, which can fail at run time with uncontrolled consequences, the dynamic allocation functions return an indication (in the form of a null pointer value) when the required storage cannot be allocated. (Static allocation that is too large is usually detected by the linker or loader, before the program can even begin execution.) Unless otherwise specified, static objects contain zero or null pointer values upon program startup. Automatically and dynamically allocated objects are initialized only if an initial value is explicitly specified; otherwise they initially have indeterminate values (typically, whatever bit pattern happens to be present in the storage, which might not even represent a valid value for that type). If the program attempts to access an uninitialized value, the results are undefined. Many modern compilers try to detect and warn about this problem, but both false positives and false negatives can occur. Heap memory allocation has to be synchronized with its actual usage in any program to be reused as much as possible. For example, if the only pointer to a heap memory allocation goes out of scope or has its value overwritten before it is deallocated explicitly, then that memory cannot be recovered for later reuse and is essentially lost to the program, a phenomenon known as a memory leak. Conversely, it is possible for memory to be freed, but is referenced subsequently, leading to unpredictable results. Typically, the failure symptoms appear in a portion of the program unrelated to the code that causes the error, making it difficult to diagnose the failure. Such issues are ameliorated in languages with automatic garbage collection. The C programming language uses libraries as its primary method of extension. In C, a library is a set of functions contained within a single archive file. Each library typically has a header file, which contains the prototypes of the functions contained within the library that may be used by a program, and declarations of special data types and macro symbols used with these functions. For a program to use a library, it must include the library's header file, and the library must be linked with the program, which in many cases requires compiler flags (e.g., -lm, shorthand for link the math library). The most common C library is the C standard library, which is specified by the ISO and ANSI C standards and comes with every C implementation (implementations which target limited environments such as embedded systems may provide only a subset of the standard library). This library supports stream input and output, memory allocation, mathematics, character strings, and time values. Several separate standard headers (for example, stdio.h) specify the interfaces for these and other standard library facilities. Another common set of C library functions are those used by applications specifically targeted for Unix and Unix-like systems, especially functions which provide an interface to the kernel. These functions are detailed in various standards such as POSIX and the Single UNIX Specification. Since many programs have been written in C, there are a wide variety of other libraries available. Libraries are often written in C because C compilers generate efficient object code; programmers then create interfaces to the library so that the routines can be used from higher-level languages like Java, Perl, and Python. File input and output (I/O) is not part of the C language itself but instead is handled by libraries (such as the C standard library) and their associated header files (e.g. stdio.h). File handling is generally implemented through high-level I/O which works through streams. A stream is from this perspective a data flow that is independent of devices, while a file is a concrete device. The high-level I/O is done through the association of a stream to a file. In the C standard library, a buffer (a memory area or queue) is temporarily used to store data before it is sent to the final destination. This reduces the time spent waiting for slower devices, for example a hard drive or solid-state drive. Low-level I/O functions are not part of the standard C library[clarification needed] but are generally part of bare metal programming (programming that is independent of any operating system such as most embedded programming). With few exceptions, implementations include low-level I/O. This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed. (July 2014) (Learn how and when to remove this message) A number of tools have been developed to help C programmers find and fix statements with undefined behavior or possibly erroneous expressions, with greater rigor than that provided by the compiler. Automated source code checking and auditing tools exist, such as Lint. A common practice is to use Lint to detect questionable code when a program is first written. Once a program passes Lint, it is then compiled using the C compiler. Also, many compilers can optionally warn about syntactically valid constructs that are likely to actually be errors. MISRA C is a proprietary set of guidelines to avoid such questionable code, developed for embedded systems. There are also compilers, libraries, and operating system level mechanisms for performing actions that are not a standard part of C, such as bounds checking for arrays, detection of buffer overflow, serialization, dynamic memory tracking, and automatic garbage collection. Memory management checking tools like Purify or Valgrind and linking with libraries containing special versions of the memory allocation functions can help uncover runtime errors in memory usage. Some software written in C C is widely used for systems programming in implementing operating systems and embedded system applications. This is for several reasons: The C language permits platform hardware and memory to be accessed with pointers and type punning, so system-specific features (e.g. Control/Status Registers, I/O registers) can be configured and used with code written in C – it allows fullest control of the platform it is running on. The code generated after compilation does not demand many system features, and can be invoked from some boot code in a straightforward manner – it is simple to execute. The C language statements and expressions typically map well on to sequences of instructions for the target processor, and consequently there is a low run-time demand on system resources – it is fast to execute. With its rich set of operators, the C language can use many of the features of target CPUs. Where a particular CPU has more esoteric instructions, a language variant can be constructed with perhaps intrinsic functions to exploit those instructions – it can use practically all the target CPU's features. The language makes it easy to overlay structures onto blocks of binary data, allowing the data to be comprehended, navigated and modified – it can write data structures, even file systems. The language supports a rich set of operators, including bit manipulation, for integer arithmetic and logic, and perhaps different sizes of floating point numbers – it can process appropriately-structured data effectively. C is a fairly small language, with only a handful of statements, and without too many features that generate extensive target code – it is comprehensible. C has direct control over memory allocation and deallocation, which gives reasonable efficiency and predictable timing to memory-handling operations, without any concerns for sporadic stop-the-world garbage collection events – it has predictable performance. C permits the use and implementation of different memory allocation schemes, including a typical malloc and free; a more sophisticated mechanism with arenas; or a version for an OS kernel that may suit DMA, use within interrupt handlers, or integrated with the virtual memory system. Depending on the linker and environment, C code can also call libraries written in assembly language, and may be called from assembly language – it interoperates well with other lower-level code. C and its calling conventions and linker structures are commonly used in conjunction with other high-level languages, with calls both to C and from C supported – it interoperates well with other high-level code. C has a very mature and broad ecosystem, including libraries, frameworks, open source compilers, debuggers and utilities, and is the de facto standard. It is likely the drivers already exist in C, or that there is a similar CPU architecture as a back-end of a C compiler, so there is reduced incentive to choose another language. C enables programmers to create efficient implementations of algorithms and data structures, because the layer of abstraction from hardware is thin, and its overhead is low, an important criterion for computationally intensive programs. For example, the GNU Multiple Precision Arithmetic Library, the GNU Scientific Library, Mathematica, and MATLAB are completely or partially written in C. Many languages support calling library functions in C, for example, the Python-based framework NumPy uses C for the high-performance and hardware-interacting aspects. Computer games are often built from a combination of languages. C has featured significantly, especially for those games attempting to obtain best performance from computer platforms. Examples include Doom from 1993. C is sometimes used as an intermediate language by implementations of other languages. This approach may be used for portability or convenience; by using C as an intermediate language, additional machine-specific code generators are not necessary. C has some features, such as line-number preprocessor directives and optional superfluous commas at the end of initializer lists, that support compilation of generated code. However, some of C's shortcomings have prompted the development of other C-based languages specifically designed for use as intermediate languages, such as C--. Also, contemporary major compilers GCC and LLVM both feature an intermediate representation that is not C, and those compilers support front ends for many languages including C. A consequence of C's wide availability and efficiency is that compilers, libraries and interpreters of other programming languages are often implemented in C. For example, the reference implementations of Python, Perl, Ruby, and PHP are written in C. Historically, C was sometimes used for web development using the Common Gateway Interface (CGI) as a gateway for information between the web application, the server, and the browser. C may have been chosen over interpreted languages because of its speed, stability, and near-universal availability. It is no longer common practice for web development to be done in C, and many other web development languages are popular. Applications where C-based web development continues include the HTTP configuration pages on routers, IoT devices and similar, although even here some projects have parts in higher-level languages e.g. the use of Lua within OpenWRT. The two most popular web servers, Apache HTTP Server and Nginx, are both written in C. These web servers interact with the operating system, listen on TCP ports for HTTP requests, and then serve up static web content, or cause the execution of other languages handling to 'render' content such as PHP, which is itself primarily written in C. C's close-to-the-metal approach allows for the construction of these high-performance software systems. C has also been widely used to implement end-user applications. However, such applications can also be written in newer, higher-level languages. the power of assembly language and the convenience of ... assembly language— Dennis Ritchie While C has been popular, influential and hugely successful, it has drawbacks, including: The standard dynamic memory handling with malloc and free is error prone. Improper use can lead to memory leaks and dangling pointers. The use of pointers and the direct manipulation of memory means corruption of memory is possible, perhaps due to programmer error, or insufficient checking of bad data. There is some type checking, but it does not apply to areas like variadic functions, and the type checking can be trivially or inadvertently circumvented. It is weakly typed. Since the code generated by the compiler contains few checks itself, there is a burden on the programmer to consider all possible outcomes, to protect against buffer overruns, array bounds checking, stack overflows, memory exhaustion, and consider race conditions, thread isolation, etc. The use of pointers and the run-time manipulation of these means there may be two ways to access the same data (aliasing), which is not determinable at compile time. This means that some optimisations that may be available to other languages are not possible in C. FORTRAN is considered faster. Some of the standard library functions, e.g. scanf or strncat, can lead to buffer overruns. There is limited standardisation in support for low-level variants in generated code, for example: different function calling conventions and ABI; different structure packing conventions; different byte ordering within larger integers (including endianness). In many language implementations, some of these options may be handled with the preprocessor directive #pragma, and some with additional keywords e.g. use __cdecl calling convention. The directive and options are not consistently supported. String handling using the standard library is code-intensive, with explicit memory management required. The language does not directly support object orientation, introspection, run-time expression evaluation, generics, etc. There are few guards against inappropriate use of language features, which may lead to unmaintainable code. In particular, the C preprocessor can hide troubling effects such as double evaluation and worse. This facility for tricky code has been celebrated with competitions such as the International Obfuscated C Code Contest and the Underhanded C Contest. C lacks standard support for exception handling and only offers return codes for error checking. The setjmp and longjmp standard library functions have been used to implement a try-catch mechanism via macros. For some purposes, restricted styles of C have been adopted, e.g. MISRA C or CERT C, in an attempt to reduce the opportunity for bugs. Databases such as CWE attempt to count the ways C etc. has vulnerabilities, along with recommendations for mitigation. There are tools that can mitigate against some of the drawbacks. Contemporary C compilers include checks which may generate warnings to help identify many potential bugs. The TIOBE index graph, showing a comparison of the popularity of various programming languages Main article: List of C-family programming languages C has both directly and indirectly influenced many later languages such as C++ and Java. The most pervasive influence has been syntactical; all of the languages mentioned combine the statement and (more or less recognizably) expression syntax of C with type systems, data models or large-scale program structures that differ from those of C, sometimes radically. Several C or near-C interpreters exist, including Ch and CINT, which can also be used for scripting. When object-oriented programming languages became popular, C++ and Objective-C were two different extensions of C that provided object-oriented capabilities. Both languages were originally implemented as source-to-source compilers; source code was translated into C, and then compiled with a C compiler. The C++ programming language (originally named C with Classes) was devised by Bjarne Stroustrup as an approach to providing object-oriented functionality with a C-like syntax. C++ adds greater typing strength, scoping, and other tools useful in object-oriented programming, and permits generic programming via templates. Nearly a superset of C, C++ now[when?] supports most of C, with a few exceptions. Objective-C was originally a very thin layer on top of C, and remains a strict superset of C that permits object-oriented programming using a hybrid dynamic/static typing paradigm. Objective-C derives its syntax from both C and Smalltalk: syntax that involves preprocessing, expressions, function declarations, and function calls is inherited from C, while the syntax for object-oriented features was originally taken from Smalltalk. In addition to C++ and Objective-C, Ch, Cilk, and Unified Parallel C are nearly supersets of C. Computer programming portalFree and open-source software portal Compatibility of C and C++ Comparison of Pascal and C Comparison of programming languages International Obfuscated C Code Contest List of C-family programming languages List of C compilers ^ The original example code will compile on most modern compilers that are not in strict standard compliance mode, but it does not fully conform to the requirements of either C89 or C99. In fact, C99 requires that a diagnostic message be produced. ^ The main function actually has two arguments, int argc and char *argv[], respectively, which can be used to handle command-line arguments. The ISO C standard (section 5.1.2.2.1) requires both forms of main to be supported, which is special treatment not afforded to any other function. ^ Prior to C99, an explicit return 0; statement was required at the end of the main function. ^ Code of print_array (not shown) slightly differs,[why?] too. ^ a b Prinz, Peter; Crawford, Tony (December 16, 2005). C in a Nutshell. O'Reilly Media, Inc. p. 3. ISBN 9780596550714. ^ Ritchie (1993): Thompson had made a brief attempt to produce a system coded in an early version of C—before structures—in 1972, but gave up the effort. ^ N3221 – Editor's Report, Post January 2024 Strasbourg France Meeting. ISO/IEC JTC1/SC22/WG14. Open Standards. February 21, 2024. Retrieved May 24, 2024. ^ Ritchie (1993): The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of. ^ a b Verilog HDL (and C) (PDF). The Research School of Computer Science at the Australian National University. June 3, 2010. Archived from the original (PDF) on November 6, 2013. Retrieved August 19, 2013. 1980s: Verilog first introduced; Verilog inspired by the C programming language ^ The name is based on, and pronounced like the letter C in the English alphabet. the c programming language sound. English Chinese Dictionary. Archived from the original on November 17, 2022. Retrieved November 17, 2022. ^ Munoz, Daniel. After All These Years, the World is Still Powered by C Programming | Toptal. Toptal Engineering Blog. Retrieved June 15, 2024. ^ C Language Drops to Lowest Popularity Rating. Developer.com. August 9, 2016. Archived from the original on August 22, 2022. Retrieved August 1, 2022. ^ a b c d e f Ritchie (1993) ^ Programming Language Popularity. 2009. Archived from the original on January 16, 2009. Retrieved January 16, 2009. ^ TIOBE Programming Community Index. 2009. Archived from the original on May 4, 2009. Retrieved May 6, 2009. ^ Ward, Terry A. (August 1983). Annotated C / A Bibliography of the C Language. Byte. p. 268. Retrieved January 31, 2015. ^ TIOBE Index for September 2024. Archived from the original on September 18, 2024. Retrieved September 20, 2024. ^ Ritchie, Dennis. BCPL to B to C. lysator.liu.se. Archived from the original on December 12, 2019. Retrieved September 10, 2019. ^ a b c d e Jensen, Richard (December 9, 2020). A damn stupid thing to do—the origins of C. Ars Technica. Archived from the original on March 28, 2022. Retrieved March 28, 2022. ^ a b Johnson, S. C.; Ritchie, D. M. (1978). Portability of C Programs and the UNIX System. Bell System Tech. J. 57 (6): 2021–2048. CiteSeerX 10.1.1.138.35. doi:10.1002/j.1538-7305.1978.tb02141.x. ISSN 0005-8580. S2CID 17510065. (Note: The PDF is an OCR scan of the original, and contains a rendering of IBM 370 as IBM 310.) ^ McIlroy, M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971–1986 (PDF) (Technical report). CSTR. Bell Labs. p. 10. 139. Archived (PDF) from the original on November 11, 2017. Retrieved February 1, 2015. ^ Kernighan, Brian W.; Ritchie, Dennis M. (February 1978). The C Programming Language (1st ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110163-0. ^ C manual pages. FreeBSD Miscellaneous Information Manual (FreeBSD 13.0 ed.). May 30, 2011. Archived from the original on January 21, 2021. Retrieved January 15, 2021. Archived January 21, 2021, at the Wayback Machine ^ Kernighan, Brian W.; Ritchie, Dennis M. (March 1988). The C Programming Language (2nd ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110362-7. ^ Stroustrup, Bjarne (2002). Sibling rivalry: C and C++ (PDF) (Report). AT&T Labs. Archived (PDF) from the original on August 24, 2014. Retrieved April 14, 2014. ^ Rationale for American National Standard for Information Systems – Programming Language – C. Archived from the original on July 17, 2024. Retrieved July 17, 2024. ^ C Integrity. International Organization for Standardization. March 30, 1995. Archived from the original on July 25, 2018. Retrieved July 24, 2018. ^ JTC1/SC22/WG14 – C. Home page. ISO/IEC. Archived from the original on February 12, 2018. Retrieved June 2, 2011. ^ Andrew Binstock (October 12, 2011). Interview with Herb Sutter. Dr. Dobbs. Archived from the original on August 2, 2013. Retrieved September 7, 2013. ^ WG14-N3132 : Revised C23 Schedule (PDF). open-std.org. June 4, 2023. Archived (PDF) from the original on June 9, 2023. ^ WG14-N3220 : Working Draft, C2y (PDF). open-std.org. February 21, 2024. Archived (PDF) from the original on February 26, 2024. ^ TR 18037: Embedded C (PDF). open-std.org. April 4, 2006. ISO/IEC JTC1 SC22 WG14 N1169. Archived (PDF) from the original on February 25, 2021. Retrieved July 26, 2011. ^ Harbison, Samuel P.; Steele, Guy L. (2002). C: A Reference Manual (5th ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-089592-9. Contains a BNF grammar for C. ^ Kernighan & Ritchie (1988), p. 192. ^ Kernighan & Ritchie (1978), p. 3. ^ ISO/IEC 9899:201x (ISO C11) Committee Draft (PDF). open-std.org. December 2, 2010. Archived (PDF) from the original on December 22, 2017. Retrieved September 16, 2011. ^ Kernighan & Ritchie (1988), pp. 192, 259. ^ 10 Common Programming Mistakes in C++. Cs.ucr.edu. Archived from the original on October 21, 2008. Retrieved June 26, 2009. ^ Schultz, Thomas (2004). C and the 8051 (3rd ed.). Otsego, MI: PageFree Publishing Inc. p. 20. ISBN 978-1-58961-237-2. Retrieved February 10, 2012. ^ Kernighan & Ritchie (1978), p. 6. ^ a b c d e f g Klemens, Ben (2013). 21st Century C. O'Reilly Media. ISBN 978-1-4493-2714-9. ^ Feuer, Alan R.; Gehani, Narain H. (March 1982). Comparison of the Programming Languages C and Pascal. ACM Computing Surveys. 14 (1): 73–92. doi:10.1145/356869.356872. S2CID 3136859. ^ Kernighan & Ritchie (1988), p. 122. ^ For example, gcc provides _FORTIFY_SOURCE. Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE). fedoraproject.org. Archived from the original on January 7, 2007. Retrieved August 5, 2012. ^ เอี่ยมสิริวงศ์, โอภาศ (2016). Programming with C. Bangkok, Thailand: SE-EDUCATION PUBLIC COMPANY LIMITED. pp. 225–230. ISBN 978-616-08-2740-4. ^ Raymond, Eric S. (October 11, 1996). The New Hacker's Dictionary (3rd ed.). MIT Press. p. 432. ISBN 978-0-262-68092-9. Retrieved August 5, 2012. ^ Man Page for lint (freebsd Section 1). unix.com. May 24, 2001. Retrieved July 15, 2014. ^ CS107 Valgrind Memcheck. web.stanford.edu. Retrieved June 23, 2023. ^ Hastings, Reed; Joyce, Bob. Purify: Fast Detection of Memory Leaks and Access Errors (PDF). Pure Software Inc.: 9. ^ Dale, Nell B.; Weems, Chip (2014). Programming and problem solving with C++ (6th ed.). Burlington, Massachusetts: Jones & Bartlett Learning. ISBN 978-1449694289. OCLC 894992484. ^ Development of Doom. DoomWiki.org. March 2, 2025. Retrieved March 2, 2025. ^ C – the mother of all languages. ICT Academy at IITK. November 13, 2018. Archived from the original on May 31, 2021. Retrieved October 11, 2022. ^ 1. Extending Python with C or C++. Python 3.10.7 documentation. Archived from the original on November 5, 2012. Retrieved October 11, 2022. ^ Conrad, Michael (January 22, 2018). An overview of the Perl 5 engine. Opensource.com. Archived from the original on May 26, 2022. Retrieved October 11, 2022. ^ To Ruby From C and C++. Ruby Programming Language. Archived from the original on August 12, 2013. Retrieved October 11, 2022. ^ Para, Michael (August 3, 2022). What is PHP? How to Write Your First PHP Program. freeCodeCamp. Archived from the original on August 4, 2022. Retrieved October 11, 2022. ^ Dr. Dobb's Sourcebook. U.S.: Miller Freeman, Inc. November–December 1995. ^ Using C for CGI Programming. linuxjournal.com. March 1, 2005. Archived from the original on February 13, 2010. Retrieved January 4, 2010. ^ Perkins, Luc (September 17, 2013). Web development in C: crazy? Or crazy like a fox?. Medium. Archived from the original on October 4, 2014. Retrieved April 8, 2022. ^ Munoz, Daniel. After All These Years, the World is Still Powered by C Programming. Toptal Engineering Blog. Retrieved November 17, 2023. ^ Metz, Cade. Dennis Ritchie: The Shoulders Steve Jobs Stood On. Wired. Archived from the original on April 12, 2022. Retrieved April 19, 2022. ^ Internet Security Research Group. What is memory safety and why does it matter?. Prossimo. Retrieved March 3, 2025. ^ corob-msft (March 31, 2022). Pragma directives and the __pragma and _Pragma keywords. Microsoft Learn. Archived from the original on September 24, 2022. Retrieved September 24, 2022. ^ Pragmas (The C Preprocessor). GCC, the GNU Compiler Collection. Archived from the original on June 17, 2002. Retrieved September 24, 2022. ^ Pragmas. Intel C++ Compiler Classic Developer Guide and Reference. Intel. Archived from the original on April 10, 2022. Retrieved April 10, 2022. ^ In praise of the C preprocessor. apenwarr. August 13, 2007. Retrieved July 9, 2023. ^ Roberts, Eric S. (March 21, 1989). Implementing Exceptions in C (PDF). DEC Systems Research Center. SRC-RR-40. Archived (PDF) from the original on January 15, 2017. Retrieved January 4, 2022. ^ McMillan, Robert (August 1, 2013). Is Java Losing Its Mojo?. Wired. Archived from the original on February 15, 2017. Retrieved March 5, 2017. ^ O'Regan, Gerard (September 24, 2015). Pillars of computing : a compendium of select, pivotal technology firms. Springer. ISBN 978-3319214641. OCLC 922324121. ^ Rauchwerger, Lawrence (2004). Languages and compilers for parallel computing : 16th international workshop, LCPC 2003, College Station, TX, USA, October 2–4, 2003 : revised papers. Springer. ISBN 978-3540246442. OCLC 57965544. ^ Stroustrup, Bjarne (1993). A History of C++: 1979–1991 (PDF). Archived (PDF) from the original on February 2, 2019. Retrieved June 9, 2011. Ritchie, Dennis M. (March 1993). The Development of the C Language. ACM SIGPLAN Notices. 28 (3). ACM: 201–208. doi:10.1145/155360.155580. By courtesy of the author, also at Ritchie, Dennis M. Chistory. www.bell-labs.com. Retrieved March 29, 2022. Ritchie, Dennis M. (1993). The Development of the C Language. The Second ACM SIGPLAN Conference on History of Programming Languages (HOPL-II). ACM. pp. 201–208. doi:10.1145/154766.155580. ISBN 0-89791-570-4. Archived from the original on April 11, 2019. Retrieved November 4, 2014. Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). Prentice Hall. ISBN 0-13-110362-8. Plauger, P.J. (1992). The Standard C Library (1 ed.). Prentice Hall. ISBN 978-0131315099. (source) Banahan, M.; Brady, D.; Doran, M. (1991). The C Book: Featuring the ANSI C Standard (2 ed.). Addison-Wesley. ISBN 978-0201544336. (free) Feuer, Alan R. (1985). The C Puzzle Book (1 ed.). Prentice Hall. ISBN 0131099345. Harbison, Samuel; Steele, Guy Jr. (2002). C: A Reference Manual (5 ed.). Pearson. ISBN 978-0130895929. (archive) King, K.N. (2008). C Programming: A Modern Approach (2 ed.). W. W. Norton. ISBN 978-0393979503. (archive) Griffiths, David; Griffiths, Dawn (2012). Head First C (1 ed.). O'Reilly. ISBN 978-1449399917. Perry, Greg; Miller, Dean (2013). C Programming: Absolute Beginner's Guide (3 ed.). Que. ISBN 978-0789751980. Deitel, Paul; Deitel, Harvey (2015). C: How to Program (8 ed.). Pearson. ISBN 978-0133976892. Gustedt, Jens (2019). Modern C (2 ed.). Manning. ISBN 978-1617295812. (free) C (programming language) at Wikipedia's sister projects Media from CommonsNews from WikinewsQuotations from WikiquoteTextbooks from WikibooksResources from Wikiversity ISO C Working Group official website ISO/IEC 9899, publicly available official C documents, including the C99 Rationale C99 with Technical corrigenda TC1, TC2, and TC3 included (PDF). Archived (PDF) from the original on October 25, 2007. (3.61 MB) comp.lang.c Frequently Asked Questions A History of C, by Dennis Ritchie C Library Reference and Examples vteC programming language ANSI C C99 C11 C17 C23 Embedded C MISRA C Features Functions Header files Operators String Syntax Preprocessor Data types Standard library Char File I/O Math Dynamic memory String Time Variadic POSIX Implementations Bionic libhybris dietlibc glibc EGLIBC klibc Windows CRT musl Newlib uClibc Compilers ACK Borland Turbo C Clang GCC ICC LCC Norcroft C PCC SDCC TCC Visual C++ (MSVC) Watcom C/C++ IDEs Anjuta CLion Code::Blocks CodeLite Eclipse Geany GNOME Builder KDevelop NetBeans Visual Studio Comparison withother languages Compatibility of C and C++ Comparison with Pascal Descendantlanguages Alef C++ C# D Objective-C Go Vala Zig Designer Dennis Ritchie Category vteIntegrated development environmentsC, C++Open source Arduino IDE Code::Blocks CodeLite Dev-C++ Eclipse Emacs Geany GNOME Builder Kakoune KDevelop NetBeans QDevelop Qt Creator TheIDE Vi–Vim OpenWatcom Freeware DevEco Studio Oracle Developer Studio Visual Studio Code Visual Studio Community Xcode Retail C++Builder Eclipse-based CodeWarrior MyEclipse Visual Studio By JetBrains IntelliJ IDEA CLion LabWindows/CVI IBM Rational Software Architect Understand SlickEdit Discontinued Anjuta By JetBrains AppCode VisualAge Visual C++ Express MonoDevelop SharpDevelop Borland Turbo C, C++ QuickC JavaOpen source Anjuta BlueJ DrJava Eclipse Geany Greenfoot IntelliJ IDEA Community Edition Android Studio NetBeans DevEco Studio Freeware jGRASP JDeveloper Retail JCreator MyEclipse JetBrains IntelliJ IDEA SlickEdit Understand Discontinued Metrowerks CodeWarrior Pro for Java JBuilder Sun Java Studio Creator (superseded by NetBeans) VisualAge (superseded by Eclipse) Visual Café (aka Espresso, superseded by JBuilder) Visual J++ Xelfi (became NetBeans) JavaScriptOpen source Vim Visual Studio Code Atom Chromium DevEco Studio CLI (.NET)Open source Visual Studio Code PascalABC.NET Freeware Visual Studio Community Retail Visual Studio Rider Understand Discontinued Xamarin Studio MonoDevelop SharpDevelop Visual Basic Express Visual Web Developer Express Visual J# Express Visual Studio Express for Windows Phone Visual C++ Express Visual C# Express Express for Desktop Express for Web Express for Windows Flash Adobe Flash Builder FlashDevelop Powerflasher FDT PHPOpen source Aptana NetBeans Komodo Edit Komodo IDE KDevelop Proprietary Codelobster PhpStorm PHPEdit SlickEdit Zend Studio R RStudio R Tools for Visual Studio PythonOpen source Anjuta IDLE Eric Light Table Ninja-IDE PyDev PyScripter PIDA Spyder Komodo Edit Komodo IDE KDevelop Vim Visual Studio Code Thonny DevEco Studio Proprietary PyCharm PythonAnywhere Visual Studio Code SlickEdit Wing IDE Pascal,Object PascalOpen source Free Pascal IDE Lazarus Dev-Pascal GNAVI PascalABC.NET Freeware Delphi Community Retail Delphi Discontinued Turbo Pascal Virtual Pascal Borland Kylix QuickPascal BASICOpen source Basic-256 Microsoft Small Basic SdlBasic Gambas Basic4GL VisualFBEditor / WinFBE InForm Freeware FutureBASIC RapidQ Visual Studio Community Retail Visual Studio NS Basic PureBasic GLBasic Liberty BASIC Xojo Discontinued CA-Realizer MonoDevelop QuickBASIC QBasic SharpDevelop Visual Basic Visual Basic Express GoOpen source Vim Visual Studio Code (VSCode) Eclipse Freeware Cloud9 IDE Retail GoLand Haxe IntelliJ IDEA VS Code Sublime Text Powerflasher FDT POP-11 Poplog Online AWS Cloud9 IDE Eclipse Che SourceLair Comparison Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef",
    "paradigm": "Multi-paradigm : imperative ( procedural ), structured",
    "first_appeared": "1972 ; 53 years ago ( 1972 )",
    "stable_release": "C23",
    "typing_discipline": "Static , weak , manifest , nominal",
    "influenced_by": "B ( BCPL , CPL ), ALGOL 68 , PL/I , FORTRAN",
    "influenced": "Numerous : AMPL , AWK , csh , C++ , C-- , C# , Objective-C , D , Go , Java , JavaScript , JS++ , Julia , Limbo , LPC , Perl , PHP , Pike , Processing , Python , Rust , Seed7 , V (Vlang) , Vala , Verilog (HDL), Nim , Zig",
    "stable_release_date": "2024-10-31T00:00:00Z"
  },
  {
    "title": "Ruby (programming language)",
    "url": "https://en.wikipedia.org/wiki/Ruby_(programming_language)",
    "early_concept": "According to Matsumoto, Ruby was conceived in 1993. In a 1999 post to the Ruby-Talk mailing list, he shared some of his early ideas about the language: I was talking with my colleague about the possibility of an object-oriented scripting language. I knew Perl (Perl4, not Perl5), but I didn't like it really, because it had the smell of a toy language (it still has). The object-oriented language seemed very promising. I knew Python then. But I didn't like it, because I didn't think it was a true object-oriented language – OO features appeared to be add-on to the language. As a language maniac and OO fan for 15 years, I really wanted a genuine object-oriented, easy-to-use scripting language. I looked for but couldn't find one. So I decided to make it. Matsumoto described Ruby's design as resembling a simple Lisp language at its core, with an object system like that of Smalltalk, blocks inspired by higher-order functions, and practical utility like that of Perl. The name Ruby originated during an online chat session between Matsumoto and Keiju Ishitsuka on 24 February 1993, before any code had been written. Two names were initially proposed: Coral and Ruby. Matsumoto chose the latter in a subsequent email to Ishitsuka. He also noted that one factor influencing the choice of the name was that a colleague's birthstone was ruby.",
    "early_releases": "The first public release of Ruby 0.95 was announced on Japanese domestic newsgroups on 21 December 1995. Subsequently, three more versions of Ruby were released in two days. The release coincided with the launch of the Japanese-language ruby-list mailing list, which was the first mailing list for the new language. Already present at this stage of development were many of the features familiar in later releases of Ruby, including object-oriented design, classes with inheritance, mixins, iterators, closures, exception handling and garbage collection. After the release of Ruby 0.95 in 1995, several stable versions of Ruby were released in these years. In 1997, the first article about Ruby was published on the Web. In the same year, Matsumoto was hired by netlab.jp to work on Ruby as a full-time developer. In 1998, the Ruby Application Archive was launched by Matsumoto, along with a simple English-language homepage for Ruby. In 1999, the first English language mailing list ruby-talk began, which signaled a growing interest in the language outside Japan. In this same year, Matsumoto and Keiju Ishitsuka wrote the first book on Ruby, The Object-oriented Scripting Language Ruby (オブジェクト指向スクリプト言語 Ruby), which was published in Japan in October 1999. It would be followed in the early 2000s by around 20 books on Ruby published in Japanese. By 2000, Ruby was more popular than Python in Japan. In September 2000, the first English language book Programming Ruby was printed, which was later freely released to the public, further widening the adoption of Ruby amongst English speakers. In early 2002, the English-language ruby-talk mailing list was receiving more messages than the Japanese-language ruby-list, demonstrating Ruby's increasing popularity in the non-Japanese speaking world.",
    "ruby__and_": "Ruby 1.8 was initially released August 2003, was stable for a long time, and was retired June 2013. Although deprecated, there is still code based on it. Ruby 1.8 is only partially compatible with Ruby 1.9.[citation needed] Ruby 1.8 has been the subject of several industry standards. The language specifications for Ruby were developed by the Open Standards Promotion Center of the Information-Technology Promotion Agency (a Japanese government agency) for submission to the Japanese Industrial Standards Committee (JISC) and then to the International Organization for Standardization (ISO). It was accepted as a Japanese Industrial Standard (JIS X 3017) in 2011 and an international standard (ISO/IEC 30170) in 2012. Ruby on Rails logo Around 2005, interest in the Ruby language surged in tandem with Ruby on Rails, a web framework written in Ruby. Rails is frequently credited with increasing awareness of Ruby. Effective with Ruby 1.9.3, released 31 October 2011, Ruby switched from being dual-licensed under the Ruby License and the GPL to being dual-licensed under the Ruby License and the two-clause BSD license. Adoption of 1.9 was slowed by changes from 1.8 that required many popular third party gems to be rewritten.[citation needed]",
    "ruby_": "Ruby 3.0.0 was released on Christmas Day in 2020. It is known as Ruby 3x3, which signifies that programs would run three times faster in Ruby 3.0 comparing to Ruby 2.0. and some had already implemented in intermediate releases on the road from 2 to 3. To achieve 3x3, Ruby 3 comes with MJIT, and later YJIT, Just-In-Time Compilers, to make programs faster, although they are described as experimental and remain disabled by default (enabled by flags at runtime). Another goal of Ruby 3.0 is to improve concurrency and two more utilities Fibre Scheduler, and experimental Ractor facilitate the goal. Ractor is light-weight and thread-safe as it is achieved by exchanging messages rather than shared objects. Ruby 3.0 introduces RBS language to describe the types of Ruby programs for static analysis. It is separated from general Ruby programs. There are some syntax enhancements and library changes in Ruby 3.0 as well. Ruby 3.1 was released on 25 December 2021. It includes YJIT, a new, experimental, Just-In-Time Compiler developed by Shopify, to enhance the performance of real world business applications. A new debugger is also included. There are some syntax enhancements and other improvements in this release. Network libraries for FTP, SMTP, IMAP, and POP are moved from default gems to bundled gems. Ruby 3.2 was released on 25 December 2022. It brings support for being run inside of a WebAssembly environment via a WASI interface. Regular expressions also receives some improvements, including a faster, memoized matching algorithm to protect against certain ReDoS attacks, and configurable timeouts for regular expression matching. Additional debugging and syntax features are also included in this release, which include syntax suggestion, as well as error highlighting. The MJIT compiler has been re-implemented as a standard library module, while the YJIT, a Rust-based JIT compiler now supports more architectures on Linux. Ruby 3.3 was released on 25 December 2023. Ruby 3.3 introduces significant enhancements and performance improvements to the language. Key features include the introduction of the Prism parser for portable and maintainable parsing, the addition of the pure-Ruby JIT compiler RJIT, and major performance boosts in the YJIT compiler. Additionally, improvements in memory usage, the introduction of an M:N thread scheduler, and updates to the standard library contribute to a more efficient and developer-friendly Ruby ecosystem. Ruby 3.4 was released on 25 December 2024. Ruby 3.4 adds it block parameter reference, changes Prism as default parser, adds Happy Eyeballs Version 2 support to socket library, improves YJIT, adds modular Garbage Collector and so on.",
    "semantics_and_philosophy": "Yukihiro Matsumoto, the creator of Ruby Matsumoto has said that Ruby is designed for programmer productivity and fun, following the principles of good user interface design. At a Google Tech Talk in 2008 he said, I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language. He stresses that systems design needs to emphasize human, rather than computer, needs: Often people, especially computer engineers, focus on the machines. They think, By doing this, the machine will run fast. By doing this, the machine will run more effectively. By doing this, the machine will something something something. They are focusing on machines. But in fact we need to focus on humans, on how humans care about doing programming or operating the application of the machines. We are the masters. They are the slaves. Matsumoto has said his primary design goal was to make a language that he himself enjoyed using, by minimizing programmer work and possible confusion. He has said that he had not applied the principle of least astonishment (POLA) to the design of Ruby; in a May 2005 discussion on the newsgroup comp.lang.ruby, Matsumoto attempted to distance Ruby from POLA, explaining that because any design choice will be surprising to someone, he uses a personal standard in evaluating surprise. If that personal standard remains consistent, there would be few surprises for those familiar with the standard. Matsumoto defined it this way in an interview: Everyone has an individual background. Someone may come from Python, someone else may come from Perl, and they may be surprised by different aspects of the language. Then they come up to me and say, 'I was surprised by this feature of the language, so Ruby violates the principle of least surprise.' Wait. Wait. The principle of least surprise is not for you only. The principle of least surprise means principle of least my surprise. And it means the principle of least surprise after you learn Ruby very well. For example, I was a C++ programmer before I started designing Ruby. I programmed in C++ exclusively for two or three years. And after two years of C++ programming, it still surprises me. Ruby is object-oriented: every value is an object, including classes and instances of types that many other languages designate as primitives (such as integers, Booleans, and null). Because everything in Ruby is an object, everything in Ruby has certain built-in abilities called methods. Every function is a method and methods are always called on an object. Methods defined at the top level scope become methods of the Object class. Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as global procedures. Ruby supports inheritance with dynamic dispatch, mixins and singleton methods (belonging to, and defined for, a single instance rather than being defined on the class). Though Ruby does not support multiple inheritance, classes can import modules as mixins. Ruby has been described as a multi-paradigm programming language: it allows procedural programming (defining functions/variables outside classes makes them part of the root, 'self' Object), with object orientation (everything is an object) or functional programming (it has anonymous functions, closures, and continuations; statements all have values, and functions return the last evaluation). It has support for introspection, reflective programming, metaprogramming, and interpreter-based threads. Ruby features dynamic typing, and supports parametric polymorphism. According to the Ruby FAQ, the syntax is similar to Perl's and the semantics are similar to Smalltalk's, but the design philosophy differs greatly from Python's.",
    "features": "Thoroughly object-oriented with inheritance, mixins and metaclasses Dynamic typing and duck typing Everything is an expression (even statements) and everything is executed imperatively (even declarations) Succinct and flexible syntax that minimizes syntactic noise and serves as a foundation for domain-specific languages Dynamic reflection and alteration of objects to facilitate metaprogramming Lexical closures, iterators and generators, with a block syntax Literal notation for arrays, hashes, regular expressions and symbols Embedding code in strings (interpolation) Default arguments Four levels of variable scope (global, class, instance, and local) denoted by sigils or the lack thereof Garbage collection First-class continuations Strict Boolean coercion rules (everything is true except false and nil) Exception handling Operator overloading Built-in support for rational numbers, complex numbers and arbitrary-precision arithmetic Custom dispatch behavior (through method_missing and const_missing) Native threads and cooperative fibers (fibers are a 1.9/YARV feature) Support for Unicode and multiple character encodings. Native plug-in API in C Interactive Ruby Shell, an interactive command-line interpreter that can be used to test code quickly (REPL) Centralized package management through RubyGems Implemented on all major platforms Large standard library, including modules for YAML, JSON, XML, CGI, OpenSSL, HTTP, FTP, RSS, curses, zlib and Tk Just-in-time compilation",
    "syntax": "Main article: Ruby syntax The syntax of Ruby is broadly similar to that of Perl and Python. Class and method definitions are signaled by keywords, whereas code blocks can be defined by either keywords or braces. In contrast to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. For practical purposes there is no distinction between expressions and statements. Line breaks are significant and taken as the end of a statement; a semicolon may be equivalently used. Unlike Python, indentation is not significant. One of the differences from Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods (attr_writer, attr_reader, etc.). Unlike the getter and setter methods of other languages like C++ or Java, accessor methods in Ruby can be created with a single line of code via metaprogramming; however, accessor methods can also be created in the traditional fashion of C++ and Java. As invocation of these methods does not require the use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of calling code or having to do any refactoring achieving similar functionality to C# and VB.NET property members. Python's property descriptors are similar, but come with a trade-off in the development process. If one begins in Python by using a publicly exposed instance variable, and later changes the implementation to use a private instance variable exposed through a property descriptor, code internal to the class may need to be adjusted to use the private variable rather than the public property. Ruby's design forces all instance variables to be private, but also provides a simple way to declare set and get methods. This is in keeping with the idea that in Ruby, one never directly accesses the internal members of a class from outside the class; rather, one passes a message to the class and receives a response.",
    "implementations": "See also: Ruby MRI § Operating systems, and List of Ruby compilers",
    "matzs_ruby_interpreter": "The original Ruby interpreter is often referred to as Matz's Ruby Interpreter or MRI. This implementation is written in C and uses its own Ruby-specific virtual machine. The standardized and retired Ruby 1.8 implementation was written in C, as a single-pass interpreted language. Starting with Ruby 1.9, and continuing with Ruby 2.x and above, the official Ruby interpreter has been YARV (Yet Another Ruby VM), and this implementation has superseded the slower virtual machine used in previous releases of MRI.",
    "alternative_implementations": "This section's use of red links may need cleanup. Please help improve this section. (April 2025) As of 2018[update], there are a number of alternative implementations of Ruby, including JRuby, Rubinius, and mruby. Each takes a different approach, with JRuby and Rubinius providing just-in-time compilation and mruby also providing ahead-of-time compilation. Ruby has three major alternative implementations: JRuby, a mixed Java and Ruby implementation that runs on the Java virtual machine. JRuby currently targets Ruby 3.1.x. TruffleRuby, a Java implementation using the Truffle language implementation framework with GraalVM Rubinius, a C++ bytecode virtual machine that uses LLVM to compile to machine code at runtime. The bytecode compiler and most core classes are written in pure Ruby. Rubinius currently[when?] targets Ruby 2.3.1. Other Ruby implementations include: MagLev, a Smalltalk implementation that runs on GemTalk Systems' GemStone/S VM mruby, an implementation designed to be embedded into C code, in a similar vein to Lua. It is currently being developed by Yukihiro Matsumoto and others RGSS, or Ruby Game Scripting System, a proprietary implementation that is used by the RPG Maker series of software for game design and modification of the RPG Maker engine julializer, a transpiler (partial) from Ruby to Julia. It can be used for a large speedup over e.g. Ruby or JRuby implementations (may only be useful for numerical code). Topaz, a Ruby implementation written in Python Opal, a web-based interpreter that compiles Ruby to JavaScript Other now defunct Ruby implementations were: MacRuby, a Mac OS X implementation on the Objective-C runtime. Its iOS counterpart is called RubyMotion IronRuby an implementation on the .NET Framework Cardinal, an implementation for the Parrot virtual machine Ruby Enterprise Edition, often shortened to ree, an implementation optimized to handle large-scale Ruby on Rails projects HotRuby, a JavaScript and ActionScript implementation of the Ruby programming language The maturity of Ruby implementations tends to be measured by their ability to run the Ruby on Rails (Rails) framework, because it is complex to implement and uses many Ruby-specific features. The point when a particular implementation achieves this goal is called the Rails singularity. The reference implementation, JRuby, and Rubinius are all able to run Rails unmodified in a production environment.",
    "platform_support": "Matsumoto originally developed Ruby on the 4.3BSD-based Sony NEWS-OS 3.x, but later migrated his work to SunOS 4.x, and finally to Linux. By 1999, Ruby was known to work across many different operating systems. Modern Ruby versions and implementations are available on all major desktop, mobile and server-based operating systems. Ruby is also supported across a number of cloud hosting platforms like Jelastic, Heroku, Google Cloud Platform and others. Tools such as RVM and RBEnv, facilitate installation and partitioning of multiple ruby versions, and multiple 'gemsets' on one machine.",
    "repositories_and_libraries": "RubyGems is Ruby's package manager. A Ruby package is called a gem and can be installed via the command line. Most gems are libraries, though a few exist that are applications, such as IDEs. There are over 100,000 Ruby gems hosted on RubyGems.org. Many new and existing Ruby libraries are hosted on GitHub, a service that offers version control repository hosting for Git. The Ruby Application Archive, which hosted applications, documentation, and libraries for Ruby programming, was maintained until 2013, when its function was transferred to RubyGems.",
    "see_also": "Free and open-source software portalComputer programming portal Comparison of programming languages Metasploit Why's (poignant) Guide to Ruby Crystal (programming language) Ruby on Rails",
    "references": "^ a b Ruby 3.3.0 Released. Archived from the original on 2023-12-25. Retrieved 2023-12-25. ^ a b c Cooper, Peter (2009). Beginning Ruby: From Novice to Professional. Beginning from Novice to Professional (2nd ed.). Berkeley: APress. p. 101. ISBN 978-1-4302-2363-4. To a lesser extent, Python, LISP, Eiffel, Ada, and C++ have also influenced Ruby. ^ a b Reasons behind Ruby. Ruby Conference 2008. Confreaks (YouTube). 15 April 2013. ^ a b c d e f Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: Bringing Ruby on Rails to Java. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. It draws primarily on features from Perl, Smalltalk, Python, Lisp, Dylan, and CLU. ^ Julia 1.0 Documentation: Introduction. Archived from the original on 16 August 2018. Retrieved 6 October 2018. ^ Burks, Tim. About Nu™. Programming Nu™. Neon Design Technology, Inc. Archived from the original on 2018-12-25. Retrieved 2011-07-21. ^ Ring Team (3 December 2017). Ring and other languages. ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 3 December 2017. ^ Influences - The Rust Reference. The Rust Reference. Archived from the original on 2019-01-26. Retrieved 2023-04-18. ^ Lattner, Chris (2014-06-03). Chris Lattner's Homepage. Chris Lattner. Archived from the original on 2018-12-25. Retrieved 2014-06-03. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ About Ruby. Archived from the original on 9 October 2014. Retrieved 15 February 2020. ^ Shugo Maeda (17 December 2002). Official Ruby FAQ. ^ Matsumoto, Yukihiro (13 February 2006). Re: Ruby's lisp features. Archived from the original on 2018-10-27. Retrieved 15 February 2020. ^ a b c d e f History of Ruby. Archived from the original on 2011-07-14. Retrieved 2008-08-14. ^ [FYI: historic] The decisive moment of the language name Ruby. (Re: [ANN] ruby 1.8.1) (E-mail from Hiroshi Sugihara to ruby-talk). Archived from the original on 2011-07-17. Retrieved 2008-08-14. ^ 1.3 Why the name 'Ruby'?. Official Ruby FAQ. ^ Yukihiro Matsumoto (June 11, 1999). Re: the name of Ruby?. Ruby-Talk (Mailing list). Archived from the original on December 25, 2018. Retrieved April 10, 2012. ^ More archeolinguistics: unearthing proto-Ruby. Archived from the original on 6 November 2015. Retrieved 2 May 2015. ^ [ruby-talk:00382] Re: history of ruby. Archived from the original on 16 July 2011. Retrieved 2 May 2015. ^ [ruby-list:124] TUTORIAL — ruby's features. Archived from the original on 24 May 2003. Retrieved 2 May 2015. ^ An Interview with the Creator of Ruby. Archived from the original on 2008-02-08. Retrieved 2007-07-11. ^ Yukihiro Matsumoto (October 2000). Programming Ruby: Forward. Archived from the original on 25 December 2018. Retrieved 5 March 2014. ^ a b We retire Ruby 1.8.7. Archived from the original on 6 June 2015. Retrieved 2 May 2015. ^ IPA 独立行政法人 情報処理推進機構：プレス発表 プログラム言語RubyのJIS規格（JIS X 3017）制定について. Archived from the original on 2 February 2015. Retrieved 2 May 2015. ^ IPA 独立行政法人 情報処理推進機構：プレス発表 プログラム言語Ruby、国際規格として承認. Archived from the original on 1 February 2015. Retrieved 2 May 2015. ^ ISO/IEC 30170:2012. Archived from the original on 2017-03-12. Retrieved 2017-03-10. ^ Web Development: Ruby on Rails Archived 2009-02-24 at the Wayback Machine. Devarticles.com (2007-03-22). Retrieved on 2013-07-17. ^ Ruby 1.9.3 p0 is released. ruby-lang.org. October 31, 2011. Archived from the original on January 14, 2013. Retrieved February 20, 2013. ^ v1_9_3_0/NEWS. Ruby Subversion source repository. ruby-lang.org. September 17, 2011. Archived from the original on November 6, 2015. Retrieved February 20, 2013. ^ Endoh, Yusuke. (2013-02-24) Ruby 2.0.0-p0 is released Archived 2013-02-27 at the Wayback Machine. Ruby-lang.org. Retrieved on 2013-07-17. ^ Semantic Versioning starting with Ruby 2.1.0. December 21, 2013. Archived from the original on February 13, 2014. Retrieved December 27, 2013. ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). Ruby 2.2.1 Released. Archived from the original on 16 May 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). v2.2.1 ChangeLog. Archived from the original on 26 February 2017. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). Specifying non volatile registers for increase performance in ppc64. Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). Specifying MACRO for increase performance in ppc64. Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ ruby/NEWS at v2_2_0 · ruby/ruby · GitHub. GitHub. Archived from the original on 1 January 2015. Retrieved 2 May 2015. ^ Ruby/NEWS at v.2_3_0 - ruby/ruby. GitHub. Archived from the original on 1 March 2017. Retrieved 25 December 2015. ^ Ruby 2.3.0 changes and features. Running with Ruby. dev.mensfeld.pl. 14 November 2015. Archived from the original on 5 January 2016. Retrieved 27 December 2015. ^ Ruby 2.4.0 Released. www.ruby-lang.org. Archived from the original on 2017-02-17. Retrieved 2016-12-30. ^ a b c d Ruby 3.0.0 Released. Ruby Programming Language. 2020-12-25. Archived from the original on 2020-12-25. Retrieved 2020-12-25. ^ Scheffler, Jonan (10 November 2016). Ruby 3x3: Matz, Koichi, and Tenderlove on the future of Ruby Performance. Ruby. Archived from the original on 10 May 2019. Retrieved 18 May 2019. ^ Ruby 3.1.0 Released. ruby-lang.org. Archived from the original on 25 December 2021. Retrieved 25 Dec 2021. ^ Ruby 3.1.0 Released. Archived from the original on 2021-12-26. Retrieved 2021-12-26. ^ Ruby 3.2.0 Released. Archived from the original on 2022-12-25. Retrieved 2022-12-25. ^ Ruby 3.4.0 Released. 2024-12-25. Retrieved 2025-04-12. ^ NEWS - Documentation for Ruby 3.4. Retrieved 2025-04-12. ^ The Ruby Programming Language. Archived from the original on 18 January 2020. Retrieved 2 May 2015. ^ Google Tech Talks – Ruby 1.9 on YouTube ^ a b c Bill Venners. The Philosophy of Ruby. Archived from the original on 5 July 2019. Retrieved 2 May 2015. ^ Welcome to RUBYWEEKLYNEWS.ORG. 4 July 2017. Archived from the original on 4 July 2017.{{cite web}}: CS1 maint: bot: original URL status unknown (link) ^ The Ruby Language FAQ: How Does Ruby Stack Up Against...?. Archived from the original on 8 May 2015. Retrieved 2 May 2015. ^ Bruce Stewart (29 November 2001). An Interview with the Creator of Ruby. O'Reilly Media. Archived from the original on 6 May 2015. Retrieved 2 May 2015. ^ Bill Venners. Dynamic Productivity with Ruby. Archived from the original on 5 September 2015. Retrieved 2 May 2015. ^ Language Workbenches: The Killer-App for Domain Specific Languages?. martinfowler.com. Archived from the original on 2 May 2021. Retrieved 2 May 2015. ^ Ruby – Add class methods at runtime. Archived from the original on 2007-09-22. Retrieved 2007-11-01. ^ Bill Venners. Blocks and Closures in Ruby. Archived from the original on 18 April 2015. Retrieved 2 May 2015. ^ Methods. Official Ruby FAQ. Archived from the original on 2022-06-28. Retrieved 2021-06-20. ^ Ruby Standard Library. ^ [ruby-talk:01120] Re: The value of while... Archived from the original on 2011-07-17. Retrieved 2008-12-06. In Ruby's syntax, statement is just a special case of an expression that cannot appear as an argument (e.g. multiple assignment). ^ [ruby-talk:02460] Re: Precedence question. Archived from the original on 2004-07-22. Retrieved 2008-12-06. statement [...] can not be part of expression unless grouped within parentheses. ^ remove/virtual_module: Born to make your Ruby Code more than 3x faster. Hopefully. GitHub. 21 February 2020. Archived from the original on 1 March 2017. Retrieved 29 August 2016. ^ Peter Cooper (2010-05-18). The Why, What, and How of Rubinius 1.0's Release. Archived from the original on 2010-05-24. Retrieved 2010-05-23. ^ Maya Stodte (February 2000). IBM developerWorks – Ruby: a new language. Archived from the original on August 18, 2000. Retrieved 3 March 2014. ^ Yukihiro Matsumoto (August 2002). lang-ruby-general: Re: question about Ruby initial development. Archived from the original on 3 March 2014. Retrieved 3 March 2014. ^ The Ruby Toolbox. Archived from the original on 2015-04-03. Retrieved 2015-04-04. ^ Stats RubyGems.org your community gem host. rubygems.org. Archived from the original on 10 December 2021. Retrieved 10 December 2021. ^ We retire raa.ruby-lang.org. 2013-08-08. Archived from the original on 2015-12-31. Retrieved 2016-01-03.",
    "further_reading": "Black, David; Leo, Joseph (15 March 2019), The Well-Grounded Rubyist (Third ed.), Manning Publications, p. 584, ISBN 978-1617295218 Metz, Sandi (22 August 2018), Practical Object-Oriented Design: An Agile Primer Using Ruby (Second ed.), Addison-Wesley Professional, p. 288, ISBN 978-0-13-445647-8, archived from the original on February 13, 2020, retrieved 13 February 2020 Cooper, Peter (12 July 2016), Beginning Ruby: From Novice to Professional (Third ed.), Apress, p. 492, ISBN 978-1484212790 Carlson, Lucas; Richardson, Leonard (3 April 2015), Ruby Cookbook: Recipes for Object-Oriented Scripting (Second ed.), O'Reilly Media, p. 963, ISBN 978-1449373719 Fulton, Hal; Arko, André (2 March 2015), The Ruby Way: Solutions and Techniques in Ruby Programming (Third ed.), Addison-Wesley Professional, p. 816, ISBN 978-0-321-71463-3, archived from the original on February 13, 2020, retrieved 13 February 2020 Thomas, Dave; Fowler, Chad; Hunt, Andy (7 July 2013), Programming Ruby 1.9 & 2.0: The Pragmatic Programmers' Guide (Fourth ed.), Pragmatic Bookshelf, p. 888, ISBN 978-1937785499 McAnally, Jeremy; Arkin, Assaf (28 March 2009), Ruby in Practice (First ed.), Manning Publications, p. 360, ISBN 978-1933988474 Flanagan, David; Matsumoto, Yukihiro (25 January 2008), The Ruby Programming Language (First ed.), O'Reilly Media, p. 446, ISBN 978-0-596-51617-8 Baird, Kevin (June 8, 2007), Ruby by Example: Concepts and Code (First ed.), No Starch Press, p. 326, ISBN 978-1593271480, archived from the original on January 13, 2020, retrieved 13 February 2020 Fitzgerald, Michael (14 May 2007), Learning Ruby (First ed.), O'Reilly Media, p. 255, ISBN 978-0-596-52986-4",
    "external_links": "Wikiquote has quotations related to Ruby (programming language). Wikimedia Commons has media related to Ruby programming language. Wikiversity has learning resources about Topic:Ruby Official website Ruby documentation vteRuby programming languageImplementationsActive Ruby MRI; YARV mruby JRuby RubyMotion Discontinued MacRuby IronRuby XRuby HotRuby MagLev Rubinius IDE Aptana Studio Komodo IDE RubyMine Applications Capistrano Hackety Hack Interactive Ruby Shell Pry Rake Redmine RSpec RubyGems RVM Chef Puppet Vagrant Homebrew CocoaPods Libraries and frameworks Adhearsion eRuby (RHTML) Merb Padrino RubyCocoa Ruby on Rails Shoes Sinatra QtRuby Server software mod_ruby Mongrel Phusion Passenger (mod_rails/mod_rack) Rack WEBrick People Yukihiro Matsumoto David Heinemeier Hansson why the lucky stiff Dave Thomas Other Document format why's (poignant) Guide to Ruby Ruby Central RubyKaigi RubyForge Ruby License Category Commons vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteFree and open-source softwareGeneral Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Softwarepackages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category vteInternational Organization for Standardization (ISO) standardsList of ISO standards – ISO romanizations – IEC standards1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40500 42010 45001 50001 55000 56000 80000 Category Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRef",
    "document": "According to Matsumoto, Ruby was conceived in 1993. In a 1999 post to the Ruby-Talk mailing list, he shared some of his early ideas about the language: I was talking with my colleague about the possibility of an object-oriented scripting language. I knew Perl (Perl4, not Perl5), but I didn't like it really, because it had the smell of a toy language (it still has). The object-oriented language seemed very promising. I knew Python then. But I didn't like it, because I didn't think it was a true object-oriented language – OO features appeared to be add-on to the language. As a language maniac and OO fan for 15 years, I really wanted a genuine object-oriented, easy-to-use scripting language. I looked for but couldn't find one. So I decided to make it. Matsumoto described Ruby's design as resembling a simple Lisp language at its core, with an object system like that of Smalltalk, blocks inspired by higher-order functions, and practical utility like that of Perl. The name Ruby originated during an online chat session between Matsumoto and Keiju Ishitsuka on 24 February 1993, before any code had been written. Two names were initially proposed: Coral and Ruby. Matsumoto chose the latter in a subsequent email to Ishitsuka. He also noted that one factor influencing the choice of the name was that a colleague's birthstone was ruby. The first public release of Ruby 0.95 was announced on Japanese domestic newsgroups on 21 December 1995. Subsequently, three more versions of Ruby were released in two days. The release coincided with the launch of the Japanese-language ruby-list mailing list, which was the first mailing list for the new language. Already present at this stage of development were many of the features familiar in later releases of Ruby, including object-oriented design, classes with inheritance, mixins, iterators, closures, exception handling and garbage collection. After the release of Ruby 0.95 in 1995, several stable versions of Ruby were released in these years. In 1997, the first article about Ruby was published on the Web. In the same year, Matsumoto was hired by netlab.jp to work on Ruby as a full-time developer. In 1998, the Ruby Application Archive was launched by Matsumoto, along with a simple English-language homepage for Ruby. In 1999, the first English language mailing list ruby-talk began, which signaled a growing interest in the language outside Japan. In this same year, Matsumoto and Keiju Ishitsuka wrote the first book on Ruby, The Object-oriented Scripting Language Ruby (オブジェクト指向スクリプト言語 Ruby), which was published in Japan in October 1999. It would be followed in the early 2000s by around 20 books on Ruby published in Japanese. By 2000, Ruby was more popular than Python in Japan. In September 2000, the first English language book Programming Ruby was printed, which was later freely released to the public, further widening the adoption of Ruby amongst English speakers. In early 2002, the English-language ruby-talk mailing list was receiving more messages than the Japanese-language ruby-list, demonstrating Ruby's increasing popularity in the non-Japanese speaking world. Ruby 1.8 was initially released August 2003, was stable for a long time, and was retired June 2013. Although deprecated, there is still code based on it. Ruby 1.8 is only partially compatible with Ruby 1.9.[citation needed] Ruby 1.8 has been the subject of several industry standards. The language specifications for Ruby were developed by the Open Standards Promotion Center of the Information-Technology Promotion Agency (a Japanese government agency) for submission to the Japanese Industrial Standards Committee (JISC) and then to the International Organization for Standardization (ISO). It was accepted as a Japanese Industrial Standard (JIS X 3017) in 2011 and an international standard (ISO/IEC 30170) in 2012. Ruby on Rails logo Around 2005, interest in the Ruby language surged in tandem with Ruby on Rails, a web framework written in Ruby. Rails is frequently credited with increasing awareness of Ruby. Effective with Ruby 1.9.3, released 31 October 2011, Ruby switched from being dual-licensed under the Ruby License and the GPL to being dual-licensed under the Ruby License and the two-clause BSD license. Adoption of 1.9 was slowed by changes from 1.8 that required many popular third party gems to be rewritten.[citation needed] Ruby 3.0.0 was released on Christmas Day in 2020. It is known as Ruby 3x3, which signifies that programs would run three times faster in Ruby 3.0 comparing to Ruby 2.0. and some had already implemented in intermediate releases on the road from 2 to 3. To achieve 3x3, Ruby 3 comes with MJIT, and later YJIT, Just-In-Time Compilers, to make programs faster, although they are described as experimental and remain disabled by default (enabled by flags at runtime). Another goal of Ruby 3.0 is to improve concurrency and two more utilities Fibre Scheduler, and experimental Ractor facilitate the goal. Ractor is light-weight and thread-safe as it is achieved by exchanging messages rather than shared objects. Ruby 3.0 introduces RBS language to describe the types of Ruby programs for static analysis. It is separated from general Ruby programs. There are some syntax enhancements and library changes in Ruby 3.0 as well. Ruby 3.1 was released on 25 December 2021. It includes YJIT, a new, experimental, Just-In-Time Compiler developed by Shopify, to enhance the performance of real world business applications. A new debugger is also included. There are some syntax enhancements and other improvements in this release. Network libraries for FTP, SMTP, IMAP, and POP are moved from default gems to bundled gems. Ruby 3.2 was released on 25 December 2022. It brings support for being run inside of a WebAssembly environment via a WASI interface. Regular expressions also receives some improvements, including a faster, memoized matching algorithm to protect against certain ReDoS attacks, and configurable timeouts for regular expression matching. Additional debugging and syntax features are also included in this release, which include syntax suggestion, as well as error highlighting. The MJIT compiler has been re-implemented as a standard library module, while the YJIT, a Rust-based JIT compiler now supports more architectures on Linux. Ruby 3.3 was released on 25 December 2023. Ruby 3.3 introduces significant enhancements and performance improvements to the language. Key features include the introduction of the Prism parser for portable and maintainable parsing, the addition of the pure-Ruby JIT compiler RJIT, and major performance boosts in the YJIT compiler. Additionally, improvements in memory usage, the introduction of an M:N thread scheduler, and updates to the standard library contribute to a more efficient and developer-friendly Ruby ecosystem. Ruby 3.4 was released on 25 December 2024. Ruby 3.4 adds it block parameter reference, changes Prism as default parser, adds Happy Eyeballs Version 2 support to socket library, improves YJIT, adds modular Garbage Collector and so on. Yukihiro Matsumoto, the creator of Ruby Matsumoto has said that Ruby is designed for programmer productivity and fun, following the principles of good user interface design. At a Google Tech Talk in 2008 he said, I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language. He stresses that systems design needs to emphasize human, rather than computer, needs: Often people, especially computer engineers, focus on the machines. They think, By doing this, the machine will run fast. By doing this, the machine will run more effectively. By doing this, the machine will something something something. They are focusing on machines. But in fact we need to focus on humans, on how humans care about doing programming or operating the application of the machines. We are the masters. They are the slaves. Matsumoto has said his primary design goal was to make a language that he himself enjoyed using, by minimizing programmer work and possible confusion. He has said that he had not applied the principle of least astonishment (POLA) to the design of Ruby; in a May 2005 discussion on the newsgroup comp.lang.ruby, Matsumoto attempted to distance Ruby from POLA, explaining that because any design choice will be surprising to someone, he uses a personal standard in evaluating surprise. If that personal standard remains consistent, there would be few surprises for those familiar with the standard. Matsumoto defined it this way in an interview: Everyone has an individual background. Someone may come from Python, someone else may come from Perl, and they may be surprised by different aspects of the language. Then they come up to me and say, 'I was surprised by this feature of the language, so Ruby violates the principle of least surprise.' Wait. Wait. The principle of least surprise is not for you only. The principle of least surprise means principle of least my surprise. And it means the principle of least surprise after you learn Ruby very well. For example, I was a C++ programmer before I started designing Ruby. I programmed in C++ exclusively for two or three years. And after two years of C++ programming, it still surprises me. Ruby is object-oriented: every value is an object, including classes and instances of types that many other languages designate as primitives (such as integers, Booleans, and null). Because everything in Ruby is an object, everything in Ruby has certain built-in abilities called methods. Every function is a method and methods are always called on an object. Methods defined at the top level scope become methods of the Object class. Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as global procedures. Ruby supports inheritance with dynamic dispatch, mixins and singleton methods (belonging to, and defined for, a single instance rather than being defined on the class). Though Ruby does not support multiple inheritance, classes can import modules as mixins. Ruby has been described as a multi-paradigm programming language: it allows procedural programming (defining functions/variables outside classes makes them part of the root, 'self' Object), with object orientation (everything is an object) or functional programming (it has anonymous functions, closures, and continuations; statements all have values, and functions return the last evaluation). It has support for introspection, reflective programming, metaprogramming, and interpreter-based threads. Ruby features dynamic typing, and supports parametric polymorphism. According to the Ruby FAQ, the syntax is similar to Perl's and the semantics are similar to Smalltalk's, but the design philosophy differs greatly from Python's. Thoroughly object-oriented with inheritance, mixins and metaclasses Dynamic typing and duck typing Everything is an expression (even statements) and everything is executed imperatively (even declarations) Succinct and flexible syntax that minimizes syntactic noise and serves as a foundation for domain-specific languages Dynamic reflection and alteration of objects to facilitate metaprogramming Lexical closures, iterators and generators, with a block syntax Literal notation for arrays, hashes, regular expressions and symbols Embedding code in strings (interpolation) Default arguments Four levels of variable scope (global, class, instance, and local) denoted by sigils or the lack thereof Garbage collection First-class continuations Strict Boolean coercion rules (everything is true except false and nil) Exception handling Operator overloading Built-in support for rational numbers, complex numbers and arbitrary-precision arithmetic Custom dispatch behavior (through method_missing and const_missing) Native threads and cooperative fibers (fibers are a 1.9/YARV feature) Support for Unicode and multiple character encodings. Native plug-in API in C Interactive Ruby Shell, an interactive command-line interpreter that can be used to test code quickly (REPL) Centralized package management through RubyGems Implemented on all major platforms Large standard library, including modules for YAML, JSON, XML, CGI, OpenSSL, HTTP, FTP, RSS, curses, zlib and Tk Just-in-time compilation Main article: Ruby syntax The syntax of Ruby is broadly similar to that of Perl and Python. Class and method definitions are signaled by keywords, whereas code blocks can be defined by either keywords or braces. In contrast to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. For practical purposes there is no distinction between expressions and statements. Line breaks are significant and taken as the end of a statement; a semicolon may be equivalently used. Unlike Python, indentation is not significant. One of the differences from Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods (attr_writer, attr_reader, etc.). Unlike the getter and setter methods of other languages like C++ or Java, accessor methods in Ruby can be created with a single line of code via metaprogramming; however, accessor methods can also be created in the traditional fashion of C++ and Java. As invocation of these methods does not require the use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of calling code or having to do any refactoring achieving similar functionality to C# and VB.NET property members. Python's property descriptors are similar, but come with a trade-off in the development process. If one begins in Python by using a publicly exposed instance variable, and later changes the implementation to use a private instance variable exposed through a property descriptor, code internal to the class may need to be adjusted to use the private variable rather than the public property. Ruby's design forces all instance variables to be private, but also provides a simple way to declare set and get methods. This is in keeping with the idea that in Ruby, one never directly accesses the internal members of a class from outside the class; rather, one passes a message to the class and receives a response. See also: Ruby MRI § Operating systems, and List of Ruby compilers The original Ruby interpreter is often referred to as Matz's Ruby Interpreter or MRI. This implementation is written in C and uses its own Ruby-specific virtual machine. The standardized and retired Ruby 1.8 implementation was written in C, as a single-pass interpreted language. Starting with Ruby 1.9, and continuing with Ruby 2.x and above, the official Ruby interpreter has been YARV (Yet Another Ruby VM), and this implementation has superseded the slower virtual machine used in previous releases of MRI. This section's use of red links may need cleanup. Please help improve this section. (April 2025) As of 2018[update], there are a number of alternative implementations of Ruby, including JRuby, Rubinius, and mruby. Each takes a different approach, with JRuby and Rubinius providing just-in-time compilation and mruby also providing ahead-of-time compilation. Ruby has three major alternative implementations: JRuby, a mixed Java and Ruby implementation that runs on the Java virtual machine. JRuby currently targets Ruby 3.1.x. TruffleRuby, a Java implementation using the Truffle language implementation framework with GraalVM Rubinius, a C++ bytecode virtual machine that uses LLVM to compile to machine code at runtime. The bytecode compiler and most core classes are written in pure Ruby. Rubinius currently[when?] targets Ruby 2.3.1. Other Ruby implementations include: MagLev, a Smalltalk implementation that runs on GemTalk Systems' GemStone/S VM mruby, an implementation designed to be embedded into C code, in a similar vein to Lua. It is currently being developed by Yukihiro Matsumoto and others RGSS, or Ruby Game Scripting System, a proprietary implementation that is used by the RPG Maker series of software for game design and modification of the RPG Maker engine julializer, a transpiler (partial) from Ruby to Julia. It can be used for a large speedup over e.g. Ruby or JRuby implementations (may only be useful for numerical code). Topaz, a Ruby implementation written in Python Opal, a web-based interpreter that compiles Ruby to JavaScript Other now defunct Ruby implementations were: MacRuby, a Mac OS X implementation on the Objective-C runtime. Its iOS counterpart is called RubyMotion IronRuby an implementation on the .NET Framework Cardinal, an implementation for the Parrot virtual machine Ruby Enterprise Edition, often shortened to ree, an implementation optimized to handle large-scale Ruby on Rails projects HotRuby, a JavaScript and ActionScript implementation of the Ruby programming language The maturity of Ruby implementations tends to be measured by their ability to run the Ruby on Rails (Rails) framework, because it is complex to implement and uses many Ruby-specific features. The point when a particular implementation achieves this goal is called the Rails singularity. The reference implementation, JRuby, and Rubinius are all able to run Rails unmodified in a production environment. Matsumoto originally developed Ruby on the 4.3BSD-based Sony NEWS-OS 3.x, but later migrated his work to SunOS 4.x, and finally to Linux. By 1999, Ruby was known to work across many different operating systems. Modern Ruby versions and implementations are available on all major desktop, mobile and server-based operating systems. Ruby is also supported across a number of cloud hosting platforms like Jelastic, Heroku, Google Cloud Platform and others. Tools such as RVM and RBEnv, facilitate installation and partitioning of multiple ruby versions, and multiple 'gemsets' on one machine. RubyGems is Ruby's package manager. A Ruby package is called a gem and can be installed via the command line. Most gems are libraries, though a few exist that are applications, such as IDEs. There are over 100,000 Ruby gems hosted on RubyGems.org. Many new and existing Ruby libraries are hosted on GitHub, a service that offers version control repository hosting for Git. The Ruby Application Archive, which hosted applications, documentation, and libraries for Ruby programming, was maintained until 2013, when its function was transferred to RubyGems. Free and open-source software portalComputer programming portal Comparison of programming languages Metasploit Why's (poignant) Guide to Ruby Crystal (programming language) Ruby on Rails ^ a b Ruby 3.3.0 Released. Archived from the original on 2023-12-25. Retrieved 2023-12-25. ^ a b c Cooper, Peter (2009). Beginning Ruby: From Novice to Professional. Beginning from Novice to Professional (2nd ed.). Berkeley: APress. p. 101. ISBN 978-1-4302-2363-4. To a lesser extent, Python, LISP, Eiffel, Ada, and C++ have also influenced Ruby. ^ a b Reasons behind Ruby. Ruby Conference 2008. Confreaks (YouTube). 15 April 2013. ^ a b c d e f Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: Bringing Ruby on Rails to Java. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. It draws primarily on features from Perl, Smalltalk, Python, Lisp, Dylan, and CLU. ^ Julia 1.0 Documentation: Introduction. Archived from the original on 16 August 2018. Retrieved 6 October 2018. ^ Burks, Tim. About Nu™. Programming Nu™. Neon Design Technology, Inc. Archived from the original on 2018-12-25. Retrieved 2011-07-21. ^ Ring Team (3 December 2017). Ring and other languages. ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 3 December 2017. ^ Influences - The Rust Reference. The Rust Reference. Archived from the original on 2019-01-26. Retrieved 2023-04-18. ^ Lattner, Chris (2014-06-03). Chris Lattner's Homepage. Chris Lattner. Archived from the original on 2018-12-25. Retrieved 2014-06-03. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ About Ruby. Archived from the original on 9 October 2014. Retrieved 15 February 2020. ^ Shugo Maeda (17 December 2002). Official Ruby FAQ. ^ Matsumoto, Yukihiro (13 February 2006). Re: Ruby's lisp features. Archived from the original on 2018-10-27. Retrieved 15 February 2020. ^ a b c d e f History of Ruby. Archived from the original on 2011-07-14. Retrieved 2008-08-14. ^ [FYI: historic] The decisive moment of the language name Ruby. (Re: [ANN] ruby 1.8.1) (E-mail from Hiroshi Sugihara to ruby-talk). Archived from the original on 2011-07-17. Retrieved 2008-08-14. ^ 1.3 Why the name 'Ruby'?. Official Ruby FAQ. ^ Yukihiro Matsumoto (June 11, 1999). Re: the name of Ruby?. Ruby-Talk (Mailing list). Archived from the original on December 25, 2018. Retrieved April 10, 2012. ^ More archeolinguistics: unearthing proto-Ruby. Archived from the original on 6 November 2015. Retrieved 2 May 2015. ^ [ruby-talk:00382] Re: history of ruby. Archived from the original on 16 July 2011. Retrieved 2 May 2015. ^ [ruby-list:124] TUTORIAL — ruby's features. Archived from the original on 24 May 2003. Retrieved 2 May 2015. ^ An Interview with the Creator of Ruby. Archived from the original on 2008-02-08. Retrieved 2007-07-11. ^ Yukihiro Matsumoto (October 2000). Programming Ruby: Forward. Archived from the original on 25 December 2018. Retrieved 5 March 2014. ^ a b We retire Ruby 1.8.7. Archived from the original on 6 June 2015. Retrieved 2 May 2015. ^ IPA 独立行政法人 情報処理推進機構：プレス発表 プログラム言語RubyのJIS規格（JIS X 3017）制定について. Archived from the original on 2 February 2015. Retrieved 2 May 2015. ^ IPA 独立行政法人 情報処理推進機構：プレス発表 プログラム言語Ruby、国際規格として承認. Archived from the original on 1 February 2015. Retrieved 2 May 2015. ^ ISO/IEC 30170:2012. Archived from the original on 2017-03-12. Retrieved 2017-03-10. ^ Web Development: Ruby on Rails Archived 2009-02-24 at the Wayback Machine. Devarticles.com (2007-03-22). Retrieved on 2013-07-17. ^ Ruby 1.9.3 p0 is released. ruby-lang.org. October 31, 2011. Archived from the original on January 14, 2013. Retrieved February 20, 2013. ^ v1_9_3_0/NEWS. Ruby Subversion source repository. ruby-lang.org. September 17, 2011. Archived from the original on November 6, 2015. Retrieved February 20, 2013. ^ Endoh, Yusuke. (2013-02-24) Ruby 2.0.0-p0 is released Archived 2013-02-27 at the Wayback Machine. Ruby-lang.org. Retrieved on 2013-07-17. ^ Semantic Versioning starting with Ruby 2.1.0. December 21, 2013. Archived from the original on February 13, 2014. Retrieved December 27, 2013. ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). Ruby 2.2.1 Released. Archived from the original on 16 May 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). v2.2.1 ChangeLog. Archived from the original on 26 February 2017. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). Specifying non volatile registers for increase performance in ppc64. Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). Specifying MACRO for increase performance in ppc64. Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}: CS1 maint: multiple names: authors list (link) ^ ruby/NEWS at v2_2_0 · ruby/ruby · GitHub. GitHub. Archived from the original on 1 January 2015. Retrieved 2 May 2015. ^ Ruby/NEWS at v.2_3_0 - ruby/ruby. GitHub. Archived from the original on 1 March 2017. Retrieved 25 December 2015. ^ Ruby 2.3.0 changes and features. Running with Ruby. dev.mensfeld.pl. 14 November 2015. Archived from the original on 5 January 2016. Retrieved 27 December 2015. ^ Ruby 2.4.0 Released. www.ruby-lang.org. Archived from the original on 2017-02-17. Retrieved 2016-12-30. ^ a b c d Ruby 3.0.0 Released. Ruby Programming Language. 2020-12-25. Archived from the original on 2020-12-25. Retrieved 2020-12-25. ^ Scheffler, Jonan (10 November 2016). Ruby 3x3: Matz, Koichi, and Tenderlove on the future of Ruby Performance. Ruby. Archived from the original on 10 May 2019. Retrieved 18 May 2019. ^ Ruby 3.1.0 Released. ruby-lang.org. Archived from the original on 25 December 2021. Retrieved 25 Dec 2021. ^ Ruby 3.1.0 Released. Archived from the original on 2021-12-26. Retrieved 2021-12-26. ^ Ruby 3.2.0 Released. Archived from the original on 2022-12-25. Retrieved 2022-12-25. ^ Ruby 3.4.0 Released. 2024-12-25. Retrieved 2025-04-12. ^ NEWS - Documentation for Ruby 3.4. Retrieved 2025-04-12. ^ The Ruby Programming Language. Archived from the original on 18 January 2020. Retrieved 2 May 2015. ^ Google Tech Talks – Ruby 1.9 on YouTube ^ a b c Bill Venners. The Philosophy of Ruby. Archived from the original on 5 July 2019. Retrieved 2 May 2015. ^ Welcome to RUBYWEEKLYNEWS.ORG. 4 July 2017. Archived from the original on 4 July 2017.{{cite web}}: CS1 maint: bot: original URL status unknown (link) ^ The Ruby Language FAQ: How Does Ruby Stack Up Against...?. Archived from the original on 8 May 2015. Retrieved 2 May 2015. ^ Bruce Stewart (29 November 2001). An Interview with the Creator of Ruby. O'Reilly Media. Archived from the original on 6 May 2015. Retrieved 2 May 2015. ^ Bill Venners. Dynamic Productivity with Ruby. Archived from the original on 5 September 2015. Retrieved 2 May 2015. ^ Language Workbenches: The Killer-App for Domain Specific Languages?. martinfowler.com. Archived from the original on 2 May 2021. Retrieved 2 May 2015. ^ Ruby – Add class methods at runtime. Archived from the original on 2007-09-22. Retrieved 2007-11-01. ^ Bill Venners. Blocks and Closures in Ruby. Archived from the original on 18 April 2015. Retrieved 2 May 2015. ^ Methods. Official Ruby FAQ. Archived from the original on 2022-06-28. Retrieved 2021-06-20. ^ Ruby Standard Library. ^ [ruby-talk:01120] Re: The value of while... Archived from the original on 2011-07-17. Retrieved 2008-12-06. In Ruby's syntax, statement is just a special case of an expression that cannot appear as an argument (e.g. multiple assignment). ^ [ruby-talk:02460] Re: Precedence question. Archived from the original on 2004-07-22. Retrieved 2008-12-06. statement [...] can not be part of expression unless grouped within parentheses. ^ remove/virtual_module: Born to make your Ruby Code more than 3x faster. Hopefully. GitHub. 21 February 2020. Archived from the original on 1 March 2017. Retrieved 29 August 2016. ^ Peter Cooper (2010-05-18). The Why, What, and How of Rubinius 1.0's Release. Archived from the original on 2010-05-24. Retrieved 2010-05-23. ^ Maya Stodte (February 2000). IBM developerWorks – Ruby: a new language. Archived from the original on August 18, 2000. Retrieved 3 March 2014. ^ Yukihiro Matsumoto (August 2002). lang-ruby-general: Re: question about Ruby initial development. Archived from the original on 3 March 2014. Retrieved 3 March 2014. ^ The Ruby Toolbox. Archived from the original on 2015-04-03. Retrieved 2015-04-04. ^ Stats RubyGems.org your community gem host. rubygems.org. Archived from the original on 10 December 2021. Retrieved 10 December 2021. ^ We retire raa.ruby-lang.org. 2013-08-08. Archived from the original on 2015-12-31. Retrieved 2016-01-03. Black, David; Leo, Joseph (15 March 2019), The Well-Grounded Rubyist (Third ed.), Manning Publications, p. 584, ISBN 978-1617295218 Metz, Sandi (22 August 2018), Practical Object-Oriented Design: An Agile Primer Using Ruby (Second ed.), Addison-Wesley Professional, p. 288, ISBN 978-0-13-445647-8, archived from the original on February 13, 2020, retrieved 13 February 2020 Cooper, Peter (12 July 2016), Beginning Ruby: From Novice to Professional (Third ed.), Apress, p. 492, ISBN 978-1484212790 Carlson, Lucas; Richardson, Leonard (3 April 2015), Ruby Cookbook: Recipes for Object-Oriented Scripting (Second ed.), O'Reilly Media, p. 963, ISBN 978-1449373719 Fulton, Hal; Arko, André (2 March 2015), The Ruby Way: Solutions and Techniques in Ruby Programming (Third ed.), Addison-Wesley Professional, p. 816, ISBN 978-0-321-71463-3, archived from the original on February 13, 2020, retrieved 13 February 2020 Thomas, Dave; Fowler, Chad; Hunt, Andy (7 July 2013), Programming Ruby 1.9 & 2.0: The Pragmatic Programmers' Guide (Fourth ed.), Pragmatic Bookshelf, p. 888, ISBN 978-1937785499 McAnally, Jeremy; Arkin, Assaf (28 March 2009), Ruby in Practice (First ed.), Manning Publications, p. 360, ISBN 978-1933988474 Flanagan, David; Matsumoto, Yukihiro (25 January 2008), The Ruby Programming Language (First ed.), O'Reilly Media, p. 446, ISBN 978-0-596-51617-8 Baird, Kevin (June 8, 2007), Ruby by Example: Concepts and Code (First ed.), No Starch Press, p. 326, ISBN 978-1593271480, archived from the original on January 13, 2020, retrieved 13 February 2020 Fitzgerald, Michael (14 May 2007), Learning Ruby (First ed.), O'Reilly Media, p. 255, ISBN 978-0-596-52986-4 Wikiquote has quotations related to Ruby (programming language). Wikimedia Commons has media related to Ruby programming language. Wikiversity has learning resources about Topic:Ruby Official website Ruby documentation vteRuby programming languageImplementationsActive Ruby MRI; YARV mruby JRuby RubyMotion Discontinued MacRuby IronRuby XRuby HotRuby MagLev Rubinius IDE Aptana Studio Komodo IDE RubyMine Applications Capistrano Hackety Hack Interactive Ruby Shell Pry Rake Redmine RSpec RubyGems RVM Chef Puppet Vagrant Homebrew CocoaPods Libraries and frameworks Adhearsion eRuby (RHTML) Merb Padrino RubyCocoa Ruby on Rails Shoes Sinatra QtRuby Server software mod_ruby Mongrel Phusion Passenger (mod_rails/mod_rack) Rack WEBrick People Yukihiro Matsumoto David Heinemeier Hansson why the lucky stiff Dave Thomas Other Document format why's (poignant) Guide to Ruby Ruby Central RubyKaigi RubyForge Ruby License Category Commons vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteFree and open-source softwareGeneral Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Softwarepackages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category vteInternational Organization for Standardization (ISO) standardsList of ISO standards – ISO romanizations – IEC standards1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40500 42010 45001 50001 55000 56000 80000 Category Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRef",
    "paradigm": "Multi-paradigm : functional , imperative , object-oriented , reflective",
    "first_appeared": "1995 ; 30 years ago ( 1995 )",
    "stable_release": "3.4.4",
    "typing_discipline": "Duck , dynamic , strong",
    "influenced_by": "Ada , Basic , C++ , CLU , Dylan , Eiffel , Lisp , Lua , Perl , Python , Smalltalk",
    "influenced": "Clojure , CoffeeScript , Crystal , D , Elixir , Groovy , Julia , Mirah , Nu , Ring , Rust , Swift",
    "stable_release_date": "2025-05-14T00:00:00Z"
  },
  {
    "title": "TypeScript",
    "url": "https://en.wikipedia.org/wiki/TypeScript",
    "history": "TypeScript was released to the public in October 2012, with version 0.8, after two years of internal development at Microsoft. Soon after the initial public release, Miguel de Icaza praised the language itself, but criticized the lack of mature IDE support apart from Microsoft Visual Studio, which was not available on Linux and macOS at the time. As of April 2021 there is support in other IDEs and text editors, including Emacs, Vim, WebStorm, Atom and Microsoft's own Visual Studio Code. TypeScript 0.9, released in 2013, added support for generics. TypeScript 1.0 was released at Microsoft's Build developer conference in 2014. Visual Studio 2013 Update 2 provided built-in support for TypeScript. Further improvement were made in July 2014, when the development team announced a new TypeScript compiler, asserted to have a five-fold performance increase. Simultaneously, the source code, which was initially hosted on CodePlex, was moved to GitHub. On 22 September 2016, TypeScript 2.0 was released, introducing several features, including the ability for programmers to optionally enforce null safety, to mitigate what's sometimes referred to as the billion-dollar mistake. TypeScript 3.0 was released on 30 July 2018, bringing many language additions like tuples in rest parameters and spread expressions, rest parameters with tuple types, generic rest parameters and so on. TypeScript 4.0 was released on 20 August 2020. While 4.0 did not introduce any breaking changes, it added language features such as Custom JSX Factories and Variadic Tuple Types. TypeScript 5.0 was released on 16 March 2023 and included support for decorators. On March 11, 2025 Anders Hejlsberg announced on the TypeScript blog that the team is working on a Go port of the TypeScript compiler to be released as TypeScript version 7.0 later this year. It is expected to feature a 10x speedup.",
    "design": "TypeScript originated from the shortcomings of JavaScript for the development of large-scale applications both at Microsoft and among their external customers. Challenges with dealing with complex JavaScript code led to demand for custom tooling to ease developing of components in the language. Developers sought a solution that would not break compatibility with the ECMAScript standard and its ecosystem, so a compiler was developed to transform a superset of JavaScript with type annotations and classes (TypeScript files) back into vanilla ECMAScript 5 code. TypeScript classes were based on the then-proposed ECMAScript 6 class specification to make writing prototypal inheritance less verbose and error-prone, and type annotations enabled IntelliSense and improved tooling.",
    "features": "TypeScript adds the following syntax extensions to JavaScript: Type annotations and compile-time type checking Type inference Interfaces Enumerated types Generics Namespaces Tuples Explicit Resource Management Syntactically, TypeScript is very similar to JScript .NET, another Microsoft implementation of the ECMA-262 language standard that added support for static typing and classical object-oriented language features such as classes, inheritance, interfaces, and namespaces. Other inspirations include Java and C#.",
    "type_annotations": "TypeScript provides static typing through type annotations to enable type checking at compile time. function add(left: number, right: number): number { return left + right; } Primitive types are annotated using all-lowercase types, such as number, boolean, bigint, and string. These types are distinct from their boxed counterparts (Number, Boolean, etc), which cannot have operations performed from values directly (a Number and number cannot be added). There are additionally undefined and null types for their respective values. All other non-primitive types are annotated using their class name, such as Error. Arrays can be written in two different ways which are both syntactically the same: the generic-based syntax Array<T> and a shorthand with T[]. Additional built-in data types are tuples, unions, never and any: An array with predefined data types at each index is a tuple, represented as [type1, type2, ..., typeN]. A variable that can hold more than one type of data is a union, represented using the logical OR | symbol (string | number). The never type is used when a given type should be impossible to create, which is useful for filtering mapped types. A value of type any supports the same operations as a value in JavaScript and minimal static type checking is performed, which makes it suitable for weakly or dynamically-typed structures. This is generally discouraged practice and should be avoided when possible. Type annotations can be exported to a separate declarations file to make type information available for TypeScript scripts using types already compiled into JavaScript. Annotations can be declared for an existing JavaScript library, as has been done for Node.js and jQuery. The TypeScript compiler makes use of type inference when types are not given. For example, the add method in the code above would be inferred as returning a number even if no return type annotation had been provided. This is based on the static types of left and right being numbers, and the compiler's knowledge that the result of adding two numbers is always a number. If no type can be inferred because of lack of declarations (such as in a JavaScript module without types), then it defaults to the dynamic any type. Additional module types can be provided using a .d.ts declaration file using the declare module moduleName syntax.",
    "declaration_files": "When a TypeScript script gets compiled, there is an option to generate a declaration file (with the extension .d.ts) that functions as an interface to the components in the compiled JavaScript. In the process, the compiler strips away all function and method bodies and preserves only the signatures of the types that are exported. The resulting declaration file can then be used to describe the exported virtual TypeScript types of a JavaScript library or module when a third-party developer consumes it from TypeScript. The concept of declaration files is analogous to the concept of header files found in C/C++. declare namespace Arithmetics { add(left: number, right: number): number; subtract(left: number, right: number): number; multiply(left: number, right: number): number; divide(left: number, right: number): number; } Type declaration files can be written by hand for existing JavaScript libraries, as has been done for jQuery and Node.js. Large collections of declaration files for popular JavaScript libraries are hosted on GitHub in DefinitelyTyped.",
    "generics": "Main article: Generic programming TypeScript supports generic programming using a syntax similar to Java. The following is an example of the identity function. function id<T>(x: T): T { return x; }",
    "classes": "TypeScript uses the same annotation style for class methods and fields as for functions and variables respectively. Compared with vanilla JavaScript classes, a TypeScript class can also implement an interface through the implements keyword, use generic parameters similarly to Java, and specify public and private fields. class Person { public name: string; private age: number; private salary: number; constructor(name: string, age: number, salary: number) { this.name = name; this.age = age; this.salary = salary; } toString(): string { return `${this.name} (${this.age}) (${this.salary})`; } }",
    "union_types": "This section is an excerpt from Union type § TypeScript.[edit] Union types are supported in TypeScript. The values are implicitly tagged with a type by the language, and may be retrieved using a typeof call for primitive values and an instanceof comparison for complex data types. Types with overlapping usage (e.g. a slice method exists on both strings and arrays, the plus operator works on both strings and numbers) don't need additional narrowing to use these features. function successor(n: number | bigint): number | bigint { // types that support the same operations don't need narrowing return ++n; } function dependsOnParameter(v: string | Array<string> | number) { // distinct types need narrowing if (v instanceof Array) { // do something } else if (typeof(v) === string) { // do something else } else { // has to be a number } }",
    "enumerated_types": "This section is an excerpt from Enumerated type § TypeScript.[edit] TypeScript adds an 'enum' data type to JavaScript. enum Cardsuit {Clubs, Diamonds, Hearts, Spades}; var c: Cardsuit = Cardsuit.Diamonds; By default, enums number members starting at 0; this can be overridden by setting the value of the first: enum Cardsuit {Clubs = 1, Diamonds, Hearts, Spades}; var c: Cardsuit = Cardsuit.Diamonds; All the values can be set: enum Cardsuit {Clubs = 1, Diamonds = 2, Hearts = 4, Spades = 8}; var c: Cardsuit = Cardsuit.Diamonds; TypeScript supports mapping the numeric value to its name. For example, this finds the name of the value 2: enum Cardsuit {Clubs = 1, Diamonds, Hearts, Spades}; var suitName: string = Cardsuit; alert(suitName);",
    "modules_and_namespaces": "TypeScript distinguishes between modules and namespaces. Both features in TypeScript support encapsulation of classes, interfaces, functions and variables into containers. Namespaces (formerly internal modules) use JavaScript immediately-invoked function expressions to encapsulate code, whereas modules (formerly external modules) use existing JavaScript library patterns (CommonJS or ES Modules).",
    "compatibility_with_javascript": "Main article: JavaScript As TypeScript is simply a superset of JavaScript, existing JavaScript can be quickly adapted to TypeScript and TypeScript program can seamlessly consume JavaScript. The compiler can target all ECMAScript versions 5 and above, transpiling modern features like classes and arrow functions to their older counterparts. With TypeScript, it is possible to use existing JavaScript code, incorporate popular JavaScript libraries, and call TypeScript-generated code from other JavaScript. Type declarations for these libraries are usually provided with the source code but can be declared or installed separately if needed.",
    "compiler": "The TypeScript compiler, named tsc, is written in TypeScript. As a result, it can be compiled into regular JavaScript and can then be executed in any JavaScript engine (e.g. a browser). The compiler package comes bundled with a script host that can execute the compiler. It is also available as a Node.js package that uses Node.js as a host. The compiler can target a particular edition of ECMAScript (such as ES5 for legacy browser compatibility), but by default compiles for the latest standards.",
    "ide_and_editor_support": "Microsoft provides a plug-in for Visual Studio 2012 and WebMatrix, full integrated support in Visual Studio 2013, Visual Studio 2015, and basic text editor support for Emacs and Vim. Visual Studio Code supports TypeScript in addition to several other languages, and offers features like debugging and intelligent code completion. alm.tools is an open source cloud IDE for TypeScript built using TypeScript, ReactJS and TypeStyle. JetBrains supports TypeScript with code completion, refactoring and debugging in its IDEs built on IntelliJ platform, such as PhpStorm 6, WebStorm 6, and IntelliJ IDEA, as well as their Visual Studio Add-in and extension, ReSharper 8.1. Atom has a TypeScript plugin with support for code completion, navigation, formatting, and fast compilation. The online Cloud9 IDE and Codenvy support TypeScript. A plugin is available for the NetBeans IDE. A plugin is available for the Eclipse IDE (version Kepler) TypEcs is available for the Eclipse IDE. The Cross Platform Cloud IDE Codeanywhere supports TypeScript. Webclipse An Eclipse plugin designed to develop TypeScript and Angular 2. Angular IDE A standalone IDE available via npm to develop TypeScript and Angular 2 applications, with integrated terminal support. Tide – TypeScript Interactive Development Environment for Emacs.",
    "integration_with_build_automation_tools": "Main article: Build automation Using plug-ins, TypeScript can be integrated with build automation tools, including Grunt (grunt-ts), Apache Maven (TypeScript Maven Plugin), Gulp (gulp-typescript) and Gradle (TypeScript Gradle Plugin).",
    "linting_tools": "TSLint scans TypeScript code for conformance to a set of standards and guidelines. ESLint, a standard JavaScript linter, also provided some support for TypeScript via community plugins. However, ESLint's inability to leverage TypeScript's language services precluded certain forms of semantic linting and program-wide analysis. In early 2019, the TSLint team announced the linter's deprecation in favor of typescript-eslint, a joint effort of the TSLint, ESLint and TypeScript teams to consolidate linting under the ESLint umbrella for improved performance, community unity and developer accessibility.",
    "release_history": "Legend:Old version, not maintainedOld version, still maintainedLatest versionLatest preview versionFuture version Version number Release date Significant changes Old version, not maintained: 0.8 1 October 2012 (2012-10-01) Old version, not maintained: 0.9 18 June 2013 (2013-06-18) Old version, not maintained: 1.0 12 April 2014 (2014-04-12) Old version, not maintained: 1.1 6 October 2014 (2014-10-06) performance improvements Old version, not maintained: 1.3 12 November 2014 (2014-11-12) protected modifier, tuple types Old version, not maintained: 1.4 20 January 2015 (2015-01-20) union types, let and const declarations, template strings, type guards, type aliases Old version, not maintained: 1.5 20 July 2015 (2015-07-20) ES6 modules, namespace keyword, for..of support, decorators Old version, not maintained: 1.6 16 September 2015 (2015-09-16) JSX support, intersection types, local type declarations, abstract classes and methods, user-defined type guard functions Old version, not maintained: 1.7 30 November 2015 (2015-11-30) async and await support, Old version, not maintained: 1.8 22 February 2016 (2016-02-22) constraints generics, control flow analysis errors, string literal types, allowJs Old version, not maintained: 2.0 22 September 2016 (2016-09-22) null- and undefined-aware types, control flow based type analysis, discriminated union types, never type, readonly keyword, type of this for functions Old version, not maintained: 2.1 8 November 2016 (2016-11-08) keyof and lookup types, mapped types, object spread and rest, Old version, not maintained: 2.2 22 February 2017 (2017-02-22) mix-in classes, object type, Old version, not maintained: 2.3 27 April 2017 (2017-04-27) async iteration, generic parameter defaults, strict option Old version, not maintained: 2.4 27 June 2017 (2017-06-27) dynamic import expressions, string enums, improved inference for generics, strict contravariance for callback parameters Old version, not maintained: 2.5 31 August 2017 (2017-08-31) optional catch clause variables Old version, not maintained: 2.6 31 October 2017 (2017-10-31) strict function types Old version, not maintained: 2.7 31 January 2018 (2018-01-31) constant-named properties, fixed-length tuples Old version, not maintained: 2.8 27 March 2018 (2018-03-27) conditional types, improved keyof with intersection types Old version, not maintained: 2.9 14 May 2018 (2018-05-14) support for symbols and numeric literals in keyof and mapped object types Old version, not maintained: 3.0 30 July 2018 (2018-07-30) project references, extracting and spreading parameter lists with tuples Old version, not maintained: 3.1 27 September 2018 (2018-09-27) mappable tuple and array types Old version, not maintained: 3.2 30 November 2018 (2018-11-30) stricter checking for bind, call, and apply Old version, not maintained: 3.3 31 January 2019 (2019-01-31) relaxed rules on methods of union types, incremental builds for composite projects Old version, not maintained: 3.4 29 March 2019 (2019-03-29) faster incremental builds, type inference from generic functions, readonly modifier for arrays, const assertions, type-checking global this Old version, not maintained: 3.5 29 May 2019 (2019-05-29) faster incremental builds, omit helper type, improved excess property checks in union types, smarter union type checking Old version, not maintained: 3.6 28 August 2019 (2019-08-28) Stricter generators, more accurate array spread, better Unicode support for identifiers Old version, not maintained: 3.7 5 November 2019 (2019-11-05) Optional chaining, nullish coalescing Old version, not maintained: 3.8 20 February 2020 (2020-02-20) Type-only imports and exports, ECMAScript private fields, top-level await Old version, not maintained: 3.9 12 May 2020 (2020-05-12) Improvements in inference, speed improvements Old version, not maintained: 4.0 20 August 2020 (2020-08-20) Variadic tuple types, labeled tuple elements Old version, not maintained: 4.1 19 November 2020 (2020-11-19) Template literal types, key remapping in mapped types, recursive conditional types Old version, not maintained: 4.2 25 February 2021 (2021-02-25) Smarter type alias preservation, leading/middle rest elements in tuple types, stricter checks for the in operator, abstract construct signatures Old version, not maintained: 4.3 26 May 2021 (2021-05-26) Separate write types on properties, override and the --noImplicitOverride flag, template string type improvements Old version, not maintained: 4.4 26 August 2021 (2021-08-26) Control flow analysis of aliased conditions and discriminants, symbol and template string pattern index signatures Old version, not maintained: 4.5 17 November 2021 (2021-11-17) Type and promise improvements, supporting lib from node_modules, template string types as discriminants, and es2022 module Old version, not maintained: 4.6 28 February 2022 (2022-02-28) Type inference and checks improvements, support for ES2022 target, better ECMAScript handling Old version, not maintained: 4.7 24 May 2022 (2022-05-24) Support for ES modules, instantiation expressions, variance annotations for type parameters, better control-flow checks and type check improvements Old version, not maintained: 4.8 25 August 2022 (2022-08-25) Intersection and union types improvements, better type inference Old version, not maintained: 4.9 15 November 2022 (2022-11-15) satisfies operator, auto-accessors in classes (proposal), improvements in type narrowing and checks Old version, not maintained: 5.0 16 March 2023 (2023-03-16) ES decorators (proposal), type inference improvements, bundler module resolution mode, speed and size optimizations Old version, not maintained: 5.1 1 June 2023 (2023-06-01) Easier implicit returns for undefined and unrelated types for getters and setters Old version, not maintained: 5.2 24 August 2023 (2023-08-24) using declarations and explicit resource management, decorator metadata and named and anonymous tuple elements Old version, not maintained: 5.3 20 November 2023 (2023-11-20) Improved type narrowing, correctness checks and performance optimizations Old version, not maintained: 5.4 6 March 2024 Object.groupBy and Map.groupBy support Old version, not maintained: 5.5 20 June 2024 Inferred Type Predicates, Regular Expression Syntax Checking, and Type Imports in JSDoc Old version, not maintained: 5.6 9 September 2024 Advanced type inference, variadic tuple enhancements, partial module declarations. Old version, not maintained: 5.7 22 November 2024 Latest version: 5.8 28 February 2025 Latest preview version: 5.9 2025 Future version: 6.0 Introduce some deprecations and breaking changes to align with the upcoming native codebase. Future version: 7.0 2025 Rewrite in Go with faster performance.",
    "see_also": "Free and open-source software portal Dart Kotlin JS++ PureScript",
    "citations": "^ TypeScript. CodePlex. Archived from the original on 3 April 2015. Retrieved 26 April 2015. ^ Release v5.8.2. ^ Type Compatibility. TypeScript. Archived from the original on 12 March 2018. Retrieved 21 March 2018. ^ The Early History of F# (PDF). Archived (PDF) from the original on 9 August 2024. Retrieved 5 February 2024. TypeScript was directly influenced by F#: one of the originators of TypeScript was Luke Hoban, who began TypeScript (then called Strada) immediately after working on F# 2.0. Recently he noted the influence of F# on early parts of the TypeScript design [Hoban 2017]. ^ Nelson, Gary (28 April 2020). How ActionScript foreshadowed TypeScript. Medium. Archived from the original on 9 August 2024. Retrieved 9 July 2022. ^ Bright, Peter (3 October 2012). Microsoft TypeScript: the JavaScript we need, or a solution looking for a problem?. Ars Technica. Condé Nast. Archived from the original on 9 October 2018. Retrieved 26 April 2015. ^ TypeScript Programming with Visual Studio Code. code.visualstudio.com. Archived from the original on 22 September 2022. Retrieved 12 February 2019. ^ borisyankov/DefinitelyTyped. GitHub. Archived from the original on 1 November 2015. Retrieved 26 April 2015. ^ Foley, Mary Jo (1 October 2012). Microsoft takes the wraps off TypeScript, a superset of JavaScript. ZDNet. CBS Interactive. Archived from the original on 13 November 2014. Retrieved 26 April 2015. ^ Somasegar, S. (1 October 2012). TypeScript: JavaScript Development at Application Scale. Somasegar's blog. Microsoft. Archived from the original on 26 September 2017. Retrieved 26 April 2015. ^ Baxter-Reynolds, Matt (1 October 2012). Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript?. ZDNet. Archived from the original on 3 August 2014. Retrieved 26 April 2015. ^ Jackson, Joab (1 October 2012). Microsoft Augments Javascript for Large-scale Development. CIO. IDG Enterprise. Archived from the original on 17 December 2013. Retrieved 26 April 2015. ^ Microsoft augments JavaScript for large-scale development. InfoWorld. IDG. 1 October 2012. Archived from the original on 31 May 2013. Retrieved 26 April 2015. ^ Turner, Jonathan (2 April 2014). Announcing TypeScript 1.0. TypeScript Language team blog. Microsoft. Archived from the original on 5 September 2015. Retrieved 20 October 2021. ^ Miguel de Icaza (1 October 2012). TypeScript: First Impressions. Archived from the original on 24 February 2019. Retrieved 12 October 2012. But TypeScript only delivers half of the value in using a strongly typed language to Unix developers: strong typing. Intellisense, code completion and refactoring are tools that are only available to Visual Studio Professional users on Windows. There is no Eclipse, MonoDevelop or Emacs support for any of the language features ^ Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript?. ZDNet. 1 October 2012. Archived from the original on 3 August 2014. Retrieved 12 October 2012. And I think this is a pretty big misstep. If you're building web apps that run on anything other than Windows, you're likely using a Mac and most likely not using Visual Studio. You need the Visual Studio plug-in to get the IntelliSense. All you get without Visual Studio is the strong-typing. You don't get the productivity benefits you get from IntelliSense.. ^ TypeStrong: The only TypeScript package you will ever need. GitHub. Archived from the original on 19 December 2018. Retrieved 21 July 2016. ^ Hillar, Gastón (14 May 2013). Working with TypeScript in Visual Studio 2012. Dr. Dobb's Journal. Archived from the original on 29 September 2018. Retrieved 26 April 2015. ^ TypeScript 0.9 arrives with new compiler, support for generics. The Register. 18 June 2013. Archived from the original on 11 March 2018. Retrieved 26 April 2015. ^ Hejlsberg, Anders (2 April 2014). TypeScript. Channel 9. Microsoft. Archived from the original on 25 May 2015. Retrieved 26 April 2015. ^ Jackson, Joab (25 February 2014). Microsoft TypeScript graduates to Visual Studio. PC World. IDG. Archived from the original on 11 March 2016. Retrieved 26 April 2015. ^ Turner, Jonathan (21 July 2014). New Compiler and Moving to GitHub. TypeScript Language team blog. Microsoft. Archived from the original on 22 July 2014. Retrieved 26 April 2015. ^ Bright, Peter (22 September 2016). TypeScript, Microsoft's JavaScript for big applications, reaches version 2.0. Ars Technica. Condé Nast. Archived from the original on 21 December 2018. Retrieved 22 September 2016. ^ Announcing TypeScript 3.0. 30 July 2018. Archived from the original on 30 May 2020. Retrieved 16 March 2020. ^ TypeScript 3.0. 30 July 2018. Archived from the original on 6 June 2020. Retrieved 16 March 2020. ^ a b Announcing TypeScript 4.0. TypeScript. 20 August 2020. Archived from the original on 9 August 2024. Retrieved 30 October 2020. ^ Documentation – TypeScript 5.0. www.typescriptlang.org. Archived from the original on 9 August 2024. Retrieved 18 May 2023. ^ Hejlsberg, Anders (11 March 2025). A 10x Faster TypeScript. TypeScript. Retrieved 11 March 2025. ^ Anders Hejlsberg (5 October 2012). What is TypeScript and why with Anders Hejlsberg. www.hanselminutes.com. Archived from the original on 27 December 2018. Retrieved 15 January 2014. ^ S. Somasegar (1 October 2012). TypeScript: JavaScript Development at Application Scale. msdn.com. Archived from the original on 22 April 2015. Retrieved 27 November 2013. ^ Documentation – TypeScript 5.2. www.typescriptlang.org. Archived from the original on 9 August 2024. Retrieved 9 November 2023. ^ TypeScript Language Specification p.24 (PDF). Archived from the original (PDF) on 17 November 2013. ^ TypeScript: Documentation – Everyday Types. www.typescriptlang.org/. Archived from the original on 9 August 2024. Retrieved 30 March 2021. ^ Turner, Jonathan (18 June 2013). Announcing TypeScript 0.9. TypeScript Language team blog. Microsoft. Archived from the original on 26 November 2013. Retrieved 18 June 2013. ^ Generics in Typescript. Microsoft. Archived from the original on 5 April 2020. Retrieved 8 April 2020. ^ Handbook - Unions and Intersection Types. www.typescriptlang.org. Retrieved 30 November 2020. ^ Sönke Sothmann (31 January 2014). An introduction to TypeScript's module system. blog.oio.de. Archived from the original on 1 February 2014. Retrieved 21 February 2014. ^ Welcome to TypeScript. typescriptlang.org. Microsoft. Archived from the original on 10 March 2018. Retrieved 26 April 2015. ^ Olivier Bloch (1 October 2012). Sublime Text, Vi, Emacs: TypeScript enabled!. Microsoft. Archived from the original on 29 October 2012. Retrieved 28 October 2012. ^ TypeScript support in WebStorm 6. JetBrains. 27 February 2013. Archived from the original on 2 June 2016. Retrieved 20 April 2013. ^ TypeScript support in ReSharper 8.1. JetBrains. 28 October 2013. Archived from the original on 2 February 2014. Retrieved 21 January 2014. ^ ReSharper: The Visual Studio Extension for .NET Developers by JetBrains. JetBrains. ^ atom-typescript. Atom. Archived from the original on 4 October 2016. Retrieved 9 January 2020. ^ TypeStrong/grunt-ts. GitHub. Archived from the original on 16 April 2020. Retrieved 26 April 2015. ^ ppedregal/typescript-maven-plugin. GitHub. Archived from the original on 11 June 2018. Retrieved 26 April 2015. ^ ivogabe/gulp-typescript. GitHub. Archived from the original on 11 June 2018. Retrieved 14 July 2017. ^ sothmann/typescript-gradle-plugin. GitHub. Archived from the original on 11 June 2018. Retrieved 26 April 2015. ^ TSLint. palantir.github.io. Archived from the original on 21 December 2022. Retrieved 11 February 2019. ^ Palantir (19 February 2019). TSLint in 2019. Medium. Retrieved 24 April 2019. ^ TSLint Deprecated to Focus Support on typescript-eslint. InfoQ. Archived from the original on 9 August 2024. Retrieved 24 April 2019.",
    "sources": "Webclipse : Eclipse Plugin Archived 16 December 2016 at the Wayback Machine Genuitec. Retrieved 9 November 2016. Angular IDE by Webclipse : Standalone IDE Archived 10 November 2016 at the Wayback Machine Genuitec. Retrieved 9 November 2016.",
    "external_links": "TypeScript project at GitHub vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteJavaScriptCode analysis ESLint JSHint JSLint Supersets JS++ TypeScript ArkTS Transpilers AtScript Babel ClojureScript CoffeeScript Dart Elm Emscripten Google Closure Compiler Google Web Toolkit Haxe LiveScript Morfik Nim Opa PureScript Reason WebSharper Concepts JavaScript library JavaScript syntax Debuggers Chrome DevTools Firefox Inspector Komodo IDE Microsoft Edge DevTools Opera DevTools Safari Web Inspector Doc generators JSDoc Editors (comparison) Ace Cloud9 IDE Atom CodeMirror Brackets Light Table PhpStorm Orion Visual Studio Visual Studio Express Visual Studio Code Visual Studio Team Services Vim Engines List of ECMAScript engines Frameworks Comparison of JavaScript frameworks List of JavaScript libraries Related technologies Ajax AssemblyScript asm.js Cascading Style Sheets Document Object Model HTML HTML5 JSON WebAssembly WebAuthn Package managers npm pnpm yarn Module bundlers Webpack Vite esbuild Server-side Active Server Pages Bun CommonJS Deno JSGI Node.js Unit testing frameworks (list) Jasmine Mocha QUnit People Douglas Crockford Ryan Dahl Brendan Eich John Resig Jesse James Garrett vteMicrosoft APIs and frameworksGraphics and UI Desktop Window Manager Direct2D Direct3D D3D (extensions) GDI / GDI+ WPF Silverlight WinUI Windows Color System Windows Image Acquisition Windows Imaging Component DirectX Graphics Infrastructure (DXGI) Windows Advanced Rasterization Platform WinG Audio DirectMusic DirectSound XACT Speech API XAudio2 Multimedia DirectX Media Objects Video Acceleration Xinput DirectInput DirectShow Managed DirectX Media Foundation XNA Windows Media Video for Windows Web MSHTML JScript VBScript BHO XDR SideBar Gadgets TypeScript Data access Data Access Components (MDAC) ADO ADO.NET ODBC OLE DB Extensible Storage Engine Entity Framework Sync Framework Access Database Engine MSXML OPC Networking Winsock LSP Winsock Kernel Filtering Platform NDIS Windows Rally BITS P2P API MSMQ DirectPlay Communication Messaging API Telephony API WCF Administration andmanagement Win32 console Windows Script Host WMI (extensions) PowerShell Task Scheduler Offline Files Shadow Copy Windows Installer Error Reporting Event Log Common Log File System Component model COM COM+ ActiveX Distributed Component Object Model .NET Framework Libraries Framework Class Library Microsoft Foundation Classes (MFC) Active Template Library (ATL) Windows Template Library (WTL) Device drivers WDM WDF KMDF UMDF WDDM NDIS UAA VxD Security Crypto API CAPICOM Windows CardSpace Data Protection API Security Support Provider Interface (SSPI) .NET ASP.NET ADO.NET Remoting Silverlight TPL WCF WCS WPF WF Software factories Enterprise Library CCF IPC MSRPC Dynamic Data Exchange (DDE) Remoting WCF Accessibility Active Accessibility UI Automation Text and multilingualsupport DirectWrite Text Services Framework Text Object Model Input method editor Language Interface Pack Multilingual User Interface Uniscribe vteMicrosoft free and open-source software (FOSS)Overview Microsoft and open source Shared Source Initiative SoftwareApplications 3D Movie Maker Atom Conference XP Family.Show File Manager Open Live Writer Microsoft PowerToys Terminal Windows Calculator Windows Console Windows Package Manager WorldWide Telescope XML Notepad Video games Allegiance Programminglanguages Bosque C# Dafny F# F* GW-BASIC IronPython IronRuby Lean P Power Fx PowerShell Project Verona Q# Small Basic Online TypeScript Visual Basic Frameworks,development tools .NET .NET Framework .NET Gadgeteer .NET MAUI .NET Micro Framework AirSim ASP.NET ASP.NET AJAX ASP.NET Core ASP.NET MVC ASP.NET Razor ASP.NET Web Forms Avalonia Babylon.js BitFunnel Blazor C++/WinRT CCF ChakraCore CLR Profiler Dapr DeepSpeed DiskSpd Dryad Dynamic Language Runtime eBPF on Windows Electron Entity Framework Fluent Design System Fluid Framework Infer.NET LightGBM Managed Extensibility Framework Microsoft Automatic Graph Layout Microsoft C++ Standard Library Microsoft Cognitive Toolkit Microsoft Design Language Microsoft Detours Microsoft Enterprise Library Microsoft SEAL mimalloc Mixed Reality Toolkit ML.NET mod_mono Mono MonoDevelop MSBuild MsQuic Neural Network Intelligence npm NuGet OneFuzz Open Management Infrastructure Open Neural Network Exchange Open Service Mesh Open XML SDK Orleans Playwright ProcDump ProcMon Python Tools for Visual Studio R Tools for Visual Studio RecursiveExtractor Roslyn Sandcastle SignalR StyleCop SVNBridge T2 Temporal Prover Text Template Transformation Toolkit TLA+ Toolbox U-Prove vcpkg Virtual File System for Git Voldemort VoTT Vowpal Wabbit Windows App SDK Windows Communication Foundation Windows Driver Frameworks KMDF UMDF Windows Forms Windows Presentation Foundation Windows Template Library Windows UI Library WinJS WinObjC WiX XDP for Windows XSP xUnit.net Z3 Theorem Prover Operating systems MS-DOS (v1.25, v2.0 & v4.0) Barrelfish SONiC Azure Linux Other ChronoZoom Extensible Storage Engine FlexWiki FourQ Gollum Project Mu ReactiveX SILK TLAPS TPM 2.0 Reference Implementation WikiBhasha Licenses Microsoft Public License Microsoft Reciprocal License Forges CodePlex GitHub Related .NET Foundation F# Software Foundation Microsoft Open Specification Promise Open Letter to Hobbyists Open Source Security Foundation Outercurve Foundation Category vteNode.jsPlatform Node.js npm V8 CommonJS Frameworks MEAN MongoDB Express.js AngularJS/Angular MEEN (substituted with Ember.js) Backbone.js Fastify Meteor Sails.js (uses Express.js) NestJS Next.js Nuxt.js Libraries Lodash Underscore.js React.js Vue.js Languages JavaScript CoffeeScript TypeScript WebAssembly AssemblyScript C Rust Authority control databases: National United StatesIsrael",
    "document": "TypeScript was released to the public in October 2012, with version 0.8, after two years of internal development at Microsoft. Soon after the initial public release, Miguel de Icaza praised the language itself, but criticized the lack of mature IDE support apart from Microsoft Visual Studio, which was not available on Linux and macOS at the time. As of April 2021 there is support in other IDEs and text editors, including Emacs, Vim, WebStorm, Atom and Microsoft's own Visual Studio Code. TypeScript 0.9, released in 2013, added support for generics. TypeScript 1.0 was released at Microsoft's Build developer conference in 2014. Visual Studio 2013 Update 2 provided built-in support for TypeScript. Further improvement were made in July 2014, when the development team announced a new TypeScript compiler, asserted to have a five-fold performance increase. Simultaneously, the source code, which was initially hosted on CodePlex, was moved to GitHub. On 22 September 2016, TypeScript 2.0 was released, introducing several features, including the ability for programmers to optionally enforce null safety, to mitigate what's sometimes referred to as the billion-dollar mistake. TypeScript 3.0 was released on 30 July 2018, bringing many language additions like tuples in rest parameters and spread expressions, rest parameters with tuple types, generic rest parameters and so on. TypeScript 4.0 was released on 20 August 2020. While 4.0 did not introduce any breaking changes, it added language features such as Custom JSX Factories and Variadic Tuple Types. TypeScript 5.0 was released on 16 March 2023 and included support for decorators. On March 11, 2025 Anders Hejlsberg announced on the TypeScript blog that the team is working on a Go port of the TypeScript compiler to be released as TypeScript version 7.0 later this year. It is expected to feature a 10x speedup. TypeScript originated from the shortcomings of JavaScript for the development of large-scale applications both at Microsoft and among their external customers. Challenges with dealing with complex JavaScript code led to demand for custom tooling to ease developing of components in the language. Developers sought a solution that would not break compatibility with the ECMAScript standard and its ecosystem, so a compiler was developed to transform a superset of JavaScript with type annotations and classes (TypeScript files) back into vanilla ECMAScript 5 code. TypeScript classes were based on the then-proposed ECMAScript 6 class specification to make writing prototypal inheritance less verbose and error-prone, and type annotations enabled IntelliSense and improved tooling. TypeScript adds the following syntax extensions to JavaScript: Type annotations and compile-time type checking Type inference Interfaces Enumerated types Generics Namespaces Tuples Explicit Resource Management Syntactically, TypeScript is very similar to JScript .NET, another Microsoft implementation of the ECMA-262 language standard that added support for static typing and classical object-oriented language features such as classes, inheritance, interfaces, and namespaces. Other inspirations include Java and C#. TypeScript provides static typing through type annotations to enable type checking at compile time. function add(left: number, right: number): number { return left + right; } Primitive types are annotated using all-lowercase types, such as number, boolean, bigint, and string. These types are distinct from their boxed counterparts (Number, Boolean, etc), which cannot have operations performed from values directly (a Number and number cannot be added). There are additionally undefined and null types for their respective values. All other non-primitive types are annotated using their class name, such as Error. Arrays can be written in two different ways which are both syntactically the same: the generic-based syntax Array<T> and a shorthand with T[]. Additional built-in data types are tuples, unions, never and any: An array with predefined data types at each index is a tuple, represented as [type1, type2, ..., typeN]. A variable that can hold more than one type of data is a union, represented using the logical OR | symbol (string | number). The never type is used when a given type should be impossible to create, which is useful for filtering mapped types. A value of type any supports the same operations as a value in JavaScript and minimal static type checking is performed, which makes it suitable for weakly or dynamically-typed structures. This is generally discouraged practice and should be avoided when possible. Type annotations can be exported to a separate declarations file to make type information available for TypeScript scripts using types already compiled into JavaScript. Annotations can be declared for an existing JavaScript library, as has been done for Node.js and jQuery. The TypeScript compiler makes use of type inference when types are not given. For example, the add method in the code above would be inferred as returning a number even if no return type annotation had been provided. This is based on the static types of left and right being numbers, and the compiler's knowledge that the result of adding two numbers is always a number. If no type can be inferred because of lack of declarations (such as in a JavaScript module without types), then it defaults to the dynamic any type. Additional module types can be provided using a .d.ts declaration file using the declare module moduleName syntax. When a TypeScript script gets compiled, there is an option to generate a declaration file (with the extension .d.ts) that functions as an interface to the components in the compiled JavaScript. In the process, the compiler strips away all function and method bodies and preserves only the signatures of the types that are exported. The resulting declaration file can then be used to describe the exported virtual TypeScript types of a JavaScript library or module when a third-party developer consumes it from TypeScript. The concept of declaration files is analogous to the concept of header files found in C/C++. declare namespace Arithmetics { add(left: number, right: number): number; subtract(left: number, right: number): number; multiply(left: number, right: number): number; divide(left: number, right: number): number; } Type declaration files can be written by hand for existing JavaScript libraries, as has been done for jQuery and Node.js. Large collections of declaration files for popular JavaScript libraries are hosted on GitHub in DefinitelyTyped. Main article: Generic programming TypeScript supports generic programming using a syntax similar to Java. The following is an example of the identity function. function id<T>(x: T): T { return x; } TypeScript uses the same annotation style for class methods and fields as for functions and variables respectively. Compared with vanilla JavaScript classes, a TypeScript class can also implement an interface through the implements keyword, use generic parameters similarly to Java, and specify public and private fields. class Person { public name: string; private age: number; private salary: number; constructor(name: string, age: number, salary: number) { this.name = name; this.age = age; this.salary = salary; } toString(): string { return `${this.name} (${this.age}) (${this.salary})`; } } This section is an excerpt from Union type § TypeScript.[edit] Union types are supported in TypeScript. The values are implicitly tagged with a type by the language, and may be retrieved using a typeof call for primitive values and an instanceof comparison for complex data types. Types with overlapping usage (e.g. a slice method exists on both strings and arrays, the plus operator works on both strings and numbers) don't need additional narrowing to use these features. function successor(n: number | bigint): number | bigint { // types that support the same operations don't need narrowing return ++n; } function dependsOnParameter(v: string | Array<string> | number) { // distinct types need narrowing if (v instanceof Array) { // do something } else if (typeof(v) === string) { // do something else } else { // has to be a number } } This section is an excerpt from Enumerated type § TypeScript.[edit] TypeScript adds an 'enum' data type to JavaScript. enum Cardsuit {Clubs, Diamonds, Hearts, Spades}; var c: Cardsuit = Cardsuit.Diamonds; By default, enums number members starting at 0; this can be overridden by setting the value of the first: enum Cardsuit {Clubs = 1, Diamonds, Hearts, Spades}; var c: Cardsuit = Cardsuit.Diamonds; All the values can be set: enum Cardsuit {Clubs = 1, Diamonds = 2, Hearts = 4, Spades = 8}; var c: Cardsuit = Cardsuit.Diamonds; TypeScript supports mapping the numeric value to its name. For example, this finds the name of the value 2: enum Cardsuit {Clubs = 1, Diamonds, Hearts, Spades}; var suitName: string = Cardsuit; alert(suitName); TypeScript distinguishes between modules and namespaces. Both features in TypeScript support encapsulation of classes, interfaces, functions and variables into containers. Namespaces (formerly internal modules) use JavaScript immediately-invoked function expressions to encapsulate code, whereas modules (formerly external modules) use existing JavaScript library patterns (CommonJS or ES Modules). Main article: JavaScript As TypeScript is simply a superset of JavaScript, existing JavaScript can be quickly adapted to TypeScript and TypeScript program can seamlessly consume JavaScript. The compiler can target all ECMAScript versions 5 and above, transpiling modern features like classes and arrow functions to their older counterparts. With TypeScript, it is possible to use existing JavaScript code, incorporate popular JavaScript libraries, and call TypeScript-generated code from other JavaScript. Type declarations for these libraries are usually provided with the source code but can be declared or installed separately if needed. The TypeScript compiler, named tsc, is written in TypeScript. As a result, it can be compiled into regular JavaScript and can then be executed in any JavaScript engine (e.g. a browser). The compiler package comes bundled with a script host that can execute the compiler. It is also available as a Node.js package that uses Node.js as a host. The compiler can target a particular edition of ECMAScript (such as ES5 for legacy browser compatibility), but by default compiles for the latest standards. Microsoft provides a plug-in for Visual Studio 2012 and WebMatrix, full integrated support in Visual Studio 2013, Visual Studio 2015, and basic text editor support for Emacs and Vim. Visual Studio Code supports TypeScript in addition to several other languages, and offers features like debugging and intelligent code completion. alm.tools is an open source cloud IDE for TypeScript built using TypeScript, ReactJS and TypeStyle. JetBrains supports TypeScript with code completion, refactoring and debugging in its IDEs built on IntelliJ platform, such as PhpStorm 6, WebStorm 6, and IntelliJ IDEA, as well as their Visual Studio Add-in and extension, ReSharper 8.1. Atom has a TypeScript plugin with support for code completion, navigation, formatting, and fast compilation. The online Cloud9 IDE and Codenvy support TypeScript. A plugin is available for the NetBeans IDE. A plugin is available for the Eclipse IDE (version Kepler) TypEcs is available for the Eclipse IDE. The Cross Platform Cloud IDE Codeanywhere supports TypeScript. Webclipse An Eclipse plugin designed to develop TypeScript and Angular 2. Angular IDE A standalone IDE available via npm to develop TypeScript and Angular 2 applications, with integrated terminal support. Tide – TypeScript Interactive Development Environment for Emacs. Main article: Build automation Using plug-ins, TypeScript can be integrated with build automation tools, including Grunt (grunt-ts), Apache Maven (TypeScript Maven Plugin), Gulp (gulp-typescript) and Gradle (TypeScript Gradle Plugin). TSLint scans TypeScript code for conformance to a set of standards and guidelines. ESLint, a standard JavaScript linter, also provided some support for TypeScript via community plugins. However, ESLint's inability to leverage TypeScript's language services precluded certain forms of semantic linting and program-wide analysis. In early 2019, the TSLint team announced the linter's deprecation in favor of typescript-eslint, a joint effort of the TSLint, ESLint and TypeScript teams to consolidate linting under the ESLint umbrella for improved performance, community unity and developer accessibility. Legend:Old version, not maintainedOld version, still maintainedLatest versionLatest preview versionFuture version Version number Release date Significant changes Old version, not maintained: 0.8 1 October 2012 (2012-10-01) Old version, not maintained: 0.9 18 June 2013 (2013-06-18) Old version, not maintained: 1.0 12 April 2014 (2014-04-12) Old version, not maintained: 1.1 6 October 2014 (2014-10-06) performance improvements Old version, not maintained: 1.3 12 November 2014 (2014-11-12) protected modifier, tuple types Old version, not maintained: 1.4 20 January 2015 (2015-01-20) union types, let and const declarations, template strings, type guards, type aliases Old version, not maintained: 1.5 20 July 2015 (2015-07-20) ES6 modules, namespace keyword, for..of support, decorators Old version, not maintained: 1.6 16 September 2015 (2015-09-16) JSX support, intersection types, local type declarations, abstract classes and methods, user-defined type guard functions Old version, not maintained: 1.7 30 November 2015 (2015-11-30) async and await support, Old version, not maintained: 1.8 22 February 2016 (2016-02-22) constraints generics, control flow analysis errors, string literal types, allowJs Old version, not maintained: 2.0 22 September 2016 (2016-09-22) null- and undefined-aware types, control flow based type analysis, discriminated union types, never type, readonly keyword, type of this for functions Old version, not maintained: 2.1 8 November 2016 (2016-11-08) keyof and lookup types, mapped types, object spread and rest, Old version, not maintained: 2.2 22 February 2017 (2017-02-22) mix-in classes, object type, Old version, not maintained: 2.3 27 April 2017 (2017-04-27) async iteration, generic parameter defaults, strict option Old version, not maintained: 2.4 27 June 2017 (2017-06-27) dynamic import expressions, string enums, improved inference for generics, strict contravariance for callback parameters Old version, not maintained: 2.5 31 August 2017 (2017-08-31) optional catch clause variables Old version, not maintained: 2.6 31 October 2017 (2017-10-31) strict function types Old version, not maintained: 2.7 31 January 2018 (2018-01-31) constant-named properties, fixed-length tuples Old version, not maintained: 2.8 27 March 2018 (2018-03-27) conditional types, improved keyof with intersection types Old version, not maintained: 2.9 14 May 2018 (2018-05-14) support for symbols and numeric literals in keyof and mapped object types Old version, not maintained: 3.0 30 July 2018 (2018-07-30) project references, extracting and spreading parameter lists with tuples Old version, not maintained: 3.1 27 September 2018 (2018-09-27) mappable tuple and array types Old version, not maintained: 3.2 30 November 2018 (2018-11-30) stricter checking for bind, call, and apply Old version, not maintained: 3.3 31 January 2019 (2019-01-31) relaxed rules on methods of union types, incremental builds for composite projects Old version, not maintained: 3.4 29 March 2019 (2019-03-29) faster incremental builds, type inference from generic functions, readonly modifier for arrays, const assertions, type-checking global this Old version, not maintained: 3.5 29 May 2019 (2019-05-29) faster incremental builds, omit helper type, improved excess property checks in union types, smarter union type checking Old version, not maintained: 3.6 28 August 2019 (2019-08-28) Stricter generators, more accurate array spread, better Unicode support for identifiers Old version, not maintained: 3.7 5 November 2019 (2019-11-05) Optional chaining, nullish coalescing Old version, not maintained: 3.8 20 February 2020 (2020-02-20) Type-only imports and exports, ECMAScript private fields, top-level await Old version, not maintained: 3.9 12 May 2020 (2020-05-12) Improvements in inference, speed improvements Old version, not maintained: 4.0 20 August 2020 (2020-08-20) Variadic tuple types, labeled tuple elements Old version, not maintained: 4.1 19 November 2020 (2020-11-19) Template literal types, key remapping in mapped types, recursive conditional types Old version, not maintained: 4.2 25 February 2021 (2021-02-25) Smarter type alias preservation, leading/middle rest elements in tuple types, stricter checks for the in operator, abstract construct signatures Old version, not maintained: 4.3 26 May 2021 (2021-05-26) Separate write types on properties, override and the --noImplicitOverride flag, template string type improvements Old version, not maintained: 4.4 26 August 2021 (2021-08-26) Control flow analysis of aliased conditions and discriminants, symbol and template string pattern index signatures Old version, not maintained: 4.5 17 November 2021 (2021-11-17) Type and promise improvements, supporting lib from node_modules, template string types as discriminants, and es2022 module Old version, not maintained: 4.6 28 February 2022 (2022-02-28) Type inference and checks improvements, support for ES2022 target, better ECMAScript handling Old version, not maintained: 4.7 24 May 2022 (2022-05-24) Support for ES modules, instantiation expressions, variance annotations for type parameters, better control-flow checks and type check improvements Old version, not maintained: 4.8 25 August 2022 (2022-08-25) Intersection and union types improvements, better type inference Old version, not maintained: 4.9 15 November 2022 (2022-11-15) satisfies operator, auto-accessors in classes (proposal), improvements in type narrowing and checks Old version, not maintained: 5.0 16 March 2023 (2023-03-16) ES decorators (proposal), type inference improvements, bundler module resolution mode, speed and size optimizations Old version, not maintained: 5.1 1 June 2023 (2023-06-01) Easier implicit returns for undefined and unrelated types for getters and setters Old version, not maintained: 5.2 24 August 2023 (2023-08-24) using declarations and explicit resource management, decorator metadata and named and anonymous tuple elements Old version, not maintained: 5.3 20 November 2023 (2023-11-20) Improved type narrowing, correctness checks and performance optimizations Old version, not maintained: 5.4 6 March 2024 Object.groupBy and Map.groupBy support Old version, not maintained: 5.5 20 June 2024 Inferred Type Predicates, Regular Expression Syntax Checking, and Type Imports in JSDoc Old version, not maintained: 5.6 9 September 2024 Advanced type inference, variadic tuple enhancements, partial module declarations. Old version, not maintained: 5.7 22 November 2024 Latest version: 5.8 28 February 2025 Latest preview version: 5.9 2025 Future version: 6.0 Introduce some deprecations and breaking changes to align with the upcoming native codebase. Future version: 7.0 2025 Rewrite in Go with faster performance. Free and open-source software portal Dart Kotlin JS++ PureScript ^ TypeScript. CodePlex. Archived from the original on 3 April 2015. Retrieved 26 April 2015. ^ Release v5.8.2. ^ Type Compatibility. TypeScript. Archived from the original on 12 March 2018. Retrieved 21 March 2018. ^ The Early History of F# (PDF). Archived (PDF) from the original on 9 August 2024. Retrieved 5 February 2024. TypeScript was directly influenced by F#: one of the originators of TypeScript was Luke Hoban, who began TypeScript (then called Strada) immediately after working on F# 2.0. Recently he noted the influence of F# on early parts of the TypeScript design [Hoban 2017]. ^ Nelson, Gary (28 April 2020). How ActionScript foreshadowed TypeScript. Medium. Archived from the original on 9 August 2024. Retrieved 9 July 2022. ^ Bright, Peter (3 October 2012). Microsoft TypeScript: the JavaScript we need, or a solution looking for a problem?. Ars Technica. Condé Nast. Archived from the original on 9 October 2018. Retrieved 26 April 2015. ^ TypeScript Programming with Visual Studio Code. code.visualstudio.com. Archived from the original on 22 September 2022. Retrieved 12 February 2019. ^ borisyankov/DefinitelyTyped. GitHub. Archived from the original on 1 November 2015. Retrieved 26 April 2015. ^ Foley, Mary Jo (1 October 2012). Microsoft takes the wraps off TypeScript, a superset of JavaScript. ZDNet. CBS Interactive. Archived from the original on 13 November 2014. Retrieved 26 April 2015. ^ Somasegar, S. (1 October 2012). TypeScript: JavaScript Development at Application Scale. Somasegar's blog. Microsoft. Archived from the original on 26 September 2017. Retrieved 26 April 2015. ^ Baxter-Reynolds, Matt (1 October 2012). Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript?. ZDNet. Archived from the original on 3 August 2014. Retrieved 26 April 2015. ^ Jackson, Joab (1 October 2012). Microsoft Augments Javascript for Large-scale Development. CIO. IDG Enterprise. Archived from the original on 17 December 2013. Retrieved 26 April 2015. ^ Microsoft augments JavaScript for large-scale development. InfoWorld. IDG. 1 October 2012. Archived from the original on 31 May 2013. Retrieved 26 April 2015. ^ Turner, Jonathan (2 April 2014). Announcing TypeScript 1.0. TypeScript Language team blog. Microsoft. Archived from the original on 5 September 2015. Retrieved 20 October 2021. ^ Miguel de Icaza (1 October 2012). TypeScript: First Impressions. Archived from the original on 24 February 2019. Retrieved 12 October 2012. But TypeScript only delivers half of the value in using a strongly typed language to Unix developers: strong typing. Intellisense, code completion and refactoring are tools that are only available to Visual Studio Professional users on Windows. There is no Eclipse, MonoDevelop or Emacs support for any of the language features ^ Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript?. ZDNet. 1 October 2012. Archived from the original on 3 August 2014. Retrieved 12 October 2012. And I think this is a pretty big misstep. If you're building web apps that run on anything other than Windows, you're likely using a Mac and most likely not using Visual Studio. You need the Visual Studio plug-in to get the IntelliSense. All you get without Visual Studio is the strong-typing. You don't get the productivity benefits you get from IntelliSense.. ^ TypeStrong: The only TypeScript package you will ever need. GitHub. Archived from the original on 19 December 2018. Retrieved 21 July 2016. ^ Hillar, Gastón (14 May 2013). Working with TypeScript in Visual Studio 2012. Dr. Dobb's Journal. Archived from the original on 29 September 2018. Retrieved 26 April 2015. ^ TypeScript 0.9 arrives with new compiler, support for generics. The Register. 18 June 2013. Archived from the original on 11 March 2018. Retrieved 26 April 2015. ^ Hejlsberg, Anders (2 April 2014). TypeScript. Channel 9. Microsoft. Archived from the original on 25 May 2015. Retrieved 26 April 2015. ^ Jackson, Joab (25 February 2014). Microsoft TypeScript graduates to Visual Studio. PC World. IDG. Archived from the original on 11 March 2016. Retrieved 26 April 2015. ^ Turner, Jonathan (21 July 2014). New Compiler and Moving to GitHub. TypeScript Language team blog. Microsoft. Archived from the original on 22 July 2014. Retrieved 26 April 2015. ^ Bright, Peter (22 September 2016). TypeScript, Microsoft's JavaScript for big applications, reaches version 2.0. Ars Technica. Condé Nast. Archived from the original on 21 December 2018. Retrieved 22 September 2016. ^ Announcing TypeScript 3.0. 30 July 2018. Archived from the original on 30 May 2020. Retrieved 16 March 2020. ^ TypeScript 3.0. 30 July 2018. Archived from the original on 6 June 2020. Retrieved 16 March 2020. ^ a b Announcing TypeScript 4.0. TypeScript. 20 August 2020. Archived from the original on 9 August 2024. Retrieved 30 October 2020. ^ Documentation – TypeScript 5.0. www.typescriptlang.org. Archived from the original on 9 August 2024. Retrieved 18 May 2023. ^ Hejlsberg, Anders (11 March 2025). A 10x Faster TypeScript. TypeScript. Retrieved 11 March 2025. ^ Anders Hejlsberg (5 October 2012). What is TypeScript and why with Anders Hejlsberg. www.hanselminutes.com. Archived from the original on 27 December 2018. Retrieved 15 January 2014. ^ S. Somasegar (1 October 2012). TypeScript: JavaScript Development at Application Scale. msdn.com. Archived from the original on 22 April 2015. Retrieved 27 November 2013. ^ Documentation – TypeScript 5.2. www.typescriptlang.org. Archived from the original on 9 August 2024. Retrieved 9 November 2023. ^ TypeScript Language Specification p.24 (PDF). Archived from the original (PDF) on 17 November 2013. ^ TypeScript: Documentation – Everyday Types. www.typescriptlang.org/. Archived from the original on 9 August 2024. Retrieved 30 March 2021. ^ Turner, Jonathan (18 June 2013). Announcing TypeScript 0.9. TypeScript Language team blog. Microsoft. Archived from the original on 26 November 2013. Retrieved 18 June 2013. ^ Generics in Typescript. Microsoft. Archived from the original on 5 April 2020. Retrieved 8 April 2020. ^ Handbook - Unions and Intersection Types. www.typescriptlang.org. Retrieved 30 November 2020. ^ Sönke Sothmann (31 January 2014). An introduction to TypeScript's module system. blog.oio.de. Archived from the original on 1 February 2014. Retrieved 21 February 2014. ^ Welcome to TypeScript. typescriptlang.org. Microsoft. Archived from the original on 10 March 2018. Retrieved 26 April 2015. ^ Olivier Bloch (1 October 2012). Sublime Text, Vi, Emacs: TypeScript enabled!. Microsoft. Archived from the original on 29 October 2012. Retrieved 28 October 2012. ^ TypeScript support in WebStorm 6. JetBrains. 27 February 2013. Archived from the original on 2 June 2016. Retrieved 20 April 2013. ^ TypeScript support in ReSharper 8.1. JetBrains. 28 October 2013. Archived from the original on 2 February 2014. Retrieved 21 January 2014. ^ ReSharper: The Visual Studio Extension for .NET Developers by JetBrains. JetBrains. ^ atom-typescript. Atom. Archived from the original on 4 October 2016. Retrieved 9 January 2020. ^ TypeStrong/grunt-ts. GitHub. Archived from the original on 16 April 2020. Retrieved 26 April 2015. ^ ppedregal/typescript-maven-plugin. GitHub. Archived from the original on 11 June 2018. Retrieved 26 April 2015. ^ ivogabe/gulp-typescript. GitHub. Archived from the original on 11 June 2018. Retrieved 14 July 2017. ^ sothmann/typescript-gradle-plugin. GitHub. Archived from the original on 11 June 2018. Retrieved 26 April 2015. ^ TSLint. palantir.github.io. Archived from the original on 21 December 2022. Retrieved 11 February 2019. ^ Palantir (19 February 2019). TSLint in 2019. Medium. Retrieved 24 April 2019. ^ TSLint Deprecated to Focus Support on typescript-eslint. InfoQ. Archived from the original on 9 August 2024. Retrieved 24 April 2019. Webclipse : Eclipse Plugin Archived 16 December 2016 at the Wayback Machine Genuitec. Retrieved 9 November 2016. Angular IDE by Webclipse : Standalone IDE Archived 10 November 2016 at the Wayback Machine Genuitec. Retrieved 9 November 2016. TypeScript project at GitHub vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteJavaScriptCode analysis ESLint JSHint JSLint Supersets JS++ TypeScript ArkTS Transpilers AtScript Babel ClojureScript CoffeeScript Dart Elm Emscripten Google Closure Compiler Google Web Toolkit Haxe LiveScript Morfik Nim Opa PureScript Reason WebSharper Concepts JavaScript library JavaScript syntax Debuggers Chrome DevTools Firefox Inspector Komodo IDE Microsoft Edge DevTools Opera DevTools Safari Web Inspector Doc generators JSDoc Editors (comparison) Ace Cloud9 IDE Atom CodeMirror Brackets Light Table PhpStorm Orion Visual Studio Visual Studio Express Visual Studio Code Visual Studio Team Services Vim Engines List of ECMAScript engines Frameworks Comparison of JavaScript frameworks List of JavaScript libraries Related technologies Ajax AssemblyScript asm.js Cascading Style Sheets Document Object Model HTML HTML5 JSON WebAssembly WebAuthn Package managers npm pnpm yarn Module bundlers Webpack Vite esbuild Server-side Active Server Pages Bun CommonJS Deno JSGI Node.js Unit testing frameworks (list) Jasmine Mocha QUnit People Douglas Crockford Ryan Dahl Brendan Eich John Resig Jesse James Garrett vteMicrosoft APIs and frameworksGraphics and UI Desktop Window Manager Direct2D Direct3D D3D (extensions) GDI / GDI+ WPF Silverlight WinUI Windows Color System Windows Image Acquisition Windows Imaging Component DirectX Graphics Infrastructure (DXGI) Windows Advanced Rasterization Platform WinG Audio DirectMusic DirectSound XACT Speech API XAudio2 Multimedia DirectX Media Objects Video Acceleration Xinput DirectInput DirectShow Managed DirectX Media Foundation XNA Windows Media Video for Windows Web MSHTML JScript VBScript BHO XDR SideBar Gadgets TypeScript Data access Data Access Components (MDAC) ADO ADO.NET ODBC OLE DB Extensible Storage Engine Entity Framework Sync Framework Access Database Engine MSXML OPC Networking Winsock LSP Winsock Kernel Filtering Platform NDIS Windows Rally BITS P2P API MSMQ DirectPlay Communication Messaging API Telephony API WCF Administration andmanagement Win32 console Windows Script Host WMI (extensions) PowerShell Task Scheduler Offline Files Shadow Copy Windows Installer Error Reporting Event Log Common Log File System Component model COM COM+ ActiveX Distributed Component Object Model .NET Framework Libraries Framework Class Library Microsoft Foundation Classes (MFC) Active Template Library (ATL) Windows Template Library (WTL) Device drivers WDM WDF KMDF UMDF WDDM NDIS UAA VxD Security Crypto API CAPICOM Windows CardSpace Data Protection API Security Support Provider Interface (SSPI) .NET ASP.NET ADO.NET Remoting Silverlight TPL WCF WCS WPF WF Software factories Enterprise Library CCF IPC MSRPC Dynamic Data Exchange (DDE) Remoting WCF Accessibility Active Accessibility UI Automation Text and multilingualsupport DirectWrite Text Services Framework Text Object Model Input method editor Language Interface Pack Multilingual User Interface Uniscribe vteMicrosoft free and open-source software (FOSS)Overview Microsoft and open source Shared Source Initiative SoftwareApplications 3D Movie Maker Atom Conference XP Family.Show File Manager Open Live Writer Microsoft PowerToys Terminal Windows Calculator Windows Console Windows Package Manager WorldWide Telescope XML Notepad Video games Allegiance Programminglanguages Bosque C# Dafny F# F* GW-BASIC IronPython IronRuby Lean P Power Fx PowerShell Project Verona Q# Small Basic Online TypeScript Visual Basic Frameworks,development tools .NET .NET Framework .NET Gadgeteer .NET MAUI .NET Micro Framework AirSim ASP.NET ASP.NET AJAX ASP.NET Core ASP.NET MVC ASP.NET Razor ASP.NET Web Forms Avalonia Babylon.js BitFunnel Blazor C++/WinRT CCF ChakraCore CLR Profiler Dapr DeepSpeed DiskSpd Dryad Dynamic Language Runtime eBPF on Windows Electron Entity Framework Fluent Design System Fluid Framework Infer.NET LightGBM Managed Extensibility Framework Microsoft Automatic Graph Layout Microsoft C++ Standard Library Microsoft Cognitive Toolkit Microsoft Design Language Microsoft Detours Microsoft Enterprise Library Microsoft SEAL mimalloc Mixed Reality Toolkit ML.NET mod_mono Mono MonoDevelop MSBuild MsQuic Neural Network Intelligence npm NuGet OneFuzz Open Management Infrastructure Open Neural Network Exchange Open Service Mesh Open XML SDK Orleans Playwright ProcDump ProcMon Python Tools for Visual Studio R Tools for Visual Studio RecursiveExtractor Roslyn Sandcastle SignalR StyleCop SVNBridge T2 Temporal Prover Text Template Transformation Toolkit TLA+ Toolbox U-Prove vcpkg Virtual File System for Git Voldemort VoTT Vowpal Wabbit Windows App SDK Windows Communication Foundation Windows Driver Frameworks KMDF UMDF Windows Forms Windows Presentation Foundation Windows Template Library Windows UI Library WinJS WinObjC WiX XDP for Windows XSP xUnit.net Z3 Theorem Prover Operating systems MS-DOS (v1.25, v2.0 & v4.0) Barrelfish SONiC Azure Linux Other ChronoZoom Extensible Storage Engine FlexWiki FourQ Gollum Project Mu ReactiveX SILK TLAPS TPM 2.0 Reference Implementation WikiBhasha Licenses Microsoft Public License Microsoft Reciprocal License Forges CodePlex GitHub Related .NET Foundation F# Software Foundation Microsoft Open Specification Promise Open Letter to Hobbyists Open Source Security Foundation Outercurve Foundation Category vteNode.jsPlatform Node.js npm V8 CommonJS Frameworks MEAN MongoDB Express.js AngularJS/Angular MEEN (substituted with Ember.js) Backbone.js Fastify Meteor Sails.js (uses Express.js) NestJS Next.js Nuxt.js Libraries Lodash Underscore.js React.js Vue.js Languages JavaScript CoffeeScript TypeScript WebAssembly AssemblyScript C Rust Authority control databases: National United StatesIsrael",
    "paradigm": "Multi-paradigm : functional , generic , imperative , object-oriented",
    "first_appeared": "1 October 2012 ; 12 years ago ( 2012-10-01 )",
    "stable_release": "5.8.2",
    "typing_discipline": "Duck , gradual , structural , strong",
    "influenced_by": "C# , F# , Java , JavaScript , ActionScript",
    "influenced": "AtScript , AssemblyScript , ArkTS",
    "stable_release_date": "2025-02-28T00:00:00Z"
  },
  {
    "title": "Apache Groovy",
    "url": "https://en.wikipedia.org/wiki/Apache_Groovy",
    "history": "James Strachan first talked about the development of Groovy on his blog in August 2003. In March 2004, Groovy was submitted to the JCP as JSR 241 and accepted by ballot. Several versions were released between 2004 and 2006. After the Java Community Process (JCP) standardization effort began, the version numbering changed, and a version called 1.0 was released on January 2, 2007. After various betas and release candidates numbered 1.1, on December 7, 2007, Groovy 1.1 Final was released and immediately renumbered as Groovy 1.5 to reflect the many changes made. In 2007, Groovy won the first prize at JAX 2007 innovation award. In 2008, Grails, a Groovy web framework, won the second prize at JAX 2008 innovation award. In November 2008, SpringSource acquired the Groovy and Grails company (G2One). In August 2009 VMware acquired SpringSource. In April 2012, after eight years of inactivity, the Spec Lead changed the status of JSR 241 to dormant. Strachan had left the project silently a year before the Groovy 1.0 release in 2007.[citation needed] In Oct 2016, Strachan stated I still love groovy (jenkins pipelines are so groovy!), java, go, typescript and kotlin. On July 2, 2012, Groovy 2.0 was released, which, among other new features, added static compiling and static type checking. When the Pivotal Software joint venture was spun-off by EMC Corporation (EMC) and VMware in April 2013, Groovy and Grails formed part of its product portfolio. Pivotal ceased sponsoring Groovy and Grails from April 2015. That same month, Groovy changed its governance structure from a Codehaus repository to a Project Management Committee (PMC) in the Apache Software Foundation via its incubator. Groovy graduated from Apache's incubator and became a top-level project in November 2015. On February 7, 2020, Groovy 3.0 was released. Version 4.0 was released on January 25, 2022.",
    "features": "Most valid Java files are also valid Groovy files. Although the two languages are similar, Groovy code can be more compact, because it does not need all the elements that Java needs. This makes it possible for Java programmers to learn Groovy gradually by starting with familiar Java syntax before acquiring more Groovy programming idioms. Groovy features not available in Java include both static and dynamic typing (with the keyword def), operator overloading, native syntax for lists and associative arrays (maps), native support for regular expressions, polymorphic iteration, string interpolation, added helper methods, and the safe navigation operator ?. to check automatically for null pointers (for example, variable?.method(), or variable?.field). Since version 2, Groovy also supports modularity (shipping only the jars that the project uses, thus reducing the size of Groovy's library), type checking, static compilation, Project Coin syntax enhancements, multicatch blocks and ongoing performance enhancements using the invokedynamic instruction introduced in Java 7. Groovy natively supports markup languages such as XML and HTML by using an inline Document Object Model (DOM) syntax. This feature enables the definition and manipulation of many types of heterogeneous data assets with a uniform and concise syntax and programming methodology.[citation needed] Unlike Java, a Groovy source code file can be executed as an (uncompiled) script, if it contains code outside any class definition, if it is a class with a main method, or if it is a Runnable or GroovyTestCase. A Groovy script is fully parsed, compiled, and generated before executing (similar to Python and Ruby). This occurs under the hood, and the compiled version is not saved as an artifact of the process.",
    "groovybeans_properties": "GroovyBeans are Groovy's version of JavaBeans. Groovy implicitly generates getters and setters. In the following code, setColor(String color) and getColor() are implicitly generated. The last two lines, which appear to access color directly, are actually calling the implicitly generated methods. class AGroovyBean { String color } def myGroovyBean = new AGroovyBean() myGroovyBean.setColor('baby blue') assert myGroovyBean.getColor() == 'baby blue' myGroovyBean.color = 'pewter' assert myGroovyBean.color == 'pewter' Groovy offers simple, consistent syntax for handling lists and maps, reminiscent of Java's array syntax. def movieList = ['Dersu Uzala', 'Ran', 'Seven Samurai'] // Looks like an array, but is a list assert movieList == 'Seven Samurai' movieList = 'Casablanca' // Adds an element to the list assert movieList.size() == 4 def monthMap = [ 'January' : 31, 'February' : 28, 'March' : 31 ] // Declares a map assert monthMap['March'] == 31 // Accesses an entry monthMap['April'] = 30 // Adds an entry to the map assert monthMap.size() == 4",
    "prototype_extension": "Groovy offers support for prototype extension through ExpandoMetaClass, Extension Modules (only in Groovy 2), Objective-C-like Categories and DelegatingMetaClass. ExpandoMetaClass offers a domain-specific language (DSL) to express the changes in the class easily, similar to Ruby's open class concept: Number.metaClass { sqrt = { Math.sqrt(delegate) } } assert 9.sqrt() == 3 assert 4.sqrt() == 2 Groovy's changes in code through prototyping are not visible in Java, since each attribute/method invocation in Groovy goes through the metaclass registry. The changed code can only be accessed from Java by going to the metaclass registry. Groovy also allows overriding methods as getProperty(), propertyMissing() among others, enabling the developer to intercept calls to an object and specify an action for them, in a simplified aspect-oriented way. The following code enables the class java.lang.String to respond to the hex property: enum Color { BLACK('#000000'), WHITE('#FFFFFF'), RED('#FF0000'), BLUE('#0000FF') String hex Color(String hex) { this.hex = hex } } String.metaClass.getProperty = { String property -> def stringColor = delegate if (property == 'hex') { Color.values().find { it.name().equalsIgnoreCase stringColor }?.hex } } assert WHITE.hex == #FFFFFF assert BLUE.hex == #0000FF assert BLACK.hex == #000000 assert GREEN.hex == null The Grails framework uses metaprogramming extensively to enable GORM dynamic finders, like User.findByName('Josh') and others.",
    "dot_and_parentheses": "Groovy's syntax permits omitting parentheses and dots in some situations. The following groovy code take(coffee).with(sugar, milk).and(liquor) can be written as take coffee with sugar, milk and liquor enabling the development of domain-specific languages (DSLs) that look like plain English.",
    "functional_programming": "Although Groovy is mostly an object-oriented language, it also offers functional programming features.",
    "closures": "According to Groovy's documentation: Closures in Groovy work similar to a 'method pointer', enabling code to be written and run in a later point in time. Groovy's closures support free variables, i.e. variables that have not been explicitly passed as a parameter to it, but exist in its declaration context, partial application (that it terms 'currying'), delegation, implicit, typed and untyped parameters. When working on Collections of a determined type, the closure passed to an operation on the collection can be inferred: list = [1, 2, 3, 4, 5, 6, 7, 8, 9] /* * Non-zero numbers are coerced to true, so when it % 2 == 0 (even), it is false. * The type of the implicit it parameter can be inferred as an Integer by the IDE. * It could also be written as: * list.findAll { Integer i -> i % 2 } * list.findAll { i -> i % 2 } */ def odds = list.findAll { it % 2 } assert odds == [1, 3, 5, 7, 9] A group of expressions can be written in a closure block without reference to an implementation and the responding object can be assigned at a later point using delegation: // This block of code contains expressions without reference to an implementation def operations = { declare 5 sum 4 divide 3 print } /* * This class will handle the operations that can be used in the closure above. Another class * could be declared having the same methods, but using, for example, webservice operations * in the calculations. */ class Expression { BigDecimal value /* * Though an Integer is passed as a parameter, it is coerced into a BigDecimal, as was * defined. If the class had a 'declare(Integer value)' method, it would be used instead. */ def declare(BigDecimal value) { this.value = value } def sum(BigDecimal valueToAdd) { this.value += valueToAdd } def divide(BigDecimal divisor) { this.value /= divisor } def propertyMissing(String property) { if (property == print) println value } } // Here is defined who is going to respond the expressions in the block of code above. operations.delegate = new Expression() operations()",
    "curry": "Usually called partial application, this Groovy feature allows closures' parameters to be set to a default parameter in any of their arguments, creating a new closure with the bound value. Supplying one argument to the curry() method will fix argument one. Supplying N arguments will fix arguments 1 .. N. def joinTwoWordsWithSymbol = { symbol, first, second -> first + symbol + second } assert joinTwoWordsWithSymbol('#', 'Hello', 'World') == 'Hello#World' def concatWords = joinTwoWordsWithSymbol.curry(' ') assert concatWords('Hello', 'World') == 'Hello World' def prependHello = concatWords.curry('Hello') //def prependHello = joinTwoWordsWithSymbol.curry(' ', 'Hello') assert prependHello('World') == 'Hello World' Curry can also be used in the reverse direction (fixing the last N arguments) using rcurry(). def power = { BigDecimal value, BigDecimal power -> value**power } def square = power.rcurry(2) def cube = power.rcurry(3) assert power(2, 2) == 4 assert square(4) == 16 assert cube(3) == 27 Groovy also supports lazy evaluation, reduce/fold, infinite structures and immutability, among others.",
    "json_and_xml_processing": "On JavaScript Object Notation (JSON) and XML processing, Groovy employs the Builder pattern, making the production of the data structure less verbose. For example, the following XML: <languages> <language year=1995> <name>Java</name> <paradigm>object oriented</paradigm> <typing>static</typing> </language> <language year=1995> <name>Ruby</name> <paradigm>functional, object oriented</paradigm> <typing>duck typing, dynamic</typing> </language> <language year=2003> <name>Groovy</name> <paradigm>functional, object oriented</paradigm> <typing>duck typing, dynamic, static</typing> </language> </languages> can be generated via the following Groovy code: def writer = new StringWriter() def builder = new groovy.xml.MarkupBuilder(writer) builder.languages { language(year: 1995) { name Java paradigm object oriented typing static } language (year: 1995) { name Ruby paradigm functional, object oriented typing duck typing, dynamic } language (year: 2003) { name Groovy paradigm functional, object oriented typing duck typing, dynamic, static } } and also can be processed in a streaming way through StreamingMarkupBuilder. To change the implementation to JSON, the MarkupBuilder can be swapped to JsonBuilder. To parse it and search for a functional language, Groovy's findAll method can serve: def languages = new XmlSlurper().parseText writer.toString() // Here is employed Groovy's regex syntax for a matcher (=~) that will be coerced to a // boolean value: either true, if the value contains our string, or false otherwise. def functional = languages.language.findAll { it.paradigm =~ functional } assert functional.collect { it.name } == [Groovy, Ruby]",
    "string_interpolation": "In Groovy, strings can be interpolated with variables and expressions by using GStrings: BigDecimal account = 10.0 def text = The account shows currently a balance of $account assert text == The account shows currently a balance of 10.0 GStrings containing variables and expressions must be declared using double quotes. A complex expression must be enclosed in curly brackets. This prevents parts of it from being interpreted as belonging to the surrounding string instead of to the expression: BigDecimal minus = 4.0 text = The account shows currently a balance of ${account - minus} assert text == The account shows currently a balance of 6.0 // Without the brackets to isolate the expression, this would result: text = The account shows currently a balance of $account - minus assert text == The account shows currently a balance of 10.0 - minus Expression evaluation can be deferred by employing arrow syntax: BigDecimal tax = 0.15 text = The account shows currently a balance of ${->account - account*tax} tax = 0.10 // The tax value was changed AFTER declaration of the GString. The expression // variables are bound only when the expression must actually be evaluated: assert text == The account shows currently a balance of 9.000",
    "abstract_syntax_tree_transformation": "According to Groovy's own documentation, When the Groovy compiler compiles Groovy scripts and classes, at some point in the process, the source code will end up being represented in memory in the form of a Concrete Syntax Tree, then transformed into an Abstract Syntax Tree. The purpose of AST Transformations is to let developers hook into the compilation process to be able to modify the AST before it is turned into bytecode that will be run by the JVM. AST Transformations provides Groovy with improved compile-time metaprogramming capabilities allowing powerful flexibility at the language level, without a runtime performance penalty. Examples of ASTs in Groovy are: Category and Mixin transformation Immutable AST Macro Newify transformation Singleton transformation among others. The testing framework Spock uses AST transformations to allow the programmer to write tests in a syntax not supported by Groovy, but the relevant code is then manipulated in the AST to valid code. An example of such a test is: def maximum of #a and #b is #c () { expect: Math.max (a, b) == c where: a | b || c 3 | 5 || 5 7 | 0 || 7 0 | 0 || 0 }",
    "traits": "According to Groovy's documentation, Traits are a structural construct of the language that allows: composition of behaviors, runtime implementation of interfaces, behavior overriding, and compatibility with static type checking/compilation. Traits can be seen as interfaces carrying both default implementations and state. A trait is defined using the trait keyword: trait FlyingAbility { /* declaration of a trait */ String fly() { I'm flying! } /* declaration of a method inside a trait */ } Then, it can be used like a normal interface using the keyword implements: class Bird implements FlyingAbility {} /* Adds the trait FlyingAbility to the Bird class capabilities */ def bird = new Bird() /* instantiate a new Bird */ assert bird.fly() == I'm flying! /* the Bird class automatically gets the behavior of the FlyingAbility trait */ Traits allow a wide range of abilities, from simple composition to testing.",
    "adoption": "Notable examples of Groovy adoption include: Adaptavist ScriptRunner, embeds a Groovy implementation to automate and extend Atlassian tools, in use by more than 20000 organisations around the world. Apache OFBiz, the open-source enterprise resource planning (ERP) system, uses Groovy. Eucalyptus, a cloud management system, uses a significant amount of Groovy. Gradle is a popular build automation tool using Groovy. LinkedIn uses Groovy and Grails for some of their subsystems. LogicMonitor, a cloud-based monitoring platform, uses Groovy in script-based data sources. Jenkins, a platform for continuous integration. With version 2, Jenkins includes a Pipeline plugin that allows for build instructions to be written in Groovy. Liferay, uses groovy in their kaleo workflow Sky.com uses Groovy and Grails to serve massive online media content. SmartThings, an open platform for smart homes and the consumer Internet of Things, uses a security-oriented subset of Groovy SoapUI provides Groovy as a language for webservice tests development. Survata, a market research startup, uses Groovy and Grails.[citation needed] The European Patent Office (EPO) developed a dataflow programming language in Groovy to leverage similarities in the processes for communicating with each individual country’s patent office, and transform them into a single, universal process.[citation needed] Though Groovy can be integrated into any JVM environment, the JBoss Seam framework provides Groovy, besides Java, as a development language, out of the box. vCalc.com uses Groovy for all of the user defined mathematics in its math crowd-sourcing engine. Wired.com uses Groovy and Grails for the Product Reviews standalone section of the website. XWiki SAS uses Groovy as scripting language in their collaborative open-source product.",
    "ide_support": "Many integrated development environments (IDEs) and text editors support Groovy: Android Studio, IDE used for making Android apps Atom editor Eclipse, through Groovy-Eclipse Emacs, using the groovy-emacs-mode project's groovy-mode. IntelliJ IDEA, Community Edition, Grails/Griffon in the Ultimate Edition only JDeveloper, for use with Oracle ADF jEdit, an advanced text editor for the Java platform Kate, an advanced text editor for KDE supports Groovy and over 200 other file formats NetBeans, since version 6.5 Notepad++, an advanced text editor for Microsoft Windows Sublime Text, a cross platform text editor TextMate Visual Studio Code UltraEdit, general purpose program editor",
    "dialects": "There is one alternative implementation of Groovy: Grooscript converts Groovy code to JavaScript code. Although Grooscript has some limitations compared to Apache Groovy, it can use domain classes in both the server and the client. Plugin support for Grails version 3.0 is provided, as well as online code conversions.",
    "see_also": "Free and open-source software portalComputer programming portal Comparison of programming languages Griffon (framework) – a desktop framework Project Zero Spock (testing framework)",
    "citations": "^ Release 4.0.26. 24 February 2025. Retrieved 24 March 2025. ^ Releases - apache/groovy. Retrieved 2020-04-09 – via GitHub. ^ Groovy Goodness: Default Groovy Script File Extensions. ^ Groovy 2.0 Performance compared to Java. 25 Aug 2012. ^ Java vs Groovy2.0 vs Scala Simple Performance Test. 10 Jul 2012. Archived from the original on 10 December 2012. Retrieved 7 October 2012. ^ a b Groovy 2.4 And Grails 3.0 To Be Last Major Releases Under Pivotal Sponsorship. 19 Jan 2015. ^ a b Groovy joins Apache Incubator. 11 Mar 2015. ^ James Strachan (29 Aug 2003). Groovy - the birth of a new dynamic language for the Java platform. Archived from the original on 1 September 2003. ^ a b Java Community Process JSR 241. ^ Groovy wins first prize at JAX 2007 innovation award. 2007-04-26. Archived from the original on 2015-05-13. Retrieved 2012-10-07. ^ They say a lot can happen over a cup of coffee. Archived from the original on 2011-04-19. Retrieved 2012-10-07. ^ SpringSource Acquires Groovy and Grails company (G2One). 11 Nov 2008. ^ VMWare Acquires SpringSource. 10 Aug 2009. ^ Tweet from James Strachan. November 24, 2016. Retrieved 2016-11-24. ^ Announcement on dev mailing list. ^ Release GROOVY_3_0_0 · apache/groovy. GitHub. Retrieved 2024-03-27. ^ Release GROOVY_4_0_0 · apache/groovy. GitHub. Retrieved 2024-03-27. ^ König 2007, pg. 32 ^ Groovy style and language feature guidelines for Java developers. Groovy.codehaus.org. Archived from the original on 2015-01-17. Retrieved 2015-01-22. ^ Groovy – Differences from Java. Groovy.codehaus.org. Archived from the original on 2009-03-17. Retrieved 2013-08-12. ^ What's new in Groovy 2.0?. 28 Jun 2012. ^ König 2007, pp. 37-8 ^ König 2007, pp. 38-9 ^ König 2007, pp. 41-3 ^ JN3525-MetaClasses. Archived from the original on 2012-10-01. Retrieved 2012-10-07. ^ Metaprogramming Techniques in Groovy and Grails. 11 Jun 2009. ^ Groovy - Closures. Archived from the original on 2012-05-22. ^ a b Does groovy call partial application 'currying', 10 Aug 2013 ^ Groovy - Lazy Transformation. Archived from the original on 2012-10-08. Retrieved 2012-10-07. ^ Side Notes: Lazy lists in Groovy. 3 Feb 2011. ^ Groovy's Fold. 20 Jun 2011. Archived from the original on 13 February 2015. Retrieved 12 February 2015. ^ Functional Programming with Groovy. 5 Nov 2011. ^ Function programming in Groovy. Archived from the original on 2012-10-08. Retrieved 2012-10-07. ^ JsonBuilder. Archived from the original on 2012-10-02. Retrieved 2012-10-07. ^ Groovy Strings - Different ways of creating them. 26 Dec 2009. ^ Compile-time Metaprogramming - AST Transformations. Archived from the original on 2012-10-14. Retrieved 2012-10-07. ^ King, Paul (2020). A History of the Groovy Programming Language. Proc. ACM Program. Lang. 4: 53. doi:10.1145/3386326. ^ ScriptRunner Documentation. ^ ScriptRunner Press Release with adoption stats. ^ Groovy DSL for OFBiz business logic. Apache OFBiz Project Open Wiki. ^ Simple-methods examples using Groovy. Apache OFBiz Project Open Wiki. ^ Grails at LinkedIn. Retrieved 2015-06-02. ^ Embedded Groovy Scripting. www.logicmonitor.com. Retrieved 2020-11-20. ^ Jenkins Pipeline. ^ Rocher, Graeme (October 2, 2008). Graeme Rocher's Blog: Sky.com relaunches written in Grails. Graeme Rocher's Blog. Retrieved 2015-06-02. ^ Security Analysis of Emerging Smart Home Applications ^ Scripting and the Script Library | Scripting & Properties. www.soapui.org. Retrieved 2015-06-02. ^ Chapter 11. Groovy integration. docs.jboss.org. Retrieved 2015-06-02. ^ vCalc, the First ever Social Platform for the world of Math. 4 November 2014. Retrieved 2016-05-05. ^ Wired.Com (PDF). www.springsource.org. Retrieved 2015-06-02. ^ XWiki SAS (PDF). www.springsource.org. Retrieved 2015-06-02. ^ Grooscript Documentation. 12 Sep 2016. Archived from the original on 28 June 2017. Retrieved 4 July 2017. ^ Presentation at SpringOne/2GX on Grooscript. 13 Dec 2015. ^ Grooscript online conversions. 15 May 2017. Archived from the original on 9 July 2017. Retrieved 4 July 2017.",
    "sources": "König, Dierk; Paul King; Guillaume Laforge; Hamlet D'Arcy; Cédric Champeau; Erik Pragt; Jon Skeet (2015). Groovy in Action, Second Edition. Manning. ISBN 978-1-935182-44-3. Barclay, Kenneth; John Savage (2007). Groovy Programming: An Introduction for Java Developers. Morgan Kaufmann Publishers. ISBN 978-0-12-372507-3. Archived from the original on 2010-01-12. Retrieved 2007-07-19. Davis, Scott (2008). Groovy Recipes: Greasing the Wheels of Java. Pragmatic Bookshelf. ISBN 978-0-9787392-9-4. Subramaniam, Venkat (2008). Programming Groovy: Dynamic Productivity for the Java Developer. Pragmatic Bookshelf. ISBN 978-1-934356-09-8.",
    "external_links": "Official website vteThe Apache Software FoundationTop-levelprojects Accumulo ActiveMQ Airavata Airflow Allura Ambari Ant Aries Arrow Apache HTTP Server APR Avro Axis Axis2 Beam Bloodhound Brooklyn Calcite Camel CarbonData Cassandra Cayenne CloudStack Cocoon Cordova CouchDB cTAKES CXF Derby Directory Drill Druid Empire-db Felix Flex Flink Flume FreeMarker Geronimo Groovy Guacamole Gump Hadoop HBase Helix Hive Iceberg Ignite Impala Jackrabbit James Jena JMeter Kafka Kudu Kylin Lucene Mahout Maven MINA mod_perl MyFaces Mynewt NiFi NetBeans Nutch NuttX OFBiz Oozie OpenEJB OpenJPA OpenNLP OрenOffice ORC PDFBox Parquet Phoenix POI Pig Pinot Pivot Qpid Roller RocketMQ Samza Shiro SINGA Sling Solr Spark Storm SpamAssassin Struts 1 Subversion Superset SystemDS Tapestry Thrift Tika TinkerPop Tomcat Trafodion Traffic Server UIMA Velocity Wicket Xalan Xerces XMLBeans Yetus ZooKeeper Commons BCEL BSF Daemon Jelly Logging Incubator Taverna Other projects Batik FOP Ivy Log4j Attic Apex AxKit Beehive iBATIS Click Continuum Deltacloud Etch Giraph Hama Harmony Jakarta Marmotta MXNet ODE River Shale Slide Sqoop Stanbol Tuscany Wave XML Licenses Apache License Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteJava (software platform)Platforms JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK GraalVM Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Pack200 Modules Major third-partytechnologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations JVM languages Java BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Oxygene CommunityConferences JavaOne Devoxx Organizations Apache Software Foundation Eclipse Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal Authority control databases: National United StatesIsrael",
    "document": "James Strachan first talked about the development of Groovy on his blog in August 2003. In March 2004, Groovy was submitted to the JCP as JSR 241 and accepted by ballot. Several versions were released between 2004 and 2006. After the Java Community Process (JCP) standardization effort began, the version numbering changed, and a version called 1.0 was released on January 2, 2007. After various betas and release candidates numbered 1.1, on December 7, 2007, Groovy 1.1 Final was released and immediately renumbered as Groovy 1.5 to reflect the many changes made. In 2007, Groovy won the first prize at JAX 2007 innovation award. In 2008, Grails, a Groovy web framework, won the second prize at JAX 2008 innovation award. In November 2008, SpringSource acquired the Groovy and Grails company (G2One). In August 2009 VMware acquired SpringSource. In April 2012, after eight years of inactivity, the Spec Lead changed the status of JSR 241 to dormant. Strachan had left the project silently a year before the Groovy 1.0 release in 2007.[citation needed] In Oct 2016, Strachan stated I still love groovy (jenkins pipelines are so groovy!), java, go, typescript and kotlin. On July 2, 2012, Groovy 2.0 was released, which, among other new features, added static compiling and static type checking. When the Pivotal Software joint venture was spun-off by EMC Corporation (EMC) and VMware in April 2013, Groovy and Grails formed part of its product portfolio. Pivotal ceased sponsoring Groovy and Grails from April 2015. That same month, Groovy changed its governance structure from a Codehaus repository to a Project Management Committee (PMC) in the Apache Software Foundation via its incubator. Groovy graduated from Apache's incubator and became a top-level project in November 2015. On February 7, 2020, Groovy 3.0 was released. Version 4.0 was released on January 25, 2022. Most valid Java files are also valid Groovy files. Although the two languages are similar, Groovy code can be more compact, because it does not need all the elements that Java needs. This makes it possible for Java programmers to learn Groovy gradually by starting with familiar Java syntax before acquiring more Groovy programming idioms. Groovy features not available in Java include both static and dynamic typing (with the keyword def), operator overloading, native syntax for lists and associative arrays (maps), native support for regular expressions, polymorphic iteration, string interpolation, added helper methods, and the safe navigation operator ?. to check automatically for null pointers (for example, variable?.method(), or variable?.field). Since version 2, Groovy also supports modularity (shipping only the jars that the project uses, thus reducing the size of Groovy's library), type checking, static compilation, Project Coin syntax enhancements, multicatch blocks and ongoing performance enhancements using the invokedynamic instruction introduced in Java 7. Groovy natively supports markup languages such as XML and HTML by using an inline Document Object Model (DOM) syntax. This feature enables the definition and manipulation of many types of heterogeneous data assets with a uniform and concise syntax and programming methodology.[citation needed] Unlike Java, a Groovy source code file can be executed as an (uncompiled) script, if it contains code outside any class definition, if it is a class with a main method, or if it is a Runnable or GroovyTestCase. A Groovy script is fully parsed, compiled, and generated before executing (similar to Python and Ruby). This occurs under the hood, and the compiled version is not saved as an artifact of the process. GroovyBeans are Groovy's version of JavaBeans. Groovy implicitly generates getters and setters. In the following code, setColor(String color) and getColor() are implicitly generated. The last two lines, which appear to access color directly, are actually calling the implicitly generated methods. class AGroovyBean { String color } def myGroovyBean = new AGroovyBean() myGroovyBean.setColor('baby blue') assert myGroovyBean.getColor() == 'baby blue' myGroovyBean.color = 'pewter' assert myGroovyBean.color == 'pewter' Groovy offers simple, consistent syntax for handling lists and maps, reminiscent of Java's array syntax. def movieList = ['Dersu Uzala', 'Ran', 'Seven Samurai'] // Looks like an array, but is a list assert movieList == 'Seven Samurai' movieList = 'Casablanca' // Adds an element to the list assert movieList.size() == 4 def monthMap = [ 'January' : 31, 'February' : 28, 'March' : 31 ] // Declares a map assert monthMap['March'] == 31 // Accesses an entry monthMap['April'] = 30 // Adds an entry to the map assert monthMap.size() == 4 Groovy offers support for prototype extension through ExpandoMetaClass, Extension Modules (only in Groovy 2), Objective-C-like Categories and DelegatingMetaClass. ExpandoMetaClass offers a domain-specific language (DSL) to express the changes in the class easily, similar to Ruby's open class concept: Number.metaClass { sqrt = { Math.sqrt(delegate) } } assert 9.sqrt() == 3 assert 4.sqrt() == 2 Groovy's changes in code through prototyping are not visible in Java, since each attribute/method invocation in Groovy goes through the metaclass registry. The changed code can only be accessed from Java by going to the metaclass registry. Groovy also allows overriding methods as getProperty(), propertyMissing() among others, enabling the developer to intercept calls to an object and specify an action for them, in a simplified aspect-oriented way. The following code enables the class java.lang.String to respond to the hex property: enum Color { BLACK('#000000'), WHITE('#FFFFFF'), RED('#FF0000'), BLUE('#0000FF') String hex Color(String hex) { this.hex = hex } } String.metaClass.getProperty = { String property -> def stringColor = delegate if (property == 'hex') { Color.values().find { it.name().equalsIgnoreCase stringColor }?.hex } } assert WHITE.hex == #FFFFFF assert BLUE.hex == #0000FF assert BLACK.hex == #000000 assert GREEN.hex == null The Grails framework uses metaprogramming extensively to enable GORM dynamic finders, like User.findByName('Josh') and others. Groovy's syntax permits omitting parentheses and dots in some situations. The following groovy code take(coffee).with(sugar, milk).and(liquor) can be written as take coffee with sugar, milk and liquor enabling the development of domain-specific languages (DSLs) that look like plain English. Although Groovy is mostly an object-oriented language, it also offers functional programming features. According to Groovy's documentation: Closures in Groovy work similar to a 'method pointer', enabling code to be written and run in a later point in time. Groovy's closures support free variables, i.e. variables that have not been explicitly passed as a parameter to it, but exist in its declaration context, partial application (that it terms 'currying'), delegation, implicit, typed and untyped parameters. When working on Collections of a determined type, the closure passed to an operation on the collection can be inferred: list = [1, 2, 3, 4, 5, 6, 7, 8, 9] /* * Non-zero numbers are coerced to true, so when it % 2 == 0 (even), it is false. * The type of the implicit it parameter can be inferred as an Integer by the IDE. * It could also be written as: * list.findAll { Integer i -> i % 2 } * list.findAll { i -> i % 2 } */ def odds = list.findAll { it % 2 } assert odds == [1, 3, 5, 7, 9] A group of expressions can be written in a closure block without reference to an implementation and the responding object can be assigned at a later point using delegation: // This block of code contains expressions without reference to an implementation def operations = { declare 5 sum 4 divide 3 print } /* * This class will handle the operations that can be used in the closure above. Another class * could be declared having the same methods, but using, for example, webservice operations * in the calculations. */ class Expression { BigDecimal value /* * Though an Integer is passed as a parameter, it is coerced into a BigDecimal, as was * defined. If the class had a 'declare(Integer value)' method, it would be used instead. */ def declare(BigDecimal value) { this.value = value } def sum(BigDecimal valueToAdd) { this.value += valueToAdd } def divide(BigDecimal divisor) { this.value /= divisor } def propertyMissing(String property) { if (property == print) println value } } // Here is defined who is going to respond the expressions in the block of code above. operations.delegate = new Expression() operations() Usually called partial application, this Groovy feature allows closures' parameters to be set to a default parameter in any of their arguments, creating a new closure with the bound value. Supplying one argument to the curry() method will fix argument one. Supplying N arguments will fix arguments 1 .. N. def joinTwoWordsWithSymbol = { symbol, first, second -> first + symbol + second } assert joinTwoWordsWithSymbol('#', 'Hello', 'World') == 'Hello#World' def concatWords = joinTwoWordsWithSymbol.curry(' ') assert concatWords('Hello', 'World') == 'Hello World' def prependHello = concatWords.curry('Hello') //def prependHello = joinTwoWordsWithSymbol.curry(' ', 'Hello') assert prependHello('World') == 'Hello World' Curry can also be used in the reverse direction (fixing the last N arguments) using rcurry(). def power = { BigDecimal value, BigDecimal power -> value**power } def square = power.rcurry(2) def cube = power.rcurry(3) assert power(2, 2) == 4 assert square(4) == 16 assert cube(3) == 27 Groovy also supports lazy evaluation, reduce/fold, infinite structures and immutability, among others. On JavaScript Object Notation (JSON) and XML processing, Groovy employs the Builder pattern, making the production of the data structure less verbose. For example, the following XML: <languages> <language year=1995> <name>Java</name> <paradigm>object oriented</paradigm> <typing>static</typing> </language> <language year=1995> <name>Ruby</name> <paradigm>functional, object oriented</paradigm> <typing>duck typing, dynamic</typing> </language> <language year=2003> <name>Groovy</name> <paradigm>functional, object oriented</paradigm> <typing>duck typing, dynamic, static</typing> </language> </languages> can be generated via the following Groovy code: def writer = new StringWriter() def builder = new groovy.xml.MarkupBuilder(writer) builder.languages { language(year: 1995) { name Java paradigm object oriented typing static } language (year: 1995) { name Ruby paradigm functional, object oriented typing duck typing, dynamic } language (year: 2003) { name Groovy paradigm functional, object oriented typing duck typing, dynamic, static } } and also can be processed in a streaming way through StreamingMarkupBuilder. To change the implementation to JSON, the MarkupBuilder can be swapped to JsonBuilder. To parse it and search for a functional language, Groovy's findAll method can serve: def languages = new XmlSlurper().parseText writer.toString() // Here is employed Groovy's regex syntax for a matcher (=~) that will be coerced to a // boolean value: either true, if the value contains our string, or false otherwise. def functional = languages.language.findAll { it.paradigm =~ functional } assert functional.collect { it.name } == [Groovy, Ruby] In Groovy, strings can be interpolated with variables and expressions by using GStrings: BigDecimal account = 10.0 def text = The account shows currently a balance of $account assert text == The account shows currently a balance of 10.0 GStrings containing variables and expressions must be declared using double quotes. A complex expression must be enclosed in curly brackets. This prevents parts of it from being interpreted as belonging to the surrounding string instead of to the expression: BigDecimal minus = 4.0 text = The account shows currently a balance of ${account - minus} assert text == The account shows currently a balance of 6.0 // Without the brackets to isolate the expression, this would result: text = The account shows currently a balance of $account - minus assert text == The account shows currently a balance of 10.0 - minus Expression evaluation can be deferred by employing arrow syntax: BigDecimal tax = 0.15 text = The account shows currently a balance of ${->account - account*tax} tax = 0.10 // The tax value was changed AFTER declaration of the GString. The expression // variables are bound only when the expression must actually be evaluated: assert text == The account shows currently a balance of 9.000 According to Groovy's own documentation, When the Groovy compiler compiles Groovy scripts and classes, at some point in the process, the source code will end up being represented in memory in the form of a Concrete Syntax Tree, then transformed into an Abstract Syntax Tree. The purpose of AST Transformations is to let developers hook into the compilation process to be able to modify the AST before it is turned into bytecode that will be run by the JVM. AST Transformations provides Groovy with improved compile-time metaprogramming capabilities allowing powerful flexibility at the language level, without a runtime performance penalty. Examples of ASTs in Groovy are: Category and Mixin transformation Immutable AST Macro Newify transformation Singleton transformation among others. The testing framework Spock uses AST transformations to allow the programmer to write tests in a syntax not supported by Groovy, but the relevant code is then manipulated in the AST to valid code. An example of such a test is: def maximum of #a and #b is #c () { expect: Math.max (a, b) == c where: a | b || c 3 | 5 || 5 7 | 0 || 7 0 | 0 || 0 } According to Groovy's documentation, Traits are a structural construct of the language that allows: composition of behaviors, runtime implementation of interfaces, behavior overriding, and compatibility with static type checking/compilation. Traits can be seen as interfaces carrying both default implementations and state. A trait is defined using the trait keyword: trait FlyingAbility { /* declaration of a trait */ String fly() { I'm flying! } /* declaration of a method inside a trait */ } Then, it can be used like a normal interface using the keyword implements: class Bird implements FlyingAbility {} /* Adds the trait FlyingAbility to the Bird class capabilities */ def bird = new Bird() /* instantiate a new Bird */ assert bird.fly() == I'm flying! /* the Bird class automatically gets the behavior of the FlyingAbility trait */ Traits allow a wide range of abilities, from simple composition to testing. Notable examples of Groovy adoption include: Adaptavist ScriptRunner, embeds a Groovy implementation to automate and extend Atlassian tools, in use by more than 20000 organisations around the world. Apache OFBiz, the open-source enterprise resource planning (ERP) system, uses Groovy. Eucalyptus, a cloud management system, uses a significant amount of Groovy. Gradle is a popular build automation tool using Groovy. LinkedIn uses Groovy and Grails for some of their subsystems. LogicMonitor, a cloud-based monitoring platform, uses Groovy in script-based data sources. Jenkins, a platform for continuous integration. With version 2, Jenkins includes a Pipeline plugin that allows for build instructions to be written in Groovy. Liferay, uses groovy in their kaleo workflow Sky.com uses Groovy and Grails to serve massive online media content. SmartThings, an open platform for smart homes and the consumer Internet of Things, uses a security-oriented subset of Groovy SoapUI provides Groovy as a language for webservice tests development. Survata, a market research startup, uses Groovy and Grails.[citation needed] The European Patent Office (EPO) developed a dataflow programming language in Groovy to leverage similarities in the processes for communicating with each individual country’s patent office, and transform them into a single, universal process.[citation needed] Though Groovy can be integrated into any JVM environment, the JBoss Seam framework provides Groovy, besides Java, as a development language, out of the box. vCalc.com uses Groovy for all of the user defined mathematics in its math crowd-sourcing engine. Wired.com uses Groovy and Grails for the Product Reviews standalone section of the website. XWiki SAS uses Groovy as scripting language in their collaborative open-source product. Many integrated development environments (IDEs) and text editors support Groovy: Android Studio, IDE used for making Android apps Atom editor Eclipse, through Groovy-Eclipse Emacs, using the groovy-emacs-mode project's groovy-mode. IntelliJ IDEA, Community Edition, Grails/Griffon in the Ultimate Edition only JDeveloper, for use with Oracle ADF jEdit, an advanced text editor for the Java platform Kate, an advanced text editor for KDE supports Groovy and over 200 other file formats NetBeans, since version 6.5 Notepad++, an advanced text editor for Microsoft Windows Sublime Text, a cross platform text editor TextMate Visual Studio Code UltraEdit, general purpose program editor There is one alternative implementation of Groovy: Grooscript converts Groovy code to JavaScript code. Although Grooscript has some limitations compared to Apache Groovy, it can use domain classes in both the server and the client. Plugin support for Grails version 3.0 is provided, as well as online code conversions. Free and open-source software portalComputer programming portal Comparison of programming languages Griffon (framework) – a desktop framework Project Zero Spock (testing framework) ^ Release 4.0.26. 24 February 2025. Retrieved 24 March 2025. ^ Releases - apache/groovy. Retrieved 2020-04-09 – via GitHub. ^ Groovy Goodness: Default Groovy Script File Extensions. ^ Groovy 2.0 Performance compared to Java. 25 Aug 2012. ^ Java vs Groovy2.0 vs Scala Simple Performance Test. 10 Jul 2012. Archived from the original on 10 December 2012. Retrieved 7 October 2012. ^ a b Groovy 2.4 And Grails 3.0 To Be Last Major Releases Under Pivotal Sponsorship. 19 Jan 2015. ^ a b Groovy joins Apache Incubator. 11 Mar 2015. ^ James Strachan (29 Aug 2003). Groovy - the birth of a new dynamic language for the Java platform. Archived from the original on 1 September 2003. ^ a b Java Community Process JSR 241. ^ Groovy wins first prize at JAX 2007 innovation award. 2007-04-26. Archived from the original on 2015-05-13. Retrieved 2012-10-07. ^ They say a lot can happen over a cup of coffee. Archived from the original on 2011-04-19. Retrieved 2012-10-07. ^ SpringSource Acquires Groovy and Grails company (G2One). 11 Nov 2008. ^ VMWare Acquires SpringSource. 10 Aug 2009. ^ Tweet from James Strachan. November 24, 2016. Retrieved 2016-11-24. ^ Announcement on dev mailing list. ^ Release GROOVY_3_0_0 · apache/groovy. GitHub. Retrieved 2024-03-27. ^ Release GROOVY_4_0_0 · apache/groovy. GitHub. Retrieved 2024-03-27. ^ König 2007, pg. 32 ^ Groovy style and language feature guidelines for Java developers. Groovy.codehaus.org. Archived from the original on 2015-01-17. Retrieved 2015-01-22. ^ Groovy – Differences from Java. Groovy.codehaus.org. Archived from the original on 2009-03-17. Retrieved 2013-08-12. ^ What's new in Groovy 2.0?. 28 Jun 2012. ^ König 2007, pp. 37-8 ^ König 2007, pp. 38-9 ^ König 2007, pp. 41-3 ^ JN3525-MetaClasses. Archived from the original on 2012-10-01. Retrieved 2012-10-07. ^ Metaprogramming Techniques in Groovy and Grails. 11 Jun 2009. ^ Groovy - Closures. Archived from the original on 2012-05-22. ^ a b Does groovy call partial application 'currying', 10 Aug 2013 ^ Groovy - Lazy Transformation. Archived from the original on 2012-10-08. Retrieved 2012-10-07. ^ Side Notes: Lazy lists in Groovy. 3 Feb 2011. ^ Groovy's Fold. 20 Jun 2011. Archived from the original on 13 February 2015. Retrieved 12 February 2015. ^ Functional Programming with Groovy. 5 Nov 2011. ^ Function programming in Groovy. Archived from the original on 2012-10-08. Retrieved 2012-10-07. ^ JsonBuilder. Archived from the original on 2012-10-02. Retrieved 2012-10-07. ^ Groovy Strings - Different ways of creating them. 26 Dec 2009. ^ Compile-time Metaprogramming - AST Transformations. Archived from the original on 2012-10-14. Retrieved 2012-10-07. ^ King, Paul (2020). A History of the Groovy Programming Language. Proc. ACM Program. Lang. 4: 53. doi:10.1145/3386326. ^ ScriptRunner Documentation. ^ ScriptRunner Press Release with adoption stats. ^ Groovy DSL for OFBiz business logic. Apache OFBiz Project Open Wiki. ^ Simple-methods examples using Groovy. Apache OFBiz Project Open Wiki. ^ Grails at LinkedIn. Retrieved 2015-06-02. ^ Embedded Groovy Scripting. www.logicmonitor.com. Retrieved 2020-11-20. ^ Jenkins Pipeline. ^ Rocher, Graeme (October 2, 2008). Graeme Rocher's Blog: Sky.com relaunches written in Grails. Graeme Rocher's Blog. Retrieved 2015-06-02. ^ Security Analysis of Emerging Smart Home Applications ^ Scripting and the Script Library | Scripting & Properties. www.soapui.org. Retrieved 2015-06-02. ^ Chapter 11. Groovy integration. docs.jboss.org. Retrieved 2015-06-02. ^ vCalc, the First ever Social Platform for the world of Math. 4 November 2014. Retrieved 2016-05-05. ^ Wired.Com (PDF). www.springsource.org. Retrieved 2015-06-02. ^ XWiki SAS (PDF). www.springsource.org. Retrieved 2015-06-02. ^ Grooscript Documentation. 12 Sep 2016. Archived from the original on 28 June 2017. Retrieved 4 July 2017. ^ Presentation at SpringOne/2GX on Grooscript. 13 Dec 2015. ^ Grooscript online conversions. 15 May 2017. Archived from the original on 9 July 2017. Retrieved 4 July 2017. König, Dierk; Paul King; Guillaume Laforge; Hamlet D'Arcy; Cédric Champeau; Erik Pragt; Jon Skeet (2015). Groovy in Action, Second Edition. Manning. ISBN 978-1-935182-44-3. Barclay, Kenneth; John Savage (2007). Groovy Programming: An Introduction for Java Developers. Morgan Kaufmann Publishers. ISBN 978-0-12-372507-3. Archived from the original on 2010-01-12. Retrieved 2007-07-19. Davis, Scott (2008). Groovy Recipes: Greasing the Wheels of Java. Pragmatic Bookshelf. ISBN 978-0-9787392-9-4. Subramaniam, Venkat (2008). Programming Groovy: Dynamic Productivity for the Java Developer. Pragmatic Bookshelf. ISBN 978-1-934356-09-8. Official website vteThe Apache Software FoundationTop-levelprojects Accumulo ActiveMQ Airavata Airflow Allura Ambari Ant Aries Arrow Apache HTTP Server APR Avro Axis Axis2 Beam Bloodhound Brooklyn Calcite Camel CarbonData Cassandra Cayenne CloudStack Cocoon Cordova CouchDB cTAKES CXF Derby Directory Drill Druid Empire-db Felix Flex Flink Flume FreeMarker Geronimo Groovy Guacamole Gump Hadoop HBase Helix Hive Iceberg Ignite Impala Jackrabbit James Jena JMeter Kafka Kudu Kylin Lucene Mahout Maven MINA mod_perl MyFaces Mynewt NiFi NetBeans Nutch NuttX OFBiz Oozie OpenEJB OpenJPA OpenNLP OрenOffice ORC PDFBox Parquet Phoenix POI Pig Pinot Pivot Qpid Roller RocketMQ Samza Shiro SINGA Sling Solr Spark Storm SpamAssassin Struts 1 Subversion Superset SystemDS Tapestry Thrift Tika TinkerPop Tomcat Trafodion Traffic Server UIMA Velocity Wicket Xalan Xerces XMLBeans Yetus ZooKeeper Commons BCEL BSF Daemon Jelly Logging Incubator Taverna Other projects Batik FOP Ivy Log4j Attic Apex AxKit Beehive iBATIS Click Continuum Deltacloud Etch Giraph Hama Harmony Jakarta Marmotta MXNet ODE River Shale Slide Sqoop Stanbol Tuscany Wave XML Licenses Apache License Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteJava (software platform)Platforms JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK GraalVM Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Pack200 Modules Major third-partytechnologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations JVM languages Java BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Oxygene CommunityConferences JavaOne Devoxx Organizations Apache Software Foundation Eclipse Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal Authority control databases: National United StatesIsrael",
    "paradigm": "Multi-paradigm : object-oriented , imperative , functional , aspect-oriented , scripting",
    "first_appeared": "2003 ; 22 years ago ( 2003 )",
    "stable_release": "4.0.27 (24 May 2025 ; 12 days ago ( 24 May 2025 ) ) [±]",
    "typing_discipline": "Dynamic , static , strong , duck",
    "influenced_by": "Java , Python , Ruby , Smalltalk",
    "influenced": "Kotlin",
    "stable_release_date": "1947-01-01T00:00:00Z"
  },
  {
    "title": "JavaScript",
    "url": "https://en.wikipedia.org/wiki/JavaScript",
    "creation_at_netscape": "The first popular web browser with a graphical user interface, Mosaic, was released in 1993. The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used. During these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so in 1995, Netscape decided to add a programming language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java language, while also hiring Brendan Eich to embed the Scheme language. The goal was a language for the masses, to help nonprogrammers create dynamic, interactive Web sites. Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages. Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December. The choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was a popular new language, so Eich considered the JavaScript name a marketing ploy by Netscape.",
    "adoption_by_microsoft": "Microsoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft created its own interpreter called JScript. Microsoft first released JScript in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Netscape Navigator. These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of best viewed in Netscape and best viewed in Internet Explorer logos for several years.",
    "the_rise_of_jscript": "Brendan Eich later said of this period: It's still kind of a sidekick language. It's considered slow or annoying. People do pop-ups or those scrolling messages in the old status bar at the bottom of your old browser. In November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in June 1997. The standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000. However, the effort to fully standardize the language was undermined by Microsoft gaining an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer's market share reached 95%. This meant that JScript became the de facto standard for client-side scripting on the Web. Microsoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on ECMA work. Thus ECMAScript 4 was mothballed.",
    "growth_and_standardization": "Logo of Technical Committee 39 (TC39), the committee of Ecma International that is responsible for maintaining the standard During the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking significant market share from Internet Explorer. In 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition. Meanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools. Google debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition. The key innovation was just-in-time compilation (JIT), so other browser vendors needed to overhaul their engines for JIT. In July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009.",
    "reaching_maturity": "Ambitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015. The creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime system. As of 2018, Node had been used by millions of developers, and npm had the most modules of any package manager in the world. The ECMAScript draft specification is currently maintained openly on GitHub, and editions are produced via regular annual snapshots. Potential revisions to the language are vetted through a comprehensive proposal process. Now, instead of edition numbers, developers check the status of upcoming features individually. The current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers. Plus, with the rise of single-page applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process.",
    "trademark": "JavaScript is a trademark of Oracle Corporation in the United States. The trademark was originally issued to Sun Microsystems on 6 May 1997, and was transferred to Oracle when they acquired Sun in 2009. A letter was circulated in September 2024, spearheaded by Ryan Dahl, calling on Oracle to free the JavaScript trademark. Brendan Eich, the original creator of JavaScript, was among the over 14,000 signatories who supported the initiative.",
    "website_client_side_usage": "JavaScript is the dominant client-side scripting language of the Web, with 99% of all websites using it for this purpose. Scripts are embedded in or included from HTML documents and interact with the DOM. All major web browsers have a built-in JavaScript engine that executes the code on the user's device.",
    "examples_of_scripted_behavior": "Loading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page. Web page animations, such as fading objects in and out, resizing, and moving them. Playing browser games. Controlling the playback of streaming media. Generating pop-up ads or alert boxes. Validating input values of a web form before the data is sent to a web server. Logging data about the user's behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization. Redirecting a user to another page. Storing and retrieving data on the user's device, via the storage or IndexedDB standards.",
    "libraries_and_frameworks": "Over 80% of websites use a third-party JavaScript library or web framework as part of their client-side scripting. jQuery is by far the most-used. Other notable ones include Angular, Bootstrap, Lodash, Modernizr, React, Underscore, and Vue. Multiple options can be used in conjunction, such as jQuery and Bootstrap. However, the term Vanilla JS was coined for websites not using any libraries or frameworks at all, instead relying entirely on standard JavaScript functionality.",
    "other_usage": "The use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications. Initial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft's Internet Information Services, but they were small niches. Server-side usage eventually started to grow in the late 2000s, with the creation of Node.js and other approaches. Electron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents and GNOME Shell extensions written in JavaScript. Oracle used to provide Nashorn, a JavaScript interpreter, as part of their Java Development Kit (JDK) API library along with jjs a command line interpreter as of JDK version 8. It was removed in JDK 15. As a replacement Oracle offered GraalJS which can also be used with the OpenJDK which allows one to create and reference Java objects in JavaScript code and add runtime scripting in JavaScript to applications written in Java. JavaScript has been used in some embedded systems, usually by leveraging Node.js.",
    "javascript_engine": "This section is an excerpt from JavaScript engine.[edit] A JavaScript engine is a software component that executes JavaScript code. The first JavaScript engines were mere interpreters, but all relevant modern engines use just-in-time compilation for improved performance. JavaScript engines are typically developed by web browser vendors, and every major browser has one. In a browser, the JavaScript engine runs in concert with the rendering engine via the Document Object Model and Web IDL bindings. However, the use of JavaScript engines is not limited to browsers; for example, the V8 engine is a core component of the Node.js runtime system. Since ECMAScript is the standardized specification of JavaScript, ECMAScript engine is another name for these implementations. With the advent of WebAssembly, some engines can also execute this code in the same sandbox as regular JavaScript code.",
    "runtime_system": "A JavaScript engine must be embedded within a runtime system (such as a web browser or a standalone system) to enable scripts to interact with the broader environment. The runtime system includes the necessary APIs for input/output operations, such as networking, storage, and graphics, and provides the ability to import scripts. JavaScript is a single-threaded language. The runtime processes messages from a queue one at a time, and it calls a function associated with each new message, creating a call stack frame with the function's arguments and local variables. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as run to completion because each message is fully processed before the next message is considered. However, the language's concurrency model describes the event loop as non-blocking: program I/O is performed using events and callback functions. This means, for example, that JavaScript can process a mouse click while waiting for a database query to return information. The notable standalone runtimes are Node.js, Deno, and Bun.",
    "features": "The following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise.",
    "imperative_and_structured": "Main article: Structured programming JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted.",
    "weakly_typed": "Main article: Weakly typed JavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used. The binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator The binary - operator always casts both operands to a number Both unary operators (+, -) always cast the operand to a number. However, + always casts to Number (binary64) while - preserves BigInt (integer) Values are cast to strings like the following: Strings are left as-is Numbers are converted to their string representation Arrays have their elements cast to strings after which they are joined by commas (,) Other objects are converted to the string [object Object] where Object is the name of the constructor of the object Values are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively. JavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency. For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction. JavaScript type conversions left operand operator right operand result [] (empty array) + [] (empty array)  (empty string) [] (empty array) + {} (empty object) [object Object] (string) false (boolean) + [] (empty array) false (string) 123(string) + 1 (number) 1231 (string) 123 (string) - 1 (number) 122 (number) 123 (string) - abc (string) NaN (number) Often also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If the expression is wrapped in parentheses - ({} + []) – the curly brackets are interpreted as an empty object and the result of the expression is [object Object] as expected.",
    "dynamic": "Main article: Dynamic Programming",
    "typing": "Main article: Dynamic typing JavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string. JavaScript supports various ways to test the type of objects, including duck typing.",
    "run_time_evaluation": "Main article: eval JavaScript includes an eval function that can execute statements provided as strings at run-time.",
    "object_orientation_prototype_based": "Prototypal inheritance in JavaScript is described by Douglas Crockford as: You make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that? In JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj[x] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop.",
    "prototypes": "Main article: Prototype-based programming JavaScript uses prototypes where many other object-oriented languages use classes for inheritance, but it's still possible to simulate most class-based features with the prototype system. Additionally, ECMAScript version 6 (released June 2015) introduced the keywords class, extends and super, which serve as syntactic sugar to abstract the underlying prototypal inheritance system with a more conventional interface. Constructors are declared by specifying a method named constructor, and all classes are automatically subclasses of the base class Object, similarly to Java. class Person { constructor(name) { this.name = name; } } class Student extends Person { constructor(name, id) { super(name); this.id = id; } } const bob = new Student(Robert, 12345); console.log(bob.name); // Robert Though the underlying object mechanism is still based on prototypes, the newer syntax is similar to other object oriented languages. Private variables are declared by prefixing the field name with a number sign (#), and polymorphism is not directly supported, although it can be emulated by manually calling different functions depending on the number and type of arguments provided.",
    "functions_as_object_constructors": "Functions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype). ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null). The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. // This code is completely equivalent to the previous snippet function Person(name) { this.name = name; } function Student(name, id) { Person.call(this, name); this.id = id; } var bob = new Student(Robert, 12345); console.log(bob.name); // Robert JavaScript's built-in classes, such as Array and Object, also have prototypes that can be modified. However, it's generally considered bad practice to modify built-in objects, because third-party code may use or inherit methods and properties from these objects, and may not expect the prototype to be modified.",
    "functions_as_methods": "Main article: Method (computer science) Unlike in many object-oriented languages, in JavaScript there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling. When a function is called as a method of an object, the function's local this keyword is bound to that object for that invocation.",
    "functional": "Main article: Functional programming JavaScript functions are first-class; a function is considered to be an object. As such, a function may have properties and methods, such as .call() and .bind().",
    "lexical_closure": "Main article: Closure (computer programming) A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.",
    "anonymous_function": "Main article: Anonymous function JavaScript also supports anonymous functions.",
    "delegative": "Main article: Delegation (object-oriented programming) JavaScript supports implicit and explicit delegation.",
    "functions_as_roles_traits_and_mixins": "Main articles: Role-oriented programming, Traits (computer science), and Mixin JavaScript natively supports various function-based implementations of Role patterns like Traits and Mixins. Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain.",
    "object_composition_and_inheritance": "Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.",
    "zero_based_numbering": "JavaScript is a zero-index language.",
    "variadic_functions": "Main article: Variadic function An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method.",
    "array_and_object_literals": "Main articles: Associative arrays and Object literal Like in many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format.",
    "regular_expressions": "Main article: Regular expression JavaScript supports regular expressions for text searches and manipulation.: 139",
    "promises_and_asyncawait": "JavaScript supports promises and Async/await for handling asynchronous operations.[citation needed]",
    "promises": "Main article: Futures and promises A built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action's eventual result. JavaScript supplies combinator methods, which allow developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any.",
    "asyncawait": "Main article: Async/await Async/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similarly to traditional synchronous, blocking code.",
    "vendor_specific_extensions": "Historically, some JavaScript engines supported these non-standard features: array comprehensions and generator expressions (like Python) concise function expressions (function(args) expr; this experimental syntax predated arrow functions) ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21)",
    "syntax": "Main article: JavaScript syntax Variables in JavaScript can be defined using either the var, let or const keywords. Variables defined without keywords will be defined at the global scope. Arrow functions were first introduced in 6th Edition – ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their creation, unless surrounded by parenthesis and executed immediately. Here is an example of JavaScript syntax. // Declares a function-scoped variable named `x`, and implicitly assigns the // special value `undefined` to it. Variables without value are automatically // set to undefined. // var is generally considered bad practice and let and const are usually preferred. var x; // Variables can be manually set to `undefined` like so let x2 = undefined; // Declares a block-scoped variable named `y`, and implicitly sets it to // `undefined`. The `let` keyword was introduced in ECMAScript 2015. let y; // Declares a block-scoped, un-reassignable variable named `z`, and sets it to // a string literal. The `const` keyword was also introduced in ECMAScript 2015, // and must be explicitly assigned to. // The keyword `const` means constant, hence the variable cannot be reassigned // as the value is `constant`. const z = this value cannot be reassigned!; // Declares a global-scoped variable and assigns 3. This is generally considered // bad practice, and will not work if strict mode is on. t = 3; // Declares a variable named `myNumber`, and assigns a number literal (the value // `2`) to it. let myNumber = 2; // Reassigns `myNumber`, setting it to a string literal (the value `foo`). // JavaScript is a dynamically-typed language, so this is legal. myNumber = foo; Note the comments in the examples above, all of which were preceded with two forward slashes. More examples can be found at the Wikibooks page on JavaScript syntax examples.",
    "security": "See also: Browser security JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one website do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox. There are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements). Closure Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML. Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page.",
    "cross_site_scripting": "Main article: Cross-site scripting A common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Website, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. One important solution to XSS vulnerabilities is HTML sanitization. Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS. XSS vulnerabilities can also occur because of implementation mistakes by browser authors.",
    "cross_site_request_forgery": "Main article: Cross-site request forgery Another cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help. JavaScript hijacking is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include: requiring an authentication token in the POST and GET parameters for any response that returns private information.",
    "misplaced_trust_in_the_client": "Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The author of an application should not assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are: Website authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered. JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client. Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it. It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker. Prototype pollution is a runtime vulnerability in which attackers can overwrite arbitrary properties in an object's prototype.",
    "misplaced_trust_in_developers": "Package management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developers' program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133,000 websites, researchers found 37% of the websites included a library with at least one known vulnerability. The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago. Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break.",
    "browser_and_plugin_coding_errors": "Further information: Buffer overflow JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges. These flaws have affected major browsers including Firefox, Internet Explorer, and Safari. Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past). In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges. Google Chrome similarly confines its page renderers to their own sandbox.",
    "sandbox_implementation_errors": "Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web. Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer and Firefox. In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer. Microsoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[failed verification]",
    "hardware_vulnerabilities": "In 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers. In 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It is called ASLR⊕Cache or AnC. In 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.",
    "development_tools": "Important tools have evolved with the language. Every major web browser has built-in web development tools, including a JavaScript debugger. Static program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines. Some browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench. Many text editors have syntax highlighting support for JavaScript code.",
    "java": "A common misconception is that JavaScript is directly related to Java. Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed, and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0. Both languages first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications. The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme.",
    "json": "JSON is a data format derived from JavaScript; hence the name JavaScript Object Notation. It is a widely used format supported by many other programming languages.",
    "transpilers": "Many websites are JavaScript-heavy, so transpilers have been created to convert code written in other languages, which can aid the development process. TypeScript and CoffeeScript are two notable languages that transpile to JavaScript.",
    "webassembly": "WebAssembly is a newer language with a bytecode format designed to complement JavaScript, especially the performance-critical portions of web page scripts. All of the major JavaScript engines support WebAssembly, which runs in the same sandbox as regular JavaScript code. asm.js is a subset of JavaScript that served as the forerunner of WebAssembly.",
    "references": "^ a b Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet (Press release). 4 December 1995. Archived from the original on 16 September 2007. ^ ECMAScript® 2024 Language Specification. June 2024. Retrieved 30 August 2024. ^ ECMAScript® 2025 Language Specification. 27 March 2024. Retrieved 17 April 2024. ^ nodejs/node-eps. GitHub. Archived from the original on 29 August 2020. Retrieved 5 July 2018. ^ a b Seibel, Peter (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. ISBN 978-1-4302-1948-4. Archived from the original on 24 December 2020. Retrieved 25 December 2018. Eich: The immediate concern at Netscape was it must look like Java. ^ a b c d e Chapter 4. How JavaScript Was Created. speakingjs.com. Archived from the original on 27 February 2020. Retrieved 21 November 2017. ^ Popularity – Brendan Eich. ^ Brendan Eich: An Introduction to JavaScript, JSConf 2010. YouTube. 20 January 2013. p. 22m. Archived from the original on 29 August 2020. Retrieved 25 November 2019. Eich: function, eight letters, I was influenced by AWK. ^ Eich, Brendan (1998). Foreword. In Goodman, Danny (ed.). JavaScript Bible (3rd ed.). John Wiley & Sons. ISBN 0-7645-3188-3. LCCN 97078208. OCLC 38888873. OL 712205M. ^ a b Usage Statistics of JavaScript as Client-side Programming Language on Websites. W3Techs. Retrieved 27 February 2024. ^ ECMAScript 2020 Language Specification. Archived from the original on 8 May 2020. Retrieved 8 May 2020. ^ Enzer, Larry (31 August 2018). The Evolution of the Web Browsers. Monmouth Web Developers. Archived from the original on 31 August 2018. Retrieved 31 August 2018. ^ a b c Fin JS (17 June 2016), Brendan Eich – CEO of Brave, YouTube, retrieved 7 February 2018 ^ Netscape Communications Corp., Browser enhancements. Encyclopædia Britannica 2006 Ultimate Reference Suite DVD ^ TechVision: Innovators of the Net: Brendan Eich and JavaScript. Archived from the original on 8 February 2008. ^ a b Han, Sheon (4 March 2024). JavaScript Runs the World—Maybe Even Literally. Wired. Retrieved 21 August 2024. ^ a b Chapter 5. Standardization: ECMAScript. speakingjs.com. Archived from the original on 1 November 2021. Retrieved 1 November 2021. ^ a b Champeon, Steve (6 April 2001). JavaScript, How Did We Get Here?. oreilly.com. Archived from the original on 19 July 2016. Retrieved 16 July 2016. ^ Microsoft Internet Explorer 3.0 Beta Now Available. microsoft.com. Microsoft. 29 May 1996. Archived from the original on 24 November 2020. Retrieved 16 July 2016. ^ McCracken, Harry (16 September 2010). The Unwelcome Return of Best Viewed with Internet Explorer. technologizer.com. Archived from the original on 23 June 2018. Retrieved 16 July 2016. ^ Baker, Loren (24 November 2004). Mozilla Firefox Internet Browser Market Share Gains to 7.4%. Search Engine Journal. Archived from the original on 7 May 2021. Retrieved 8 May 2021. ^ Weber, Tim (9 May 2005). The assault on software giant Microsoft. BBC News. Archived from the original on 25 September 2017. ^ Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome. PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on 2 May 2012. Retrieved 28 June 2010. ^ Purdy, Kevin (11 June 2009). Lifehacker Speed Tests: Safari 4, Chrome 2. Lifehacker. Archived from the original on 14 April 2021. Retrieved 8 May 2021. ^ TraceMonkey: JavaScript Lightspeed, Brendan Eich's Blog. Archived from the original on 4 December 2015. Retrieved 22 July 2020. ^ Mozilla asks, 'Are we fast yet?'. Wired. Archived from the original on 22 June 2018. Retrieved 18 January 2019. ^ ECMAScript 6: New Features: Overview and Comparison. es6-features.org. Archived from the original on 18 March 2018. Retrieved 19 March 2018. ^ Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012 ^ Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012 ^ Lawton, George (19 July 2018). The secret history behind the success of npm and Node. TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021. ^ Brown, Paul (13 January 2017). State of the Union: npm. Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021. ^ a b c Branscombe, Mary (4 May 2016). JavaScript Standard Moves to Yearly Release Schedule; Here is What's New for ES16. The New Stack. Archived from the original on 16 January 2021. Retrieved 15 January 2021. ^ The TC39 Process. tc39.es. Ecma International. Archived from the original on 7 February 2021. Retrieved 15 January 2021. ^ ECMAScript proposals. TC39. Archived from the original on 4 December 2020. Retrieved 15 January 2021. ^ a b Ashkenas, Jeremy. List of languages that compile to JS. GitHub. Archived from the original on 31 January 2020. Retrieved 6 February 2020. ^ U.S. Trademark Serial No. 75026640. uspto.gov. United States Patent and Trademark Office. 6 May 1997. Archived from the original on 13 July 2021. Retrieved 8 May 2021. ^ Legal Notices. oracle.com. Oracle Corporation. Archived from the original on 5 June 2021. Retrieved 8 May 2021. ^ Oracle to buy Sun in $7.4-bn deal. The Economic Times. 21 April 2009. ^ Claburn, Thomas (17 September 2024). Oracle urged again to give up JavaScript trademark. The Register. Retrieved 2 February 2025. ^ Krill, Paul (20 September 2024). JavaScript community challenges Oracle's JavaScript trademark. InfoWorld. ^ a b c Usage statistics of JavaScript libraries for websites. W3Techs. Retrieved 9 April 2021. ^ Using jQuery with Bootstrap. clouddevs.com. 10 June 2019. Retrieved 17 March 2024. ^ Vanilla JS. vanilla-js.com. 16 June 2020. Archived from the original on 16 June 2020. Retrieved 17 June 2020. ^ Server-Side JavaScript Guide. oracle.com. Oracle Corporation. 11 December 1998. Archived from the original on 11 March 2021. Retrieved 8 May 2021. ^ Clinick, Andrew (14 July 2000). Introducing JScript .NET. Microsoft Developer Network. Microsoft. Archived from the original on 10 November 2017. Retrieved 10 April 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP) ^ a b Mahemoff, Michael (17 December 2009). Server-Side JavaScript, Back with a Vengeance. readwrite.com. Archived from the original on 17 June 2016. Retrieved 16 July 2016. ^ JavaScript for Acrobat. adobe.com. 7 August 2009. Archived from the original on 7 August 2009. Retrieved 18 August 2009. ^ treitter (2 February 2013). Answering the question: How do I develop an app for GNOME?. livejournal.com. Archived from the original on 11 February 2013. Retrieved 7 February 2013. ^ Ponge, Julien (19 April 2018). Oracle Nashorn: A Next-Generation JavaScript Engine for the JVM. oracle.com. Oracle Corporation. Retrieved 17 February 2025. ^ Migration Guide from Nashorn to GraalJS. graalvm.org. Retrieved 17 February 2025. ^ GraalJS. GraalVM. Retrieved 17 February 2025. ^ Java Interoperability. oracle.com. Oracle. Retrieved 17 February 2025. ^ Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel. tessel.io. Archived from the original on 26 May 2021. Retrieved 8 May 2021. ^ Node.js Raspberry Pi GPIO Introduction. w3schools.com. Archived from the original on 13 August 2021. Retrieved 3 May 2020. ^ Espruino – JavaScript for Microcontrollers. espruino.com. Archived from the original on 1 May 2020. Retrieved 3 May 2020. ^ Looper, Jen (21 September 2015). A Guide to JavaScript Engines for Idiots. Telerik Developer Network. Archived from the original on 8 December 2018. Retrieved 8 December 2018. ^ How Blink Works. Google. Retrieved 12 March 2024. ^ a b Documentation · V8. Google. Retrieved 3 March 2024. ^ Nelaturu, Keerthi. WebAssembly: What's the big deal?. medium.com. Retrieved 3 March 2024. ^ Concurrency model and Event Loop. Mozilla Developer Network. Archived from the original on 5 September 2015. Retrieved 28 August 2015. ^ Flanagan, David (17 August 2006). JavaScript: The Definitive Guide. O'Reilly Media, Inc. p. 16. ISBN 978-0-596-55447-7. Archived from the original on 1 August 2020. Retrieved 29 March 2019. ^ a b c d Korolev, Mikhail (1 March 2019). JavaScript quirks in one image from the Internet. The DEV Community. Archived from the original on 28 October 2019. Retrieved 28 October 2019. ^ Proposal-bigint/ADVANCED.md at master · tc39/Proposal-bigint. GitHub. ^ Bernhardt, Gary (2012). Wat. Destroy All Software. Archived from the original on 28 October 2019. Retrieved 28 October 2019. ^ JavaScript data types and data structures. MDN. 16 February 2017. Archived from the original on 14 March 2017. Retrieved 24 February 2017. ^ Flanagan 2006, pp. 176–178. ^ Crockford, Douglas. Prototypal Inheritance in JavaScript. Archived from the original on 13 August 2013. Retrieved 20 August 2013. ^ Inheritance and the prototype chain. Mozilla Developer Network. Archived from the original on 25 April 2013. Retrieved 6 April 2013. ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. p. 83. ISBN 978-0-321-81218-6. ^ Ghandi, Raju (2019). JavaScript Next. New York City: Apress Media. pp. 159–171. ISBN 978-1-4842-5394-6. ^ a b Haverbeke, Marijn (September 2024). Eloquent JavaScript (PDF) (4th ed.). San Francisco: No Starch Press. pp. 97–98. ISBN 978-1-71850-411-0. Archived (PDF) from the original on 12 March 2025. ^ Katz, Yehuda (12 August 2011). Understanding Prototypes in JavaScript. Archived from the original on 5 April 2013. Retrieved 6 April 2013. ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. pp. 125–127. ISBN 978-0-321-81218-6. ^ Function – JavaScript. MDN Web Docs. Retrieved 30 October 2021. ^ Properties of the Function Object. Es5.github.com. Archived from the original on 28 January 2013. Retrieved 26 May 2013. ^ Flanagan 2006, p. 141. ^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogspot.de, April 11, 2014. ^ Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010. ^ Home | CocktailJS. Cocktailjs.github.io. Archived from the original on 4 February 2017. Retrieved 24 February 2017. ^ Croll, Angus (31 May 2011). A fresh look at JavaScript Mixins. JavaScript, JavaScript…. Archived from the original on 15 April 2020. ^ E4X – Archive of obsolete content. Mozilla Developer Network. Mozilla Foundation. 14 February 2014. Archived from the original on 24 July 2014. Retrieved 13 July 2014. ^ var – JavaScript. The Mozilla Developer Network. Archived from the original on 23 December 2012. Retrieved 22 December 2012. ^ let. MDN web docs. Mozilla. Archived from the original on 28 May 2019. Retrieved 27 June 2018. ^ const. MDN web docs. Mozilla. Archived from the original on 28 June 2018. Retrieved 27 June 2018. ^ Making JavaScript Safe for Advertising. ADsafe. Archived from the original on 6 July 2021. Retrieved 8 May 2021. ^ Secure ECMA Script (SES). Archived from the original on 15 May 2013. Retrieved 26 May 2013. ^ Google Caja Project. Google. Archived from the original on 22 January 2021. Retrieved 9 July 2021. ^ Mozilla Cross-Site Scripting Vulnerability Reported and Fixed – MozillaZine Talkback. Mozillazine.org. Archived from the original on 21 July 2011. Retrieved 24 February 2017. ^ Kottelin, Thor (17 June 2008). Right-click protection? Forget about it. blog.anta.net. Archived from the original on 9 August 2011. Retrieved 28 July 2022. ^ Rehorik, Jan (29 November 2016). Why You Should Never Put Sensitive Data in Your JavaScript. ServiceObjects Blog. ServiceObjects. Archived from the original on 3 June 2019. Retrieved 3 June 2019. ^ a b Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (21 December 2016), Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (PDF), Northeastern University, arXiv:1811.00918, doi:10.14722/ndss.2017.23414, ISBN 978-1-891562-46-4, S2CID 17885720, archived from the original (PDF) on 29 March 2017, retrieved 28 July 2022 ^ Collins, Keith (27 March 2016). How one programmer broke the internet by deleting a tiny piece of code. Quartz. Archived from the original on 22 February 2017. Retrieved 22 February 2017. ^ SC Magazine UK, Developer's 11 lines of deleted code 'breaks the internet' Archived February 23, 2017, at the Wayback Machine ^ Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine ^ Festa, Paul (19 August 1998). Buffer-overflow bug in IE. CNET. Archived from the original on 25 December 2002. ^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine ^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-10-11 at the Wayback Machine ^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine ^ Protected Mode in Vista IE7 – IEBlog. Blogs.msdn.com. 9 February 2006. Archived from the original on 23 January 2010. Retrieved 24 February 2017. ^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine ^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine ^ Andersen, Starr (9 August 2004). Part 5: Enhanced Browsing Security. TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 20 October 2021. ^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-09-13 at the Wayback Machine ^ Gruss, Daniel; Maurice, Clémentine; Mangard, Stefan (24 July 2015). Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript. arXiv:1507.06955 [cs.CR]. ^ Jean-Pharuns, Alix (30 July 2015). Rowhammer.js Is the Most Ingenious Hack I've Ever Seen. Motherboard. Vice. Archived from the original on 27 January 2018. Retrieved 26 January 2018. ^ Goodin, Dan (4 August 2015). DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript. Ars Technica. Archived from the original on 27 January 2018. Retrieved 26 January 2018. ^ Auerbach, David (28 July 2015). Rowhammer security exploit: Why a new security attack is truly terrifying. slate.com. Archived from the original on 30 July 2015. Retrieved 29 July 2015. ^ AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017 ^ New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017 ^ Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack ^ Benchmark.js. benchmarkjs.com. Archived from the original on 19 December 2016. Retrieved 6 November 2016. ^ JSBEN.CH. JSBEN.CH Performance Benchmarking Playground for JavaScript. jsben.ch. Archived from the original on 27 February 2021. Retrieved 13 August 2021. ^ Eich, Brendan (3 April 2008). Popularity. Archived from the original on 3 July 2011. Retrieved 19 January 2012. ^ Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine. Visual Studio Magazine. Archived from the original on 10 February 2018. Retrieved 9 February 2018. ^ frequently asked questions. asm.js. Archived from the original on 4 June 2014. Retrieved 13 April 2014.",
    "further_reading": "See also: ECMAScript Specification Documents Flanagan, David (2020). JavaScript: The Definitive Guide (7th ed.). Sebastopol, California: O'Reilly. ISBN 978-1-491-95202-3. Haverbeke, Marijn (2024). Eloquent JavaScript (PDF) (4th ed.). San Francisco: No Starch Press. ISBN 978-1-71850-411-0. Archived (PDF) from the original on 12 March 2025. Zakas, Nicholas (2014). Principles of Object-Oriented JavaScript (1st ed.). No Starch Press. ISBN 978-1593275402.",
    "external_links": "JavaScript at Wikipedia's sister projects Definitions from WiktionaryMedia from CommonsTextbooks from WikibooksResources from WikiversityDocumentation from MediaWiki Listen to this article (48 minutes) This audio file was created from a revision of this article dated 20 August 2013 (2013-08-20), and does not reflect subsequent edits.(Audio help · More spoken articles) The Modern JavaScript Tutorial. A community maintained continuously updated collection of tutorials on the entirety of the language. JavaScript: The First 20 Years. Retrieved 6 February 2022. vteJavaScriptCode analysis ESLint JSHint JSLint Supersets JS++ TypeScript ArkTS Transpilers AtScript Babel ClojureScript CoffeeScript Dart Elm Emscripten Google Closure Compiler Google Web Toolkit Haxe LiveScript Morfik Nim Opa PureScript Reason WebSharper Concepts JavaScript library JavaScript syntax Debuggers Chrome DevTools Firefox Inspector Komodo IDE Microsoft Edge DevTools Opera DevTools Safari Web Inspector Doc generators JSDoc Editors (comparison) Ace Cloud9 IDE Atom CodeMirror Brackets Light Table PhpStorm Orion Visual Studio Visual Studio Express Visual Studio Code Visual Studio Team Services Vim Engines List of ECMAScript engines Frameworks Comparison of JavaScript frameworks List of JavaScript libraries Related technologies Ajax AssemblyScript asm.js Cascading Style Sheets Document Object Model HTML HTML5 JSON WebAssembly WebAuthn Package managers npm pnpm yarn Module bundlers Webpack Vite esbuild Server-side Active Server Pages Bun CommonJS Deno JSGI Node.js Unit testing frameworks (list) Jasmine Mocha QUnit People Douglas Crockford Ryan Dahl Brendan Eich John Resig Jesse James Garrett vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteECMAScriptDialects ActionScript Caja JavaScript engines asm.js JScript JScript .NET QtScript TypeScript WMLScript Engines(comparison) Carakan Futhark InScript JavaScriptCore JScript KJS Linear B QtScript Rhino SpiderMonkey TraceMonkey JägerMonkey Tamarin V8 ChakraCore Chakra JScript .NET Nashorn FrameworksClient-side Dojo Echo Ext JS Google Web Toolkit jQuery Lively Kernel midori MochiKit MooTools Prototype Pyjs qooxdoo SproutCore Spry Wakanda Framework Server-side Node.js Deno Bun Jaxer AppJet WakandaDB Multiple Cappuccino Libraries Backbone.js SWFObject Underscore.js People Brendan Eich Douglas Crockford John Resig Scott Isaacs Other DHTML Ecma International JSDoc JSGI JSHint JSLint JSON JSSS Sputnik SunSpider Asynchronous module definition CommonJS Lists JavaScript libraries Ajax frameworks Comparisons JavaScript frameworks server-side JavaScript vteWeb browsers Features standards protocols Features Bookmarks Extensions Privacy mode Web standards HTML v5 CSS DOM JavaScript WebAssembly Web storage IndexedDB WebGL WebGPU Protocols HTTP Encryption Cookies third-party OCSP WebRTC WebSocket ActiveBlink-basedProprietary Google Chrome Arc Avast Coc Coc Comodo Ecosia Epic Huawei Maxthon Microsoft Edge Opera (Mobile) Puffin QQ Samsung Silk Sleipnir SRWare UC Vivaldi Whale Yandex FOSS Chromium Brave Dooble Falkon Otter Supermium ungoogled Gecko-based Firefox Floorp GNU IceCat LibreWolf Midori SlimBrowser Tor Zen Gecko forks Basilisk K-Meleon Pale Moon SeaMonkey Waterfox WebKit-based Safari GNOME Web iCab Orion Multi-engine 360 DuckDuckGo Konqueror Lunascape NetFront qutebrowser Other Dillo eww Flow Ladybird Links Lynx NetSurf Opera Mini w3m DiscontinuedBlink-based Beaker Citrio Flock Redcore Rockmelt SalamWeb Sputnik Torch Gecko-based Beonex Camino Classilla Conkeror Firefox Lite Galeon Ghostzilla IceDragon Kazehakase Kylo Lotus MicroB Minimo Mozilla suite PirateBrowser Pogo Strata Swiftfox Swiftweasel TenFourFox Timberwolf xB MSHTML-based Internet Explorer AOL Deepnet GreenBrowser MediaBrowser NeoPlanet NetCaptor SpaceTime ZAC WebKit-based Arora BOLT Dolphin Fluid Google TV Iris Mercury Nokia Symbian OmniWeb Opera Coast Origyn QtWeb Shiira Steel surf Uzbl WebPositive xombrero Other abaco Amaya Arachne Arena Blazer Cake CM Deepfish Edge Legacy ELinks Gazelle HotJava IBM Home Page Reader IBM WebExplorer IBrowse Internet Explorer for Mac KidZui Line Mode Mosaic MSN TV NetPositive Netscape Skweezer Skyfire ThunderHawk Vision WinWAP WorldWideWeb Category Comparisons List vteNode.jsPlatform Node.js npm V8 CommonJS Frameworks MEAN MongoDB Express.js AngularJS/Angular MEEN (substituted with Ember.js) Backbone.js Fastify Meteor Sails.js (uses Express.js) NestJS Next.js Nuxt.js Libraries Lodash Underscore.js React.js Vue.js Languages JavaScript CoffeeScript TypeScript WebAssembly AssemblyScript C Rust Portal: Computer programming Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRefELMCIP",
    "document": "The first popular web browser with a graphical user interface, Mosaic, was released in 1993. The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used. During these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so in 1995, Netscape decided to add a programming language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java language, while also hiring Brendan Eich to embed the Scheme language. The goal was a language for the masses, to help nonprogrammers create dynamic, interactive Web sites. Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages. Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December. The choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was a popular new language, so Eich considered the JavaScript name a marketing ploy by Netscape. Microsoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft created its own interpreter called JScript. Microsoft first released JScript in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Netscape Navigator. These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of best viewed in Netscape and best viewed in Internet Explorer logos for several years. Brendan Eich later said of this period: It's still kind of a sidekick language. It's considered slow or annoying. People do pop-ups or those scrolling messages in the old status bar at the bottom of your old browser. In November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in June 1997. The standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000. However, the effort to fully standardize the language was undermined by Microsoft gaining an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer's market share reached 95%. This meant that JScript became the de facto standard for client-side scripting on the Web. Microsoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on ECMA work. Thus ECMAScript 4 was mothballed. Logo of Technical Committee 39 (TC39), the committee of Ecma International that is responsible for maintaining the standard During the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking significant market share from Internet Explorer. In 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition. Meanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools. Google debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition. The key innovation was just-in-time compilation (JIT), so other browser vendors needed to overhaul their engines for JIT. In July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009. Ambitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015. The creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime system. As of 2018, Node had been used by millions of developers, and npm had the most modules of any package manager in the world. The ECMAScript draft specification is currently maintained openly on GitHub, and editions are produced via regular annual snapshots. Potential revisions to the language are vetted through a comprehensive proposal process. Now, instead of edition numbers, developers check the status of upcoming features individually. The current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers. Plus, with the rise of single-page applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process. JavaScript is a trademark of Oracle Corporation in the United States. The trademark was originally issued to Sun Microsystems on 6 May 1997, and was transferred to Oracle when they acquired Sun in 2009. A letter was circulated in September 2024, spearheaded by Ryan Dahl, calling on Oracle to free the JavaScript trademark. Brendan Eich, the original creator of JavaScript, was among the over 14,000 signatories who supported the initiative. JavaScript is the dominant client-side scripting language of the Web, with 99% of all websites using it for this purpose. Scripts are embedded in or included from HTML documents and interact with the DOM. All major web browsers have a built-in JavaScript engine that executes the code on the user's device. Loading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page. Web page animations, such as fading objects in and out, resizing, and moving them. Playing browser games. Controlling the playback of streaming media. Generating pop-up ads or alert boxes. Validating input values of a web form before the data is sent to a web server. Logging data about the user's behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization. Redirecting a user to another page. Storing and retrieving data on the user's device, via the storage or IndexedDB standards. Over 80% of websites use a third-party JavaScript library or web framework as part of their client-side scripting. jQuery is by far the most-used. Other notable ones include Angular, Bootstrap, Lodash, Modernizr, React, Underscore, and Vue. Multiple options can be used in conjunction, such as jQuery and Bootstrap. However, the term Vanilla JS was coined for websites not using any libraries or frameworks at all, instead relying entirely on standard JavaScript functionality. The use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications. Initial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft's Internet Information Services, but they were small niches. Server-side usage eventually started to grow in the late 2000s, with the creation of Node.js and other approaches. Electron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents and GNOME Shell extensions written in JavaScript. Oracle used to provide Nashorn, a JavaScript interpreter, as part of their Java Development Kit (JDK) API library along with jjs a command line interpreter as of JDK version 8. It was removed in JDK 15. As a replacement Oracle offered GraalJS which can also be used with the OpenJDK which allows one to create and reference Java objects in JavaScript code and add runtime scripting in JavaScript to applications written in Java. JavaScript has been used in some embedded systems, usually by leveraging Node.js. This section is an excerpt from JavaScript engine.[edit] A JavaScript engine is a software component that executes JavaScript code. The first JavaScript engines were mere interpreters, but all relevant modern engines use just-in-time compilation for improved performance. JavaScript engines are typically developed by web browser vendors, and every major browser has one. In a browser, the JavaScript engine runs in concert with the rendering engine via the Document Object Model and Web IDL bindings. However, the use of JavaScript engines is not limited to browsers; for example, the V8 engine is a core component of the Node.js runtime system. Since ECMAScript is the standardized specification of JavaScript, ECMAScript engine is another name for these implementations. With the advent of WebAssembly, some engines can also execute this code in the same sandbox as regular JavaScript code. A JavaScript engine must be embedded within a runtime system (such as a web browser or a standalone system) to enable scripts to interact with the broader environment. The runtime system includes the necessary APIs for input/output operations, such as networking, storage, and graphics, and provides the ability to import scripts. JavaScript is a single-threaded language. The runtime processes messages from a queue one at a time, and it calls a function associated with each new message, creating a call stack frame with the function's arguments and local variables. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as run to completion because each message is fully processed before the next message is considered. However, the language's concurrency model describes the event loop as non-blocking: program I/O is performed using events and callback functions. This means, for example, that JavaScript can process a mouse click while waiting for a database query to return information. The notable standalone runtimes are Node.js, Deno, and Bun. The following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise. Main article: Structured programming JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted. Main article: Weakly typed JavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used. The binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator The binary - operator always casts both operands to a number Both unary operators (+, -) always cast the operand to a number. However, + always casts to Number (binary64) while - preserves BigInt (integer) Values are cast to strings like the following: Strings are left as-is Numbers are converted to their string representation Arrays have their elements cast to strings after which they are joined by commas (,) Other objects are converted to the string [object Object] where Object is the name of the constructor of the object Values are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively. JavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency. For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction. JavaScript type conversions left operand operator right operand result [] (empty array) + [] (empty array)  (empty string) [] (empty array) + {} (empty object) [object Object] (string) false (boolean) + [] (empty array) false (string) 123(string) + 1 (number) 1231 (string) 123 (string) - 1 (number) 122 (number) 123 (string) - abc (string) NaN (number) Often also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If the expression is wrapped in parentheses - ({} + []) – the curly brackets are interpreted as an empty object and the result of the expression is [object Object] as expected. Main article: Dynamic Programming Main article: Dynamic typing JavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string. JavaScript supports various ways to test the type of objects, including duck typing. Main article: eval JavaScript includes an eval function that can execute statements provided as strings at run-time. Prototypal inheritance in JavaScript is described by Douglas Crockford as: You make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that? In JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj[x] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop. Main article: Prototype-based programming JavaScript uses prototypes where many other object-oriented languages use classes for inheritance, but it's still possible to simulate most class-based features with the prototype system. Additionally, ECMAScript version 6 (released June 2015) introduced the keywords class, extends and super, which serve as syntactic sugar to abstract the underlying prototypal inheritance system with a more conventional interface. Constructors are declared by specifying a method named constructor, and all classes are automatically subclasses of the base class Object, similarly to Java. class Person { constructor(name) { this.name = name; } } class Student extends Person { constructor(name, id) { super(name); this.id = id; } } const bob = new Student(Robert, 12345); console.log(bob.name); // Robert Though the underlying object mechanism is still based on prototypes, the newer syntax is similar to other object oriented languages. Private variables are declared by prefixing the field name with a number sign (#), and polymorphism is not directly supported, although it can be emulated by manually calling different functions depending on the number and type of arguments provided. Functions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype). ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null). The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. // This code is completely equivalent to the previous snippet function Person(name) { this.name = name; } function Student(name, id) { Person.call(this, name); this.id = id; } var bob = new Student(Robert, 12345); console.log(bob.name); // Robert JavaScript's built-in classes, such as Array and Object, also have prototypes that can be modified. However, it's generally considered bad practice to modify built-in objects, because third-party code may use or inherit methods and properties from these objects, and may not expect the prototype to be modified. Main article: Method (computer science) Unlike in many object-oriented languages, in JavaScript there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling. When a function is called as a method of an object, the function's local this keyword is bound to that object for that invocation. Main article: Functional programming JavaScript functions are first-class; a function is considered to be an object. As such, a function may have properties and methods, such as .call() and .bind(). Main article: Closure (computer programming) A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes. Main article: Anonymous function JavaScript also supports anonymous functions. Main article: Delegation (object-oriented programming) JavaScript supports implicit and explicit delegation. Main articles: Role-oriented programming, Traits (computer science), and Mixin JavaScript natively supports various function-based implementations of Role patterns like Traits and Mixins. Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain. Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions. JavaScript is a zero-index language. Main article: Variadic function An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method. Main articles: Associative arrays and Object literal Like in many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format. Main article: Regular expression JavaScript supports regular expressions for text searches and manipulation.: 139 JavaScript supports promises and Async/await for handling asynchronous operations.[citation needed] Main article: Futures and promises A built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action's eventual result. JavaScript supplies combinator methods, which allow developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any. Main article: Async/await Async/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similarly to traditional synchronous, blocking code. Historically, some JavaScript engines supported these non-standard features: array comprehensions and generator expressions (like Python) concise function expressions (function(args) expr; this experimental syntax predated arrow functions) ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21) Main article: JavaScript syntax Variables in JavaScript can be defined using either the var, let or const keywords. Variables defined without keywords will be defined at the global scope. Arrow functions were first introduced in 6th Edition – ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their creation, unless surrounded by parenthesis and executed immediately. Here is an example of JavaScript syntax. // Declares a function-scoped variable named `x`, and implicitly assigns the // special value `undefined` to it. Variables without value are automatically // set to undefined. // var is generally considered bad practice and let and const are usually preferred. var x; // Variables can be manually set to `undefined` like so let x2 = undefined; // Declares a block-scoped variable named `y`, and implicitly sets it to // `undefined`. The `let` keyword was introduced in ECMAScript 2015. let y; // Declares a block-scoped, un-reassignable variable named `z`, and sets it to // a string literal. The `const` keyword was also introduced in ECMAScript 2015, // and must be explicitly assigned to. // The keyword `const` means constant, hence the variable cannot be reassigned // as the value is `constant`. const z = this value cannot be reassigned!; // Declares a global-scoped variable and assigns 3. This is generally considered // bad practice, and will not work if strict mode is on. t = 3; // Declares a variable named `myNumber`, and assigns a number literal (the value // `2`) to it. let myNumber = 2; // Reassigns `myNumber`, setting it to a string literal (the value `foo`). // JavaScript is a dynamically-typed language, so this is legal. myNumber = foo; Note the comments in the examples above, all of which were preceded with two forward slashes. More examples can be found at the Wikibooks page on JavaScript syntax examples. See also: Browser security JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one website do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox. There are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements). Closure Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML. Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page. Main article: Cross-site scripting A common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Website, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. One important solution to XSS vulnerabilities is HTML sanitization. Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS. XSS vulnerabilities can also occur because of implementation mistakes by browser authors. Main article: Cross-site request forgery Another cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help. JavaScript hijacking is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include: requiring an authentication token in the POST and GET parameters for any response that returns private information. Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The author of an application should not assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are: Website authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered. JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client. Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it. It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker. Prototype pollution is a runtime vulnerability in which attackers can overwrite arbitrary properties in an object's prototype. Package management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developers' program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133,000 websites, researchers found 37% of the websites included a library with at least one known vulnerability. The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago. Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break. Further information: Buffer overflow JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges. These flaws have affected major browsers including Firefox, Internet Explorer, and Safari. Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past). In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges. Google Chrome similarly confines its page renderers to their own sandbox. Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web. Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer and Firefox. In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer. Microsoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[failed verification] In 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers. In 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It is called ASLR⊕Cache or AnC. In 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation. Important tools have evolved with the language. Every major web browser has built-in web development tools, including a JavaScript debugger. Static program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines. Some browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench. Many text editors have syntax highlighting support for JavaScript code. A common misconception is that JavaScript is directly related to Java. Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed, and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0. Both languages first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications. The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme. JSON is a data format derived from JavaScript; hence the name JavaScript Object Notation. It is a widely used format supported by many other programming languages. Many websites are JavaScript-heavy, so transpilers have been created to convert code written in other languages, which can aid the development process. TypeScript and CoffeeScript are two notable languages that transpile to JavaScript. WebAssembly is a newer language with a bytecode format designed to complement JavaScript, especially the performance-critical portions of web page scripts. All of the major JavaScript engines support WebAssembly, which runs in the same sandbox as regular JavaScript code. asm.js is a subset of JavaScript that served as the forerunner of WebAssembly. ^ a b Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet (Press release). 4 December 1995. Archived from the original on 16 September 2007. ^ ECMAScript® 2024 Language Specification. June 2024. Retrieved 30 August 2024. ^ ECMAScript® 2025 Language Specification. 27 March 2024. Retrieved 17 April 2024. ^ nodejs/node-eps. GitHub. Archived from the original on 29 August 2020. Retrieved 5 July 2018. ^ a b Seibel, Peter (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. ISBN 978-1-4302-1948-4. Archived from the original on 24 December 2020. Retrieved 25 December 2018. Eich: The immediate concern at Netscape was it must look like Java. ^ a b c d e Chapter 4. How JavaScript Was Created. speakingjs.com. Archived from the original on 27 February 2020. Retrieved 21 November 2017. ^ Popularity – Brendan Eich. ^ Brendan Eich: An Introduction to JavaScript, JSConf 2010. YouTube. 20 January 2013. p. 22m. Archived from the original on 29 August 2020. Retrieved 25 November 2019. Eich: function, eight letters, I was influenced by AWK. ^ Eich, Brendan (1998). Foreword. In Goodman, Danny (ed.). JavaScript Bible (3rd ed.). John Wiley & Sons. ISBN 0-7645-3188-3. LCCN 97078208. OCLC 38888873. OL 712205M. ^ a b Usage Statistics of JavaScript as Client-side Programming Language on Websites. W3Techs. Retrieved 27 February 2024. ^ ECMAScript 2020 Language Specification. Archived from the original on 8 May 2020. Retrieved 8 May 2020. ^ Enzer, Larry (31 August 2018). The Evolution of the Web Browsers. Monmouth Web Developers. Archived from the original on 31 August 2018. Retrieved 31 August 2018. ^ a b c Fin JS (17 June 2016), Brendan Eich – CEO of Brave, YouTube, retrieved 7 February 2018 ^ Netscape Communications Corp., Browser enhancements. Encyclopædia Britannica 2006 Ultimate Reference Suite DVD ^ TechVision: Innovators of the Net: Brendan Eich and JavaScript. Archived from the original on 8 February 2008. ^ a b Han, Sheon (4 March 2024). JavaScript Runs the World—Maybe Even Literally. Wired. Retrieved 21 August 2024. ^ a b Chapter 5. Standardization: ECMAScript. speakingjs.com. Archived from the original on 1 November 2021. Retrieved 1 November 2021. ^ a b Champeon, Steve (6 April 2001). JavaScript, How Did We Get Here?. oreilly.com. Archived from the original on 19 July 2016. Retrieved 16 July 2016. ^ Microsoft Internet Explorer 3.0 Beta Now Available. microsoft.com. Microsoft. 29 May 1996. Archived from the original on 24 November 2020. Retrieved 16 July 2016. ^ McCracken, Harry (16 September 2010). The Unwelcome Return of Best Viewed with Internet Explorer. technologizer.com. Archived from the original on 23 June 2018. Retrieved 16 July 2016. ^ Baker, Loren (24 November 2004). Mozilla Firefox Internet Browser Market Share Gains to 7.4%. Search Engine Journal. Archived from the original on 7 May 2021. Retrieved 8 May 2021. ^ Weber, Tim (9 May 2005). The assault on software giant Microsoft. BBC News. Archived from the original on 25 September 2017. ^ Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome. PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on 2 May 2012. Retrieved 28 June 2010. ^ Purdy, Kevin (11 June 2009). Lifehacker Speed Tests: Safari 4, Chrome 2. Lifehacker. Archived from the original on 14 April 2021. Retrieved 8 May 2021. ^ TraceMonkey: JavaScript Lightspeed, Brendan Eich's Blog. Archived from the original on 4 December 2015. Retrieved 22 July 2020. ^ Mozilla asks, 'Are we fast yet?'. Wired. Archived from the original on 22 June 2018. Retrieved 18 January 2019. ^ ECMAScript 6: New Features: Overview and Comparison. es6-features.org. Archived from the original on 18 March 2018. Retrieved 19 March 2018. ^ Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012 ^ Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012 ^ Lawton, George (19 July 2018). The secret history behind the success of npm and Node. TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021. ^ Brown, Paul (13 January 2017). State of the Union: npm. Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021. ^ a b c Branscombe, Mary (4 May 2016). JavaScript Standard Moves to Yearly Release Schedule; Here is What's New for ES16. The New Stack. Archived from the original on 16 January 2021. Retrieved 15 January 2021. ^ The TC39 Process. tc39.es. Ecma International. Archived from the original on 7 February 2021. Retrieved 15 January 2021. ^ ECMAScript proposals. TC39. Archived from the original on 4 December 2020. Retrieved 15 January 2021. ^ a b Ashkenas, Jeremy. List of languages that compile to JS. GitHub. Archived from the original on 31 January 2020. Retrieved 6 February 2020. ^ U.S. Trademark Serial No. 75026640. uspto.gov. United States Patent and Trademark Office. 6 May 1997. Archived from the original on 13 July 2021. Retrieved 8 May 2021. ^ Legal Notices. oracle.com. Oracle Corporation. Archived from the original on 5 June 2021. Retrieved 8 May 2021. ^ Oracle to buy Sun in $7.4-bn deal. The Economic Times. 21 April 2009. ^ Claburn, Thomas (17 September 2024). Oracle urged again to give up JavaScript trademark. The Register. Retrieved 2 February 2025. ^ Krill, Paul (20 September 2024). JavaScript community challenges Oracle's JavaScript trademark. InfoWorld. ^ a b c Usage statistics of JavaScript libraries for websites. W3Techs. Retrieved 9 April 2021. ^ Using jQuery with Bootstrap. clouddevs.com. 10 June 2019. Retrieved 17 March 2024. ^ Vanilla JS. vanilla-js.com. 16 June 2020. Archived from the original on 16 June 2020. Retrieved 17 June 2020. ^ Server-Side JavaScript Guide. oracle.com. Oracle Corporation. 11 December 1998. Archived from the original on 11 March 2021. Retrieved 8 May 2021. ^ Clinick, Andrew (14 July 2000). Introducing JScript .NET. Microsoft Developer Network. Microsoft. Archived from the original on 10 November 2017. Retrieved 10 April 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP) ^ a b Mahemoff, Michael (17 December 2009). Server-Side JavaScript, Back with a Vengeance. readwrite.com. Archived from the original on 17 June 2016. Retrieved 16 July 2016. ^ JavaScript for Acrobat. adobe.com. 7 August 2009. Archived from the original on 7 August 2009. Retrieved 18 August 2009. ^ treitter (2 February 2013). Answering the question: How do I develop an app for GNOME?. livejournal.com. Archived from the original on 11 February 2013. Retrieved 7 February 2013. ^ Ponge, Julien (19 April 2018). Oracle Nashorn: A Next-Generation JavaScript Engine for the JVM. oracle.com. Oracle Corporation. Retrieved 17 February 2025. ^ Migration Guide from Nashorn to GraalJS. graalvm.org. Retrieved 17 February 2025. ^ GraalJS. GraalVM. Retrieved 17 February 2025. ^ Java Interoperability. oracle.com. Oracle. Retrieved 17 February 2025. ^ Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel. tessel.io. Archived from the original on 26 May 2021. Retrieved 8 May 2021. ^ Node.js Raspberry Pi GPIO Introduction. w3schools.com. Archived from the original on 13 August 2021. Retrieved 3 May 2020. ^ Espruino – JavaScript for Microcontrollers. espruino.com. Archived from the original on 1 May 2020. Retrieved 3 May 2020. ^ Looper, Jen (21 September 2015). A Guide to JavaScript Engines for Idiots. Telerik Developer Network. Archived from the original on 8 December 2018. Retrieved 8 December 2018. ^ How Blink Works. Google. Retrieved 12 March 2024. ^ a b Documentation · V8. Google. Retrieved 3 March 2024. ^ Nelaturu, Keerthi. WebAssembly: What's the big deal?. medium.com. Retrieved 3 March 2024. ^ Concurrency model and Event Loop. Mozilla Developer Network. Archived from the original on 5 September 2015. Retrieved 28 August 2015. ^ Flanagan, David (17 August 2006). JavaScript: The Definitive Guide. O'Reilly Media, Inc. p. 16. ISBN 978-0-596-55447-7. Archived from the original on 1 August 2020. Retrieved 29 March 2019. ^ a b c d Korolev, Mikhail (1 March 2019). JavaScript quirks in one image from the Internet. The DEV Community. Archived from the original on 28 October 2019. Retrieved 28 October 2019. ^ Proposal-bigint/ADVANCED.md at master · tc39/Proposal-bigint. GitHub. ^ Bernhardt, Gary (2012). Wat. Destroy All Software. Archived from the original on 28 October 2019. Retrieved 28 October 2019. ^ JavaScript data types and data structures. MDN. 16 February 2017. Archived from the original on 14 March 2017. Retrieved 24 February 2017. ^ Flanagan 2006, pp. 176–178. ^ Crockford, Douglas. Prototypal Inheritance in JavaScript. Archived from the original on 13 August 2013. Retrieved 20 August 2013. ^ Inheritance and the prototype chain. Mozilla Developer Network. Archived from the original on 25 April 2013. Retrieved 6 April 2013. ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. p. 83. ISBN 978-0-321-81218-6. ^ Ghandi, Raju (2019). JavaScript Next. New York City: Apress Media. pp. 159–171. ISBN 978-1-4842-5394-6. ^ a b Haverbeke, Marijn (September 2024). Eloquent JavaScript (PDF) (4th ed.). San Francisco: No Starch Press. pp. 97–98. ISBN 978-1-71850-411-0. Archived (PDF) from the original on 12 March 2025. ^ Katz, Yehuda (12 August 2011). Understanding Prototypes in JavaScript. Archived from the original on 5 April 2013. Retrieved 6 April 2013. ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. pp. 125–127. ISBN 978-0-321-81218-6. ^ Function – JavaScript. MDN Web Docs. Retrieved 30 October 2021. ^ Properties of the Function Object. Es5.github.com. Archived from the original on 28 January 2013. Retrieved 26 May 2013. ^ Flanagan 2006, p. 141. ^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogspot.de, April 11, 2014. ^ Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010. ^ Home | CocktailJS. Cocktailjs.github.io. Archived from the original on 4 February 2017. Retrieved 24 February 2017. ^ Croll, Angus (31 May 2011). A fresh look at JavaScript Mixins. JavaScript, JavaScript…. Archived from the original on 15 April 2020. ^ E4X – Archive of obsolete content. Mozilla Developer Network. Mozilla Foundation. 14 February 2014. Archived from the original on 24 July 2014. Retrieved 13 July 2014. ^ var – JavaScript. The Mozilla Developer Network. Archived from the original on 23 December 2012. Retrieved 22 December 2012. ^ let. MDN web docs. Mozilla. Archived from the original on 28 May 2019. Retrieved 27 June 2018. ^ const. MDN web docs. Mozilla. Archived from the original on 28 June 2018. Retrieved 27 June 2018. ^ Making JavaScript Safe for Advertising. ADsafe. Archived from the original on 6 July 2021. Retrieved 8 May 2021. ^ Secure ECMA Script (SES). Archived from the original on 15 May 2013. Retrieved 26 May 2013. ^ Google Caja Project. Google. Archived from the original on 22 January 2021. Retrieved 9 July 2021. ^ Mozilla Cross-Site Scripting Vulnerability Reported and Fixed – MozillaZine Talkback. Mozillazine.org. Archived from the original on 21 July 2011. Retrieved 24 February 2017. ^ Kottelin, Thor (17 June 2008). Right-click protection? Forget about it. blog.anta.net. Archived from the original on 9 August 2011. Retrieved 28 July 2022. ^ Rehorik, Jan (29 November 2016). Why You Should Never Put Sensitive Data in Your JavaScript. ServiceObjects Blog. ServiceObjects. Archived from the original on 3 June 2019. Retrieved 3 June 2019. ^ a b Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (21 December 2016), Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (PDF), Northeastern University, arXiv:1811.00918, doi:10.14722/ndss.2017.23414, ISBN 978-1-891562-46-4, S2CID 17885720, archived from the original (PDF) on 29 March 2017, retrieved 28 July 2022 ^ Collins, Keith (27 March 2016). How one programmer broke the internet by deleting a tiny piece of code. Quartz. Archived from the original on 22 February 2017. Retrieved 22 February 2017. ^ SC Magazine UK, Developer's 11 lines of deleted code 'breaks the internet' Archived February 23, 2017, at the Wayback Machine ^ Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine ^ Festa, Paul (19 August 1998). Buffer-overflow bug in IE. CNET. Archived from the original on 25 December 2002. ^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine ^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-10-11 at the Wayback Machine ^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine ^ Protected Mode in Vista IE7 – IEBlog. Blogs.msdn.com. 9 February 2006. Archived from the original on 23 January 2010. Retrieved 24 February 2017. ^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine ^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine ^ Andersen, Starr (9 August 2004). Part 5: Enhanced Browsing Security. TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 20 October 2021. ^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-09-13 at the Wayback Machine ^ Gruss, Daniel; Maurice, Clémentine; Mangard, Stefan (24 July 2015). Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript. arXiv:1507.06955 [cs.CR]. ^ Jean-Pharuns, Alix (30 July 2015). Rowhammer.js Is the Most Ingenious Hack I've Ever Seen. Motherboard. Vice. Archived from the original on 27 January 2018. Retrieved 26 January 2018. ^ Goodin, Dan (4 August 2015). DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript. Ars Technica. Archived from the original on 27 January 2018. Retrieved 26 January 2018. ^ Auerbach, David (28 July 2015). Rowhammer security exploit: Why a new security attack is truly terrifying. slate.com. Archived from the original on 30 July 2015. Retrieved 29 July 2015. ^ AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017 ^ New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017 ^ Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack ^ Benchmark.js. benchmarkjs.com. Archived from the original on 19 December 2016. Retrieved 6 November 2016. ^ JSBEN.CH. JSBEN.CH Performance Benchmarking Playground for JavaScript. jsben.ch. Archived from the original on 27 February 2021. Retrieved 13 August 2021. ^ Eich, Brendan (3 April 2008). Popularity. Archived from the original on 3 July 2011. Retrieved 19 January 2012. ^ Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine. Visual Studio Magazine. Archived from the original on 10 February 2018. Retrieved 9 February 2018. ^ frequently asked questions. asm.js. Archived from the original on 4 June 2014. Retrieved 13 April 2014. See also: ECMAScript Specification Documents Flanagan, David (2020). JavaScript: The Definitive Guide (7th ed.). Sebastopol, California: O'Reilly. ISBN 978-1-491-95202-3. Haverbeke, Marijn (2024). Eloquent JavaScript (PDF) (4th ed.). San Francisco: No Starch Press. ISBN 978-1-71850-411-0. Archived (PDF) from the original on 12 March 2025. Zakas, Nicholas (2014). Principles of Object-Oriented JavaScript (1st ed.). No Starch Press. ISBN 978-1593275402. JavaScript at Wikipedia's sister projects Definitions from WiktionaryMedia from CommonsTextbooks from WikibooksResources from WikiversityDocumentation from MediaWiki Listen to this article (48 minutes) This audio file was created from a revision of this article dated 20 August 2013 (2013-08-20), and does not reflect subsequent edits.(Audio help · More spoken articles) The Modern JavaScript Tutorial. A community maintained continuously updated collection of tutorials on the entirety of the language. JavaScript: The First 20 Years. Retrieved 6 February 2022. vteJavaScriptCode analysis ESLint JSHint JSLint Supersets JS++ TypeScript ArkTS Transpilers AtScript Babel ClojureScript CoffeeScript Dart Elm Emscripten Google Closure Compiler Google Web Toolkit Haxe LiveScript Morfik Nim Opa PureScript Reason WebSharper Concepts JavaScript library JavaScript syntax Debuggers Chrome DevTools Firefox Inspector Komodo IDE Microsoft Edge DevTools Opera DevTools Safari Web Inspector Doc generators JSDoc Editors (comparison) Ace Cloud9 IDE Atom CodeMirror Brackets Light Table PhpStorm Orion Visual Studio Visual Studio Express Visual Studio Code Visual Studio Team Services Vim Engines List of ECMAScript engines Frameworks Comparison of JavaScript frameworks List of JavaScript libraries Related technologies Ajax AssemblyScript asm.js Cascading Style Sheets Document Object Model HTML HTML5 JSON WebAssembly WebAuthn Package managers npm pnpm yarn Module bundlers Webpack Vite esbuild Server-side Active Server Pages Bun CommonJS Deno JSGI Node.js Unit testing frameworks (list) Jasmine Mocha QUnit People Douglas Crockford Ryan Dahl Brendan Eich John Resig Jesse James Garrett vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteECMAScriptDialects ActionScript Caja JavaScript engines asm.js JScript JScript .NET QtScript TypeScript WMLScript Engines(comparison) Carakan Futhark InScript JavaScriptCore JScript KJS Linear B QtScript Rhino SpiderMonkey TraceMonkey JägerMonkey Tamarin V8 ChakraCore Chakra JScript .NET Nashorn FrameworksClient-side Dojo Echo Ext JS Google Web Toolkit jQuery Lively Kernel midori MochiKit MooTools Prototype Pyjs qooxdoo SproutCore Spry Wakanda Framework Server-side Node.js Deno Bun Jaxer AppJet WakandaDB Multiple Cappuccino Libraries Backbone.js SWFObject Underscore.js People Brendan Eich Douglas Crockford John Resig Scott Isaacs Other DHTML Ecma International JSDoc JSGI JSHint JSLint JSON JSSS Sputnik SunSpider Asynchronous module definition CommonJS Lists JavaScript libraries Ajax frameworks Comparisons JavaScript frameworks server-side JavaScript vteWeb browsers Features standards protocols Features Bookmarks Extensions Privacy mode Web standards HTML v5 CSS DOM JavaScript WebAssembly Web storage IndexedDB WebGL WebGPU Protocols HTTP Encryption Cookies third-party OCSP WebRTC WebSocket ActiveBlink-basedProprietary Google Chrome Arc Avast Coc Coc Comodo Ecosia Epic Huawei Maxthon Microsoft Edge Opera (Mobile) Puffin QQ Samsung Silk Sleipnir SRWare UC Vivaldi Whale Yandex FOSS Chromium Brave Dooble Falkon Otter Supermium ungoogled Gecko-based Firefox Floorp GNU IceCat LibreWolf Midori SlimBrowser Tor Zen Gecko forks Basilisk K-Meleon Pale Moon SeaMonkey Waterfox WebKit-based Safari GNOME Web iCab Orion Multi-engine 360 DuckDuckGo Konqueror Lunascape NetFront qutebrowser Other Dillo eww Flow Ladybird Links Lynx NetSurf Opera Mini w3m DiscontinuedBlink-based Beaker Citrio Flock Redcore Rockmelt SalamWeb Sputnik Torch Gecko-based Beonex Camino Classilla Conkeror Firefox Lite Galeon Ghostzilla IceDragon Kazehakase Kylo Lotus MicroB Minimo Mozilla suite PirateBrowser Pogo Strata Swiftfox Swiftweasel TenFourFox Timberwolf xB MSHTML-based Internet Explorer AOL Deepnet GreenBrowser MediaBrowser NeoPlanet NetCaptor SpaceTime ZAC WebKit-based Arora BOLT Dolphin Fluid Google TV Iris Mercury Nokia Symbian OmniWeb Opera Coast Origyn QtWeb Shiira Steel surf Uzbl WebPositive xombrero Other abaco Amaya Arachne Arena Blazer Cake CM Deepfish Edge Legacy ELinks Gazelle HotJava IBM Home Page Reader IBM WebExplorer IBrowse Internet Explorer for Mac KidZui Line Mode Mosaic MSN TV NetPositive Netscape Skweezer Skyfire ThunderHawk Vision WinWAP WorldWideWeb Category Comparisons List vteNode.jsPlatform Node.js npm V8 CommonJS Frameworks MEAN MongoDB Express.js AngularJS/Angular MEEN (substituted with Ember.js) Backbone.js Fastify Meteor Sails.js (uses Express.js) NestJS Next.js Nuxt.js Libraries Lodash Underscore.js React.js Vue.js Languages JavaScript CoffeeScript TypeScript WebAssembly AssemblyScript C Rust Portal: Computer programming Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRefELMCIP",
    "paradigm": "Multi-paradigm : event-driven , functional , imperative , procedural , object-oriented",
    "first_appeared": "4 December 1995 ; 29 years ago ( 1995-12-04 )",
    "stable_release": "ECMAScript 2024",
    "typing_discipline": "Dynamic , weak , duck",
    "influenced_by": "Java , Scheme , Self , AWK , HyperTalk",
    "influenced": "ActionScript , ArkTS , AssemblyScript , CoffeeScript , Dart , Haxe , JS++ , Opa , TypeScript",
    "stable_release_date": "2024-01-01T00:00:00Z"
  },
  {
    "title": "Dart (programming language)",
    "url": "https://en.wikipedia.org/wiki/Dart_(programming_language)",
    "history": "Dart was unveiled at the GOTO conference in Aarhus, Denmark, October 10–12, 2011. Lars Bak and Kasper Lund founded the project. Dart 1.0 was released on November 14, 2013. Dart had a mixed reception at first. Some criticized the Dart initiative for fragmenting the web because of plans to include a Dart VM in Chrome. Those plans were dropped in 2015 with the Dart 1.9 release. Focus changed to compiling Dart code to JavaScript. Dart 2.0 was released in August 2018 with language changes including a type system. Dart 2.6 introduced a new extension, dart2native. This extended native compilation to the Linux, macOS, and Windows desktop platforms. Earlier developers could create new tools using only Android or iOS devices. With this extension, developers could deploy a program into self-contained executables. The Dart SDK doesn't need to be installed to run these self-contained executables. The Flutter toolkit integrates Dart, so it can compile on small services like backend support. Dart 3.0 was released in May 2023 with changes to the type system to require sound null safety. This release included new features like records, patterns, and class modifiers. Dart can compile to WebAssembly since version 3.4.",
    "specification": "Dart released the 5th edition of its language specification on April 9, 2021. This covers all syntax through Dart 2.10. A draft of the 6th edition includes all syntax through 2.13. Accepted proposals for the specification and drafts of potential features can be found in the Dart language repository on GitHub. ECMA International formed technical committee, TC52, to standardize Dart. ECMA approved the first edition of the Dart language specification as ECMA-408 in July 2014 at its 107th General Assembly. Subsequent editions were approved in December 2014, June 2015, and December 2015.",
    "deploying_apps": "The Dart software development kit (SDK) ships with a standalone Dart runtime. This allows Dart code to run in a command-line interface environment. The SDK includes tools to compile and package Dart apps. Dart ships with a complete standard library allowing users to write fully working system apps like custom web servers. Developers can deploy Dart apps in six ways: Dart deployment methods Deployment type Target platform Platform-specific Requires Dart VM Compile speed Execution speed JavaScript Browser No No Slow Fast WebAssembly Browser No No Slow Fast Self-contained executable macOS, Windows, Linux Yes No Slow Fast Ahead-of-time module macOS, Windows, Linux Yes No Slow Fast Just-in-time module macOS, Windows, Linux Yes Yes Fast Slow Portable module macOS, Windows, Linux No Yes Fast Slow",
    "deploying_to_the_web": "Dart 3 can deploy apps to the web as either JavaScript or WebAssembly apps. Dart supports compiling to WebAssembly as of May 2024[update].",
    "javascript": "To run in mainstream web browsers, Dart relies on a source-to-source compiler to JavaScript. This makes Dart apps compatible with all major browsers. Dart optimizes the compiled JavaScript output to avoid expensive checks and operations. This results in JavaScript code that can run faster than equivalent code handwritten in plain JavaScript. The first Dart-to-JavaScript compiler was dartc. It was deprecated in Dart 2.0. The second Dart-to-JavaScript compiler was frog. Written in Dart, it was introduced in 2013 and deprecated in 2020. This should not be confused with Dart Frog, an open-source Dart framework for building backend systems from Very Good Ventures. The third Dart-to-JavaScript compiler is dart2js. Introduced in Dart 2.0, the Dart-based dart2js evolved from earlier compilers. It intended to implement the full Dart language specification and semantics. Developers use this compiler for production builds. It compiles to minified JavaScript. The fourth Dart-to-JavaScript compiler is dartdevc. Developers could use this compiler for development builds. It compiles to human-readable JavaScript. On March 28, 2013, the Dart team posted an update on their blog addressing Dart code compiled to JavaScript with the dart2js compiler, stating that it now runs faster than handwritten JavaScript on Chrome's V8 JavaScript engine for the DeltaBlue benchmark. Prior to Dart 2.18, both dart2js and dartdevc could be called from the command line. Dart 2.18 folded these functions into the Dart SDK. This removed the direct command line wrappers but kept the two compilers. The webdev serve command calls the dartdevc compiler. The webdev build command calls the dart2js compiler. The Dart SDK compiles to JavaScript in two ways. To debug code, run webdev serve to compile a larger JavaScript file with human-readable code. Dart-generated JavaScript can be debugged using Chrome only.$ cd <dart_app_directory> $ webdev serve [--debug] [-o <target.js>] To create production apps, run webdev build to compile a minified JavaScript file.$ cd <dart_app_directory> $ webdev build [-o <target.js>]",
    "webassembly": "With the Dart 3.22 release, Google announced support for compiling Dart code to WebAssembly. Full support for Wasm requires adoption of the WasmGC feature into the Wasm standard. Chrome 119 supports WasmGC. Firefox 120 and later could support WasmGC, but a current bug is blocking compatibility. Safari and Microsoft Edge are integrating WasmGC support.",
    "deploying_to_native_platforms": "Dart can compile to native machine code for macOS, Windows, and Linux as command line tools. Dart can compile apps with user interfaces to the web, iOS, Android, macOS, Windows, and Linux using the Flutter framework.",
    "self_contained_executable": "Self-contained executables include native machine code compiled from the specified Dart code file, its dependencies, and a small Dart runtime. The runtime handles type checking and garbage collection. The compiler produces output specific to the architecture on which the developer compiled it. This file can be distributed as any other native executable.$ dart compile exe <source.dart> -o <target_app> Generated: <target_app> $ ./<target_app>",
    "ahead_of_time_module": "When compiled ahead of time, Dart code produces performant and platform-specific modules. It includes all dependent libraries and packages the app needs. This increases its compilation time. The compiler outputs an app specific to the architecture on which it was compiled.$ dart compile aot-snapshot <source.dart> Generated <target_app.aot> $ dartaotruntime <target_app.aot>",
    "just_in_time_module": "When compiled just in time, Dart code produces performant modules that compile fast. This module needs the Dart VM included with the SDK to run. The compiler loads all parsed classes and compiled code into memory the first time the app runs. This speeds up any subsequent run of the app. The compiler outputs an app specific to the architecture on which it was compiled.$ dart compile jit-snapshot <source.dart> Compiling <source.dart> to jit-snapshot file <target_app.jit> Hello world! $ dart run <target_app.jit> Hello world!",
    "dart_kernel_module": "When compiled as a kernel module, Dart code produces a machine-independent format called the Dart Intermediate Representation (Dart IR). The Dart IR bytecode format can work on any architecture that has a Dart VM. This makes this format very portable and quick to compile, but less performant than other compilation outputs.$ dart compile kernel <source.dart> Compiling <source.dart> to kernel file <target_app>.dill. $ dart run <target_app>.dill",
    "concurrency": "To achieve concurrency, Dart uses isolated, independent workers that do not share memory, but use message passing, similarly to Erlang processes (also see actor model). Every Dart program uses at least one isolate, which is the main isolate. Since Dart 2, the Dart web platform no longer supports isolates, and suggests developers use Web Workers instead.",
    "null_safety": "Starting with Dart 2.12, Dart introduced sound null safety. This serves as a guarantee that variables cannot return a null value unless it has explicit permission. Null safety prevents the developer from introducing null-pointer exceptions, a common, but difficult to debug, error. With Dart 3.0, all code must follow sound null safety.",
    "data_storage": "Snapshot files, a core part of the Dart VM, store objects and other runtime data. Script snapshots Dart programs can be compiled into snapshot files containing all of the program code and dependencies preparsed and ready to execute, allowing fast startups. Full snapshots The Dart core libraries can be compiled into a snapshot file that allows fast loading of the libraries. Most standard distributions of the main Dart VM have a prebuilt snapshot for the core libraries that is loaded at runtime. Object snapshots Dart uses snapshots to serialize messages that it passes between isolates. As a very asynchronous language, Dart uses isolates for concurrency. An object generates a snapshot, transfers it to another isolate, then the isolate deserializes it.",
    "editors": "On November 18, 2011, Google released Dart Editor, an open-source program based on Eclipse components, for macOS, Windows, and Linux-based operating systems. The editor supports syntax highlighting, code completion, JavaScript compiling, running web and server Dart applications, and debugging. On August 13, 2012, Google announced the release of an Eclipse plugin for Dart development. On April 18, 2015, Google retired the Dart Editor in favor of the JetBrains integrated development environment (IDE). Android Studio, IntelliJ IDEA, PyCharm, PhpStorm and WebStorm support a Dart plugin. This plugin supports many features such as syntax highlighting, code completion, analysis, refactoring, debugging, and more. Other editors include plugins for Dart including Sublime Text, Atom, Emacs, Vim and Visual Studio Code.",
    "chrome_dev_editor": "In 2013, the Chromium team began work on an open source, Chrome App-based development environment with a reusable library of GUI widgets, codenamed Spark. The project was later renamed as Chrome Dev Editor. Built in Dart, it contained Spark which is powered by Polymer. In June 2015, Google transferred the CDE project to GitHub as a free software project and ceased active investment in CDE. The Chrome Dev Editor project was archived on April 24, 2021.",
    "dartpad": "To provide an easier way to start using Dart, the Dart team created DartPad at the start of 2015. This online editor allows developers to experiment with Dart application programming interfaces (APIs) and run Dart code. It provides syntax highlighting, code analysis, code completion, documentation, and HTML and CSS editing.",
    "development_tools": "The Dart DevTools, written in Dart, include debugging and performance tools.",
    "flutter": "Google introduced Flutter for native app development. Built using Dart, C, C++ and Skia, Flutter is an open-source, multi-platform app UI framework. Prior to Flutter 2.0, developers could only target Android, iOS and the web. Flutter 2.0 released support for macOS, Linux, and Windows as a beta feature. Flutter 2.10 released with production support for Windows and Flutter 3 released production support for all desktop platforms. It provides a framework, widgets, and tools. This framework gives developers a way to build and deploy mobile, desktop, and web apps. Flutter works with Firebase and supports extending the framework through add-ons called packages. These can be found on their package repository, pub.dev. JetBrains also supports a Flutter plugin.",
    "example": "A Hello, World! example: void main() { print('Hello, World!'); } A simple for-loop: void main() { for (var i = 1; i <= 10; i++) { print(i); } } A function to calculate the nth Fibonacci number: void main() { var i = 20; print('fibonacci($i) = ${fibonacci(i)}'); } /// Computes the nth Fibonacci number. int fibonacci(int n) { return n < 2 ? n : (fibonacci(n - 1) + fibonacci(n - 2)); } A simple class: // Import the math library to get access to the sqrt function. // Imported with `math` as name, so accesses need to use `math.` as prefix. import 'dart:math' as math; // Create a class for Point. class Point { // Final variables cannot be changed once they are assigned. // Declare two instance variables. final num x, y; // A constructor, with syntactic sugar for setting instance variables. // The constructor has two mandatory parameters. Point(this.x, this.y); // A named constructor with an initializer list. Point.origin() : x = 0, y = 0; // A method. num distanceTo(Point other) { var dx = x - other.x; var dy = y - other.y; return math.sqrt(dx * dx + dy * dy); } // Example of a getter. // Acts the same as a final variable, but is computed on each access. num get magnitude => math.sqrt(x * x + y * y); // Example of operator overloading Point operator +(Point other) => Point(x + other.x, y + other.y); // When instantiating a class such as Point in Dart 2+, new is // an optional word } // All Dart programs start with main(). void main() { // Instantiate point objects. var p1 = Point(10, 10); print(p1.magnitude); var p2 = Point.origin(); var distance = p1.distanceTo(p2); print(distance); }",
    "influences_from_other_languages": "Dart belongs to the ALGOL language family.[failed verification] Its members include C, Java, C#, JavaScript, and others. The method cascade syntax was adopted from Smalltalk. This syntax provides a shortcut for invoking several methods one after another on the same object. Dart's mixins were influenced by Strongtalk[citation needed] and Ruby. Dart makes use of isolates as a concurrency and security unit when structuring applications. The Isolate concept builds upon the Actor model implemented in Erlang. In 2004, Gilad Bracha (who was a member of the Dart team) and David Ungar first proposed Mirror API for performing controlled and secure reflection in a paper. The concept was first implemented in Self.",
    "see_also": "Computer programming portalFree and open-source software portal Google Web Toolkit TypeScript, a strongly-typed programming language that transpiles to JavaScript Flutter, an open-source UI software development kit for cross-platform applications",
    "references": "^ Kopec, David (30 June 2014). Dart for Absolute Beginners. Apress. p. 56. ISBN 9781430264828. Retrieved 24 November 2015. ^ Bak, Lars (10 October 2011). Dart: a language for structured web programming. Google Code Blog. Retrieved 31 January 2016. ^ Release 3.7.2 · dart-lang/sdk. Retrieved 18 April 2025. ^ a b The Dart type system. dart.dev. ^ Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013. YouTube. 16 May 2013. Retrieved 22 December 2013. ^ The Dart Team Welcomes TypeScript. 10 September 2019. Retrieved 22 February 2020. ^ Dart SDK Tags. GitHub. ^ A Bit About Dart - Learn Dart: First Step to Flutter. Educative: Interactive Courses for Software Developers. Retrieved 2023-06-20. ^ A Tour of the Dart Language. dart.dev. Retrieved 2018-08-09. ^ Dart, a new programming language for structured web programming, GOTO conference (presentation) (opening keynote), Århus conference, 2011-10-10{{citation}}: CS1 maint: location missing publisher (link) ^ Ladd, Seth. What is Dart. What is Dart?. O'Reilly. Retrieved August 16, 2014. ^ Dart 1.0: A stable SDK for structured web apps. news.dartlang.org. Retrieved 2018-08-08. ^ Seth Ladd (10 September 2019). Dart News & Updates. dartlang.org. ^ Moore, Kevin (2018-08-07). Announcing Dart 2 Stable and the Dart Web Platform. Dart. Retrieved 2018-08-08. ^ Dart language evolution. dart.dev. Retrieved 2023-06-20. ^ Dart overview. dart.dev. Retrieved 2023-05-12.[permanent dead link] ^ Dart 2.5 brings native compilation to the desktop. Infoworld. 20 November 2019. Retrieved 2019-11-28. ^ Dart 2.6 released with dart2native. SDtimes. 7 November 2019. Retrieved 2019-11-28. ^ Dart language evolution. dart.dev. Retrieved 2024-01-09. ^ Patterns. dart.dev. Retrieved 2023-05-12.[permanent dead link] ^ Class modifiers. ^ a b c Thomsen, Michael (2024-05-14). Landing Flutter 3.22 and Dart 3.4 at Google I/O 2024. Flutter. Retrieved 2024-05-17. ^ Dart Programming Language Specification, 5th edition (PDF). ^ Dart Programming Language Specification, 6th edition draft (PDF). ^ Dart language GitHub repository. GitHub. ^ TC52 - Dart. Archived from the original on 2016-08-02. Retrieved 2013-12-16. ^ a b ECMA-408. Ecma International. Retrieved 2023-05-12. ^ Anders Thorhauge Sandholm (10 September 2019). Dart News & Updates. dartlang.org. ^ Anders Thorhauge Sandholm (10 September 2019). Dart News & Updates. dartlang.org. ^ Packages of publisher tools.dart.dev. Dart packages. Retrieved 2023-05-12. ^ An Introduction to the dart:io Library. dart.dev. Retrieved 2013-07-21. ^ Thomsen, Michael (2023-05-10). Announcing Dart 3. Dart. Retrieved 2023-05-13. ^ JavaScript as a compilation target: Making it fast (PDF). Dartlang.org. Archived from the original (PDF) on 2016-07-02. Retrieved 2013-08-18. ^ Towards a single Dart to JavaScript compiler. 10 September 2019. Retrieved 2023-05-13. ^ Dart Frog. dartfrog.vgv.dev. Retrieved 2023-05-13. ^ Moore, Kevin (2018-08-08). Announcing Dart 2 Stable and the Dart Web Platform. Dart. Retrieved 2023-05-13. ^ dartdevc: The Dart development compiler. dart.dev. Retrieved 2023-05-13.[permanent dead link] ^ Ladd, Seth (2013-03-28). Dart News & Updates: Why dart2js produces faster JavaScript code from Dart. News.dartlang.org. Retrieved 2013-07-21. ^ Dart Performance. Dartlang.org. Archived from the original on 2017-01-03. Retrieved 2013-07-21. ^ GC Proposal for WebAssembly, WebAssembly, 2023-05-12, retrieved 2023-05-13 ^ WebAssembly Garbage Collection (WasmGC) now enabled by default in Chrome | Blog. Chrome for Developers. Retrieved 2024-05-17. ^ SpiderMonkey Newsletter (Firefox 110-111). SpiderMonkey JavaScript/WebAssembly Engine. 2023-02-16. Retrieved 2023-05-13. ^ 1788206 - OffscreenCanvas.transferToImageBitmap incurs a copy. bugzilla.mozilla.org. Retrieved 2024-05-17. ^ Safari Technology Preview 167 Release Notes. Apple Developer Documentation. Retrieved 2023-05-13. ^ Obinna, Onuoha (2020-04-07). How does JIT and AOT work in Dart?. Medium. Retrieved 2023-06-20. ^ a b The Essence of Google Dart: Building Applications, Snapshots, Isolates. InfoQ. Retrieved 2021-08-29. ^ Moore, Kevin (February 23, 2018). Dart2 Breaking Change: Removing web support for dart:mirrors and dart:isolate. Google Groups. ^ Hracek, Filip (2020-06-10). Announcing sound null safety. Dart. Retrieved 2023-05-12. ^ Concurrency in Dart. dart.dev. Retrieved 2023-05-12. ^ Google Releases Dart Editor for Windows, Mac OS X, and Linux. Archived from the original on 2013-12-03. Retrieved 2011-11-29. ^ Dart plugin for Eclipse is Ready for Preview. 10 September 2019. ^ Ladd, Seth (2015-04-30). The present and future of editors and IDEs for Dart. Dart News & Updates. Retrieved 2015-05-18. ^ JetBrains Plugin Repository : Dart. Plugins.intellij.net. Retrieved 2013-07-21. ^ Dart Tools. dart.dev. Retrieved 2016-11-15. ^ Dart - Packages - Package Control. packagecontrol.io. Retrieved 2023-05-13. ^ dart - Dart plugin for Atom. dart-atom.github.io. Retrieved 2023-05-13. ^ Trainor, Brady (2023-04-15), bradyt/dart-mode, retrieved 2023-05-13 ^ Dart Support for Vim, Dart, 2023-05-09, retrieved 2023-05-13 ^ Dart - Visual Studio Marketplace. marketplace.visualstudio.com. Retrieved 2023-05-13. ^ Beaufort, François. The chromium team is currently actively working. ^ A Chrome app based development environment. GitHub. 26 October 2021. ^ Spark, A Chrome App from Google is an IDE for Your Chromebook. November 22, 2013. ^ Saroop, Sri. Chrome Dev Editor: Announcements. ^ Chrome Dev Editor is a developer tool for building apps on the Chrome platform: Chrome Apps and Web Apps, in JavaScript or Dart. (NO LONGER IN ACTIVE DEVELOPMENT) - googlearchive/chromedeveditor. July 29, 2019 – via GitHub. ^ Ladd, Seth (2015-05-06). Announcing DartPad: A friction-free way to explore Dart code. Dart News & Updates. Retrieved 2015-05-18. ^ Dart & Flutter DevTools, Flutter, 2023-05-12, retrieved 2023-05-12 ^ Sells, Chris (2021-03-03). What's New in Flutter 2.0. Flutter. Retrieved 2023-05-12. ^ Sneath, Tim (February 3, 2022). Announcing Flutter for Windows. ^ Chisholm, Kevin (2022-05-12). What's new in Flutter 3. Flutter. Retrieved 2023-05-12. ^ FAQ. flutter.dev. Retrieved 2021-08-29. ^ Firebase. flutter.dev. Retrieved 2021-08-29. ^ Dart packages. Dart packages. Retrieved 2023-05-12. ^ Flutter - IntelliJ IDEs Plugin | Marketplace. JetBrains Marketplace. Retrieved 2023-05-13. ^ Loops in Dart | Fluter World | Dart and Flutter Tutorials. ^ Algol Family. c2.com. ^ Method Cascades in Dart. 10 September 2019. Retrieved 2023-05-13. ^ Bracha, Gilad; Griswold, David (September 1996). Extending the Smalltalk Language with Mixins (PDF). OOPSLA Workshop. OOPSLA. ^ Ladd, Seth (November 13, 2011). Transcription of A Quick Tour of Dart by Gilad Bracha. Retrieved 2023-05-13. ^ The Essence of Google Dart: Building Applications, Snapshots, Isolates. InfoQ. ^ Fearless concurrency: how Clojure, Rust, Pony, Erlang and Dart let you achieve that. - Renato Athaydes. sites.google.com. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Bracha, Gilad; Ungar, David (2004). Mirrors: design principles for meta-level facilities of object-oriented programming languages (PDF). ACM SIGPLAN Notices. 39 (10). ACM: 331–344. doi:10.1145/1035292.1029004. Retrieved 15 February 2014.",
    "bibliography": "Walrath, Kathy; Ladd, Seth (March 7, 2012). What is Dart? (1st ed.). O'Reilly Media. p. 20. ISBN 978-14493-32327. Walrath, Kathy; Ladd, Seth (November 7, 2012). Dart: Up and Running (1st ed.). O'Reilly Media. p. 144. ISBN 978-1449330897. Buckett, Chris (December 28, 2012). Dart in Action (1st ed.). Manning Publications. p. 475. ISBN 978-1617290862.",
    "external_links": "Official website DartPad vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteGoogle free and open-source softwareSoftwareApplications Chromium Gemma OpenRefine Tesseract Programming languages Carbon Dart Go Sawzall Frameworks anddevelopment tools AMP Angular AngularJS Beam Bazel Blockly Brotli Closure Tools Cpplint FlatBuffers Flutter Ganeti Gears Gerrit GLOP gRPC Gson Guava Guetzli Guice gVisor Kubernetes LevelDB libvpx Lighthouse NaCl Namebench Nomulus OR-Tools Polymer Protocol Buffers TensorFlow V8 Operating systems Android ChromiumOS Fuchsia gLinux Goobuntu Related Code-in Google LLC v. Oracle America, Inc. Open Source Security Foundation Summer of Code vteGooglea subsidiary of AlphabetCompanyDivisions AI Area 120 ATAP Brain China Cloud Platform Energy Google.org Crisis Response Health Registry SubsidiariesActive Security Operations DeepMind Fitbit ITA Software Jigsaw Looker Mandiant Owlchemy Labs Defunct Actifio Adscape Akwan Information Technologies Anvato Apigee BandPage Bitium BufferBox Crashlytics Dodgeball DoubleClick Dropcam Endoxon Flutter Global IP Solutions Green Throttle Games GreenBorder Gridcentric ImageAmerica Impermium Invite Media Kaltix Marratech Meebo Metaweb Neotonic Software Neverware Nik Software Orbitera Pyra Labs Quest Visual Reqwireless RightsFlow Sidewalk Labs SlickLogin Titan Aerospace Typhoon Studios Urban Engines Vicarious Viewdle Wavii Wildfire Interactive YouTube Next Lab and Audience Development Group Programs Business Groups Computing University Initiative Contact Lens Content ID CrossCheck Data Liberation Front Data Transfer Project Developer Expert DigiKavach DigiPivot Digital Garage Digital News Initiative Digital Unlocked Dragonfly Founders' Award Free Zone Get Your Business Online Google for Education Google for Startups Living Stories Made with Code News Lab PowerMeter Privacy Sandbox Project Nightingale Project Nimbus Project Sunroof Project Zero Quantum Artificial Intelligence Lab RechargeIT Sensorvault Silicon Initiative Solve for X Street View Trusted Student Ambassador Program Vevo YouTube BrandConnect YouTube Creator Awards YouTube Select YouTube Original Channel Initiative Year in Search YouTube Rewind 2018 2019 Events AlphaGo versus Fan Hui AlphaGo versus Lee Sedol AlphaGo versus Ke Jie Android Developer Challenge Android Developer Day Android Developer Lab CNN/YouTube presidential debates Code-in Code Jam Developer Day Developers Live Doodle4Google Future of Go Summit G-Day Hash Code I/O Lunar X Prize Mapathon Science Fair Summer of Code World Chess Championship 2024 YouTube Awards YouTube Comedy Week YouTube Live YouTube Music Awards 2013 2015 YouTube Space Lab YouTube Symphony Orchestra Infrastructure 111 Eighth Avenue Android lawn statues Androidland Barges Binoculars Building Central Saint Giles Chelsea Market Chrome Zone Data centers GeoEye-1 Googleplex Ivanpah Solar Power Facility James R. Thompson Center King's Cross Mayfield Mall Pier 57 Sidewalk Toronto St. John's Terminal Submarine cables Dunant Grace Hopper Unity WiFi YouTube Space YouTube Theater PeopleCurrent Krishna Bharat Vint Cerf Jeff Dean John Doerr Sanjay Ghemawat Al Gore John L. Hennessy Urs Hölzle Salar Kamangar Ray Kurzweil Ann Mather Alan Mulally Rick Osterloh Sundar Pichai (CEO) Ruth Porat (CFO) Rajen Sheth Hal Varian Neal Mohan Former Andy Bechtolsheim Sergey Brin (co-founder) David Cheriton Matt Cutts David Drummond Alan Eustace Timnit Gebru Omid Kordestani Paul Otellini Larry Page (co-founder) Patrick Pichette Eric Schmidt Ram Shriram Amit Singhal Shirley M. Tilghman Rachel Whetstone Susan Wojcicki CriticismGeneral Censorship DeGoogle FairSearch Google's Ideological Echo Chamber No Tech for Apartheid Privacy concerns Street View YouTube Trade unions Alphabet Workers Union YouTube copyright issues Incidents Backdoor advertisement controversy Blocking of YouTube videos in Germany Data breach Elsagate Fantastic Adventures scandal Kohistan video case Reactions to Innocence of Muslims San Francisco tech bus protests Services outages Slovenian government incident Walkouts YouTube headquarters shooting Other Android apps April Fools' Day jokes Doodles Doodle Champion Island Games Magic Cat Academy Easter eggs History Gmail Search YouTube Logo Material Design Mergers and acquisitions DevelopmentSoftwareA–C Accelerated Linear Algebra AMP Actions on Google ALTS American Fuzzy Lop Android Cloud to Device Messaging Android Debug Bridge Android NDK Android Runtime Android SDK Android Studio Angular AngularJS Apache Beam APIs App Engine App Inventor App Maker App Runtime for Chrome AppJet Apps Script AppSheet ARCore Base Bazel BeyondCorp Bigtable BigQuery Bionic Blockly Borg Caja Cameyo Chart API Charts Chrome Frame Chromium Blink Closure Tools Cloud Connect Cloud Dataflow Cloud Datastore Cloud Messaging Cloud Shell Cloud Storage Code Search Compute Engine Cpplint D–N Dalvik Data Protocol Dialogflow Exposure Notification Fast Pair Fastboot Federated Learning of Cohorts File System Firebase Firebase Cloud Messaging FlatBuffers Flutter Freebase Gadgets Ganeti Gears Gerrit GLOP gRPC Gson Guava Guetzli Guice gVisor GYP JAX Jetpack Compose Keyhole Markup Language Kubernetes Kythe LevelDB Lighthouse Looker Studio lmctfy MapReduce Mashup Editor Matter Mobile Services Namebench Native Client Neatx Neural Machine Translation Nomulus O–Z Open Location Code OpenRefine OpenSocial Optimize OR-Tools Pack PageSpeed Piper Plugin for Eclipse Polymer Programmable Search Engine Project IDX Project Shield Public DNS reCAPTCHA RenderScript SafetyNet SageTV Schema.org Search Console Shell Sitemaps Skia Graphics Engine Spanner Sputnik Stackdriver Swiffy Tango TensorFlow Tesseract Test Translator Toolkit Urchin UTM parameters V8 VirusTotal VisBug Wave Federation Protocol Weave Web Accelerator Web Designer Web Server Web Toolkit Webdriver Torso WebRTC Operating systems Android Cupcake Donut Eclair Froyo Gingerbread Honeycomb Ice Cream Sandwich Jelly Bean KitKat Lollipop Marshmallow Nougat Oreo Pie 10 11 12 13 14 15 16 version history smartphones Android Automotive Android Go devices Android Things Android TV devices Android XR ChromeOS ChromeOS Flex ChromiumOS Fuchsia Glass OS gLinux Goobuntu TV Wear OS Language models BERT Chinchilla DreamBooth Gemini LaMDA PaLM T5 VideoPoet XLNet Neural networks EfficientNet Gato Inception MobileNet Transformer WaveNet Computer programs AlphaDev AlphaFold AlphaGeometry AlphaGo AlphaGo Zero AlphaStar AlphaZero Master MuZero Formats and codecs AAB APK AV1 iLBC iSAC libvpx Lyra Protocol Buffers VP3 VP6 VP8 VP9 WebM WebP WOFF2 Programming languages Carbon Dart Go Sawzall Search algorithms Googlebot Hummingbird Mobilegeddon PageRank matrix Panda Penguin Pigeon RankBrain Domain names .app .dev .google .zip g.co google.by Typefaces Croscore Noto Product Sans Roboto SoftwareA Aardvark Account Dashboard Takeout Ad Manager AdMob Ads AdSense Affiliate Network Alerts Allo Analytics Android Auto Android Beam Answers Apture Arts & Culture Assistant Attribution Authenticator B BebaPay BeatThatQuote.com Blog Search Blogger Body Bookmarks Books Ngram Viewer Browser Sync Building Maker Bump BumpTop Buzz C Calendar Cast Catalogs Chat Checkout Chrome Chrome Apps Chrome Experiments Chrome Remote Desktop Chrome Web Store Classroom Cloud Print Cloud Search Contacts Contributor Crowdsource Currents (social app) Currents (news app) D Data Commons Dataset Search Desktop Dictionary Digital Wellbeing Dinosaur Game Directory Docs Docs Editors Domains Drawings Drive Duo E Earth Etherpad Expeditions Express F Family Link Fast Flip FeedBurner fflick Fi Wireless Finance Files Find My Device Fit Flights Flu Trends Fonts Forms Friend Connect Fusion Tables G Gboard Gemini Gesture Search Gizmo5 Google+ Gmail Goggles GOOG-411 Grasshopper Groups H Hangouts Helpouts I iGoogle Images Image Labeler Image Swirl Inbox by Gmail Input Tools Japanese Input Pinyin Insights for Search J Jaiku Jamboard K Kaggle Keep Knol L Labs Latitude Lens Like.com Live Transcribe Lively M Map Maker Maps Maps Navigation Marketing Platform Meet Messages Moderator My Tracks N Nearby Share News News & Weather News Archive Notebook NotebookLM Now O Offers One One Pass Opinion Rewards Orkut Oyster P Panoramio PaperofRecord.com Patents Page Creator Pay (mobile app) Pay (payment method) Pay Send People Cards Person Finder Personalized Search Photomath Photos Picasa Picasa Web Albums Picnik Pixel Camera Play Play Books Play Games Play Music Play Newsstand Play Pass Play Services Podcasts Poly Postini PostRank Primer Project Starline Public Alerts Public Data Explorer Q Question Hub Quick, Draw! Quick Search Box Quick Share Quickoffice R Read Along Reader Reply S Safe Browsing SageTV Santa Tracker Schemer Scholar Search AI Overviews Knowledge Graph SafeSearch Searchwiki Sheets Shoploop Shopping Sidewiki Sites Slides Snapseed Socratic Softcard Songza Sound Amplifier Spaces Sparrow (chatbot) Sparrow (email client) Speech Recognition & Synthesis Squared Stadia Station Store Street View Surveys Sync T Tables Talk TalkBack Tasks Tenor Tez Tilt Brush Toolbar Toontastic 3D Translate Travel Trendalyzer Trends TV U URL Shortener V Video Vids Voice Voice Access Voice Search W Wallet Wave Waze WDYL Web Light Where Is My Train Widevine Wiz Word Lens Workspace Workspace Marketplace Y YouTube YouTube Kids YouTube Music YouTube Premium YouTube Shorts YouTube Studio YouTube TV YouTube VR HardwarePixelSmartphones Pixel (2016) Pixel 2 (2017) Pixel 3 (2018) Pixel 3a (2019) Pixel 4 (2019) Pixel 4a (2020) Pixel 5 (2020) Pixel 5a (2021) Pixel 6 (2021) Pixel 6a (2022) Pixel 7 (2022) Pixel 7a (2023) Pixel Fold (2023) Pixel 8 (2023) Pixel 8a (2024) Pixel 9 (2024) Pixel 9 Pro Fold (2024) Pixel 9a (2025) Smartwatches Pixel Watch (2022) Pixel Watch 2 (2023) Pixel Watch 3 (2024) Tablets Pixel C (2015) Pixel Slate (2018) Pixel Tablet (2023) Laptops Chromebook Pixel (2013–2015) Pixelbook (2017) Pixelbook Go (2019) Other Pixel Buds (2017–present) NexusSmartphones Nexus One (2010) Nexus S (2010) Galaxy Nexus (2011) Nexus 4 (2012) Nexus 5 (2013) Nexus 6 (2014) Nexus 5X (2015) Nexus 6P (2015) Tablets Nexus 7 (2012) Nexus 10 (2012) Nexus 7 (2013) Nexus 9 (2014) Other Nexus Q (2012) Nexus Player (2014) Other Android Dev Phone Android One Cardboard Chromebit Chromebook Chromebox Chromecast Clips Daydream Fitbit Glass Liftware Liquid Galaxy Nest smart speakers Thermostat Wifi Play Edition Project Ara OnHub Pixel Visual Core Project Iris Search Appliance Sycamore processor Tensor Tensor Processing Unit Titan Security Key vteLitigationAdvertising Feldman v. Google, Inc. (2007) Rescuecom Corp. v. Google Inc. (2009) Goddard v. Google, Inc. (2009) Rosetta Stone Ltd. v. Google, Inc. (2012) Google, Inc. v. American Blind & Wallpaper Factory, Inc. (2017) Jedi Blue Antitrust European Union (2010–present) United States v. Adobe Systems, Inc., Apple Inc., Google Inc., Intel Corporation, Intuit, Inc., and Pixar (2011) Umar Javeed, Sukarma Thapar, Aaqib Javeed vs. Google LLC and Ors. (2019) United States v. Google LLC (2020) United States v. Google LLC (2023) Intellectualproperty Perfect 10, Inc. v. Amazon.com, Inc. (2007) Viacom International Inc. v. YouTube, Inc. (2010) Lenz v. Universal Music Corp.(2015) Authors Guild, Inc. v. Google, Inc. (2015) Field v. Google, Inc. (2016) Google LLC v. Oracle America, Inc. (2021) Smartphone patent wars Privacy Rocky Mountain Bank v. Google, Inc. (2009) Hibnick v. Google, Inc. (2010) United States v. Google Inc. (2012) Judgement of the German Federal Court of Justice on Google's autocomplete function (2013) Joffe v. Google, Inc. (2013) Mosley v SARL Google (2013) Google Spain v AEPD and Mario Costeja González (2014) Frank v. Gaos (2019) Other Garcia v. Google, Inc. (2015) Google LLC v Defteros (2020) Epic Games v. Google (2021) Gonzalez v. Google LLC (2022) RelatedConcepts Beauty YouTuber BookTube BreadTube Don't be evil Gayglers Google as a verb Google bombing 2004 U.S. presidential election Google effect Googlefight Google hacking Googleshare Google tax Googlewhack Googlization Illegal flower tribute Objectives and key results Rooting Search engine manipulation effect Side project time Sitelink Site reliability engineering StudyTube VTuber YouTube Poop YouTuber list ProductsAndroid Booting process Custom distributions Features Recovery mode Software development Street View coverage Africa Antarctica Asia Israel Europe North America Canada United States Oceania South America Argentina Chile Colombia YouTube Copyright strike Education Features Moderation Most-disliked videos Most-liked videos Most-subscribed channels Most-viewed channels Most-viewed videos Arabic music videos Chinese music videos French music videos Indian videos Pakistani videos Official channel Social impact Suspensions YouTube Premium original programming Other Gmail interface Maps pin Most downloaded Google Play applications Stadia games Documentaries AlphaGo Google: Behind the Screen Google Maps Road Trip Google and the World Brain The Creepy Line Books Google Hacks The Google Story Google Volume One Googled: The End of the World as We Know It How Google Works I'm Feeling Lucky In the Plex The Google Book The MANIAC Popular culture Google Feud Google Me (film) Google Me (Kim Zolciak song) Google Me (Teyana Taylor song) Is Google Making Us Stupid? Proceratium google Matt Nathanson: Live at Google The Billion Dollar Code The Internship Where on Google Earth is Carmen Sandiego? Other Attention Is All You Need elgooG Generative pre-trained transformer Me at the zoo Predictions of the end Relationship with Wikipedia Reunion Robot Constitution Italics denote discontinued products. Category Outline vteJavaScriptCode analysis ESLint JSHint JSLint Supersets JS++ TypeScript ArkTS Transpilers AtScript Babel ClojureScript CoffeeScript Dart Elm Emscripten Google Closure Compiler Google Web Toolkit Haxe LiveScript Morfik Nim Opa PureScript Reason WebSharper Concepts JavaScript library JavaScript syntax Debuggers Chrome DevTools Firefox Inspector Komodo IDE Microsoft Edge DevTools Opera DevTools Safari Web Inspector Doc generators JSDoc Editors (comparison) Ace Cloud9 IDE Atom CodeMirror Brackets Light Table PhpStorm Orion Visual Studio Visual Studio Express Visual Studio Code Visual Studio Team Services Vim Engines List of ECMAScript engines Frameworks Comparison of JavaScript frameworks List of JavaScript libraries Related technologies Ajax AssemblyScript asm.js Cascading Style Sheets Document Object Model HTML HTML5 JSON WebAssembly WebAuthn Package managers npm pnpm yarn Module bundlers Webpack Vite esbuild Server-side Active Server Pages Bun CommonJS Deno JSGI Node.js Unit testing frameworks (list) Jasmine Mocha QUnit People Douglas Crockford Ryan Dahl Brendan Eich John Resig Jesse James Garrett Authority control databases InternationalFASTNationalUnited StatesIsrael",
    "document": "Dart was unveiled at the GOTO conference in Aarhus, Denmark, October 10–12, 2011. Lars Bak and Kasper Lund founded the project. Dart 1.0 was released on November 14, 2013. Dart had a mixed reception at first. Some criticized the Dart initiative for fragmenting the web because of plans to include a Dart VM in Chrome. Those plans were dropped in 2015 with the Dart 1.9 release. Focus changed to compiling Dart code to JavaScript. Dart 2.0 was released in August 2018 with language changes including a type system. Dart 2.6 introduced a new extension, dart2native. This extended native compilation to the Linux, macOS, and Windows desktop platforms. Earlier developers could create new tools using only Android or iOS devices. With this extension, developers could deploy a program into self-contained executables. The Dart SDK doesn't need to be installed to run these self-contained executables. The Flutter toolkit integrates Dart, so it can compile on small services like backend support. Dart 3.0 was released in May 2023 with changes to the type system to require sound null safety. This release included new features like records, patterns, and class modifiers. Dart can compile to WebAssembly since version 3.4. Dart released the 5th edition of its language specification on April 9, 2021. This covers all syntax through Dart 2.10. A draft of the 6th edition includes all syntax through 2.13. Accepted proposals for the specification and drafts of potential features can be found in the Dart language repository on GitHub. ECMA International formed technical committee, TC52, to standardize Dart. ECMA approved the first edition of the Dart language specification as ECMA-408 in July 2014 at its 107th General Assembly. Subsequent editions were approved in December 2014, June 2015, and December 2015. The Dart software development kit (SDK) ships with a standalone Dart runtime. This allows Dart code to run in a command-line interface environment. The SDK includes tools to compile and package Dart apps. Dart ships with a complete standard library allowing users to write fully working system apps like custom web servers. Developers can deploy Dart apps in six ways: Dart deployment methods Deployment type Target platform Platform-specific Requires Dart VM Compile speed Execution speed JavaScript Browser No No Slow Fast WebAssembly Browser No No Slow Fast Self-contained executable macOS, Windows, Linux Yes No Slow Fast Ahead-of-time module macOS, Windows, Linux Yes No Slow Fast Just-in-time module macOS, Windows, Linux Yes Yes Fast Slow Portable module macOS, Windows, Linux No Yes Fast Slow Dart 3 can deploy apps to the web as either JavaScript or WebAssembly apps. Dart supports compiling to WebAssembly as of May 2024[update]. To run in mainstream web browsers, Dart relies on a source-to-source compiler to JavaScript. This makes Dart apps compatible with all major browsers. Dart optimizes the compiled JavaScript output to avoid expensive checks and operations. This results in JavaScript code that can run faster than equivalent code handwritten in plain JavaScript. The first Dart-to-JavaScript compiler was dartc. It was deprecated in Dart 2.0. The second Dart-to-JavaScript compiler was frog. Written in Dart, it was introduced in 2013 and deprecated in 2020. This should not be confused with Dart Frog, an open-source Dart framework for building backend systems from Very Good Ventures. The third Dart-to-JavaScript compiler is dart2js. Introduced in Dart 2.0, the Dart-based dart2js evolved from earlier compilers. It intended to implement the full Dart language specification and semantics. Developers use this compiler for production builds. It compiles to minified JavaScript. The fourth Dart-to-JavaScript compiler is dartdevc. Developers could use this compiler for development builds. It compiles to human-readable JavaScript. On March 28, 2013, the Dart team posted an update on their blog addressing Dart code compiled to JavaScript with the dart2js compiler, stating that it now runs faster than handwritten JavaScript on Chrome's V8 JavaScript engine for the DeltaBlue benchmark. Prior to Dart 2.18, both dart2js and dartdevc could be called from the command line. Dart 2.18 folded these functions into the Dart SDK. This removed the direct command line wrappers but kept the two compilers. The webdev serve command calls the dartdevc compiler. The webdev build command calls the dart2js compiler. The Dart SDK compiles to JavaScript in two ways. To debug code, run webdev serve to compile a larger JavaScript file with human-readable code. Dart-generated JavaScript can be debugged using Chrome only.$ cd <dart_app_directory> $ webdev serve [--debug] [-o <target.js>] To create production apps, run webdev build to compile a minified JavaScript file.$ cd <dart_app_directory> $ webdev build [-o <target.js>] With the Dart 3.22 release, Google announced support for compiling Dart code to WebAssembly. Full support for Wasm requires adoption of the WasmGC feature into the Wasm standard. Chrome 119 supports WasmGC. Firefox 120 and later could support WasmGC, but a current bug is blocking compatibility. Safari and Microsoft Edge are integrating WasmGC support. Dart can compile to native machine code for macOS, Windows, and Linux as command line tools. Dart can compile apps with user interfaces to the web, iOS, Android, macOS, Windows, and Linux using the Flutter framework. Self-contained executables include native machine code compiled from the specified Dart code file, its dependencies, and a small Dart runtime. The runtime handles type checking and garbage collection. The compiler produces output specific to the architecture on which the developer compiled it. This file can be distributed as any other native executable.$ dart compile exe <source.dart> -o <target_app> Generated: <target_app> $ ./<target_app> When compiled ahead of time, Dart code produces performant and platform-specific modules. It includes all dependent libraries and packages the app needs. This increases its compilation time. The compiler outputs an app specific to the architecture on which it was compiled.$ dart compile aot-snapshot <source.dart> Generated <target_app.aot> $ dartaotruntime <target_app.aot> When compiled just in time, Dart code produces performant modules that compile fast. This module needs the Dart VM included with the SDK to run. The compiler loads all parsed classes and compiled code into memory the first time the app runs. This speeds up any subsequent run of the app. The compiler outputs an app specific to the architecture on which it was compiled.$ dart compile jit-snapshot <source.dart> Compiling <source.dart> to jit-snapshot file <target_app.jit> Hello world! $ dart run <target_app.jit> Hello world! When compiled as a kernel module, Dart code produces a machine-independent format called the Dart Intermediate Representation (Dart IR). The Dart IR bytecode format can work on any architecture that has a Dart VM. This makes this format very portable and quick to compile, but less performant than other compilation outputs.$ dart compile kernel <source.dart> Compiling <source.dart> to kernel file <target_app>.dill. $ dart run <target_app>.dill To achieve concurrency, Dart uses isolated, independent workers that do not share memory, but use message passing, similarly to Erlang processes (also see actor model). Every Dart program uses at least one isolate, which is the main isolate. Since Dart 2, the Dart web platform no longer supports isolates, and suggests developers use Web Workers instead. Starting with Dart 2.12, Dart introduced sound null safety. This serves as a guarantee that variables cannot return a null value unless it has explicit permission. Null safety prevents the developer from introducing null-pointer exceptions, a common, but difficult to debug, error. With Dart 3.0, all code must follow sound null safety. Snapshot files, a core part of the Dart VM, store objects and other runtime data. Script snapshots Dart programs can be compiled into snapshot files containing all of the program code and dependencies preparsed and ready to execute, allowing fast startups. Full snapshots The Dart core libraries can be compiled into a snapshot file that allows fast loading of the libraries. Most standard distributions of the main Dart VM have a prebuilt snapshot for the core libraries that is loaded at runtime. Object snapshots Dart uses snapshots to serialize messages that it passes between isolates. As a very asynchronous language, Dart uses isolates for concurrency. An object generates a snapshot, transfers it to another isolate, then the isolate deserializes it. On November 18, 2011, Google released Dart Editor, an open-source program based on Eclipse components, for macOS, Windows, and Linux-based operating systems. The editor supports syntax highlighting, code completion, JavaScript compiling, running web and server Dart applications, and debugging. On August 13, 2012, Google announced the release of an Eclipse plugin for Dart development. On April 18, 2015, Google retired the Dart Editor in favor of the JetBrains integrated development environment (IDE). Android Studio, IntelliJ IDEA, PyCharm, PhpStorm and WebStorm support a Dart plugin. This plugin supports many features such as syntax highlighting, code completion, analysis, refactoring, debugging, and more. Other editors include plugins for Dart including Sublime Text, Atom, Emacs, Vim and Visual Studio Code. In 2013, the Chromium team began work on an open source, Chrome App-based development environment with a reusable library of GUI widgets, codenamed Spark. The project was later renamed as Chrome Dev Editor. Built in Dart, it contained Spark which is powered by Polymer. In June 2015, Google transferred the CDE project to GitHub as a free software project and ceased active investment in CDE. The Chrome Dev Editor project was archived on April 24, 2021. To provide an easier way to start using Dart, the Dart team created DartPad at the start of 2015. This online editor allows developers to experiment with Dart application programming interfaces (APIs) and run Dart code. It provides syntax highlighting, code analysis, code completion, documentation, and HTML and CSS editing. The Dart DevTools, written in Dart, include debugging and performance tools. Google introduced Flutter for native app development. Built using Dart, C, C++ and Skia, Flutter is an open-source, multi-platform app UI framework. Prior to Flutter 2.0, developers could only target Android, iOS and the web. Flutter 2.0 released support for macOS, Linux, and Windows as a beta feature. Flutter 2.10 released with production support for Windows and Flutter 3 released production support for all desktop platforms. It provides a framework, widgets, and tools. This framework gives developers a way to build and deploy mobile, desktop, and web apps. Flutter works with Firebase and supports extending the framework through add-ons called packages. These can be found on their package repository, pub.dev. JetBrains also supports a Flutter plugin. A Hello, World! example: void main() { print('Hello, World!'); } A simple for-loop: void main() { for (var i = 1; i <= 10; i++) { print(i); } } A function to calculate the nth Fibonacci number: void main() { var i = 20; print('fibonacci($i) = ${fibonacci(i)}'); } /// Computes the nth Fibonacci number. int fibonacci(int n) { return n < 2 ? n : (fibonacci(n - 1) + fibonacci(n - 2)); } A simple class: // Import the math library to get access to the sqrt function. // Imported with `math` as name, so accesses need to use `math.` as prefix. import 'dart:math' as math; // Create a class for Point. class Point { // Final variables cannot be changed once they are assigned. // Declare two instance variables. final num x, y; // A constructor, with syntactic sugar for setting instance variables. // The constructor has two mandatory parameters. Point(this.x, this.y); // A named constructor with an initializer list. Point.origin() : x = 0, y = 0; // A method. num distanceTo(Point other) { var dx = x - other.x; var dy = y - other.y; return math.sqrt(dx * dx + dy * dy); } // Example of a getter. // Acts the same as a final variable, but is computed on each access. num get magnitude => math.sqrt(x * x + y * y); // Example of operator overloading Point operator +(Point other) => Point(x + other.x, y + other.y); // When instantiating a class such as Point in Dart 2+, new is // an optional word } // All Dart programs start with main(). void main() { // Instantiate point objects. var p1 = Point(10, 10); print(p1.magnitude); var p2 = Point.origin(); var distance = p1.distanceTo(p2); print(distance); } Dart belongs to the ALGOL language family.[failed verification] Its members include C, Java, C#, JavaScript, and others. The method cascade syntax was adopted from Smalltalk. This syntax provides a shortcut for invoking several methods one after another on the same object. Dart's mixins were influenced by Strongtalk[citation needed] and Ruby. Dart makes use of isolates as a concurrency and security unit when structuring applications. The Isolate concept builds upon the Actor model implemented in Erlang. In 2004, Gilad Bracha (who was a member of the Dart team) and David Ungar first proposed Mirror API for performing controlled and secure reflection in a paper. The concept was first implemented in Self. Computer programming portalFree and open-source software portal Google Web Toolkit TypeScript, a strongly-typed programming language that transpiles to JavaScript Flutter, an open-source UI software development kit for cross-platform applications ^ Kopec, David (30 June 2014). Dart for Absolute Beginners. Apress. p. 56. ISBN 9781430264828. Retrieved 24 November 2015. ^ Bak, Lars (10 October 2011). Dart: a language for structured web programming. Google Code Blog. Retrieved 31 January 2016. ^ Release 3.7.2 · dart-lang/sdk. Retrieved 18 April 2025. ^ a b The Dart type system. dart.dev. ^ Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013. YouTube. 16 May 2013. Retrieved 22 December 2013. ^ The Dart Team Welcomes TypeScript. 10 September 2019. Retrieved 22 February 2020. ^ Dart SDK Tags. GitHub. ^ A Bit About Dart - Learn Dart: First Step to Flutter. Educative: Interactive Courses for Software Developers. Retrieved 2023-06-20. ^ A Tour of the Dart Language. dart.dev. Retrieved 2018-08-09. ^ Dart, a new programming language for structured web programming, GOTO conference (presentation) (opening keynote), Århus conference, 2011-10-10{{citation}}: CS1 maint: location missing publisher (link) ^ Ladd, Seth. What is Dart. What is Dart?. O'Reilly. Retrieved August 16, 2014. ^ Dart 1.0: A stable SDK for structured web apps. news.dartlang.org. Retrieved 2018-08-08. ^ Seth Ladd (10 September 2019). Dart News & Updates. dartlang.org. ^ Moore, Kevin (2018-08-07). Announcing Dart 2 Stable and the Dart Web Platform. Dart. Retrieved 2018-08-08. ^ Dart language evolution. dart.dev. Retrieved 2023-06-20. ^ Dart overview. dart.dev. Retrieved 2023-05-12.[permanent dead link] ^ Dart 2.5 brings native compilation to the desktop. Infoworld. 20 November 2019. Retrieved 2019-11-28. ^ Dart 2.6 released with dart2native. SDtimes. 7 November 2019. Retrieved 2019-11-28. ^ Dart language evolution. dart.dev. Retrieved 2024-01-09. ^ Patterns. dart.dev. Retrieved 2023-05-12.[permanent dead link] ^ Class modifiers. ^ a b c Thomsen, Michael (2024-05-14). Landing Flutter 3.22 and Dart 3.4 at Google I/O 2024. Flutter. Retrieved 2024-05-17. ^ Dart Programming Language Specification, 5th edition (PDF). ^ Dart Programming Language Specification, 6th edition draft (PDF). ^ Dart language GitHub repository. GitHub. ^ TC52 - Dart. Archived from the original on 2016-08-02. Retrieved 2013-12-16. ^ a b ECMA-408. Ecma International. Retrieved 2023-05-12. ^ Anders Thorhauge Sandholm (10 September 2019). Dart News & Updates. dartlang.org. ^ Anders Thorhauge Sandholm (10 September 2019). Dart News & Updates. dartlang.org. ^ Packages of publisher tools.dart.dev. Dart packages. Retrieved 2023-05-12. ^ An Introduction to the dart:io Library. dart.dev. Retrieved 2013-07-21. ^ Thomsen, Michael (2023-05-10). Announcing Dart 3. Dart. Retrieved 2023-05-13. ^ JavaScript as a compilation target: Making it fast (PDF). Dartlang.org. Archived from the original (PDF) on 2016-07-02. Retrieved 2013-08-18. ^ Towards a single Dart to JavaScript compiler. 10 September 2019. Retrieved 2023-05-13. ^ Dart Frog. dartfrog.vgv.dev. Retrieved 2023-05-13. ^ Moore, Kevin (2018-08-08). Announcing Dart 2 Stable and the Dart Web Platform. Dart. Retrieved 2023-05-13. ^ dartdevc: The Dart development compiler. dart.dev. Retrieved 2023-05-13.[permanent dead link] ^ Ladd, Seth (2013-03-28). Dart News & Updates: Why dart2js produces faster JavaScript code from Dart. News.dartlang.org. Retrieved 2013-07-21. ^ Dart Performance. Dartlang.org. Archived from the original on 2017-01-03. Retrieved 2013-07-21. ^ GC Proposal for WebAssembly, WebAssembly, 2023-05-12, retrieved 2023-05-13 ^ WebAssembly Garbage Collection (WasmGC) now enabled by default in Chrome | Blog. Chrome for Developers. Retrieved 2024-05-17. ^ SpiderMonkey Newsletter (Firefox 110-111). SpiderMonkey JavaScript/WebAssembly Engine. 2023-02-16. Retrieved 2023-05-13. ^ 1788206 - OffscreenCanvas.transferToImageBitmap incurs a copy. bugzilla.mozilla.org. Retrieved 2024-05-17. ^ Safari Technology Preview 167 Release Notes. Apple Developer Documentation. Retrieved 2023-05-13. ^ Obinna, Onuoha (2020-04-07). How does JIT and AOT work in Dart?. Medium. Retrieved 2023-06-20. ^ a b The Essence of Google Dart: Building Applications, Snapshots, Isolates. InfoQ. Retrieved 2021-08-29. ^ Moore, Kevin (February 23, 2018). Dart2 Breaking Change: Removing web support for dart:mirrors and dart:isolate. Google Groups. ^ Hracek, Filip (2020-06-10). Announcing sound null safety. Dart. Retrieved 2023-05-12. ^ Concurrency in Dart. dart.dev. Retrieved 2023-05-12. ^ Google Releases Dart Editor for Windows, Mac OS X, and Linux. Archived from the original on 2013-12-03. Retrieved 2011-11-29. ^ Dart plugin for Eclipse is Ready for Preview. 10 September 2019. ^ Ladd, Seth (2015-04-30). The present and future of editors and IDEs for Dart. Dart News & Updates. Retrieved 2015-05-18. ^ JetBrains Plugin Repository : Dart. Plugins.intellij.net. Retrieved 2013-07-21. ^ Dart Tools. dart.dev. Retrieved 2016-11-15. ^ Dart - Packages - Package Control. packagecontrol.io. Retrieved 2023-05-13. ^ dart - Dart plugin for Atom. dart-atom.github.io. Retrieved 2023-05-13. ^ Trainor, Brady (2023-04-15), bradyt/dart-mode, retrieved 2023-05-13 ^ Dart Support for Vim, Dart, 2023-05-09, retrieved 2023-05-13 ^ Dart - Visual Studio Marketplace. marketplace.visualstudio.com. Retrieved 2023-05-13. ^ Beaufort, François. The chromium team is currently actively working. ^ A Chrome app based development environment. GitHub. 26 October 2021. ^ Spark, A Chrome App from Google is an IDE for Your Chromebook. November 22, 2013. ^ Saroop, Sri. Chrome Dev Editor: Announcements. ^ Chrome Dev Editor is a developer tool for building apps on the Chrome platform: Chrome Apps and Web Apps, in JavaScript or Dart. (NO LONGER IN ACTIVE DEVELOPMENT) - googlearchive/chromedeveditor. July 29, 2019 – via GitHub. ^ Ladd, Seth (2015-05-06). Announcing DartPad: A friction-free way to explore Dart code. Dart News & Updates. Retrieved 2015-05-18. ^ Dart & Flutter DevTools, Flutter, 2023-05-12, retrieved 2023-05-12 ^ Sells, Chris (2021-03-03). What's New in Flutter 2.0. Flutter. Retrieved 2023-05-12. ^ Sneath, Tim (February 3, 2022). Announcing Flutter for Windows. ^ Chisholm, Kevin (2022-05-12). What's new in Flutter 3. Flutter. Retrieved 2023-05-12. ^ FAQ. flutter.dev. Retrieved 2021-08-29. ^ Firebase. flutter.dev. Retrieved 2021-08-29. ^ Dart packages. Dart packages. Retrieved 2023-05-12. ^ Flutter - IntelliJ IDEs Plugin | Marketplace. JetBrains Marketplace. Retrieved 2023-05-13. ^ Loops in Dart | Fluter World | Dart and Flutter Tutorials. ^ Algol Family. c2.com. ^ Method Cascades in Dart. 10 September 2019. Retrieved 2023-05-13. ^ Bracha, Gilad; Griswold, David (September 1996). Extending the Smalltalk Language with Mixins (PDF). OOPSLA Workshop. OOPSLA. ^ Ladd, Seth (November 13, 2011). Transcription of A Quick Tour of Dart by Gilad Bracha. Retrieved 2023-05-13. ^ The Essence of Google Dart: Building Applications, Snapshots, Isolates. InfoQ. ^ Fearless concurrency: how Clojure, Rust, Pony, Erlang and Dart let you achieve that. - Renato Athaydes. sites.google.com. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Bracha, Gilad; Ungar, David (2004). Mirrors: design principles for meta-level facilities of object-oriented programming languages (PDF). ACM SIGPLAN Notices. 39 (10). ACM: 331–344. doi:10.1145/1035292.1029004. Retrieved 15 February 2014. Walrath, Kathy; Ladd, Seth (March 7, 2012). What is Dart? (1st ed.). O'Reilly Media. p. 20. ISBN 978-14493-32327. Walrath, Kathy; Ladd, Seth (November 7, 2012). Dart: Up and Running (1st ed.). O'Reilly Media. p. 144. ISBN 978-1449330897. Buckett, Chris (December 28, 2012). Dart in Action (1st ed.). Manning Publications. p. 475. ISBN 978-1617290862. Official website DartPad vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteGoogle free and open-source softwareSoftwareApplications Chromium Gemma OpenRefine Tesseract Programming languages Carbon Dart Go Sawzall Frameworks anddevelopment tools AMP Angular AngularJS Beam Bazel Blockly Brotli Closure Tools Cpplint FlatBuffers Flutter Ganeti Gears Gerrit GLOP gRPC Gson Guava Guetzli Guice gVisor Kubernetes LevelDB libvpx Lighthouse NaCl Namebench Nomulus OR-Tools Polymer Protocol Buffers TensorFlow V8 Operating systems Android ChromiumOS Fuchsia gLinux Goobuntu Related Code-in Google LLC v. Oracle America, Inc. Open Source Security Foundation Summer of Code vteGooglea subsidiary of AlphabetCompanyDivisions AI Area 120 ATAP Brain China Cloud Platform Energy Google.org Crisis Response Health Registry SubsidiariesActive Security Operations DeepMind Fitbit ITA Software Jigsaw Looker Mandiant Owlchemy Labs Defunct Actifio Adscape Akwan Information Technologies Anvato Apigee BandPage Bitium BufferBox Crashlytics Dodgeball DoubleClick Dropcam Endoxon Flutter Global IP Solutions Green Throttle Games GreenBorder Gridcentric ImageAmerica Impermium Invite Media Kaltix Marratech Meebo Metaweb Neotonic Software Neverware Nik Software Orbitera Pyra Labs Quest Visual Reqwireless RightsFlow Sidewalk Labs SlickLogin Titan Aerospace Typhoon Studios Urban Engines Vicarious Viewdle Wavii Wildfire Interactive YouTube Next Lab and Audience Development Group Programs Business Groups Computing University Initiative Contact Lens Content ID CrossCheck Data Liberation Front Data Transfer Project Developer Expert DigiKavach DigiPivot Digital Garage Digital News Initiative Digital Unlocked Dragonfly Founders' Award Free Zone Get Your Business Online Google for Education Google for Startups Living Stories Made with Code News Lab PowerMeter Privacy Sandbox Project Nightingale Project Nimbus Project Sunroof Project Zero Quantum Artificial Intelligence Lab RechargeIT Sensorvault Silicon Initiative Solve for X Street View Trusted Student Ambassador Program Vevo YouTube BrandConnect YouTube Creator Awards YouTube Select YouTube Original Channel Initiative Year in Search YouTube Rewind 2018 2019 Events AlphaGo versus Fan Hui AlphaGo versus Lee Sedol AlphaGo versus Ke Jie Android Developer Challenge Android Developer Day Android Developer Lab CNN/YouTube presidential debates Code-in Code Jam Developer Day Developers Live Doodle4Google Future of Go Summit G-Day Hash Code I/O Lunar X Prize Mapathon Science Fair Summer of Code World Chess Championship 2024 YouTube Awards YouTube Comedy Week YouTube Live YouTube Music Awards 2013 2015 YouTube Space Lab YouTube Symphony Orchestra Infrastructure 111 Eighth Avenue Android lawn statues Androidland Barges Binoculars Building Central Saint Giles Chelsea Market Chrome Zone Data centers GeoEye-1 Googleplex Ivanpah Solar Power Facility James R. Thompson Center King's Cross Mayfield Mall Pier 57 Sidewalk Toronto St. John's Terminal Submarine cables Dunant Grace Hopper Unity WiFi YouTube Space YouTube Theater PeopleCurrent Krishna Bharat Vint Cerf Jeff Dean John Doerr Sanjay Ghemawat Al Gore John L. Hennessy Urs Hölzle Salar Kamangar Ray Kurzweil Ann Mather Alan Mulally Rick Osterloh Sundar Pichai (CEO) Ruth Porat (CFO) Rajen Sheth Hal Varian Neal Mohan Former Andy Bechtolsheim Sergey Brin (co-founder) David Cheriton Matt Cutts David Drummond Alan Eustace Timnit Gebru Omid Kordestani Paul Otellini Larry Page (co-founder) Patrick Pichette Eric Schmidt Ram Shriram Amit Singhal Shirley M. Tilghman Rachel Whetstone Susan Wojcicki CriticismGeneral Censorship DeGoogle FairSearch Google's Ideological Echo Chamber No Tech for Apartheid Privacy concerns Street View YouTube Trade unions Alphabet Workers Union YouTube copyright issues Incidents Backdoor advertisement controversy Blocking of YouTube videos in Germany Data breach Elsagate Fantastic Adventures scandal Kohistan video case Reactions to Innocence of Muslims San Francisco tech bus protests Services outages Slovenian government incident Walkouts YouTube headquarters shooting Other Android apps April Fools' Day jokes Doodles Doodle Champion Island Games Magic Cat Academy Easter eggs History Gmail Search YouTube Logo Material Design Mergers and acquisitions DevelopmentSoftwareA–C Accelerated Linear Algebra AMP Actions on Google ALTS American Fuzzy Lop Android Cloud to Device Messaging Android Debug Bridge Android NDK Android Runtime Android SDK Android Studio Angular AngularJS Apache Beam APIs App Engine App Inventor App Maker App Runtime for Chrome AppJet Apps Script AppSheet ARCore Base Bazel BeyondCorp Bigtable BigQuery Bionic Blockly Borg Caja Cameyo Chart API Charts Chrome Frame Chromium Blink Closure Tools Cloud Connect Cloud Dataflow Cloud Datastore Cloud Messaging Cloud Shell Cloud Storage Code Search Compute Engine Cpplint D–N Dalvik Data Protocol Dialogflow Exposure Notification Fast Pair Fastboot Federated Learning of Cohorts File System Firebase Firebase Cloud Messaging FlatBuffers Flutter Freebase Gadgets Ganeti Gears Gerrit GLOP gRPC Gson Guava Guetzli Guice gVisor GYP JAX Jetpack Compose Keyhole Markup Language Kubernetes Kythe LevelDB Lighthouse Looker Studio lmctfy MapReduce Mashup Editor Matter Mobile Services Namebench Native Client Neatx Neural Machine Translation Nomulus O–Z Open Location Code OpenRefine OpenSocial Optimize OR-Tools Pack PageSpeed Piper Plugin for Eclipse Polymer Programmable Search Engine Project IDX Project Shield Public DNS reCAPTCHA RenderScript SafetyNet SageTV Schema.org Search Console Shell Sitemaps Skia Graphics Engine Spanner Sputnik Stackdriver Swiffy Tango TensorFlow Tesseract Test Translator Toolkit Urchin UTM parameters V8 VirusTotal VisBug Wave Federation Protocol Weave Web Accelerator Web Designer Web Server Web Toolkit Webdriver Torso WebRTC Operating systems Android Cupcake Donut Eclair Froyo Gingerbread Honeycomb Ice Cream Sandwich Jelly Bean KitKat Lollipop Marshmallow Nougat Oreo Pie 10 11 12 13 14 15 16 version history smartphones Android Automotive Android Go devices Android Things Android TV devices Android XR ChromeOS ChromeOS Flex ChromiumOS Fuchsia Glass OS gLinux Goobuntu TV Wear OS Language models BERT Chinchilla DreamBooth Gemini LaMDA PaLM T5 VideoPoet XLNet Neural networks EfficientNet Gato Inception MobileNet Transformer WaveNet Computer programs AlphaDev AlphaFold AlphaGeometry AlphaGo AlphaGo Zero AlphaStar AlphaZero Master MuZero Formats and codecs AAB APK AV1 iLBC iSAC libvpx Lyra Protocol Buffers VP3 VP6 VP8 VP9 WebM WebP WOFF2 Programming languages Carbon Dart Go Sawzall Search algorithms Googlebot Hummingbird Mobilegeddon PageRank matrix Panda Penguin Pigeon RankBrain Domain names .app .dev .google .zip g.co google.by Typefaces Croscore Noto Product Sans Roboto SoftwareA Aardvark Account Dashboard Takeout Ad Manager AdMob Ads AdSense Affiliate Network Alerts Allo Analytics Android Auto Android Beam Answers Apture Arts & Culture Assistant Attribution Authenticator B BebaPay BeatThatQuote.com Blog Search Blogger Body Bookmarks Books Ngram Viewer Browser Sync Building Maker Bump BumpTop Buzz C Calendar Cast Catalogs Chat Checkout Chrome Chrome Apps Chrome Experiments Chrome Remote Desktop Chrome Web Store Classroom Cloud Print Cloud Search Contacts Contributor Crowdsource Currents (social app) Currents (news app) D Data Commons Dataset Search Desktop Dictionary Digital Wellbeing Dinosaur Game Directory Docs Docs Editors Domains Drawings Drive Duo E Earth Etherpad Expeditions Express F Family Link Fast Flip FeedBurner fflick Fi Wireless Finance Files Find My Device Fit Flights Flu Trends Fonts Forms Friend Connect Fusion Tables G Gboard Gemini Gesture Search Gizmo5 Google+ Gmail Goggles GOOG-411 Grasshopper Groups H Hangouts Helpouts I iGoogle Images Image Labeler Image Swirl Inbox by Gmail Input Tools Japanese Input Pinyin Insights for Search J Jaiku Jamboard K Kaggle Keep Knol L Labs Latitude Lens Like.com Live Transcribe Lively M Map Maker Maps Maps Navigation Marketing Platform Meet Messages Moderator My Tracks N Nearby Share News News & Weather News Archive Notebook NotebookLM Now O Offers One One Pass Opinion Rewards Orkut Oyster P Panoramio PaperofRecord.com Patents Page Creator Pay (mobile app) Pay (payment method) Pay Send People Cards Person Finder Personalized Search Photomath Photos Picasa Picasa Web Albums Picnik Pixel Camera Play Play Books Play Games Play Music Play Newsstand Play Pass Play Services Podcasts Poly Postini PostRank Primer Project Starline Public Alerts Public Data Explorer Q Question Hub Quick, Draw! Quick Search Box Quick Share Quickoffice R Read Along Reader Reply S Safe Browsing SageTV Santa Tracker Schemer Scholar Search AI Overviews Knowledge Graph SafeSearch Searchwiki Sheets Shoploop Shopping Sidewiki Sites Slides Snapseed Socratic Softcard Songza Sound Amplifier Spaces Sparrow (chatbot) Sparrow (email client) Speech Recognition & Synthesis Squared Stadia Station Store Street View Surveys Sync T Tables Talk TalkBack Tasks Tenor Tez Tilt Brush Toolbar Toontastic 3D Translate Travel Trendalyzer Trends TV U URL Shortener V Video Vids Voice Voice Access Voice Search W Wallet Wave Waze WDYL Web Light Where Is My Train Widevine Wiz Word Lens Workspace Workspace Marketplace Y YouTube YouTube Kids YouTube Music YouTube Premium YouTube Shorts YouTube Studio YouTube TV YouTube VR HardwarePixelSmartphones Pixel (2016) Pixel 2 (2017) Pixel 3 (2018) Pixel 3a (2019) Pixel 4 (2019) Pixel 4a (2020) Pixel 5 (2020) Pixel 5a (2021) Pixel 6 (2021) Pixel 6a (2022) Pixel 7 (2022) Pixel 7a (2023) Pixel Fold (2023) Pixel 8 (2023) Pixel 8a (2024) Pixel 9 (2024) Pixel 9 Pro Fold (2024) Pixel 9a (2025) Smartwatches Pixel Watch (2022) Pixel Watch 2 (2023) Pixel Watch 3 (2024) Tablets Pixel C (2015) Pixel Slate (2018) Pixel Tablet (2023) Laptops Chromebook Pixel (2013–2015) Pixelbook (2017) Pixelbook Go (2019) Other Pixel Buds (2017–present) NexusSmartphones Nexus One (2010) Nexus S (2010) Galaxy Nexus (2011) Nexus 4 (2012) Nexus 5 (2013) Nexus 6 (2014) Nexus 5X (2015) Nexus 6P (2015) Tablets Nexus 7 (2012) Nexus 10 (2012) Nexus 7 (2013) Nexus 9 (2014) Other Nexus Q (2012) Nexus Player (2014) Other Android Dev Phone Android One Cardboard Chromebit Chromebook Chromebox Chromecast Clips Daydream Fitbit Glass Liftware Liquid Galaxy Nest smart speakers Thermostat Wifi Play Edition Project Ara OnHub Pixel Visual Core Project Iris Search Appliance Sycamore processor Tensor Tensor Processing Unit Titan Security Key vteLitigationAdvertising Feldman v. Google, Inc. (2007) Rescuecom Corp. v. Google Inc. (2009) Goddard v. Google, Inc. (2009) Rosetta Stone Ltd. v. Google, Inc. (2012) Google, Inc. v. American Blind & Wallpaper Factory, Inc. (2017) Jedi Blue Antitrust European Union (2010–present) United States v. Adobe Systems, Inc., Apple Inc., Google Inc., Intel Corporation, Intuit, Inc., and Pixar (2011) Umar Javeed, Sukarma Thapar, Aaqib Javeed vs. Google LLC and Ors. (2019) United States v. Google LLC (2020) United States v. Google LLC (2023) Intellectualproperty Perfect 10, Inc. v. Amazon.com, Inc. (2007) Viacom International Inc. v. YouTube, Inc. (2010) Lenz v. Universal Music Corp.(2015) Authors Guild, Inc. v. Google, Inc. (2015) Field v. Google, Inc. (2016) Google LLC v. Oracle America, Inc. (2021) Smartphone patent wars Privacy Rocky Mountain Bank v. Google, Inc. (2009) Hibnick v. Google, Inc. (2010) United States v. Google Inc. (2012) Judgement of the German Federal Court of Justice on Google's autocomplete function (2013) Joffe v. Google, Inc. (2013) Mosley v SARL Google (2013) Google Spain v AEPD and Mario Costeja González (2014) Frank v. Gaos (2019) Other Garcia v. Google, Inc. (2015) Google LLC v Defteros (2020) Epic Games v. Google (2021) Gonzalez v. Google LLC (2022) RelatedConcepts Beauty YouTuber BookTube BreadTube Don't be evil Gayglers Google as a verb Google bombing 2004 U.S. presidential election Google effect Googlefight Google hacking Googleshare Google tax Googlewhack Googlization Illegal flower tribute Objectives and key results Rooting Search engine manipulation effect Side project time Sitelink Site reliability engineering StudyTube VTuber YouTube Poop YouTuber list ProductsAndroid Booting process Custom distributions Features Recovery mode Software development Street View coverage Africa Antarctica Asia Israel Europe North America Canada United States Oceania South America Argentina Chile Colombia YouTube Copyright strike Education Features Moderation Most-disliked videos Most-liked videos Most-subscribed channels Most-viewed channels Most-viewed videos Arabic music videos Chinese music videos French music videos Indian videos Pakistani videos Official channel Social impact Suspensions YouTube Premium original programming Other Gmail interface Maps pin Most downloaded Google Play applications Stadia games Documentaries AlphaGo Google: Behind the Screen Google Maps Road Trip Google and the World Brain The Creepy Line Books Google Hacks The Google Story Google Volume One Googled: The End of the World as We Know It How Google Works I'm Feeling Lucky In the Plex The Google Book The MANIAC Popular culture Google Feud Google Me (film) Google Me (Kim Zolciak song) Google Me (Teyana Taylor song) Is Google Making Us Stupid? Proceratium google Matt Nathanson: Live at Google The Billion Dollar Code The Internship Where on Google Earth is Carmen Sandiego? Other Attention Is All You Need elgooG Generative pre-trained transformer Me at the zoo Predictions of the end Relationship with Wikipedia Reunion Robot Constitution Italics denote discontinued products. Category Outline vteJavaScriptCode analysis ESLint JSHint JSLint Supersets JS++ TypeScript ArkTS Transpilers AtScript Babel ClojureScript CoffeeScript Dart Elm Emscripten Google Closure Compiler Google Web Toolkit Haxe LiveScript Morfik Nim Opa PureScript Reason WebSharper Concepts JavaScript library JavaScript syntax Debuggers Chrome DevTools Firefox Inspector Komodo IDE Microsoft Edge DevTools Opera DevTools Safari Web Inspector Doc generators JSDoc Editors (comparison) Ace Cloud9 IDE Atom CodeMirror Brackets Light Table PhpStorm Orion Visual Studio Visual Studio Express Visual Studio Code Visual Studio Team Services Vim Engines List of ECMAScript engines Frameworks Comparison of JavaScript frameworks List of JavaScript libraries Related technologies Ajax AssemblyScript asm.js Cascading Style Sheets Document Object Model HTML HTML5 JSON WebAssembly WebAuthn Package managers npm pnpm yarn Module bundlers Webpack Vite esbuild Server-side Active Server Pages Bun CommonJS Deno JSGI Node.js Unit testing frameworks (list) Jasmine Mocha QUnit People Douglas Crockford Ryan Dahl Brendan Eich John Resig Jesse James Garrett Authority control databases InternationalFASTNationalUnited StatesIsrael",
    "paradigm": "Multi-paradigm : functional , imperative , object-oriented , reflective",
    "first_appeared": "October 10, 2011 ; 13 years ago ( 2011-10-10 )",
    "stable_release": "3.8.1",
    "typing_discipline": "1.x: Optional 2.x: Inferred ( static , strong )",
    "influenced_by": "C , C++ , C# , Erlang , Java , JavaScript , Ruby , Smalltalk , Strongtalk , TypeScript",
    "stable_release_date": "2025-05-28T00:00:00Z"
  },
  {
    "title": "Go (programming language)",
    "url": "https://en.wikipedia.org/wiki/Go_(programming_language)",
    "history": "Go was designed at Google in 2007 to improve programming productivity in an era of multicore, networked machines and large codebases. The designers wanted to address criticisms of other languages in use at Google, but keep their useful characteristics: Static typing and run-time efficiency (like C) Readability and usability (like Python) High-performance networking and multiprocessing Its designers were primarily motivated by their shared dislike of C++. Go was publicly announced in November 2009, and version 1.0 was released in March 2012. Go is widely used in production at Google and in many other organizations and open-source projects. In retrospect the Go authors judged Go to be successful due to the overall engineering work around the language, including the runtime support for the language's concurrency feature. Although the design of most languages concentrates on innovations in syntax, semantics, or typing, Go is focused on the software development process itself. ... The principal unusual property of the language itself—concurrency—addressed problems that arose with the proliferation of multicore CPUs in the 2010s. But more significant was the early work that established fundamentals for packaging, dependencies, build, test, deployment, and other workaday tasks of the software development world, aspects that are not usually foremost in language design.",
    "branding_and_styling": "Mascot of Go programming language is the Gopher shown above. The Gopher mascot was introduced in 2009 for the open source launch of the language. The design, by Renée French, borrowed from a c. 2000 WFMU promotion. In November 2016, the Go and Go Mono fonts were released by type designers Charles Bigelow and Kris Holmes specifically for use by the Go project. Go is a humanist sans-serif resembling Lucida Grande, and Go Mono is monospaced. Both fonts adhere to the WGL4 character set and were designed to be legible with a large x-height and distinct letterforms. Both Go and Go Mono adhere to the DIN 1450 standard by having a slashed zero, lowercase l with a tail, and an uppercase I with serifs. In April 2018, the original logo was redesigned by brand designer Adam Smith. The new logo is a modern, stylized GO slanting right with trailing streamlines. (The Gopher mascot remained the same.)",
    "generics": "The lack of support for generic programming in initial versions of Go drew considerable criticism. The designers expressed an openness to generic programming and noted that built-in functions were in fact type-generic, but are treated as special cases; Pike called this a weakness that might be changed at some point. The Google team built at least one compiler for an experimental Go dialect with generics, but did not release it. In August 2018, the Go principal contributors published draft designs for generic programming and error handling and asked users to submit feedback. However, the error handling proposal was eventually abandoned. In June 2020, a new draft design document was published that would add the necessary syntax to Go for declaring generic functions and types. A code translation tool, go2go, was provided to allow users to try the new syntax, along with a generics-enabled version of the online Go Playground. Generics were finally added to Go in version 1.18 on March 15, 2022.",
    "versioning": "Go 1 guarantees compatibility for the language specification and major parts of the standard library. All versions up through the current Go 1.24 release have maintained this promise. Go uses a go1.[major].[patch] versioning format, such as go1.24.0 and each major Go release is supported until there are two newer major releases. Unlike most software, Go calls the second number in a version the major, i.e., in go1.24.0 the 24 is the major version. This is because Go plans to never reach 2.0, prioritizing backwards compatibility over potential breaking changes.",
    "design": "2015 lecture of Rob Pike (one of the Go creators) Go is influenced by C (especially the Plan 9 dialect[failed verification – see discussion]), but with an emphasis on greater simplicity and safety. It consists of: A syntax and environment adopting patterns more common in dynamic languages: Optional concise variable declaration and initialization through type inference (x := 0 instead of var x int = 0; or var x = 0;) Fast compilation Remote package management (go get) and online package documentation Distinctive approaches to particular problems: Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance A toolchain that, by default, produces statically linked native binaries without external Go dependencies A desire to keep the language specification simple enough to hold in a programmer's head, in part by omitting features that are common in similar languages.",
    "syntax": "Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write i := 3 or s := Hello, world!, without specifying the types of variables used. This contrasts with C's int i = 3; and const char *s = Hello, world!;. Go also removes the requirement to use parentheses in if statement conditions. Semicolons still terminate statements;[a] but are implicit when the end of a line occurs.[b] Methods may return multiple values, and returning a result, err pair is the conventional way a method indicates an error to its caller in Go.[c] Go adds literal syntaxes for initializing struct parameters by name and for initializing maps and slices. As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, maps, and channels. fmt.Println(Hello World!) is a statement. In Go, statements are separated by ending a line (hitting the Enter key) or by a semicolon ;. Hitting the Enter key adds ; to the end of the line implicitly (does not show up in the source code). The left curly bracket { cannot come at the start of a line.",
    "types": "Go has a number of built-in types, including numeric ones (byte, int64, float32, etc.), Booleans, and byte strings (string). Strings are immutable; built-in operators and keywords (rather than functions) provide concatenation, comparison, and UTF-8 encoding/decoding. Record types can be defined with the struct keyword. For each type T and each non-negative integer constant n, there is an array type denoted [n]T; arrays of differing lengths are thus of different types. Dynamic arrays are available as slices, denoted []T for some type T. These have a length and a capacity specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory. Pointers are available for all types, and the pointer-to-T type is denoted *T. Address-taking and indirection use the & and * operators, as in C, or happen implicitly through the method call or attribute access syntax. There is no pointer arithmetic,[d] except via the special unsafe.Pointer type in the standard library. For a pair of types K, V, the type map[K]V is the type mapping type-K keys to type-V values, though Go Programming Language specification does not give any performance guarantees or implementation requirements for map types. Hash tables are built into the language, with special syntax and built-in functions. chan T is a channel that allows sending values of type T between concurrent Go processes. Aside from its support for interfaces, Go's type system is nominal: the type keyword can be used to define a new named type, which is distinct from other named types that have the same layout (in the case of a struct, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always be invoked explicitly. For example, the type keyword can be used to define a type for IPv4 addresses, based on 32-bit unsigned integers as follows: type ipv4addr uint32 With this type definition, ipv4addr(x) interprets the uint32 value x as an IP address. Simply assigning x to a variable of type ipv4addr is a type error. Constant expressions may be either typed or untyped; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check. Function types are indicated by the func keyword; they take zero or more parameters and return zero or more values, all of which are typed. The parameter and return values determine a function type; thus, func(string, int32) (int, error) is the type of functions that take a string and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type error. Any named type has a method set associated with it. The IP address example above can be extended with a method for checking whether its value is a known standard: // ZeroBroadcast reports whether addr is 255.255.255.255. func (addr ipv4addr) ZeroBroadcast() bool { return addr == 0xFFFFFFFF } Due to nominal typing, this method definition adds a method to ipv4addr, but not on uint32. While methods have special definition and call syntax, there is no distinct method type.",
    "interface_system": "Go provides two features that replace class inheritance.[citation needed] The first is embedding, which can be viewed as an automated form of composition. The second are its interfaces, which provides runtime polymorphism.: 266 Interfaces are a class of types and provide a limited form of structural typing in the otherwise nominal type system of Go. An object which is of an interface type is also of another type, much like C++ objects being simultaneously of a base and derived class. The design of Go interfaces was inspired by protocols from the Smalltalk programming language. Multiple sources use the term duck typing when describing Go interfaces. Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically checked. Because conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer the term structural typing. The definition of an interface type lists required methods by name and type. Any object of type T for which functions exist matching all the required methods of interface type I is an object of type I as well. The definition of type T need not (and cannot) identify type I. For example, if Shape, Square and Circle are defined as import math type Shape interface { Area() float64 } type Square struct { // Note: no implements declaration side float64 } func (sq Square) Area() float64 { return sq.side * sq.side } type Circle struct { // No implements declaration here either radius float64 } func (c Circle) Area() float64 { return math.Pi * math.Pow(c.radius, 2) } then both a Square and a Circle are implicitly a Shape and can be assigned to a Shape-typed variable.: 263–268 In formal language, Go's interface system provides structural rather than nominal typing. Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.: 270 The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of Reader and Writer.: 282–283 Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the type assertion, which checks against a single potential type: var shp Shape = Square{5} square, ok := shp.(Square) // Asserts Square type on shp, should work if ok { fmt.Printf(%#v\\n, square) } else { fmt.Println(Can't print shape as Square) } and the type switch, which checks against multiple types:[citation needed] func (sq Square) Diagonal() float64 { return sq.side * math.Sqrt2 } func (c Circle) Diameter() float64 { return 2 * c.radius } func LongestContainedLine(shp Shape) float64 { switch v := shp.(type) { case Square: return v.Diagonal() // Or, with type assertion, shp.(Square).Diagonal() case Circle: return v.Diameter() // Or, with type assertion, shp.(Circle).Diameter() default: return 0 // In practice, this should be handled with errors } } The empty interface interface{} is an important base case because it can refer to an item of any concrete type. It is similar to the Object class in Java or C# and is satisfied by any type, including built-in types like int.: 284 Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the interface{} value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's reflect package. Because interface{} can refer to any value, it is a limited way to escape the restrictions of static typing, like void* in C but with additional run-time type checks.[citation needed] The interface{} type can be used to model structured data of any arbitrary schema in Go, such as JSON or YAML data, by representing it as a map[string]interface{} (map of string to empty interface). This recursively describes data in the form of a dictionary with string keys and values of any type. Interface values are implemented using pointer to data and a second pointer to run-time type information. Like some other types implemented using pointers in Go, interface values are nil if uninitialized.",
    "generic_code_using_parameterized_types": "Since version 1.18, Go supports generic code using parameterized types. Functions and types now have the ability to be generic using type parameters. These type parameters are specified within square brackets, right after the function or type name. The compiler transforms the generic function or type into non-generic by substituting type arguments for the type parameters provided, either explicitly by the user or type inference by the compiler. This transformation process is referred to as type instantiation. Interfaces now can define a set of types (known as type set) using | (Union) operator, as well as a set of methods. These changes were made to support type constraints in generics code. For a generic function or type, a constraint can be thought of as the type of the type argument: a meta-type. This new ~T syntax will be the first use of ~ as a token in Go. ~T means the set of all types whose underlying type is T. type Number interface { ~int | ~float64 | ~float32 | ~int32 | ~int64 } func Add[T Number](nums ...T) T { var sum T for _, v := range nums { sum += v } return sum } func main() { add := Add[int] // Type instantiation println(add(1, 2, 3, 4, 5)) // 15 res := Add(1.1, 2.2, 3.3, 4.4, 5.5) // Type Inference println(res) // +1.650000e+001 }",
    "enumerated_types": "This section is an excerpt from Enumerated type § Go.[edit] Go uses the iota keyword to create enumerated constants. type ByteSize float64 const ( _ = iota // ignore first value by assigning to blank identifier KB ByteSize = 1 << (10 * iota) MB GB )",
    "package_system": "In Go's package system, each package has a path (e.g., compress/bzip2 or golang.org/x/net/html) and a name (e.g., bzip2 or html). By default other packages' definitions must always be prefixed with the other package's name. However the name used can be changed from the package name, and if imported as _, then no package prefix is required. Only the capitalized names from other packages are accessible: io.Reader is public but bzip2.reader is not. The go get command can retrieve packages stored in a remote repository and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as example.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the standard library or other external libraries.",
    "concurrency_goroutines_and_channels": "DotGo 2015 - Matt Aimonetti - Applied concurrency in Go The Go language has built-in facilities, as well as library support, for writing concurrent programs. The runtime is asynchronous: program execution that performs for example a network read will be suspended until data is available to process, allowing other parts of the program to perform other work. This is built into the runtime and does not require any changes in program code. The go runtime also automatically schedules concurrent operations (goroutines) across multiple CPUs; this can achieve parallelism for a properly written program. The primary concurrency construct is the goroutine, a type of green thread.: 280–281 A function call prefixed with the go keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of operating-system threads, similar to the scheduling performed in Erlang and Haskell's GHC runtime implementation.: 10 While a standard library package featuring most of the classical concurrency control structures (mutex locks, etc.) is available,: 151–152 idiomatic concurrent programs instead prefer channels, which send messages between goroutines. Optional buffers store messages in FIFO order: 43 and allow sending goroutines to proceed before their messages are received.: 233 Channels are typed, so that a channel of type chan T can only be used to transfer messages of type T. Special syntax is used to operate on them; <-ch is an expression that causes the executing goroutine to block until a value comes in over the channel ch, while ch <- x sends the value x (possibly blocking until another goroutine receives the value). The built-in switch-like select statement can be used to implement non-blocking communication on multiple channels; see below for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data. The existence of channels does not by itself set Go apart from actor model-style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). In the actor model, channels are themselves actors, therefore addressing a channel just means to address an actor. The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.: 147 From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, fan-out parallel calls to a set of services, and others. Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers, implementing coroutines (which helped inspire the name goroutine), and implementing iterators. Concurrency-related structural conventions of Go (channels and alternative channel inputs) are derived from Tony Hoare's communicating sequential processes model. Unlike previous concurrent programming languages such as Occam or Limbo (a language on which Go co-designer Rob Pike worked), Go does not provide any built-in notion of safe or verifiable concurrency. While the communicating-processes model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see § Lack of data race safety, below.",
    "suitability_for_parallel_programming": "Although Go's concurrency features are not aimed primarily at parallel processing, they can be used to program shared-memory multi-processor machines. Various studies have been done into the effectiveness of this approach. One of these studies compared the size (in lines of code) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for Chapel, Cilk and Intel TBB. The study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor core. The expert's programs were usually faster, but also longer.",
    "lack_of_data_race_safety": "Go's approach to concurrency can be summarized as don't communicate by sharing memory; share memory by communicating. There are no restrictions on how goroutines access shared data, making data races possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes. Furthermore, Go's internal data structures like interface values, slice headers, hash tables, and string headers are not immune to data races, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization. Instead of language support, safe concurrent programming thus relies on conventions; for example, Chisnall recommends an idiom called aliases xor mutable, meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver.: 155 The gc toolchain has an optional data race detector that can check for unsynchronized access to shared memory during runtime since version 1.1, additionally a best-effort race detector is also included by default since version 1.6 of the gc runtime for access to the map data type.",
    "binaries": "The linker in the gc toolchain creates statically linked binaries by default; therefore all Go binaries include the Go runtime.",
    "omissions": "Go deliberately omits certain features common in other languages, including (implementation) inheritance, assertions,[e] pointer arithmetic,[d] implicit type conversions, untagged unions,[f] and tagged unions.[g] The designers added only those facilities that all three agreed on. Of the omitted language features, the designers explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of interfaces to achieve dynamic dispatch[h] and composition to reuse code. Composition and delegation are in fact largely automated by struct embedding; according to researchers Schmager et al., this feature has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static, making it not obvious whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance. Exception handling was initially omitted in Go due to lack of a design that gives value proportionate to the complexity. An exception-like panic/recover mechanism that avoids the usual try-catch control structure was proposed and released in the March 30, 2010 snapshot. The Go authors advise using it for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package. Across package boundaries, Go includes a canonical error type, and multi-value returns using this type are the standard idiom.",
    "style": "The Go authors put substantial effort into influencing the style of Go programs: Indentation, spacing, and other surface-level details of code are automatically standardized by the gofmt tool. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font. golint does additional style checks automatically, but has been deprecated and archived by the Go maintainers. Tools and libraries distributed with Go suggest standard approaches to things like API documentation (godoc), testing (go test), building (go build), package management (go get), and so on. Go enforces rules that are recommendations in other languages, for example banning cyclic dependencies, unused variables or imports, and implicit type conversions. The omission of certain features (for example, functional-programming shortcuts like map and Java-style try/finally blocks) tends to encourage a particular explicit, concrete, and imperative programming style. On day one the Go team published a collection of Go idioms, and later also collected code review comments, talks, and official blog posts to teach Go style and coding philosophy.",
    "tools": "The main Go distribution includes tools for building, testing, and analyzing code: go build, which builds Go binaries using only information in the source files themselves, no separate makefiles go test, for unit testing and microbenchmarks as well as fuzzing go fmt, for formatting code go install, for retrieving and installing remote packages go vet, a static analyzer looking for potential errors in code go run, a shortcut for building and executing code go doc, for displaying documentation go generate, a standard way to invoke code generators go mod, for creating a new module, adding dependencies, upgrading dependencies, etc. go tool, for invoking developer tools (added in Go version 1.24) It also includes profiling and debugging support, fuzzing capabilities to detect bugs, runtime instrumentation (for example, to track garbage collection pauses), and a data race detector. Another tool maintained by the Go team but is not included in Go distributions is gopls, a language server that provides IDE features such as intelligent code completion to Language Server Protocol compatible editors. An ecosystem of third-party tools adds to the standard distribution, such as gocode, which enables code autocompletion in many text editors, goimports, which automatically adds/removes package imports as needed, and errcheck, which detects code that might unintentionally ignore errors.",
    "hello_world": "package main import fmt func main() { fmt.Println(hello world) } where fmt is the package for formatted I/O, similar to C's C file input/output.",
    "concurrency": "The following simple program demonstrates Go's concurrency features to implement an asynchronous program. It launches two lightweight threads (goroutines): one waits for the user to type some text, while the other implements a timeout. The select statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from David Chisnall's book).: 152 package main import ( fmt time ) func readword(ch chan string) { fmt.Println(Type a word, then hit Enter.) var word string fmt.Scanf(%s, &word) ch <- word } func timeout(t chan bool) { time.Sleep(5 * time.Second) t <- false } func main() { t := make(chan bool) go timeout(t) ch := make(chan string) go readword(ch) select { case word := <-ch: fmt.Println(Received, word) case <-t: fmt.Println(Timeout.) } }",
    "testing": "The testing package provides support for automated testing of go packages. Target function example: func ExtractUsername(email string) string { at := strings.Index(email, @) return email[:at] } Test code (note that assert keyword is missing in Go; tests live in <filename>_test.go at the same package): import ( testing ) func TestExtractUsername(t *testing.T) { t.Run(withoutDot, func(t *testing.T) { username := ExtractUsername(r@google.com) if username != r { t.Fatalf(Got: %v\\n, username) } }) t.Run(withDot, func(t *testing.T) { username := ExtractUsername(jonh.smith@example.com) if username != jonh.smith { t.Fatalf(Got: %v\\n, username) } }) } It is possible to run tests in parallel.",
    "web_app": "The net/http package provides support for creating web applications. This example would show Hello world! when localhost:8080 is visited. package main import ( fmt log net/http ) func helloFunc(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, Hello world!) } func main() { http.HandleFunc(/, helloFunc) log.Fatal(http.ListenAndServe(:8080, nil)) }",
    "applications": "Go has found widespread adoption in various domains due to its robust standard library and ease of use. Popular applications include: Caddy, a web server that automates the process of setting up HTTPS, Docker, which provides a platform for containerization, aiming to ease the complexities of software development and deployment, Kubernetes, which automates the deployment, scaling, and management of containerized applications, CockroachDB, a distributed SQL database engineered for scalability and strong consistency, and Hugo, a static site generator that prioritizes speed and flexibility, allowing developers to create websites efficiently.",
    "reception": "The interface system, and the deliberate omission of inheritance, were praised by Michele Simionato, who likened these characteristics to those of Standard ML, calling it a shame that no popular language has followed [this] particular route. Dave Astels at Engine Yard wrote in 2009: Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous. Go is still experimental and still a little rough around the edges. Go was named Programming Language of the Year by the TIOBE Programming Community Index in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010, surpassing established languages like Pascal. By June 2015, its ranking had dropped to below 50th in the index, placing it lower than COBOL and Fortran. But as of January 2017, its ranking had surged to 13th, indicating significant growth in popularity and adoption. Go was again awarded TIOBE Programming Language of the Year in 2016. Bruce Eckel has stated: The complexity of C++ (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve. A 2011 evaluation of the language and its gc implementation in comparison to C++ (GCC), Java and Scala by a Google engineer found: Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes.— R. Hundt The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was never intended to be an example of idiomatic or efficient Go; Russ Cox then optimized the Go code, as well as the C++ code, and got the Go code to run almost as fast as the C++ version and more than an order of magnitude faster than the code in the paper. Go's nil combined with the lack of algebraic types leads to difficulty handling failures and base cases. Go does not allow an opening brace to appear on its own line, which forces all Go programmers to use the same brace style. Go has been criticized for focusing on simplicity of implementation rather than correctness and flexibility; as an example, the language uses POSIX file semantics on all platforms, and therefore provides incorrect information on platforms such as Windows (which do not follow the aforementioned standard). A study showed that it is as easy to make concurrency bugs with message passing as with shared memory, sometimes even more.",
    "naming_dispute": "On November 10, 2009, the day of the general release of the language, Francis McCabe, developer of the Go! programming language (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which he had spent 10 years developing. McCabe raised concerns that the 'big guy' will end up steam-rollering over him, and this concern resonated with the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some even saying the issue contradicts Google's motto of: Don't be evil. On October 12, 2010, the filed public issue ticket was closed by Google developer Russ Cox (@rsc) with the custom status Unfortunate accompanied by the following comment: There are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages.",
    "see_also": "Free and open-source software portal Fat pointer Comparison of programming languages",
    "notes": "^ But To allow complex statements to occupy a single line, a semicolon may be omitted before a closing ) or }. ^ if the newline comes after a token that could end a statement, [the lexer will] insert a semicolon. ^ Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See Semipredicate problem: Multivalued return. ^ a b Language FAQ Why is there no pointer arithmetic? Safety ... never derive an illegal address that succeeds incorrectly ... using array indices can be as efficient as ... pointer arithmetic ... simplify the implementation of the garbage collector.... ^ Language FAQ Why does Go not have assertions? ...our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting.... ^ Language FAQ Why are there no untagged unions...? [they] would violate Go's memory safety guarantees. ^ Language FAQ Why does Go not have variant types? ... We considered [them but] they overlap in confusing ways with interfaces.... [S]ome of what variant types address is already covered, ... although not as elegantly. (The tag of an interface type is accessed with a type assertion). ^ Questions How do I get dynamic dispatch of methods? and Why is there no type inheritance? in the language FAQ.",
    "references": "This article incorporates material from the official Go tutorial, which is licensed under the Creative Commons Attribution 3.0 license. ^ Codewalk: First-Class Functions in Go. Go supports first class functions, higher-order functions, user-defined function types, function literals, closures, and multiple return values. This rich feature set supports a functional programming style in a strongly typed language. ^ Is Go an object-oriented language?. Retrieved April 13, 2019. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy. ^ Go: code that grows with grace. Retrieved June 24, 2018. Go is Object Oriented, but not in the usual way. ^ a b c d e f g h Language Design FAQ. The Go Programming Language. January 16, 2010. Retrieved February 27, 2010. ^ a b Text file LICENSE. The Go Programming Language. Retrieved October 5, 2012. ^ The Go Programming Language Specification - the Go Programming Language. ^ a b Why doesn't Go have implements declarations?. The Go Programming Language. Retrieved October 1, 2015. ^ Pike, Rob (December 22, 2014). Rob Pike on Twitter. Archived from the original on April 7, 2022. Retrieved March 13, 2016. Go has structural typing, not duck typing. Full interface satisfaction is checked and required. ^ lang/go: go-1.4. OpenBSD ports. December 23, 2014. Retrieved January 19, 2015. ^ Go Porting Efforts. Go Language Resources. cat-v. January 12, 2010. Retrieved January 18, 2010. ^ Additional IP Rights Grant. The Go Programming Language. Retrieved October 5, 2012. ^ Go Introduction. www.w3schools.com. Retrieved November 23, 2024. ^ Kincaid, Jason (November 10, 2009). Google's Go: A New Programming Language That's Python Meets C++. TechCrunch. Retrieved January 18, 2010. ^ Metz, Cade (May 5, 2011). Google Go boldly goes where no code has gone before. The Register. ^ Is the language called Go or Golang?. Retrieved March 16, 2022. The language is called Go. ^ Go 1.5 Release Notes. Retrieved January 28, 2016. The compiler and runtime are now implemented in Go and assembler, without C. ^ The Go programming language. GitHub. Retrieved November 1, 2024. ^ gofrontend. GitHub. Retrieved November 1, 2024. ^ gccgo. Retrieved November 1, 2024. gccgo, the GNU compiler for the Go programming language ^ Gollvm. Retrieved November 1, 2024. Gollvm is an LLVM-based Go compiler. ^ A compiler from Go to JavaScript for running Go code in a browser: Gopherjs/Gopherjs. GitHub. Archived from the original on December 12, 2023. ^ Go at Google: Language Design in the Service of Software Engineering. Retrieved October 8, 2018. ^ Pike, Rob (April 28, 2010). Another Go at Language Design. Stanford EE Computer Systems Colloquium. Stanford University. Video available. ^ Frequently Asked Questions (FAQ) - The Go Programming Language. The Go Programming Language. Retrieved February 26, 2016. ^ Binstock, Andrew (May 18, 2011). Dr. Dobb's: Interview with Ken Thompson. Dr. Dobb's. Archived from the original on January 5, 2013. Retrieved February 7, 2014. ^ Pike, Rob (2012). Less is exponentially more. ^ Griesemer, Robert (2015). The Evolution of Go. ^ Griesemer, Robert; Pike, Rob; Thompson, Ken; Taylor, Ian; Cox, Russ; Kim, Jini; Langley, Adam. Hey! Ho! Let's Go!. Google Open Source. Retrieved May 17, 2018. ^ Shankland, Stephen (March 30, 2012). Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google. News. CNet. CBS Interactive Inc. Retrieved August 6, 2017. Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and C++. ^ Release History. The Go Programming Language. ^ Go FAQ: Is Google using Go internally?. Retrieved March 9, 2013. ^ The Go Programming Language and Environment. Communications of the ACM. https://dl.acm.org/doi/pdf/10.1145/3488716 ^ The Go Gopher - The Go Programming Language. go.dev. Retrieved February 9, 2023. ^ Go fonts. Go. November 16, 2016. Retrieved March 12, 2019. ^ Go Font TTFs. GitHub. Retrieved April 2, 2019. ^ Go's New Brand. The Go Blog. Retrieved November 9, 2018. ^ Merrick, Alice (March 9, 2021). Go Developer Survey 2020 Results. Go Programming Language. Retrieved March 16, 2022. ^ a b Pike, Rob (September 26, 2013). Arrays, slices (and strings): The mechanics of 'append'. The Go Blog. Retrieved March 7, 2015. ^ E2E: Erik Meijer and Robert Griesemer. Channel 9. Microsoft. May 7, 2012. ^ Go 2 Draft Designs. Retrieved September 12, 2018. ^ The Go Blog: Go 2 Draft Designs. August 28, 2018. ^ Proposal: A built-in Go error check function, try. Go repository on GitHub. Retrieved March 16, 2022. ^ Type Parameters — Draft Design. go.googlesource.com. ^ Generics in Go. bitfieldconsulting.com. December 17, 2021. ^ Go 1.18 is released!. Go Programming Language. March 15, 2022. Retrieved March 16, 2022. ^ Go 1 and the Future of Go Programs. The Go Programming Language. ^ Go 1.24 Release Notes. The Go Programming Language. ^ Release History. The Go Programming Language. ^ Backward Compatibility, Go 1.21, and Go 2. The Go Programming Language. ^ A Quick Guide to Go's Assembler. go.dev. Retrieved December 31, 2021. ^ Pike, Rob (November 10, 2009). The Go Programming Language. YouTube. Retrieved July 1, 2011. ^ Pike, Rob (November 10, 2009). The Go Programming Language (flv) (Tech talk). Google. Event occurs at 8:53. ^ Download and install packages and dependencies. See godoc.org for addresses and documentation of some packages. ^ GoDoc. godoc.org. ^ Pike, Rob. The Changelog (Podcast). Archived from the original on October 20, 2013. Retrieved October 7, 2013. ^ Go Programming Language Specification, §Semicolons. The Go Programming Language. ^ Effective Go, §Semicolons. The Go Programming Language. ^ The Go Programming Language Specification. The Go Programming Language. ^ Go Syntax. www.w3schools.com. Retrieved November 23, 2024. ^ Pike, Rob (October 23, 2013). Strings, bytes, runes and characters in Go. ^ Doxsey, Caleb. Structs and Interfaces — An Introduction to Programming in Go. www.golang-book.com. Retrieved October 15, 2018. ^ Gerrand, Andrew. Go Slices: usage and internals. ^ The Go Authors. Effective Go: Slices. ^ The Go authors. Selectors. ^ The Go authors. Calls. ^ Go Programming Language Specification, §Package unsafe. The Go Programming Language. ^ The Go Programming Language Specification. go.dev. Retrieved December 31, 2021. ^ The Go Programming Language Specification. The Go Programming Language. ^ A tour of go. go.dev. ^ The Go Programming Language Specification. The Go Programming Language. ^ The Go Programming Language Specification. go.dev. Retrieved December 31, 2021. ^ The Go Programming Language Specification. The Go Programming Language. ^ a b Schmager, Frank; Cameron, Nicholas; Noble, James (2010). GoHotDraw: evaluating the Go programming language with design patterns. Evaluation and Usability of Programming Languages and Tools. ACM. ^ a b c d e Balbaert, Ivo (2012). The Way to Go: A Thorough Introduction to the Go Programming Language. iUniverse. ^ The Evolution of Go. talks.golang.org. Retrieved March 13, 2016. ^ Diggins, Christopher (November 24, 2009). Duck Typing and the Go Programming Language. Dr. Dobb's, The world of software development. Retrieved March 10, 2016. ^ Ryer, Mat (December 1, 2015). Duck typing in Go. Retrieved March 10, 2016. ^ Frequently Asked Questions (FAQ) - The Go Programming Language. The Go Programming Language. ^ The Go Programming Language Specification. The Go Programming Language. ^ The Go Programming Language Specification. The Go Programming Language. ^ reflect package. pkg.go.dev. ^ map[string]interface{} in Go. bitfieldconsulting.com. June 6, 2020. ^ Go Data Structures: Interfaces. Retrieved November 15, 2012. ^ The Go Programming Language Specification. The Go Programming Language. ^ Go 1.18 Release Notes: Generics. Go Programming Language. March 15, 2022. Retrieved March 16, 2022. ^ Type Parameters Proposal. go.googlesource.com. Retrieved June 25, 2023. ^ The Go Programming Language Specification - The Go Programming Language. go.dev. Retrieved June 25, 2023. ^ An Introduction To Generics - The Go Programming Language. go.dev. Retrieved June 25, 2023. ^ Type Parameters Proposal. go.googlesource.com. Retrieved June 25, 2023. ^ Effective Go. golang.org. The Go Authors. Retrieved May 13, 2014. ^ A Tutorial for the Go Programming Language. The Go Programming Language. Retrieved March 10, 2013. In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared. ^ go. The Go Programming Language. ^ How to Write Go Code. The Go Programming Language. The packages from the standard library are given short import paths such as fmt and net/http. For your own packages, you must choose a base path that is unlikely to collide with future additions to the standard library or other external libraries. If you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. For instance, if you have an Example account at example.com/user, that should be your base path ^ a b Pike, Rob (September 18, 2012). Concurrency is not Parallelism. ^ a b Donovan, Alan A. A.; Kernighan, Brian W. (2016). The Go programming language. Addison-Wesley professional computing series. New York, Munich: Addison-Wesley. ISBN 978-0-13-419044-0. ^ a b c d e Chisnall, David (2012). The Go Programming Language Phrasebook. Addison-Wesley. ISBN 9780132919005. ^ Effective Go. The Go Programming Language. ^ Summerfield, Mark (2012). Programming in Go: Creating Applications for the 21st Century. Addison-Wesley. ^ The Go Memory Model. Retrieved April 10, 2017. ^ Go Concurrency Patterns. The Go Programming Language. ^ Graham-Cumming, John (August 24, 2013). Recycling Memory Buffers in Go. ^ tree.go. ^ Cheslack-Postava, Ewen. Iterators in Go. ^ Kernighan, Brian W. A Descent Into Limbo. ^ a b The Go Memory Model. Retrieved January 5, 2011. ^ Tang, Peiyi (2010). Multi-core parallel programming in Go (PDF). Proc. First International Conference on Advanced Computing and Communications. Archived from the original (PDF) on September 9, 2016. Retrieved May 14, 2015. ^ Nanz, Sebastian; West, Scott; Soares Da Silveira, Kaue. Examining the expert gap in parallel programming (PDF). Euro-Par 2013. CiteSeerX 10.1.1.368.6137. ^ Go Authors. Share Memory By Communicating. ^ Cox, Russ. Off to the Races. ^ Pike, Rob (October 25, 2012). Go at Google: Language Design in the Service of Software Engineering. Google, Inc. There is one important caveat: Go is not purely memory safe in the presence of concurrency. ^ Introducing the Go Race Detector. The Go Blog. Retrieved June 26, 2013. ^ Go 1.6 Release Notes - The Go Programming Language. go.dev. Retrieved November 17, 2023. ^ Frequently Asked Questions (FAQ) - the Go Programming Language. ^ A Story of a Fat Go Binary. September 21, 2018. ^ Go Programming Language Specification, §Interface types. The Go Programming Language. ^ Go Programming Language Specification, §Type assertions. The Go Programming Language. ^ All Systems Are Go. informIT (Interview). August 17, 2010. Retrieved June 21, 2018. ^ Language Design FAQ. November 13, 2009. Archived from the original on November 13, 2009. ^ Proposal for an exception-like mechanism. golang-nuts. March 25, 2010. Retrieved March 25, 2010. ^ Weekly Snapshot History. The Go Programming Language. ^ Panic And Recover. Go wiki. ^ Effective Go. The Go Programming Language. ^ gofmt. The Go Programming Language. Retrieved February 5, 2021. ^ golang/lint public archive. github.com. November 30, 2022. ^ a b Effective Go. The Go Programming Language. ^ Unused local variables. yourbasic.org. Retrieved February 11, 2021. ^ Unused package imports. yourbasic.org. Retrieved February 11, 2021. ^ Code Review Comments. GitHub. Retrieved July 3, 2018. ^ Talks. Retrieved July 3, 2018. ^ Errors Are Values. Retrieved July 3, 2018. ^ tools/gopls/README.md at master · golang/tools. GitHub. Retrieved November 17, 2023. ^ fmt. The Go Programming Language. Retrieved April 8, 2019. ^ testing. The Go Programming Language. Retrieved December 27, 2020. ^ http package - net/http - Go Packages. pkg.go.dev. Retrieved November 23, 2024. ^ Lee, Wei-Meng (November 24, 2022). Introduction to the Go Programming Language. Component Developer Magazine. Archived from the original on June 5, 2023. Retrieved September 8, 2023. ^ Hoffmann, Frank; Neumeyer, Mandy (August 2018). Simply Secure. Linux Magazine. No. 213. Archived from the original on May 28, 2023. Retrieved September 8, 2023. ^ Lee, Wei-Meng (August 31, 2022). Introduction to Containerization Using Docker. CODE Magazine. Archived from the original on May 30, 2023. Retrieved September 8, 2023. ^ Pirker, Alexander (February 24, 2023). Kubernetes Security for Starters. CODE Magazine. Archived from the original on April 1, 2023. Retrieved September 8, 2023. ^ Taft, Rebecca; Sharif, Irfan; Matei, Andrei; Van Benschoten, Nathan; Lewis, Jordan; Grieger, Tobias; Niemi, Kai; Woods, Andy; Birzin, Anne; Poss, Raphael; Bardea, Paul; Ranade, Amruta; Darnell, Ben; Gruneir, Bram; Jaffray, Justin; Zhang, Lucy; Mattis, Peter (June 11, 2020). CockroachDB: The Resilient Geo-Distributed SQL Database. Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data. SIGMOD '20. pp. 1493–1509. doi:10.1145/3318464.3386134. ISBN 978-1-4503-6735-6. ^ Hopkins, Brandon (September 13, 2022). Static Site Generation with Hugo. Linux Journal. Archived from the original on April 8, 2023. Retrieved September 8, 2023. ^ Simionato, Michele (November 15, 2009). Interfaces vs Inheritance (or, watch out for Go!). artima. Retrieved November 15, 2009. ^ Astels, Dave (November 9, 2009). Ready, Set, Go!. engineyard. Archived from the original on October 19, 2018. Retrieved November 9, 2009. ^ jt (January 11, 2010). Google's Go Wins Programming Language Of The Year Award. jaxenter. Retrieved December 5, 2012. ^ TIOBE Programming Community Index for June 2015. TIOBE Software. June 2015. Retrieved July 5, 2015. ^ TIOBE Index. TIOBE. Retrieved July 15, 2024. ^ Eckel, Bruce (August 27, 2011). Calling Go from Python via JSON-RPC. Retrieved August 29, 2011. ^ Hundt, Robert (2011). Loop recognition in C++/Java/Go/Scala (PDF). Scala Days. ^ Metz, Cade (July 1, 2011). Google Go strikes back with C++ bake-off. The Register. ^ Yager, Will. Why Go is not Good. Retrieved November 4, 2018. ^ Dobronszki, Janos. Everyday Hassles in Go. Retrieved November 4, 2018. ^ Why are there braces but no semicolons? And why can't I put the opening brace on the next line?. Retrieved March 26, 2020. The advantages of a single, programmatically mandated format for all Go programs greatly outweigh any perceived disadvantages of the particular style. ^ I want off Mr. Golang's Wild Ride. February 28, 2020. Retrieved November 17, 2020. ^ proposal: os: Create/Open/OpenFile() set FILE_SHARE_DELETE on windows #32088. GitHub. May 16, 2019. Retrieved November 17, 2020. ^ Tu, Tengfei (2019). Understanding Real-World Concurrency Bugs in Go (PDF). For example, around 58% of blocking bugs are caused by message passing. In addition to the violation of Go's channel usage rules (e.g., waiting on a channel that no one sends data to or close), many concurrency bugs are caused by the mixed usage of message passing and other new semantics and new libraries in Go, which can easily be overlooked but hard to detect ^ Brownlee, John (November 13, 2009). Google didn't google Go before naming their programming language'. Archived from the original on December 8, 2015. Retrieved May 26, 2016. ^ Claburn, Thomas (November 11, 2009). Google 'Go' Name Brings Accusations Of Evil'. InformationWeek. Archived from the original on July 22, 2010. Retrieved January 18, 2010. ^ a b Issue 9 - go — I have already used the name for *MY* programming language. Github. Google Inc. Retrieved October 12, 2010.",
    "further_reading": "Donovan, Alan; Kernighan, Brian (October 2015). The Go Programming Language (1st ed.). Addison-Wesley Professional. p. 400. ISBN 978-0-13-419044-0. Bodner, Jon (March 2021). Learning Go (1st ed.). O'Reilly. p. 352. ISBN 9781492077213.",
    "external_links": "Wikimedia Commons has media related to Go (programming language). Official website vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteGoogle free and open-source softwareSoftwareApplications Chromium Gemma OpenRefine Tesseract Programming languages Carbon Dart Go Sawzall Frameworks anddevelopment tools AMP Angular AngularJS Beam Bazel Blockly Brotli Closure Tools Cpplint FlatBuffers Flutter Ganeti Gears Gerrit GLOP gRPC Gson Guava Guetzli Guice gVisor Kubernetes LevelDB libvpx Lighthouse NaCl Namebench Nomulus OR-Tools Polymer Protocol Buffers TensorFlow V8 Operating systems Android ChromiumOS Fuchsia gLinux Goobuntu Related Code-in Google LLC v. Oracle America, Inc. Open Source Security Foundation Summer of Code vteRob PikeOperating systems Plan 9 from Bell Labs Inferno Programming languages Newsqueak Limbo Sawzall Go Software acme Blit sam rio 8½ Publications The Practice of Programming The Unix Programming Environment Other Renée French Mark V. Shaney UTF-8 vteKen ThompsonOperating systems Unix Plan 9 from Bell Labs Inferno Programming languages B Go Software Belle ed grep sam Space Travel Thompson shell Associated institutions Bell Labs Google Other UTF-8 Authority control databases InternationalFASTNationalGermanyUnited StatesIsrael",
    "document": "Go was designed at Google in 2007 to improve programming productivity in an era of multicore, networked machines and large codebases. The designers wanted to address criticisms of other languages in use at Google, but keep their useful characteristics: Static typing and run-time efficiency (like C) Readability and usability (like Python) High-performance networking and multiprocessing Its designers were primarily motivated by their shared dislike of C++. Go was publicly announced in November 2009, and version 1.0 was released in March 2012. Go is widely used in production at Google and in many other organizations and open-source projects. In retrospect the Go authors judged Go to be successful due to the overall engineering work around the language, including the runtime support for the language's concurrency feature. Although the design of most languages concentrates on innovations in syntax, semantics, or typing, Go is focused on the software development process itself. ... The principal unusual property of the language itself—concurrency—addressed problems that arose with the proliferation of multicore CPUs in the 2010s. But more significant was the early work that established fundamentals for packaging, dependencies, build, test, deployment, and other workaday tasks of the software development world, aspects that are not usually foremost in language design. Mascot of Go programming language is the Gopher shown above. The Gopher mascot was introduced in 2009 for the open source launch of the language. The design, by Renée French, borrowed from a c. 2000 WFMU promotion. In November 2016, the Go and Go Mono fonts were released by type designers Charles Bigelow and Kris Holmes specifically for use by the Go project. Go is a humanist sans-serif resembling Lucida Grande, and Go Mono is monospaced. Both fonts adhere to the WGL4 character set and were designed to be legible with a large x-height and distinct letterforms. Both Go and Go Mono adhere to the DIN 1450 standard by having a slashed zero, lowercase l with a tail, and an uppercase I with serifs. In April 2018, the original logo was redesigned by brand designer Adam Smith. The new logo is a modern, stylized GO slanting right with trailing streamlines. (The Gopher mascot remained the same.) The lack of support for generic programming in initial versions of Go drew considerable criticism. The designers expressed an openness to generic programming and noted that built-in functions were in fact type-generic, but are treated as special cases; Pike called this a weakness that might be changed at some point. The Google team built at least one compiler for an experimental Go dialect with generics, but did not release it. In August 2018, the Go principal contributors published draft designs for generic programming and error handling and asked users to submit feedback. However, the error handling proposal was eventually abandoned. In June 2020, a new draft design document was published that would add the necessary syntax to Go for declaring generic functions and types. A code translation tool, go2go, was provided to allow users to try the new syntax, along with a generics-enabled version of the online Go Playground. Generics were finally added to Go in version 1.18 on March 15, 2022. Go 1 guarantees compatibility for the language specification and major parts of the standard library. All versions up through the current Go 1.24 release have maintained this promise. Go uses a go1.[major].[patch] versioning format, such as go1.24.0 and each major Go release is supported until there are two newer major releases. Unlike most software, Go calls the second number in a version the major, i.e., in go1.24.0 the 24 is the major version. This is because Go plans to never reach 2.0, prioritizing backwards compatibility over potential breaking changes. 2015 lecture of Rob Pike (one of the Go creators) Go is influenced by C (especially the Plan 9 dialect[failed verification – see discussion]), but with an emphasis on greater simplicity and safety. It consists of: A syntax and environment adopting patterns more common in dynamic languages: Optional concise variable declaration and initialization through type inference (x := 0 instead of var x int = 0; or var x = 0;) Fast compilation Remote package management (go get) and online package documentation Distinctive approaches to particular problems: Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance A toolchain that, by default, produces statically linked native binaries without external Go dependencies A desire to keep the language specification simple enough to hold in a programmer's head, in part by omitting features that are common in similar languages. Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write i := 3 or s := Hello, world!, without specifying the types of variables used. This contrasts with C's int i = 3; and const char *s = Hello, world!;. Go also removes the requirement to use parentheses in if statement conditions. Semicolons still terminate statements;[a] but are implicit when the end of a line occurs.[b] Methods may return multiple values, and returning a result, err pair is the conventional way a method indicates an error to its caller in Go.[c] Go adds literal syntaxes for initializing struct parameters by name and for initializing maps and slices. As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, maps, and channels. fmt.Println(Hello World!) is a statement. In Go, statements are separated by ending a line (hitting the Enter key) or by a semicolon ;. Hitting the Enter key adds ; to the end of the line implicitly (does not show up in the source code). The left curly bracket { cannot come at the start of a line. Go has a number of built-in types, including numeric ones (byte, int64, float32, etc.), Booleans, and byte strings (string). Strings are immutable; built-in operators and keywords (rather than functions) provide concatenation, comparison, and UTF-8 encoding/decoding. Record types can be defined with the struct keyword. For each type T and each non-negative integer constant n, there is an array type denoted [n]T; arrays of differing lengths are thus of different types. Dynamic arrays are available as slices, denoted []T for some type T. These have a length and a capacity specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory. Pointers are available for all types, and the pointer-to-T type is denoted *T. Address-taking and indirection use the & and * operators, as in C, or happen implicitly through the method call or attribute access syntax. There is no pointer arithmetic,[d] except via the special unsafe.Pointer type in the standard library. For a pair of types K, V, the type map[K]V is the type mapping type-K keys to type-V values, though Go Programming Language specification does not give any performance guarantees or implementation requirements for map types. Hash tables are built into the language, with special syntax and built-in functions. chan T is a channel that allows sending values of type T between concurrent Go processes. Aside from its support for interfaces, Go's type system is nominal: the type keyword can be used to define a new named type, which is distinct from other named types that have the same layout (in the case of a struct, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always be invoked explicitly. For example, the type keyword can be used to define a type for IPv4 addresses, based on 32-bit unsigned integers as follows: type ipv4addr uint32 With this type definition, ipv4addr(x) interprets the uint32 value x as an IP address. Simply assigning x to a variable of type ipv4addr is a type error. Constant expressions may be either typed or untyped; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check. Function types are indicated by the func keyword; they take zero or more parameters and return zero or more values, all of which are typed. The parameter and return values determine a function type; thus, func(string, int32) (int, error) is the type of functions that take a string and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type error. Any named type has a method set associated with it. The IP address example above can be extended with a method for checking whether its value is a known standard: // ZeroBroadcast reports whether addr is 255.255.255.255. func (addr ipv4addr) ZeroBroadcast() bool { return addr == 0xFFFFFFFF } Due to nominal typing, this method definition adds a method to ipv4addr, but not on uint32. While methods have special definition and call syntax, there is no distinct method type. Go provides two features that replace class inheritance.[citation needed] The first is embedding, which can be viewed as an automated form of composition. The second are its interfaces, which provides runtime polymorphism.: 266 Interfaces are a class of types and provide a limited form of structural typing in the otherwise nominal type system of Go. An object which is of an interface type is also of another type, much like C++ objects being simultaneously of a base and derived class. The design of Go interfaces was inspired by protocols from the Smalltalk programming language. Multiple sources use the term duck typing when describing Go interfaces. Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically checked. Because conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer the term structural typing. The definition of an interface type lists required methods by name and type. Any object of type T for which functions exist matching all the required methods of interface type I is an object of type I as well. The definition of type T need not (and cannot) identify type I. For example, if Shape, Square and Circle are defined as import math type Shape interface { Area() float64 } type Square struct { // Note: no implements declaration side float64 } func (sq Square) Area() float64 { return sq.side * sq.side } type Circle struct { // No implements declaration here either radius float64 } func (c Circle) Area() float64 { return math.Pi * math.Pow(c.radius, 2) } then both a Square and a Circle are implicitly a Shape and can be assigned to a Shape-typed variable.: 263–268 In formal language, Go's interface system provides structural rather than nominal typing. Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.: 270 The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of Reader and Writer.: 282–283 Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the type assertion, which checks against a single potential type: var shp Shape = Square{5} square, ok := shp.(Square) // Asserts Square type on shp, should work if ok { fmt.Printf(%#v\\n, square) } else { fmt.Println(Can't print shape as Square) } and the type switch, which checks against multiple types:[citation needed] func (sq Square) Diagonal() float64 { return sq.side * math.Sqrt2 } func (c Circle) Diameter() float64 { return 2 * c.radius } func LongestContainedLine(shp Shape) float64 { switch v := shp.(type) { case Square: return v.Diagonal() // Or, with type assertion, shp.(Square).Diagonal() case Circle: return v.Diameter() // Or, with type assertion, shp.(Circle).Diameter() default: return 0 // In practice, this should be handled with errors } } The empty interface interface{} is an important base case because it can refer to an item of any concrete type. It is similar to the Object class in Java or C# and is satisfied by any type, including built-in types like int.: 284 Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the interface{} value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's reflect package. Because interface{} can refer to any value, it is a limited way to escape the restrictions of static typing, like void* in C but with additional run-time type checks.[citation needed] The interface{} type can be used to model structured data of any arbitrary schema in Go, such as JSON or YAML data, by representing it as a map[string]interface{} (map of string to empty interface). This recursively describes data in the form of a dictionary with string keys and values of any type. Interface values are implemented using pointer to data and a second pointer to run-time type information. Like some other types implemented using pointers in Go, interface values are nil if uninitialized. Since version 1.18, Go supports generic code using parameterized types. Functions and types now have the ability to be generic using type parameters. These type parameters are specified within square brackets, right after the function or type name. The compiler transforms the generic function or type into non-generic by substituting type arguments for the type parameters provided, either explicitly by the user or type inference by the compiler. This transformation process is referred to as type instantiation. Interfaces now can define a set of types (known as type set) using | (Union) operator, as well as a set of methods. These changes were made to support type constraints in generics code. For a generic function or type, a constraint can be thought of as the type of the type argument: a meta-type. This new ~T syntax will be the first use of ~ as a token in Go. ~T means the set of all types whose underlying type is T. type Number interface { ~int | ~float64 | ~float32 | ~int32 | ~int64 } func Add[T Number](nums ...T) T { var sum T for _, v := range nums { sum += v } return sum } func main() { add := Add[int] // Type instantiation println(add(1, 2, 3, 4, 5)) // 15 res := Add(1.1, 2.2, 3.3, 4.4, 5.5) // Type Inference println(res) // +1.650000e+001 } This section is an excerpt from Enumerated type § Go.[edit] Go uses the iota keyword to create enumerated constants. type ByteSize float64 const ( _ = iota // ignore first value by assigning to blank identifier KB ByteSize = 1 << (10 * iota) MB GB ) In Go's package system, each package has a path (e.g., compress/bzip2 or golang.org/x/net/html) and a name (e.g., bzip2 or html). By default other packages' definitions must always be prefixed with the other package's name. However the name used can be changed from the package name, and if imported as _, then no package prefix is required. Only the capitalized names from other packages are accessible: io.Reader is public but bzip2.reader is not. The go get command can retrieve packages stored in a remote repository and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as example.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the standard library or other external libraries. DotGo 2015 - Matt Aimonetti - Applied concurrency in Go The Go language has built-in facilities, as well as library support, for writing concurrent programs. The runtime is asynchronous: program execution that performs for example a network read will be suspended until data is available to process, allowing other parts of the program to perform other work. This is built into the runtime and does not require any changes in program code. The go runtime also automatically schedules concurrent operations (goroutines) across multiple CPUs; this can achieve parallelism for a properly written program. The primary concurrency construct is the goroutine, a type of green thread.: 280–281 A function call prefixed with the go keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of operating-system threads, similar to the scheduling performed in Erlang and Haskell's GHC runtime implementation.: 10 While a standard library package featuring most of the classical concurrency control structures (mutex locks, etc.) is available,: 151–152 idiomatic concurrent programs instead prefer channels, which send messages between goroutines. Optional buffers store messages in FIFO order: 43 and allow sending goroutines to proceed before their messages are received.: 233 Channels are typed, so that a channel of type chan T can only be used to transfer messages of type T. Special syntax is used to operate on them; <-ch is an expression that causes the executing goroutine to block until a value comes in over the channel ch, while ch <- x sends the value x (possibly blocking until another goroutine receives the value). The built-in switch-like select statement can be used to implement non-blocking communication on multiple channels; see below for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data. The existence of channels does not by itself set Go apart from actor model-style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). In the actor model, channels are themselves actors, therefore addressing a channel just means to address an actor. The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.: 147 From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, fan-out parallel calls to a set of services, and others. Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers, implementing coroutines (which helped inspire the name goroutine), and implementing iterators. Concurrency-related structural conventions of Go (channels and alternative channel inputs) are derived from Tony Hoare's communicating sequential processes model. Unlike previous concurrent programming languages such as Occam or Limbo (a language on which Go co-designer Rob Pike worked), Go does not provide any built-in notion of safe or verifiable concurrency. While the communicating-processes model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see § Lack of data race safety, below. Although Go's concurrency features are not aimed primarily at parallel processing, they can be used to program shared-memory multi-processor machines. Various studies have been done into the effectiveness of this approach. One of these studies compared the size (in lines of code) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for Chapel, Cilk and Intel TBB. The study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor core. The expert's programs were usually faster, but also longer. Go's approach to concurrency can be summarized as don't communicate by sharing memory; share memory by communicating. There are no restrictions on how goroutines access shared data, making data races possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes. Furthermore, Go's internal data structures like interface values, slice headers, hash tables, and string headers are not immune to data races, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization. Instead of language support, safe concurrent programming thus relies on conventions; for example, Chisnall recommends an idiom called aliases xor mutable, meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver.: 155 The gc toolchain has an optional data race detector that can check for unsynchronized access to shared memory during runtime since version 1.1, additionally a best-effort race detector is also included by default since version 1.6 of the gc runtime for access to the map data type. The linker in the gc toolchain creates statically linked binaries by default; therefore all Go binaries include the Go runtime. Go deliberately omits certain features common in other languages, including (implementation) inheritance, assertions,[e] pointer arithmetic,[d] implicit type conversions, untagged unions,[f] and tagged unions.[g] The designers added only those facilities that all three agreed on. Of the omitted language features, the designers explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of interfaces to achieve dynamic dispatch[h] and composition to reuse code. Composition and delegation are in fact largely automated by struct embedding; according to researchers Schmager et al., this feature has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static, making it not obvious whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance. Exception handling was initially omitted in Go due to lack of a design that gives value proportionate to the complexity. An exception-like panic/recover mechanism that avoids the usual try-catch control structure was proposed and released in the March 30, 2010 snapshot. The Go authors advise using it for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package. Across package boundaries, Go includes a canonical error type, and multi-value returns using this type are the standard idiom. The Go authors put substantial effort into influencing the style of Go programs: Indentation, spacing, and other surface-level details of code are automatically standardized by the gofmt tool. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font. golint does additional style checks automatically, but has been deprecated and archived by the Go maintainers. Tools and libraries distributed with Go suggest standard approaches to things like API documentation (godoc), testing (go test), building (go build), package management (go get), and so on. Go enforces rules that are recommendations in other languages, for example banning cyclic dependencies, unused variables or imports, and implicit type conversions. The omission of certain features (for example, functional-programming shortcuts like map and Java-style try/finally blocks) tends to encourage a particular explicit, concrete, and imperative programming style. On day one the Go team published a collection of Go idioms, and later also collected code review comments, talks, and official blog posts to teach Go style and coding philosophy. The main Go distribution includes tools for building, testing, and analyzing code: go build, which builds Go binaries using only information in the source files themselves, no separate makefiles go test, for unit testing and microbenchmarks as well as fuzzing go fmt, for formatting code go install, for retrieving and installing remote packages go vet, a static analyzer looking for potential errors in code go run, a shortcut for building and executing code go doc, for displaying documentation go generate, a standard way to invoke code generators go mod, for creating a new module, adding dependencies, upgrading dependencies, etc. go tool, for invoking developer tools (added in Go version 1.24) It also includes profiling and debugging support, fuzzing capabilities to detect bugs, runtime instrumentation (for example, to track garbage collection pauses), and a data race detector. Another tool maintained by the Go team but is not included in Go distributions is gopls, a language server that provides IDE features such as intelligent code completion to Language Server Protocol compatible editors. An ecosystem of third-party tools adds to the standard distribution, such as gocode, which enables code autocompletion in many text editors, goimports, which automatically adds/removes package imports as needed, and errcheck, which detects code that might unintentionally ignore errors. package main import fmt func main() { fmt.Println(hello world) } where fmt is the package for formatted I/O, similar to C's C file input/output. The following simple program demonstrates Go's concurrency features to implement an asynchronous program. It launches two lightweight threads (goroutines): one waits for the user to type some text, while the other implements a timeout. The select statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from David Chisnall's book).: 152 package main import ( fmt time ) func readword(ch chan string) { fmt.Println(Type a word, then hit Enter.) var word string fmt.Scanf(%s, &word) ch <- word } func timeout(t chan bool) { time.Sleep(5 * time.Second) t <- false } func main() { t := make(chan bool) go timeout(t) ch := make(chan string) go readword(ch) select { case word := <-ch: fmt.Println(Received, word) case <-t: fmt.Println(Timeout.) } } The testing package provides support for automated testing of go packages. Target function example: func ExtractUsername(email string) string { at := strings.Index(email, @) return email[:at] } Test code (note that assert keyword is missing in Go; tests live in <filename>_test.go at the same package): import ( testing ) func TestExtractUsername(t *testing.T) { t.Run(withoutDot, func(t *testing.T) { username := ExtractUsername(r@google.com) if username != r { t.Fatalf(Got: %v\\n, username) } }) t.Run(withDot, func(t *testing.T) { username := ExtractUsername(jonh.smith@example.com) if username != jonh.smith { t.Fatalf(Got: %v\\n, username) } }) } It is possible to run tests in parallel. The net/http package provides support for creating web applications. This example would show Hello world! when localhost:8080 is visited. package main import ( fmt log net/http ) func helloFunc(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, Hello world!) } func main() { http.HandleFunc(/, helloFunc) log.Fatal(http.ListenAndServe(:8080, nil)) } Go has found widespread adoption in various domains due to its robust standard library and ease of use. Popular applications include: Caddy, a web server that automates the process of setting up HTTPS, Docker, which provides a platform for containerization, aiming to ease the complexities of software development and deployment, Kubernetes, which automates the deployment, scaling, and management of containerized applications, CockroachDB, a distributed SQL database engineered for scalability and strong consistency, and Hugo, a static site generator that prioritizes speed and flexibility, allowing developers to create websites efficiently. The interface system, and the deliberate omission of inheritance, were praised by Michele Simionato, who likened these characteristics to those of Standard ML, calling it a shame that no popular language has followed [this] particular route. Dave Astels at Engine Yard wrote in 2009: Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous. Go is still experimental and still a little rough around the edges. Go was named Programming Language of the Year by the TIOBE Programming Community Index in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010, surpassing established languages like Pascal. By June 2015, its ranking had dropped to below 50th in the index, placing it lower than COBOL and Fortran. But as of January 2017, its ranking had surged to 13th, indicating significant growth in popularity and adoption. Go was again awarded TIOBE Programming Language of the Year in 2016. Bruce Eckel has stated: The complexity of C++ (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve. A 2011 evaluation of the language and its gc implementation in comparison to C++ (GCC), Java and Scala by a Google engineer found: Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes.— R. Hundt The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was never intended to be an example of idiomatic or efficient Go; Russ Cox then optimized the Go code, as well as the C++ code, and got the Go code to run almost as fast as the C++ version and more than an order of magnitude faster than the code in the paper. Go's nil combined with the lack of algebraic types leads to difficulty handling failures and base cases. Go does not allow an opening brace to appear on its own line, which forces all Go programmers to use the same brace style. Go has been criticized for focusing on simplicity of implementation rather than correctness and flexibility; as an example, the language uses POSIX file semantics on all platforms, and therefore provides incorrect information on platforms such as Windows (which do not follow the aforementioned standard). A study showed that it is as easy to make concurrency bugs with message passing as with shared memory, sometimes even more. On November 10, 2009, the day of the general release of the language, Francis McCabe, developer of the Go! programming language (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which he had spent 10 years developing. McCabe raised concerns that the 'big guy' will end up steam-rollering over him, and this concern resonated with the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some even saying the issue contradicts Google's motto of: Don't be evil. On October 12, 2010, the filed public issue ticket was closed by Google developer Russ Cox (@rsc) with the custom status Unfortunate accompanied by the following comment: There are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages. Free and open-source software portal Fat pointer Comparison of programming languages ^ But To allow complex statements to occupy a single line, a semicolon may be omitted before a closing ) or }. ^ if the newline comes after a token that could end a statement, [the lexer will] insert a semicolon. ^ Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See Semipredicate problem: Multivalued return. ^ a b Language FAQ Why is there no pointer arithmetic? Safety ... never derive an illegal address that succeeds incorrectly ... using array indices can be as efficient as ... pointer arithmetic ... simplify the implementation of the garbage collector.... ^ Language FAQ Why does Go not have assertions? ...our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting.... ^ Language FAQ Why are there no untagged unions...? [they] would violate Go's memory safety guarantees. ^ Language FAQ Why does Go not have variant types? ... We considered [them but] they overlap in confusing ways with interfaces.... [S]ome of what variant types address is already covered, ... although not as elegantly. (The tag of an interface type is accessed with a type assertion). ^ Questions How do I get dynamic dispatch of methods? and Why is there no type inheritance? in the language FAQ. This article incorporates material from the official Go tutorial, which is licensed under the Creative Commons Attribution 3.0 license. ^ Codewalk: First-Class Functions in Go. Go supports first class functions, higher-order functions, user-defined function types, function literals, closures, and multiple return values. This rich feature set supports a functional programming style in a strongly typed language. ^ Is Go an object-oriented language?. Retrieved April 13, 2019. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy. ^ Go: code that grows with grace. Retrieved June 24, 2018. Go is Object Oriented, but not in the usual way. ^ a b c d e f g h Language Design FAQ. The Go Programming Language. January 16, 2010. Retrieved February 27, 2010. ^ a b Text file LICENSE. The Go Programming Language. Retrieved October 5, 2012. ^ The Go Programming Language Specification - the Go Programming Language. ^ a b Why doesn't Go have implements declarations?. The Go Programming Language. Retrieved October 1, 2015. ^ Pike, Rob (December 22, 2014). Rob Pike on Twitter. Archived from the original on April 7, 2022. Retrieved March 13, 2016. Go has structural typing, not duck typing. Full interface satisfaction is checked and required. ^ lang/go: go-1.4. OpenBSD ports. December 23, 2014. Retrieved January 19, 2015. ^ Go Porting Efforts. Go Language Resources. cat-v. January 12, 2010. Retrieved January 18, 2010. ^ Additional IP Rights Grant. The Go Programming Language. Retrieved October 5, 2012. ^ Go Introduction. www.w3schools.com. Retrieved November 23, 2024. ^ Kincaid, Jason (November 10, 2009). Google's Go: A New Programming Language That's Python Meets C++. TechCrunch. Retrieved January 18, 2010. ^ Metz, Cade (May 5, 2011). Google Go boldly goes where no code has gone before. The Register. ^ Is the language called Go or Golang?. Retrieved March 16, 2022. The language is called Go. ^ Go 1.5 Release Notes. Retrieved January 28, 2016. The compiler and runtime are now implemented in Go and assembler, without C. ^ The Go programming language. GitHub. Retrieved November 1, 2024. ^ gofrontend. GitHub. Retrieved November 1, 2024. ^ gccgo. Retrieved November 1, 2024. gccgo, the GNU compiler for the Go programming language ^ Gollvm. Retrieved November 1, 2024. Gollvm is an LLVM-based Go compiler. ^ A compiler from Go to JavaScript for running Go code in a browser: Gopherjs/Gopherjs. GitHub. Archived from the original on December 12, 2023. ^ Go at Google: Language Design in the Service of Software Engineering. Retrieved October 8, 2018. ^ Pike, Rob (April 28, 2010). Another Go at Language Design. Stanford EE Computer Systems Colloquium. Stanford University. Video available. ^ Frequently Asked Questions (FAQ) - The Go Programming Language. The Go Programming Language. Retrieved February 26, 2016. ^ Binstock, Andrew (May 18, 2011). Dr. Dobb's: Interview with Ken Thompson. Dr. Dobb's. Archived from the original on January 5, 2013. Retrieved February 7, 2014. ^ Pike, Rob (2012). Less is exponentially more. ^ Griesemer, Robert (2015). The Evolution of Go. ^ Griesemer, Robert; Pike, Rob; Thompson, Ken; Taylor, Ian; Cox, Russ; Kim, Jini; Langley, Adam. Hey! Ho! Let's Go!. Google Open Source. Retrieved May 17, 2018. ^ Shankland, Stephen (March 30, 2012). Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google. News. CNet. CBS Interactive Inc. Retrieved August 6, 2017. Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and C++. ^ Release History. The Go Programming Language. ^ Go FAQ: Is Google using Go internally?. Retrieved March 9, 2013. ^ The Go Programming Language and Environment. Communications of the ACM. https://dl.acm.org/doi/pdf/10.1145/3488716 ^ The Go Gopher - The Go Programming Language. go.dev. Retrieved February 9, 2023. ^ Go fonts. Go. November 16, 2016. Retrieved March 12, 2019. ^ Go Font TTFs. GitHub. Retrieved April 2, 2019. ^ Go's New Brand. The Go Blog. Retrieved November 9, 2018. ^ Merrick, Alice (March 9, 2021). Go Developer Survey 2020 Results. Go Programming Language. Retrieved March 16, 2022. ^ a b Pike, Rob (September 26, 2013). Arrays, slices (and strings): The mechanics of 'append'. The Go Blog. Retrieved March 7, 2015. ^ E2E: Erik Meijer and Robert Griesemer. Channel 9. Microsoft. May 7, 2012. ^ Go 2 Draft Designs. Retrieved September 12, 2018. ^ The Go Blog: Go 2 Draft Designs. August 28, 2018. ^ Proposal: A built-in Go error check function, try. Go repository on GitHub. Retrieved March 16, 2022. ^ Type Parameters — Draft Design. go.googlesource.com. ^ Generics in Go. bitfieldconsulting.com. December 17, 2021. ^ Go 1.18 is released!. Go Programming Language. March 15, 2022. Retrieved March 16, 2022. ^ Go 1 and the Future of Go Programs. The Go Programming Language. ^ Go 1.24 Release Notes. The Go Programming Language. ^ Release History. The Go Programming Language. ^ Backward Compatibility, Go 1.21, and Go 2. The Go Programming Language. ^ A Quick Guide to Go's Assembler. go.dev. Retrieved December 31, 2021. ^ Pike, Rob (November 10, 2009). The Go Programming Language. YouTube. Retrieved July 1, 2011. ^ Pike, Rob (November 10, 2009). The Go Programming Language (flv) (Tech talk). Google. Event occurs at 8:53. ^ Download and install packages and dependencies. See godoc.org for addresses and documentation of some packages. ^ GoDoc. godoc.org. ^ Pike, Rob. The Changelog (Podcast). Archived from the original on October 20, 2013. Retrieved October 7, 2013. ^ Go Programming Language Specification, §Semicolons. The Go Programming Language. ^ Effective Go, §Semicolons. The Go Programming Language. ^ The Go Programming Language Specification. The Go Programming Language. ^ Go Syntax. www.w3schools.com. Retrieved November 23, 2024. ^ Pike, Rob (October 23, 2013). Strings, bytes, runes and characters in Go. ^ Doxsey, Caleb. Structs and Interfaces — An Introduction to Programming in Go. www.golang-book.com. Retrieved October 15, 2018. ^ Gerrand, Andrew. Go Slices: usage and internals. ^ The Go Authors. Effective Go: Slices. ^ The Go authors. Selectors. ^ The Go authors. Calls. ^ Go Programming Language Specification, §Package unsafe. The Go Programming Language. ^ The Go Programming Language Specification. go.dev. Retrieved December 31, 2021. ^ The Go Programming Language Specification. The Go Programming Language. ^ A tour of go. go.dev. ^ The Go Programming Language Specification. The Go Programming Language. ^ The Go Programming Language Specification. go.dev. Retrieved December 31, 2021. ^ The Go Programming Language Specification. The Go Programming Language. ^ a b Schmager, Frank; Cameron, Nicholas; Noble, James (2010). GoHotDraw: evaluating the Go programming language with design patterns. Evaluation and Usability of Programming Languages and Tools. ACM. ^ a b c d e Balbaert, Ivo (2012). The Way to Go: A Thorough Introduction to the Go Programming Language. iUniverse. ^ The Evolution of Go. talks.golang.org. Retrieved March 13, 2016. ^ Diggins, Christopher (November 24, 2009). Duck Typing and the Go Programming Language. Dr. Dobb's, The world of software development. Retrieved March 10, 2016. ^ Ryer, Mat (December 1, 2015). Duck typing in Go. Retrieved March 10, 2016. ^ Frequently Asked Questions (FAQ) - The Go Programming Language. The Go Programming Language. ^ The Go Programming Language Specification. The Go Programming Language. ^ The Go Programming Language Specification. The Go Programming Language. ^ reflect package. pkg.go.dev. ^ map[string]interface{} in Go. bitfieldconsulting.com. June 6, 2020. ^ Go Data Structures: Interfaces. Retrieved November 15, 2012. ^ The Go Programming Language Specification. The Go Programming Language. ^ Go 1.18 Release Notes: Generics. Go Programming Language. March 15, 2022. Retrieved March 16, 2022. ^ Type Parameters Proposal. go.googlesource.com. Retrieved June 25, 2023. ^ The Go Programming Language Specification - The Go Programming Language. go.dev. Retrieved June 25, 2023. ^ An Introduction To Generics - The Go Programming Language. go.dev. Retrieved June 25, 2023. ^ Type Parameters Proposal. go.googlesource.com. Retrieved June 25, 2023. ^ Effective Go. golang.org. The Go Authors. Retrieved May 13, 2014. ^ A Tutorial for the Go Programming Language. The Go Programming Language. Retrieved March 10, 2013. In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared. ^ go. The Go Programming Language. ^ How to Write Go Code. The Go Programming Language. The packages from the standard library are given short import paths such as fmt and net/http. For your own packages, you must choose a base path that is unlikely to collide with future additions to the standard library or other external libraries. If you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. For instance, if you have an Example account at example.com/user, that should be your base path ^ a b Pike, Rob (September 18, 2012). Concurrency is not Parallelism. ^ a b Donovan, Alan A. A.; Kernighan, Brian W. (2016). The Go programming language. Addison-Wesley professional computing series. New York, Munich: Addison-Wesley. ISBN 978-0-13-419044-0. ^ a b c d e Chisnall, David (2012). The Go Programming Language Phrasebook. Addison-Wesley. ISBN 9780132919005. ^ Effective Go. The Go Programming Language. ^ Summerfield, Mark (2012). Programming in Go: Creating Applications for the 21st Century. Addison-Wesley. ^ The Go Memory Model. Retrieved April 10, 2017. ^ Go Concurrency Patterns. The Go Programming Language. ^ Graham-Cumming, John (August 24, 2013). Recycling Memory Buffers in Go. ^ tree.go. ^ Cheslack-Postava, Ewen. Iterators in Go. ^ Kernighan, Brian W. A Descent Into Limbo. ^ a b The Go Memory Model. Retrieved January 5, 2011. ^ Tang, Peiyi (2010). Multi-core parallel programming in Go (PDF). Proc. First International Conference on Advanced Computing and Communications. Archived from the original (PDF) on September 9, 2016. Retrieved May 14, 2015. ^ Nanz, Sebastian; West, Scott; Soares Da Silveira, Kaue. Examining the expert gap in parallel programming (PDF). Euro-Par 2013. CiteSeerX 10.1.1.368.6137. ^ Go Authors. Share Memory By Communicating. ^ Cox, Russ. Off to the Races. ^ Pike, Rob (October 25, 2012). Go at Google: Language Design in the Service of Software Engineering. Google, Inc. There is one important caveat: Go is not purely memory safe in the presence of concurrency. ^ Introducing the Go Race Detector. The Go Blog. Retrieved June 26, 2013. ^ Go 1.6 Release Notes - The Go Programming Language. go.dev. Retrieved November 17, 2023. ^ Frequently Asked Questions (FAQ) - the Go Programming Language. ^ A Story of a Fat Go Binary. September 21, 2018. ^ Go Programming Language Specification, §Interface types. The Go Programming Language. ^ Go Programming Language Specification, §Type assertions. The Go Programming Language. ^ All Systems Are Go. informIT (Interview). August 17, 2010. Retrieved June 21, 2018. ^ Language Design FAQ. November 13, 2009. Archived from the original on November 13, 2009. ^ Proposal for an exception-like mechanism. golang-nuts. March 25, 2010. Retrieved March 25, 2010. ^ Weekly Snapshot History. The Go Programming Language. ^ Panic And Recover. Go wiki. ^ Effective Go. The Go Programming Language. ^ gofmt. The Go Programming Language. Retrieved February 5, 2021. ^ golang/lint public archive. github.com. November 30, 2022. ^ a b Effective Go. The Go Programming Language. ^ Unused local variables. yourbasic.org. Retrieved February 11, 2021. ^ Unused package imports. yourbasic.org. Retrieved February 11, 2021. ^ Code Review Comments. GitHub. Retrieved July 3, 2018. ^ Talks. Retrieved July 3, 2018. ^ Errors Are Values. Retrieved July 3, 2018. ^ tools/gopls/README.md at master · golang/tools. GitHub. Retrieved November 17, 2023. ^ fmt. The Go Programming Language. Retrieved April 8, 2019. ^ testing. The Go Programming Language. Retrieved December 27, 2020. ^ http package - net/http - Go Packages. pkg.go.dev. Retrieved November 23, 2024. ^ Lee, Wei-Meng (November 24, 2022). Introduction to the Go Programming Language. Component Developer Magazine. Archived from the original on June 5, 2023. Retrieved September 8, 2023. ^ Hoffmann, Frank; Neumeyer, Mandy (August 2018). Simply Secure. Linux Magazine. No. 213. Archived from the original on May 28, 2023. Retrieved September 8, 2023. ^ Lee, Wei-Meng (August 31, 2022). Introduction to Containerization Using Docker. CODE Magazine. Archived from the original on May 30, 2023. Retrieved September 8, 2023. ^ Pirker, Alexander (February 24, 2023). Kubernetes Security for Starters. CODE Magazine. Archived from the original on April 1, 2023. Retrieved September 8, 2023. ^ Taft, Rebecca; Sharif, Irfan; Matei, Andrei; Van Benschoten, Nathan; Lewis, Jordan; Grieger, Tobias; Niemi, Kai; Woods, Andy; Birzin, Anne; Poss, Raphael; Bardea, Paul; Ranade, Amruta; Darnell, Ben; Gruneir, Bram; Jaffray, Justin; Zhang, Lucy; Mattis, Peter (June 11, 2020). CockroachDB: The Resilient Geo-Distributed SQL Database. Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data. SIGMOD '20. pp. 1493–1509. doi:10.1145/3318464.3386134. ISBN 978-1-4503-6735-6. ^ Hopkins, Brandon (September 13, 2022). Static Site Generation with Hugo. Linux Journal. Archived from the original on April 8, 2023. Retrieved September 8, 2023. ^ Simionato, Michele (November 15, 2009). Interfaces vs Inheritance (or, watch out for Go!). artima. Retrieved November 15, 2009. ^ Astels, Dave (November 9, 2009). Ready, Set, Go!. engineyard. Archived from the original on October 19, 2018. Retrieved November 9, 2009. ^ jt (January 11, 2010). Google's Go Wins Programming Language Of The Year Award. jaxenter. Retrieved December 5, 2012. ^ TIOBE Programming Community Index for June 2015. TIOBE Software. June 2015. Retrieved July 5, 2015. ^ TIOBE Index. TIOBE. Retrieved July 15, 2024. ^ Eckel, Bruce (August 27, 2011). Calling Go from Python via JSON-RPC. Retrieved August 29, 2011. ^ Hundt, Robert (2011). Loop recognition in C++/Java/Go/Scala (PDF). Scala Days. ^ Metz, Cade (July 1, 2011). Google Go strikes back with C++ bake-off. The Register. ^ Yager, Will. Why Go is not Good. Retrieved November 4, 2018. ^ Dobronszki, Janos. Everyday Hassles in Go. Retrieved November 4, 2018. ^ Why are there braces but no semicolons? And why can't I put the opening brace on the next line?. Retrieved March 26, 2020. The advantages of a single, programmatically mandated format for all Go programs greatly outweigh any perceived disadvantages of the particular style. ^ I want off Mr. Golang's Wild Ride. February 28, 2020. Retrieved November 17, 2020. ^ proposal: os: Create/Open/OpenFile() set FILE_SHARE_DELETE on windows #32088. GitHub. May 16, 2019. Retrieved November 17, 2020. ^ Tu, Tengfei (2019). Understanding Real-World Concurrency Bugs in Go (PDF). For example, around 58% of blocking bugs are caused by message passing. In addition to the violation of Go's channel usage rules (e.g., waiting on a channel that no one sends data to or close), many concurrency bugs are caused by the mixed usage of message passing and other new semantics and new libraries in Go, which can easily be overlooked but hard to detect ^ Brownlee, John (November 13, 2009). Google didn't google Go before naming their programming language'. Archived from the original on December 8, 2015. Retrieved May 26, 2016. ^ Claburn, Thomas (November 11, 2009). Google 'Go' Name Brings Accusations Of Evil'. InformationWeek. Archived from the original on July 22, 2010. Retrieved January 18, 2010. ^ a b Issue 9 - go — I have already used the name for *MY* programming language. Github. Google Inc. Retrieved October 12, 2010. Donovan, Alan; Kernighan, Brian (October 2015). The Go Programming Language (1st ed.). Addison-Wesley Professional. p. 400. ISBN 978-0-13-419044-0. Bodner, Jon (March 2021). Learning Go (1st ed.). O'Reilly. p. 352. ISBN 9781492077213. Wikimedia Commons has media related to Go (programming language). Official website vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteGoogle free and open-source softwareSoftwareApplications Chromium Gemma OpenRefine Tesseract Programming languages Carbon Dart Go Sawzall Frameworks anddevelopment tools AMP Angular AngularJS Beam Bazel Blockly Brotli Closure Tools Cpplint FlatBuffers Flutter Ganeti Gears Gerrit GLOP gRPC Gson Guava Guetzli Guice gVisor Kubernetes LevelDB libvpx Lighthouse NaCl Namebench Nomulus OR-Tools Polymer Protocol Buffers TensorFlow V8 Operating systems Android ChromiumOS Fuchsia gLinux Goobuntu Related Code-in Google LLC v. Oracle America, Inc. Open Source Security Foundation Summer of Code vteRob PikeOperating systems Plan 9 from Bell Labs Inferno Programming languages Newsqueak Limbo Sawzall Go Software acme Blit sam rio 8½ Publications The Practice of Programming The Unix Programming Environment Other Renée French Mark V. Shaney UTF-8 vteKen ThompsonOperating systems Unix Plan 9 from Bell Labs Inferno Programming languages B Go Software Belle ed grep sam Space Travel Thompson shell Associated institutions Bell Labs Google Other UTF-8 Authority control databases InternationalFASTNationalGermanyUnited StatesIsrael",
    "paradigm": "Multi-paradigm : concurrent , imperative , functional , object-oriented",
    "first_appeared": "November 10, 2009 ; 15 years ago ( 2009-11-10 )",
    "stable_release": "1.24.3",
    "typing_discipline": "Inferred , static , strong , structural , nominal",
    "influenced_by": "C , Oberon-2 , Limbo , Active Oberon , communicating sequential processes , Pascal , Oberon , Smalltalk , Newsqueak , Modula-2 , Alef , APL , BCPL , Modula , occam",
    "influenced": "Crystal , V",
    "stable_release_date": "2025-05-06T00:00:00Z"
  },
  {
    "title": "Kotlin (programming language)",
    "url": "https://en.wikipedia.org/wiki/Kotlin_(programming_language)",
    "history": "A 2D picture of the Kotlin mascot A 3D picture of the Kotlin mascot",
    "name": "The name is derived from Kotlin Island, a Russian island in the Gulf of Finland, near Saint Petersburg. Andrey Breslav, Kotlin's former lead designer, mentioned that the team decided to name it after an island, in imitation of the Java programming language which shares a name with the Indonesian island of Java.",
    "development": "The first commit to the Kotlin Git repository was on November 8, 2010. In July 2011, JetBrains unveiled Project Kotlin, a new language for the JVM, which had been under development for a year. JetBrains lead Dmitry Jemerov said that most languages did not have the features they were looking for, with the exception of Scala. However, he cited the slow compilation time of Scala as a deficiency. One of the stated goals of Kotlin is to compile as quickly as Java. In February 2012, JetBrains open sourced the project under the Apache 2 license. JetBrains expected Kotlin to drive IntelliJ IDEA sales. Kotlin 1.0 was released on February 15, 2016. This is considered to be the first officially stable release and JetBrains has committed to long-term backwards compatibility starting with this version. At Google I/O 2017, Google announced first-class support for Kotlin on Android. Kotlin 1.1 was released on March 1, 2017. Kotlin 1.2 was released on November 28, 2017. Sharing code between JVM and JavaScript platforms feature was newly added to this release (multiplatform programming is by now a beta feature upgraded from experimental). A full-stack demo has been made with the new Kotlin/JS Gradle Plugin. Kotlin 1.3 was released on 29 October 2018, adding support for coroutines for use with asynchronous programming. On 7 May 2019, Google announced that the Kotlin programming language is now its preferred language for Android app developers. Kotlin 1.4 was released in August 2020, with e.g. some slight changes to the support for Apple's platforms, i.e. to the Objective-C/Swift interop. Kotlin 1.5 was released in May 2021. Kotlin 1.6 was released in November 2021. Kotlin 1.7 was released in June 2022, including the alpha version of the new Kotlin K2 compiler. Kotlin 1.8 was released in December 2022, 1.8.0 was released on January 11, 2023. Kotlin 1.9 was released in July 2023, 1.9.0 was released on July 6, 2023. Kotlin 2.0 was released in May 2024, 2.0.0 was released on May 21, 2024. Kotlin 2.1 was released in November 2024, 2.1.0 was released on November 27, 2024.",
    "design": "Development lead Andrey Breslav has said that Kotlin is designed to be an industrial-strength object-oriented language, and a better language than Java, but still be fully interoperable with Java code, allowing companies to make a gradual migration from Java to Kotlin. Semicolons are optional as a statement terminator; in most cases a newline is sufficient for the compiler to deduce that the statement has ended. Kotlin variable declarations and parameter lists have the data type come after the variable name (and with a colon separator), similar to Ada, BASIC, Pascal, TypeScript and Rust. This, according to an article from Roman Elizarov, current project lead, results in alignment of variable names and is more pleasing to eyes, especially when there are a few variable declarations in succession, and one or more of the types is too complex for type inference, or needs to be declared explicitly for human readers to understand. The influence of Scala in Kotlin can be seen in the extensive support for both object-oriented and functional programming and in a number of specific features: there is a distinction between mutable and immutable variables (var vs val keyword) all classes are public and final (non-inheritable) by default functions and methods support default arguments, variable-length argument lists and named arguments Kotlin 1.3 added support for contracts, which are stable for the standard library declarations, but still experimental for user-defined declarations. Contracts are inspired by Eiffel's design by contract programming paradigm. Following ScalaJS, Kotlin code may be transpiled to JavaScript, allowing for interoperability between code written in the two languages. This can be used either to write full web applications in Kotlin, or to share code between a Kotlin backend and a JavaScript frontend.",
    "procedural_programming_style": "Kotlin relaxes Java's restriction of allowing static methods and variables to exist only within a class body. Static objects and functions can be defined at the top level of the package without needing a redundant class level. For compatibility with Java, Kotlin provides a JvmName annotation which specifies a class name used when the package is viewed from a Java project. For example, @file:JvmName(JavaClassName).",
    "main_entry_point": "Main article: Entry point As in C, C++, C#, Java, and Go, the entry point to a Kotlin program is a function named main, which may be passed an array containing any command-line arguments. This is optional since Kotlin 1.3. Perl, PHP, and Unix shell–style string interpolation is supported. Type inference is also supported. // Hello, World! example fun main() { val scope = World println(Hello, $scope!) } fun main(args: Array<String>) { for (arg in args) println(arg) }",
    "extension_functions": "Similar to C#, Kotlin allows adding an extension function to any class without the formalities of creating a derived class with new functions. An extension function has access to all the public interface of a class, which it can use to create a new function interface to a target class. An extension function will appear exactly like a function of the class and will be shown in code completion inspection of class functions. For example: package com.example.myStringExtensions fun String.lastChar(): Char = get(length - 1) >>> println(Kotlin.lastChar()) By placing the preceding code in the top-level of a package, the String class is extended to include a lastChar function that was not included in the original definition of the String class. // Overloading '+' operator using an extension function operator fun Point.plus(other: Point): Point { return Point(x + other.x, y + other.y) } >>> val p1 = Point(10, 20) >>> val p2 = Point(30, 40) >>> println(p1 + p2) Point(x=40, y=60)",
    "scope_functions": "Kotlin has five scope functions, which allow the changing of scope within the context of an object. The scope functions are let, run, with, apply, and also.",
    "unpack_arguments_with_spread_operator": "Similar to Python, the spread operator asterisk (*) unpacks an array's contents as individual arguments to a function, e.g.: fun main(args: Array<String>) { val list = listOf(args: , *args) println(list) }",
    "destructuring_declarations": "Not to be confused with the destructor method common in object-oriented languages. Destructuring declarations decompose an object into multiple variables at once, e.g. a 2D coordinate object might be destructured into two integers, x and y. For example, the Map.Entry object supports destructuring to simplify access to its key and value fields: for ((key, value) in map) println($key: $value)",
    "nested_functions": "Kotlin allows local functions to be declared inside of other functions or methods. class User(val id: Int, val name: String, val address: String) fun saveUserToDb(user: User) { fun validate(user: User, value: String, fieldName: String) { require(value.isNotEmpty()) { Can't save user ${user.id}: empty $fieldName } } validate(user, user.name, Name) validate(user, user.address, Address) // Save user to the database ... }",
    "classes_are_final_by_default": "In Kotlin, to derive a new class from a base class type, the base class needs to be explicitly marked as open. This is in contrast to most object-oriented languages such as Java where classes are open by default. Example of a base class that is open to deriving a new subclass from it: // open on the class means this class will allow derived classes open class MegaButton { // no-open on a function means that // polymorphic behavior disabled if function overridden in derived class fun disable() { ... } // open on a function means that // polymorphic behavior allowed if function is overridden in derived class open fun animate() { ... } } class GigaButton: MegaButton() { // Explicit use of override keyword required to override a function in derived class override fun animate() { println(Giga Click!) } }",
    "abstract_classes_are_open_by_default": "Main article: Abstract class Abstract classes define abstract or pure virtual placeholder functions that will be defined in a derived class. Abstract classes are open by default. // No need for the open keyword here, it’s already open by default abstract class Animated { // This virtual function is already open by default as well abstract fun animate() open fun stopAnimating() { } fun animateTwice() { } }",
    "classes_are_public_by_default": "Kotlin provides the following keywords to restrict visibility for top-level declaration, such as classes, and for class members: public, internal, protected, and private. When applied to a class member: Keyword Visibility public (default) Everywhere internal Within a module protected Within subclasses private Within a class When applied to a top-level declaration: Keyword Visibility public (default) Everywhere internal Within a module private Within a file Example: // Class is visible only to current module internal open class TalkativeButton { // method is only visible to current class private fun yell() = println(Hey!) // method is visible to current class and derived classes protected fun whisper() = println(Let's talk!) } internal class MyTalkativeButton: TalkativeButton() { fun utter() = super.whisper() } MyTalkativeButton().utter()",
    "primary_constructor_vs_secondary_constructors": "Kotlin supports the specification of a primary constructor as part of the class definition itself, consisting of an argument list following the class name. This argument list supports an expanded syntax on Kotlin's standard function argument lists that enables declaration of class properties in the primary constructor, including visibility, extensibility, and mutability attributes. Additionally, when defining a subclass, properties in super-interfaces and super-classes can be overridden in the primary constructor. // Example of class using primary constructor syntax // (Only one constructor required for this class) open class BaseUser(open var isSubscribed: Boolean) open class PowerUser(protected val nickname: String, final override var isSubscribed: Boolean = true):BaseUser(isSubscribed) { } However, in cases where more than one constructor is needed for a class, a more general constructor can be defined using secondary constructor syntax, which closely resembles the constructor syntax used in most object-oriented languages like C++, C#, and Java. // Example of class using secondary constructor syntax // (more than one constructor required for this class) class Context class AttributeSet open class View(ctx:Context) { constructor(ctx: Context, attr: AttributeSet): this(ctx) } class MyButton : View { // Constructor #1 constructor(ctx: Context) : super(ctx) { } // Constructor #2 constructor(ctx: Context, attr: AttributeSet) : super(ctx, attr) { // ... } }",
    "sealed_classes": "Sealed classes and interfaces restrict subclass hierarchies, meaning more control over the inheritance hierarchy. Declaration of sealed interface and class: sealed interface Expr sealed class Job All the subclasses of the sealed class are defined at compile time. No new subclasses can be added to it after the compilation of the module having the sealed class. For example, a sealed class in a compiled jar file cannot be subclassed. sealed class Vehicle data class Car(val brandName: String, val owner: String, val color: String): Vehicle() class Bike(val brandName: String, val owner: String, val color: String): Vehicle() class Tractor(val brandName: String, val owner: String, val color: String): Vehicle() val kiaCar = Car(KIA, John, Blue) val hyundaiCar = Car(Hyundai, Britto, Green)",
    "data_classes": "Kotlin's data class construct defines classes whose primary purpose is storing data, similar to Java's record types. Like Java's record types, the construct is similar to normal classes except that the key methods equals, hashCode and toString are automatically generated from the class properties. Unlike Java's records, data classes are open for inheritance.",
    "kotlin_interactive_shell": "$ kotlinc-jvm type :help for help; :quit for quit >>> 2 + 2 4 >>> println(Hello, World!) Hello, World!",
    "kotlin_as_a_scripting_language": "Kotlin can also be used as a scripting language. A script is a Kotlin source file using the .kts filename extension, with executable source code at the top-level scope: // list_folders.kts import java.io.File val folders = File(args).listFiles { file -> file.isDirectory() } folders?.forEach(::println) Scripts can be run by passing the -script option and the corresponding script file to the compiler. $ kotlinc -script list_folders.kts path_to_folder_to_inspect",
    "null_safety": "Kotlin makes a distinction between nullable and non-nullable data types. All nullable objects must be declared with a ? postfix after the type name. Operations on nullable objects need special care from developers: a null-check must be performed before using the value, either explicitly, or with the aid of Kotlin's null-safe operators: ?. (the safe navigation operator) can be used to safely access a method or property of a possibly null object. If the object is null, the method will not be called and the expression evaluates to null. Example: // returns null if... // - foo() returns null, // - or if foo() is non-null, but bar() returns null, // - or if foo() and bar() are non-null, but baz() returns null. // vice versa, return value is non-null if and only if foo(), bar() and baz() are non-null foo()?.bar()?.baz() ?: (the null coalescing operator) is a binary operator that returns the first operand, if non-null, else the second operand. It is often referred to as the Elvis operator, due to its resemblance to an emoticon representation of Elvis Presley. fun sayHello(maybe: String?, neverNull: Int) { // use of Elvis operator val name: String = maybe ?: stranger println(Hello $name) }",
    "lambdas": "Kotlin provides support for higher-order functions and anonymous functions, or lambdas. // the following function takes a lambda, f, and executes f passing it the string lambda // note that (String) -> Unit indicates a lambda with a String parameter and Unit return type fun executeLambda(f: (String) -> Unit) { f(lambda) } Lambdas are declared using braces, { }. If a lambda takes parameters, they are declared within the braces and followed by the -> operator. // the following statement defines a lambda that takes a single parameter and passes it to the println function val l = { c : Any? -> println(c) } // lambdas with no parameters may simply be defined using { } val l2 = { print(no parameters) }",
    "tools": "Android Studio (based on IntelliJ IDEA) has official support for Kotlin, starting from Android Studio 3. Integration with common Java build tools is supported, including Apache Maven, Apache Ant, and Gradle. Emacs has a Kotlin Mode in its MELPA package repository. JetBrains also provides a plugin for Eclipse. IntelliJ IDEA has plug-in support for Kotlin. IntelliJ IDEA 15 was the first version to bundle the Kotlin plugin in the IntelliJ Installer, and to provide Kotlin support out of the box. Gradle: Kotlin has seamless integration with Gradle, which is a popular build automation tool. Gradle allows you to build, automate, and manage the lifecycle of your Kotlin projects efficiently",
    "applications": "When Kotlin was announced as an official Android development language at Google I/O in May 2017, it became the third language fully supported for Android, after Java and C++. As of 2020[update], Kotlin was the most widely used language on Android, with Google estimating that 70% of the top 1,000 apps on the Play Store were written in Kotlin. Google itself had 60 apps written in Kotlin, including Maps and Drive. Many Android apps, such as Google Home, were in the process of being migrated to Kotlin, and therefore use both Kotlin and Java. Kotlin on Android is seen as beneficial for its null-pointer safety, as well as for its features that make for shorter, more readable code. In addition to its prominent use on Android, Kotlin was gaining traction in server-side development. The Spring Framework officially added Kotlin support with version 5, on 4 January 2017. To further support Kotlin, Spring has translated all its documentation to Kotlin, and added built-in support for many Kotlin-specific features such as coroutines. In addition to Spring, JetBrains has produced a Kotlin-first framework called Ktor for building web applications. In 2020, JetBrains found in a survey of developers who use Kotlin that 56% were using Kotlin for mobile apps, while 47% were using it for a web back-end. Just over a third of all Kotlin developers said that they were migrating to Kotlin from another language. Most Kotlin users were targeting Android (or otherwise on the JVM), with only 6% using Kotlin Native.",
    "adoption": "In 2018, Kotlin was the fastest growing language on GitHub, with 2.6 times more developers compared to 2017. It is the fourth most loved programming language according to the 2020 Stack Overflow Developer Survey. Kotlin was also awarded the O'Reilly Open Source Software Conference Breakout Award for 2019. Many companies/organizations have used Kotlin for backend development: Allegro Amazon Atlassian Cash App Flux Google Gradle JetBrains Meshcloud Norwegian Tax Administration OLX Pivotal Rocket Travel Shazam Zalando Some companies/organizations have used Kotlin for web development: Barclay's Bank Data2viz Fritz2 JetBrains A number of companies have publicly stated they were using Kotlin: Basecamp Corda, a distributed ledger developed by a consortium of well-known banks (such as Goldman Sachs, Wells Fargo, J.P. Morgan, Deutsche Bank, UBS, HSBC, BNP Paribas, and Société Générale), has over 90% Kotlin code in its codebase. Coursera DripStat Duolingo Netflix Pinterest Trello Uber",
    "see_also": "Free and open-source software portalComputer programming portal Comparison of programming languages",
    "references": "This article contains quotations from Kotlin tutorials which are released under an Apache 2.0 license. ^ Release Kotlin 2.1.10. 27 January 2025. Retrieved 27 January 2025. ^ What is the correct English pronunciation of Kotlin?. 16 October 2019. Archived from the original on 9 November 2019. Retrieved 9 November 2019. ^ Kotlin for JavaScript - Kotlin Programming Language. Kotlin. Archived from the original on 16 August 2020. Retrieved 20 August 2020. ^ Kotlin for cross-platform mobile development. JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 19 August 2020. Retrieved 20 August 2020. ^ Kotlin Foundation - Kotlin Programming Language. Kotlin. Archived from the original on 29 December 2019. Retrieved 16 December 2019. ^ a b Lardinois, Frederic (7 May 2019). Kotlin is now Google's preferred language for Android app development. TechCrunch. Archived from the original on 7 May 2019. Retrieved 8 May 2019. ^ Kotlin FAQ. Archived from the original on 2 June 2021. Retrieved 20 August 2024. Kotlin lets you choose the version of JVM for execution. By default, the Kotlin/JVM compiler produces Java 8 compatible bytecode. If you want to make use of optimizations available in newer versions of Java, you can explicitly specify the target Java version from 9 to 21. Note that in this case the resulting bytecode might not run on lower versions. ^ Stability of Kotlin Components. Kotlin. 21 May 2021. Archived from the original on 29 July 2021. Retrieved 29 July 2021. ^ Kotlin 1.5.0 – the First Big Release of 2021. Kotlin. 4 May 2021. Archived from the original on 12 August 2021. Retrieved 29 July 2021. ^ Mobius (8 January 2015), Андрей Бреслав – Kotlin для Android: коротко и ясно, archived from the original on 12 April 2023, retrieved 28 May 2017 ^ test · JetBrains/kotlin@3e4dce3. GitHub. Archived from the original on 17 October 2022. Retrieved 17 October 2022. ^ a b Krill, Paul (22 July 2011). JetBrains readies JVM language Kotlin. InfoWorld. Archived from the original on 7 September 2019. Retrieved 2 February 2014. ^ Waters, John (22 February 2012). Kotlin Goes Open Source. ADTmag.com. 1105 Enterprise Computing Group. Archived from the original on 18 February 2014. Retrieved 2 February 2014. ^ Why JetBrains needs Kotlin. 2 August 2011. Archived from the original on 16 August 2023. Retrieved 11 February 2018. we expect Kotlin to drive the sales of IntelliJ IDEA ^ Kotlin 1.0 Released: Pragmatic Language for JVM and Android | Kotlin Blog. Blog.jetbrains.com. 15 February 2016. Archived from the original on 24 January 2018. Retrieved 11 April 2017. ^ Shafirov, Maxim (17 May 2017). Kotlin on Android. Now official. Archived from the original on 29 May 2023. Retrieved 18 May 2017. Today, at the Google I/O keynote, the Android team announced first-class support for Kotlin. ^ Kotlin 1.1 Released With JavaScript Support, Coroutines, and More | Kotlin Blog. Blog.jetbrains.com. 1 March 2017. Archived from the original on 21 March 2025. Retrieved 9 April 2025. ^ Kotlin 1.2 Released: Sharing Code between Platforms | Kotlin Blog. blog.jetbrains.com. 28 November 2017. Archived from the original on 24 May 2023. Retrieved 29 November 2017. ^ Multiplatform Projects - Kotlin Programming Language. Kotlin. Archived from the original on 18 August 2020. Retrieved 20 August 2020. Working on all platforms is an explicit goal for Kotlin, but we see it as a premise to a much more important goal: sharing code between platforms. With support for JVM, Android, JavaScript, iOS, Linux, Windows, Mac and even embedded systems like STM32, Kotlin can handle any and all components of a modern application. ^ Kotlin/kotlin-full-stack-application-demo. Kotlin. 3 April 2020. Archived from the original on 14 September 2020. Retrieved 4 April 2020. ^ Kotlin full stack app demo: update all involving versions to work with 1.3.70 release. youtrack.jetbrains.com. Archived from the original on 2 August 2020. Retrieved 4 April 2020. ^ Kotlin 1.1 Released with JavaScript Support, Coroutines and more. Archived from the original on 4 June 2023. Retrieved 1 May 2017. ^ What's New in Kotlin 1.4 - Kotlin Programming Language. Kotlin. Archived from the original on 8 June 2023. Retrieved 20 August 2020. In 1.4.0, we slightly change the Swift API generated from Kotlin with respect to the way exceptions are translated. ^ What's new in Kotlin 1.7.0 | Kotlin. Kotlin Help. Archived from the original on 20 June 2022. Retrieved 20 June 2022. ^ Krill, Paul (12 January 2023). Kotlin 1.8.0 adds recursive copy, delete for directories. Archived from the original on 8 July 2023. Retrieved 8 March 2022. ^ Haggarty, Sarah (6 July 2023). Kotlin 1.9.0 Released. Archived from the original on 28 July 2023. Retrieved 6 July 2023. ^ JetBrains (21 May 2024). Kotlin 2.0.0. GitHub. Archived from the original on 21 May 2024. Retrieved 21 May 2024. ^ JetBrains (27 November 2024). Kotlin 2.1.0. GitHub. Archived from the original on 21 May 2024. Retrieved 27 November 2024. ^ JVM Languages Report extended interview with Kotlin creator Andrey Breslav. Zeroturnaround.com. 22 April 2013. Archived from the original on 15 January 2019. Retrieved 2 February 2014. ^ Semicolons. jetbrains.com. Archived from the original on 23 December 2015. Retrieved 8 February 2014. ^ Types are moving to the right. Medium. 16 July 2020. Archived from the original on 22 May 2023. Retrieved 6 November 2021. ^ Roman Elizarov is the new Project Lead for Kotlin. The Kotlin Blog. JetBrains. 19 November 2020. Archived from the original on 20 January 2022. Retrieved 7 November 2021. ^ functions. jetbrains.com. Archived from the original on 23 November 2015. Retrieved 8 February 2014. ^ What's New in Kotlin 1.3 - Kotlin Programming Language. Kotlin. Archived from the original on 22 August 2023. Retrieved 4 April 2020. ^ Design by Contract (DbC) design considerations. Kotlin Discussions. 16 August 2012. Archived from the original on 5 April 2023. Retrieved 4 April 2020. Implement the full semantics of Eiffel DbC and improve upon it. ^ Kotlin for JavaScript | Kotlin. Kotlin Help. 21 January 2021. Archived from the original on 14 July 2023. Retrieved 19 March 2021. ^ Kotlin Examples: Learn Kotlin Programming By Example. Archived from the original on 18 November 2021. Retrieved 13 April 2019. ^ Scope functions | Kotlin. Kotlin Help. Retrieved 10 August 2024. ^ Higher-Order Functions and Lambdas. Kotlin. Jetbrains. Archived from the original on 22 January 2021. Retrieved 19 January 2018. ^ Kotlin and Android. Android Developers. Archived from the original on 4 October 2023. Retrieved 19 June 2017. ^ Using Maven – Kotlin Programming Language. kotlinlang.org. Archived from the original on 3 November 2016. Retrieved 9 May 2017. ^ Using Ant – Kotlin Programming Language. kotlinlang.org. Archived from the original on 3 November 2016. Retrieved 9 May 2017. ^ Using Gradle – Kotlin Programming Language. kotlinlang.org. Archived from the original on 9 November 2016. Retrieved 9 May 2017. ^ Getting Started with Eclipse Neon – Kotlin Programming Language. Kotlinlang.org. 10 November 2016. Archived from the original on 18 May 2023. Retrieved 11 April 2017. ^ JetBrains/kotlin-eclipse: Kotlin Plugin for Eclipse. GitHub. Archived from the original on 16 February 2016. Retrieved 11 April 2017. ^ Kotlin :: JetBrains Plugin Repository. Plugins.jetbrains.com. 31 March 2017. Archived from the original on 25 June 2023. Retrieved 11 April 2017. ^ What's New in IntelliJ IDEA 2017.1. Jetbrains.com. Archived from the original on 3 October 2023. Retrieved 11 April 2017. ^ Gradle. Kotlin Help. Archived from the original on 8 April 2024. Retrieved 8 April 2024. ^ Lardinois, Frederic (17 May 2017). Google makes Kotlin a first-class language for writing Android apps. techcrunch.com. Archived from the original on 22 May 2017. Retrieved 28 June 2018. ^ Kotlin programming language: How Google is using it to squash the code bugs that cause most crashes. ZDNet. Archived from the original on 6 April 2023. Retrieved 6 December 2020. ^ Introducing Kotlin support in Spring Framework 5.0. Spring. Pivotal. 4 January 2017. Archived from the original on 23 August 2023. Retrieved 29 September 2020. ^ The State of Kotlin Support in Spring. JetBrains. 14 August 2020. Archived from the original on 7 June 2023. Retrieved 6 December 2020. ^ Review of Microservices Frameworks: A Look at Spring Boot Alternatives. DZone. Archived from the original on 21 May 2023. Retrieved 6 December 2020. ^ Kotlin Programming - The State of Developer Ecosystem 2020. JetBrains. Archived from the original on 5 April 2023. Retrieved 29 September 2020. ^ The state of the Octoverse. Archived from the original on 22 March 2019. Retrieved 24 July 2019. ^ Stack Overflow Developer Survey 2020. Archived from the original on 4 June 2020. Retrieved 28 May 2020. ^ Kotlin wins Breakout Project of the Year award at OSCON '19. 18 July 2019. Archived from the original on 17 May 2022. Retrieved 24 July 2019. ^ Kotlin at Allegro. Talking Kotlin. October 2018. Archived from the original on 1 June 2023. Retrieved 29 September 2020. ^ QLDB at Amazon. Talking Kotlin. 30 June 2020. Archived from the original on 1 June 2023. Retrieved 29 September 2020. ^ Future of Jira Software powered by Kotlin. YouTube. 29 October 2019. Archived from the original on 1 September 2023. Retrieved 1 September 2023. ^ Going Full Kotlin Multiplatform. Talking Kotlin. 14 April 2020. Archived from the original on 5 April 2023. Retrieved 29 September 2020. ^ square/sqldelight. GitHub. Archived from the original on 20 June 2019. Retrieved 24 July 2019. ^ Using Kotlin for backend development at Flux. Talking Kotlin. 14 August 2019. Archived from the original on 1 June 2023. Retrieved 29 September 2020. ^ State of Kotlin on Android. YouTube. 10 June 2020. Archived from the original on 15 January 2023. Retrieved 29 September 2020. ^ Gradle Kotlin DSL Primer. docs.gradle.org. Archived from the original on 18 August 2023. Retrieved 29 September 2020. ^ Kotless. Talking Kotlin. 30 January 2020. Archived from the original on 5 April 2023. Retrieved 29 September 2020. ^ Kotlin on the backend at Meshcloud. Talking Kotlin. 28 February 2018. Archived from the original on 6 April 2023. Retrieved 29 September 2020. ^ KotlinConf 2019: Kotlin Runs Taxes in Norway by Jarle Hansen & Anders Mikkelsen. YouTube. 16 December 2019. Archived from the original on 10 April 2023. Retrieved 29 September 2020. ^ Greenfield Kotlin at OLX. Talking Kotlin. 24 August 2018. Archived from the original on 1 June 2023. Retrieved 29 September 2020. ^ Application Monitoring with Micrometer. Talking Kotlin. 14 June 2018. Archived from the original on 1 April 2023. Retrieved 29 September 2020. ^ Groovy and Kotlin Interop at Rocket Travel. Talking Kotlin. 14 May 2018. Archived from the original on 5 April 2023. Retrieved 29 September 2020. ^ Kotlin at Shazam. Talking Kotlin. 29 July 2018. Archived from the original on 1 April 2023. Retrieved 29 September 2020. ^ Zally - An API Linter. Talking Kotlin. 29 January 2018. Archived from the original on 6 April 2023. Retrieved 29 September 2020. ^ Java/Kotlin Developer - Barclays - Prague - Wizbii. Wizbii.com. Retrieved 29 September 2020. ^ KotlinConf 2017 - Frontend Kotlin from the Trenches by Gaetan Zoritchak. YouTube. 30 November 2017. Archived from the original on 10 April 2023. Retrieved 29 September 2020. ^ Fritz2. Talking Kotlin. 14 September 2020. Archived from the original on 6 April 2023. Retrieved 29 September 2020. ^ KotlinConf 2019: Kotlin in Space by Maxim Mazin. YouTube. 18 December 2019. Archived from the original on 9 April 2023. Retrieved 29 September 2020. ^ How we made Basecamp 3's Android app 100% Kotlin – Signal v. Noise. Signal v. Noise. 29 April 2017. Archived from the original on 1 August 2018. Retrieved 1 May 2017. ^ Becoming bilingual@coursera. 26 April 2018. Archived from the original on 15 January 2023. Retrieved 24 July 2019. ^ Kotlin in Production – What works, Whats broken. Blog.dripstat.com. 24 September 2016. Archived from the original on 1 July 2019. Retrieved 11 April 2017. ^ Chaidarun, Art (6 April 2020). Migrating Duolingo's Android app to 100% Kotlin. Duolingo Blog. ^ Rob Spieldenner on twitter. Archived from the original on 25 December 2022. Retrieved 24 July 2019. ^ Droidcon NYC 2016 - Kotlin in Production. YouTube. 3 November 2016. Archived from the original on 14 April 2023. Retrieved 24 July 2019. ^ Dan Lew on Twitter. Archived from the original on 2 May 2023. Retrieved 24 July 2019. ^ Measuring Kotlin Build Performance at Uber. 30 April 2019. Archived from the original on 5 June 2023. Retrieved 6 March 2024.",
    "external_links": "Official website vteJava (software platform)Platforms JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK GraalVM Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Pack200 Modules Major third-partytechnologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations JVM languages Java BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Oxygene CommunityConferences JavaOne Devoxx Organizations Apache Software Foundation Eclipse Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category",
    "document": "A 2D picture of the Kotlin mascot A 3D picture of the Kotlin mascot The name is derived from Kotlin Island, a Russian island in the Gulf of Finland, near Saint Petersburg. Andrey Breslav, Kotlin's former lead designer, mentioned that the team decided to name it after an island, in imitation of the Java programming language which shares a name with the Indonesian island of Java. The first commit to the Kotlin Git repository was on November 8, 2010. In July 2011, JetBrains unveiled Project Kotlin, a new language for the JVM, which had been under development for a year. JetBrains lead Dmitry Jemerov said that most languages did not have the features they were looking for, with the exception of Scala. However, he cited the slow compilation time of Scala as a deficiency. One of the stated goals of Kotlin is to compile as quickly as Java. In February 2012, JetBrains open sourced the project under the Apache 2 license. JetBrains expected Kotlin to drive IntelliJ IDEA sales. Kotlin 1.0 was released on February 15, 2016. This is considered to be the first officially stable release and JetBrains has committed to long-term backwards compatibility starting with this version. At Google I/O 2017, Google announced first-class support for Kotlin on Android. Kotlin 1.1 was released on March 1, 2017. Kotlin 1.2 was released on November 28, 2017. Sharing code between JVM and JavaScript platforms feature was newly added to this release (multiplatform programming is by now a beta feature upgraded from experimental). A full-stack demo has been made with the new Kotlin/JS Gradle Plugin. Kotlin 1.3 was released on 29 October 2018, adding support for coroutines for use with asynchronous programming. On 7 May 2019, Google announced that the Kotlin programming language is now its preferred language for Android app developers. Kotlin 1.4 was released in August 2020, with e.g. some slight changes to the support for Apple's platforms, i.e. to the Objective-C/Swift interop. Kotlin 1.5 was released in May 2021. Kotlin 1.6 was released in November 2021. Kotlin 1.7 was released in June 2022, including the alpha version of the new Kotlin K2 compiler. Kotlin 1.8 was released in December 2022, 1.8.0 was released on January 11, 2023. Kotlin 1.9 was released in July 2023, 1.9.0 was released on July 6, 2023. Kotlin 2.0 was released in May 2024, 2.0.0 was released on May 21, 2024. Kotlin 2.1 was released in November 2024, 2.1.0 was released on November 27, 2024. Development lead Andrey Breslav has said that Kotlin is designed to be an industrial-strength object-oriented language, and a better language than Java, but still be fully interoperable with Java code, allowing companies to make a gradual migration from Java to Kotlin. Semicolons are optional as a statement terminator; in most cases a newline is sufficient for the compiler to deduce that the statement has ended. Kotlin variable declarations and parameter lists have the data type come after the variable name (and with a colon separator), similar to Ada, BASIC, Pascal, TypeScript and Rust. This, according to an article from Roman Elizarov, current project lead, results in alignment of variable names and is more pleasing to eyes, especially when there are a few variable declarations in succession, and one or more of the types is too complex for type inference, or needs to be declared explicitly for human readers to understand. The influence of Scala in Kotlin can be seen in the extensive support for both object-oriented and functional programming and in a number of specific features: there is a distinction between mutable and immutable variables (var vs val keyword) all classes are public and final (non-inheritable) by default functions and methods support default arguments, variable-length argument lists and named arguments Kotlin 1.3 added support for contracts, which are stable for the standard library declarations, but still experimental for user-defined declarations. Contracts are inspired by Eiffel's design by contract programming paradigm. Following ScalaJS, Kotlin code may be transpiled to JavaScript, allowing for interoperability between code written in the two languages. This can be used either to write full web applications in Kotlin, or to share code between a Kotlin backend and a JavaScript frontend. Kotlin relaxes Java's restriction of allowing static methods and variables to exist only within a class body. Static objects and functions can be defined at the top level of the package without needing a redundant class level. For compatibility with Java, Kotlin provides a JvmName annotation which specifies a class name used when the package is viewed from a Java project. For example, @file:JvmName(JavaClassName). Main article: Entry point As in C, C++, C#, Java, and Go, the entry point to a Kotlin program is a function named main, which may be passed an array containing any command-line arguments. This is optional since Kotlin 1.3. Perl, PHP, and Unix shell–style string interpolation is supported. Type inference is also supported. // Hello, World! example fun main() { val scope = World println(Hello, $scope!) } fun main(args: Array<String>) { for (arg in args) println(arg) } Similar to C#, Kotlin allows adding an extension function to any class without the formalities of creating a derived class with new functions. An extension function has access to all the public interface of a class, which it can use to create a new function interface to a target class. An extension function will appear exactly like a function of the class and will be shown in code completion inspection of class functions. For example: package com.example.myStringExtensions fun String.lastChar(): Char = get(length - 1) >>> println(Kotlin.lastChar()) By placing the preceding code in the top-level of a package, the String class is extended to include a lastChar function that was not included in the original definition of the String class. // Overloading '+' operator using an extension function operator fun Point.plus(other: Point): Point { return Point(x + other.x, y + other.y) } >>> val p1 = Point(10, 20) >>> val p2 = Point(30, 40) >>> println(p1 + p2) Point(x=40, y=60) Kotlin has five scope functions, which allow the changing of scope within the context of an object. The scope functions are let, run, with, apply, and also. Similar to Python, the spread operator asterisk (*) unpacks an array's contents as individual arguments to a function, e.g.: fun main(args: Array<String>) { val list = listOf(args: , *args) println(list) } Not to be confused with the destructor method common in object-oriented languages. Destructuring declarations decompose an object into multiple variables at once, e.g. a 2D coordinate object might be destructured into two integers, x and y. For example, the Map.Entry object supports destructuring to simplify access to its key and value fields: for ((key, value) in map) println($key: $value) Kotlin allows local functions to be declared inside of other functions or methods. class User(val id: Int, val name: String, val address: String) fun saveUserToDb(user: User) { fun validate(user: User, value: String, fieldName: String) { require(value.isNotEmpty()) { Can't save user ${user.id}: empty $fieldName } } validate(user, user.name, Name) validate(user, user.address, Address) // Save user to the database ... } In Kotlin, to derive a new class from a base class type, the base class needs to be explicitly marked as open. This is in contrast to most object-oriented languages such as Java where classes are open by default. Example of a base class that is open to deriving a new subclass from it: // open on the class means this class will allow derived classes open class MegaButton { // no-open on a function means that // polymorphic behavior disabled if function overridden in derived class fun disable() { ... } // open on a function means that // polymorphic behavior allowed if function is overridden in derived class open fun animate() { ... } } class GigaButton: MegaButton() { // Explicit use of override keyword required to override a function in derived class override fun animate() { println(Giga Click!) } } Main article: Abstract class Abstract classes define abstract or pure virtual placeholder functions that will be defined in a derived class. Abstract classes are open by default. // No need for the open keyword here, it’s already open by default abstract class Animated { // This virtual function is already open by default as well abstract fun animate() open fun stopAnimating() { } fun animateTwice() { } } Kotlin provides the following keywords to restrict visibility for top-level declaration, such as classes, and for class members: public, internal, protected, and private. When applied to a class member: Keyword Visibility public (default) Everywhere internal Within a module protected Within subclasses private Within a class When applied to a top-level declaration: Keyword Visibility public (default) Everywhere internal Within a module private Within a file Example: // Class is visible only to current module internal open class TalkativeButton { // method is only visible to current class private fun yell() = println(Hey!) // method is visible to current class and derived classes protected fun whisper() = println(Let's talk!) } internal class MyTalkativeButton: TalkativeButton() { fun utter() = super.whisper() } MyTalkativeButton().utter() Kotlin supports the specification of a primary constructor as part of the class definition itself, consisting of an argument list following the class name. This argument list supports an expanded syntax on Kotlin's standard function argument lists that enables declaration of class properties in the primary constructor, including visibility, extensibility, and mutability attributes. Additionally, when defining a subclass, properties in super-interfaces and super-classes can be overridden in the primary constructor. // Example of class using primary constructor syntax // (Only one constructor required for this class) open class BaseUser(open var isSubscribed: Boolean) open class PowerUser(protected val nickname: String, final override var isSubscribed: Boolean = true):BaseUser(isSubscribed) { } However, in cases where more than one constructor is needed for a class, a more general constructor can be defined using secondary constructor syntax, which closely resembles the constructor syntax used in most object-oriented languages like C++, C#, and Java. // Example of class using secondary constructor syntax // (more than one constructor required for this class) class Context class AttributeSet open class View(ctx:Context) { constructor(ctx: Context, attr: AttributeSet): this(ctx) } class MyButton : View { // Constructor #1 constructor(ctx: Context) : super(ctx) { } // Constructor #2 constructor(ctx: Context, attr: AttributeSet) : super(ctx, attr) { // ... } } Sealed classes and interfaces restrict subclass hierarchies, meaning more control over the inheritance hierarchy. Declaration of sealed interface and class: sealed interface Expr sealed class Job All the subclasses of the sealed class are defined at compile time. No new subclasses can be added to it after the compilation of the module having the sealed class. For example, a sealed class in a compiled jar file cannot be subclassed. sealed class Vehicle data class Car(val brandName: String, val owner: String, val color: String): Vehicle() class Bike(val brandName: String, val owner: String, val color: String): Vehicle() class Tractor(val brandName: String, val owner: String, val color: String): Vehicle() val kiaCar = Car(KIA, John, Blue) val hyundaiCar = Car(Hyundai, Britto, Green) Kotlin's data class construct defines classes whose primary purpose is storing data, similar to Java's record types. Like Java's record types, the construct is similar to normal classes except that the key methods equals, hashCode and toString are automatically generated from the class properties. Unlike Java's records, data classes are open for inheritance. $ kotlinc-jvm type :help for help; :quit for quit >>> 2 + 2 4 >>> println(Hello, World!) Hello, World! Kotlin can also be used as a scripting language. A script is a Kotlin source file using the .kts filename extension, with executable source code at the top-level scope: // list_folders.kts import java.io.File val folders = File(args).listFiles { file -> file.isDirectory() } folders?.forEach(::println) Scripts can be run by passing the -script option and the corresponding script file to the compiler. $ kotlinc -script list_folders.kts path_to_folder_to_inspect Kotlin makes a distinction between nullable and non-nullable data types. All nullable objects must be declared with a ? postfix after the type name. Operations on nullable objects need special care from developers: a null-check must be performed before using the value, either explicitly, or with the aid of Kotlin's null-safe operators: ?. (the safe navigation operator) can be used to safely access a method or property of a possibly null object. If the object is null, the method will not be called and the expression evaluates to null. Example: // returns null if... // - foo() returns null, // - or if foo() is non-null, but bar() returns null, // - or if foo() and bar() are non-null, but baz() returns null. // vice versa, return value is non-null if and only if foo(), bar() and baz() are non-null foo()?.bar()?.baz() ?: (the null coalescing operator) is a binary operator that returns the first operand, if non-null, else the second operand. It is often referred to as the Elvis operator, due to its resemblance to an emoticon representation of Elvis Presley. fun sayHello(maybe: String?, neverNull: Int) { // use of Elvis operator val name: String = maybe ?: stranger println(Hello $name) } Kotlin provides support for higher-order functions and anonymous functions, or lambdas. // the following function takes a lambda, f, and executes f passing it the string lambda // note that (String) -> Unit indicates a lambda with a String parameter and Unit return type fun executeLambda(f: (String) -> Unit) { f(lambda) } Lambdas are declared using braces, { }. If a lambda takes parameters, they are declared within the braces and followed by the -> operator. // the following statement defines a lambda that takes a single parameter and passes it to the println function val l = { c : Any? -> println(c) } // lambdas with no parameters may simply be defined using { } val l2 = { print(no parameters) } Android Studio (based on IntelliJ IDEA) has official support for Kotlin, starting from Android Studio 3. Integration with common Java build tools is supported, including Apache Maven, Apache Ant, and Gradle. Emacs has a Kotlin Mode in its MELPA package repository. JetBrains also provides a plugin for Eclipse. IntelliJ IDEA has plug-in support for Kotlin. IntelliJ IDEA 15 was the first version to bundle the Kotlin plugin in the IntelliJ Installer, and to provide Kotlin support out of the box. Gradle: Kotlin has seamless integration with Gradle, which is a popular build automation tool. Gradle allows you to build, automate, and manage the lifecycle of your Kotlin projects efficiently When Kotlin was announced as an official Android development language at Google I/O in May 2017, it became the third language fully supported for Android, after Java and C++. As of 2020[update], Kotlin was the most widely used language on Android, with Google estimating that 70% of the top 1,000 apps on the Play Store were written in Kotlin. Google itself had 60 apps written in Kotlin, including Maps and Drive. Many Android apps, such as Google Home, were in the process of being migrated to Kotlin, and therefore use both Kotlin and Java. Kotlin on Android is seen as beneficial for its null-pointer safety, as well as for its features that make for shorter, more readable code. In addition to its prominent use on Android, Kotlin was gaining traction in server-side development. The Spring Framework officially added Kotlin support with version 5, on 4 January 2017. To further support Kotlin, Spring has translated all its documentation to Kotlin, and added built-in support for many Kotlin-specific features such as coroutines. In addition to Spring, JetBrains has produced a Kotlin-first framework called Ktor for building web applications. In 2020, JetBrains found in a survey of developers who use Kotlin that 56% were using Kotlin for mobile apps, while 47% were using it for a web back-end. Just over a third of all Kotlin developers said that they were migrating to Kotlin from another language. Most Kotlin users were targeting Android (or otherwise on the JVM), with only 6% using Kotlin Native. In 2018, Kotlin was the fastest growing language on GitHub, with 2.6 times more developers compared to 2017. It is the fourth most loved programming language according to the 2020 Stack Overflow Developer Survey. Kotlin was also awarded the O'Reilly Open Source Software Conference Breakout Award for 2019. Many companies/organizations have used Kotlin for backend development: Allegro Amazon Atlassian Cash App Flux Google Gradle JetBrains Meshcloud Norwegian Tax Administration OLX Pivotal Rocket Travel Shazam Zalando Some companies/organizations have used Kotlin for web development: Barclay's Bank Data2viz Fritz2 JetBrains A number of companies have publicly stated they were using Kotlin: Basecamp Corda, a distributed ledger developed by a consortium of well-known banks (such as Goldman Sachs, Wells Fargo, J.P. Morgan, Deutsche Bank, UBS, HSBC, BNP Paribas, and Société Générale), has over 90% Kotlin code in its codebase. Coursera DripStat Duolingo Netflix Pinterest Trello Uber Free and open-source software portalComputer programming portal Comparison of programming languages This article contains quotations from Kotlin tutorials which are released under an Apache 2.0 license. ^ Release Kotlin 2.1.10. 27 January 2025. Retrieved 27 January 2025. ^ What is the correct English pronunciation of Kotlin?. 16 October 2019. Archived from the original on 9 November 2019. Retrieved 9 November 2019. ^ Kotlin for JavaScript - Kotlin Programming Language. Kotlin. Archived from the original on 16 August 2020. Retrieved 20 August 2020. ^ Kotlin for cross-platform mobile development. JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 19 August 2020. Retrieved 20 August 2020. ^ Kotlin Foundation - Kotlin Programming Language. Kotlin. Archived from the original on 29 December 2019. Retrieved 16 December 2019. ^ a b Lardinois, Frederic (7 May 2019). Kotlin is now Google's preferred language for Android app development. TechCrunch. Archived from the original on 7 May 2019. Retrieved 8 May 2019. ^ Kotlin FAQ. Archived from the original on 2 June 2021. Retrieved 20 August 2024. Kotlin lets you choose the version of JVM for execution. By default, the Kotlin/JVM compiler produces Java 8 compatible bytecode. If you want to make use of optimizations available in newer versions of Java, you can explicitly specify the target Java version from 9 to 21. Note that in this case the resulting bytecode might not run on lower versions. ^ Stability of Kotlin Components. Kotlin. 21 May 2021. Archived from the original on 29 July 2021. Retrieved 29 July 2021. ^ Kotlin 1.5.0 – the First Big Release of 2021. Kotlin. 4 May 2021. Archived from the original on 12 August 2021. Retrieved 29 July 2021. ^ Mobius (8 January 2015), Андрей Бреслав – Kotlin для Android: коротко и ясно, archived from the original on 12 April 2023, retrieved 28 May 2017 ^ test · JetBrains/kotlin@3e4dce3. GitHub. Archived from the original on 17 October 2022. Retrieved 17 October 2022. ^ a b Krill, Paul (22 July 2011). JetBrains readies JVM language Kotlin. InfoWorld. Archived from the original on 7 September 2019. Retrieved 2 February 2014. ^ Waters, John (22 February 2012). Kotlin Goes Open Source. ADTmag.com. 1105 Enterprise Computing Group. Archived from the original on 18 February 2014. Retrieved 2 February 2014. ^ Why JetBrains needs Kotlin. 2 August 2011. Archived from the original on 16 August 2023. Retrieved 11 February 2018. we expect Kotlin to drive the sales of IntelliJ IDEA ^ Kotlin 1.0 Released: Pragmatic Language for JVM and Android | Kotlin Blog. Blog.jetbrains.com. 15 February 2016. Archived from the original on 24 January 2018. Retrieved 11 April 2017. ^ Shafirov, Maxim (17 May 2017). Kotlin on Android. Now official. Archived from the original on 29 May 2023. Retrieved 18 May 2017. Today, at the Google I/O keynote, the Android team announced first-class support for Kotlin. ^ Kotlin 1.1 Released With JavaScript Support, Coroutines, and More | Kotlin Blog. Blog.jetbrains.com. 1 March 2017. Archived from the original on 21 March 2025. Retrieved 9 April 2025. ^ Kotlin 1.2 Released: Sharing Code between Platforms | Kotlin Blog. blog.jetbrains.com. 28 November 2017. Archived from the original on 24 May 2023. Retrieved 29 November 2017. ^ Multiplatform Projects - Kotlin Programming Language. Kotlin. Archived from the original on 18 August 2020. Retrieved 20 August 2020. Working on all platforms is an explicit goal for Kotlin, but we see it as a premise to a much more important goal: sharing code between platforms. With support for JVM, Android, JavaScript, iOS, Linux, Windows, Mac and even embedded systems like STM32, Kotlin can handle any and all components of a modern application. ^ Kotlin/kotlin-full-stack-application-demo. Kotlin. 3 April 2020. Archived from the original on 14 September 2020. Retrieved 4 April 2020. ^ Kotlin full stack app demo: update all involving versions to work with 1.3.70 release. youtrack.jetbrains.com. Archived from the original on 2 August 2020. Retrieved 4 April 2020. ^ Kotlin 1.1 Released with JavaScript Support, Coroutines and more. Archived from the original on 4 June 2023. Retrieved 1 May 2017. ^ What's New in Kotlin 1.4 - Kotlin Programming Language. Kotlin. Archived from the original on 8 June 2023. Retrieved 20 August 2020. In 1.4.0, we slightly change the Swift API generated from Kotlin with respect to the way exceptions are translated. ^ What's new in Kotlin 1.7.0 | Kotlin. Kotlin Help. Archived from the original on 20 June 2022. Retrieved 20 June 2022. ^ Krill, Paul (12 January 2023). Kotlin 1.8.0 adds recursive copy, delete for directories. Archived from the original on 8 July 2023. Retrieved 8 March 2022. ^ Haggarty, Sarah (6 July 2023). Kotlin 1.9.0 Released. Archived from the original on 28 July 2023. Retrieved 6 July 2023. ^ JetBrains (21 May 2024). Kotlin 2.0.0. GitHub. Archived from the original on 21 May 2024. Retrieved 21 May 2024. ^ JetBrains (27 November 2024). Kotlin 2.1.0. GitHub. Archived from the original on 21 May 2024. Retrieved 27 November 2024. ^ JVM Languages Report extended interview with Kotlin creator Andrey Breslav. Zeroturnaround.com. 22 April 2013. Archived from the original on 15 January 2019. Retrieved 2 February 2014. ^ Semicolons. jetbrains.com. Archived from the original on 23 December 2015. Retrieved 8 February 2014. ^ Types are moving to the right. Medium. 16 July 2020. Archived from the original on 22 May 2023. Retrieved 6 November 2021. ^ Roman Elizarov is the new Project Lead for Kotlin. The Kotlin Blog. JetBrains. 19 November 2020. Archived from the original on 20 January 2022. Retrieved 7 November 2021. ^ functions. jetbrains.com. Archived from the original on 23 November 2015. Retrieved 8 February 2014. ^ What's New in Kotlin 1.3 - Kotlin Programming Language. Kotlin. Archived from the original on 22 August 2023. Retrieved 4 April 2020. ^ Design by Contract (DbC) design considerations. Kotlin Discussions. 16 August 2012. Archived from the original on 5 April 2023. Retrieved 4 April 2020. Implement the full semantics of Eiffel DbC and improve upon it. ^ Kotlin for JavaScript | Kotlin. Kotlin Help. 21 January 2021. Archived from the original on 14 July 2023. Retrieved 19 March 2021. ^ Kotlin Examples: Learn Kotlin Programming By Example. Archived from the original on 18 November 2021. Retrieved 13 April 2019. ^ Scope functions | Kotlin. Kotlin Help. Retrieved 10 August 2024. ^ Higher-Order Functions and Lambdas. Kotlin. Jetbrains. Archived from the original on 22 January 2021. Retrieved 19 January 2018. ^ Kotlin and Android. Android Developers. Archived from the original on 4 October 2023. Retrieved 19 June 2017. ^ Using Maven – Kotlin Programming Language. kotlinlang.org. Archived from the original on 3 November 2016. Retrieved 9 May 2017. ^ Using Ant – Kotlin Programming Language. kotlinlang.org. Archived from the original on 3 November 2016. Retrieved 9 May 2017. ^ Using Gradle – Kotlin Programming Language. kotlinlang.org. Archived from the original on 9 November 2016. Retrieved 9 May 2017. ^ Getting Started with Eclipse Neon – Kotlin Programming Language. Kotlinlang.org. 10 November 2016. Archived from the original on 18 May 2023. Retrieved 11 April 2017. ^ JetBrains/kotlin-eclipse: Kotlin Plugin for Eclipse. GitHub. Archived from the original on 16 February 2016. Retrieved 11 April 2017. ^ Kotlin :: JetBrains Plugin Repository. Plugins.jetbrains.com. 31 March 2017. Archived from the original on 25 June 2023. Retrieved 11 April 2017. ^ What's New in IntelliJ IDEA 2017.1. Jetbrains.com. Archived from the original on 3 October 2023. Retrieved 11 April 2017. ^ Gradle. Kotlin Help. Archived from the original on 8 April 2024. Retrieved 8 April 2024. ^ Lardinois, Frederic (17 May 2017). Google makes Kotlin a first-class language for writing Android apps. techcrunch.com. Archived from the original on 22 May 2017. Retrieved 28 June 2018. ^ Kotlin programming language: How Google is using it to squash the code bugs that cause most crashes. ZDNet. Archived from the original on 6 April 2023. Retrieved 6 December 2020. ^ Introducing Kotlin support in Spring Framework 5.0. Spring. Pivotal. 4 January 2017. Archived from the original on 23 August 2023. Retrieved 29 September 2020. ^ The State of Kotlin Support in Spring. JetBrains. 14 August 2020. Archived from the original on 7 June 2023. Retrieved 6 December 2020. ^ Review of Microservices Frameworks: A Look at Spring Boot Alternatives. DZone. Archived from the original on 21 May 2023. Retrieved 6 December 2020. ^ Kotlin Programming - The State of Developer Ecosystem 2020. JetBrains. Archived from the original on 5 April 2023. Retrieved 29 September 2020. ^ The state of the Octoverse. Archived from the original on 22 March 2019. Retrieved 24 July 2019. ^ Stack Overflow Developer Survey 2020. Archived from the original on 4 June 2020. Retrieved 28 May 2020. ^ Kotlin wins Breakout Project of the Year award at OSCON '19. 18 July 2019. Archived from the original on 17 May 2022. Retrieved 24 July 2019. ^ Kotlin at Allegro. Talking Kotlin. October 2018. Archived from the original on 1 June 2023. Retrieved 29 September 2020. ^ QLDB at Amazon. Talking Kotlin. 30 June 2020. Archived from the original on 1 June 2023. Retrieved 29 September 2020. ^ Future of Jira Software powered by Kotlin. YouTube. 29 October 2019. Archived from the original on 1 September 2023. Retrieved 1 September 2023. ^ Going Full Kotlin Multiplatform. Talking Kotlin. 14 April 2020. Archived from the original on 5 April 2023. Retrieved 29 September 2020. ^ square/sqldelight. GitHub. Archived from the original on 20 June 2019. Retrieved 24 July 2019. ^ Using Kotlin for backend development at Flux. Talking Kotlin. 14 August 2019. Archived from the original on 1 June 2023. Retrieved 29 September 2020. ^ State of Kotlin on Android. YouTube. 10 June 2020. Archived from the original on 15 January 2023. Retrieved 29 September 2020. ^ Gradle Kotlin DSL Primer. docs.gradle.org. Archived from the original on 18 August 2023. Retrieved 29 September 2020. ^ Kotless. Talking Kotlin. 30 January 2020. Archived from the original on 5 April 2023. Retrieved 29 September 2020. ^ Kotlin on the backend at Meshcloud. Talking Kotlin. 28 February 2018. Archived from the original on 6 April 2023. Retrieved 29 September 2020. ^ KotlinConf 2019: Kotlin Runs Taxes in Norway by Jarle Hansen & Anders Mikkelsen. YouTube. 16 December 2019. Archived from the original on 10 April 2023. Retrieved 29 September 2020. ^ Greenfield Kotlin at OLX. Talking Kotlin. 24 August 2018. Archived from the original on 1 June 2023. Retrieved 29 September 2020. ^ Application Monitoring with Micrometer. Talking Kotlin. 14 June 2018. Archived from the original on 1 April 2023. Retrieved 29 September 2020. ^ Groovy and Kotlin Interop at Rocket Travel. Talking Kotlin. 14 May 2018. Archived from the original on 5 April 2023. Retrieved 29 September 2020. ^ Kotlin at Shazam. Talking Kotlin. 29 July 2018. Archived from the original on 1 April 2023. Retrieved 29 September 2020. ^ Zally - An API Linter. Talking Kotlin. 29 January 2018. Archived from the original on 6 April 2023. Retrieved 29 September 2020. ^ Java/Kotlin Developer - Barclays - Prague - Wizbii. Wizbii.com. Retrieved 29 September 2020. ^ KotlinConf 2017 - Frontend Kotlin from the Trenches by Gaetan Zoritchak. YouTube. 30 November 2017. Archived from the original on 10 April 2023. Retrieved 29 September 2020. ^ Fritz2. Talking Kotlin. 14 September 2020. Archived from the original on 6 April 2023. Retrieved 29 September 2020. ^ KotlinConf 2019: Kotlin in Space by Maxim Mazin. YouTube. 18 December 2019. Archived from the original on 9 April 2023. Retrieved 29 September 2020. ^ How we made Basecamp 3's Android app 100% Kotlin – Signal v. Noise. Signal v. Noise. 29 April 2017. Archived from the original on 1 August 2018. Retrieved 1 May 2017. ^ Becoming bilingual@coursera. 26 April 2018. Archived from the original on 15 January 2023. Retrieved 24 July 2019. ^ Kotlin in Production – What works, Whats broken. Blog.dripstat.com. 24 September 2016. Archived from the original on 1 July 2019. Retrieved 11 April 2017. ^ Chaidarun, Art (6 April 2020). Migrating Duolingo's Android app to 100% Kotlin. Duolingo Blog. ^ Rob Spieldenner on twitter. Archived from the original on 25 December 2022. Retrieved 24 July 2019. ^ Droidcon NYC 2016 - Kotlin in Production. YouTube. 3 November 2016. Archived from the original on 14 April 2023. Retrieved 24 July 2019. ^ Dan Lew on Twitter. Archived from the original on 2 May 2023. Retrieved 24 July 2019. ^ Measuring Kotlin Build Performance at Uber. 30 April 2019. Archived from the original on 5 June 2023. Retrieved 6 March 2024. Official website vteJava (software platform)Platforms JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK GraalVM Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Pack200 Modules Major third-partytechnologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations JVM languages Java BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Oxygene CommunityConferences JavaOne Devoxx Organizations Apache Software Foundation Eclipse Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category",
    "paradigm": "Multi-paradigm : object-oriented , functional , imperative , block structured , declarative , generic , reflective , concurrent",
    "first_appeared": "July 22, 2011 ; 13 years ago ( 2011-07-22 )",
    "stable_release": "2.1.10",
    "typing_discipline": "Inferred , static , strong",
    "influenced_by": "C#, Eiffel, Gosu, Groovy, Java, JavaScript, ML, Python, Scala",
    "influenced": "V (Vlang)",
    "stable_release_date": "2025-01-27T00:00:00Z"
  },
  {
    "title": "PHP",
    "url": "https://en.wikipedia.org/wiki/PHP",
    "history": "Rasmus Lerdorf, creator of PHP; and Andi Gutmans and Zeev Suraski, creators of the Zend Engine",
    "early_history": "PHP development began in 1993 when Rasmus Lerdorf wrote several Common Gateway Interface (CGI) programs in C, which he used to maintain his personal homepage. He extended them to work with web forms and to communicate with databases, and called this implementation Personal Home Page/Forms Interpreter or PHP/FI. An example of the early PHP syntax: <!--include /text/header.html--> <!--getenv HTTP_USER_AGENT--> <!--if substr $exec_result Mozilla--> Hey, you are using Netscape!<p> <!--endif--> <!--sql database select * from table where user='$username'--> <!--ifless $numentries 1--> Sorry, that record does not exist<p> <!--endif exit--> Welcome <!--$user-->!<p> You have <!--$index:0--> credits left in your account.<p> <!--include /text/footer.html--> PHP/FI could be used to build simple, dynamic web applications. To accelerate bug reporting and improve the code, Lerdorf initially announced the release of PHP/FI as Personal Home Page Tools (PHP Tools) version 1.0 on the Usenet discussion group comp.infosystems.www.authoring.cgi on 8 June 1995. This release included basic functionality such as Perl-like variables, form handling, and the ability to embed HTML. By this point, the syntax had changed to resemble that of Perl, but was simpler, more limited, and less consistent. Early PHP was never intended to be a new programming language; rather, it grew organically, with Lerdorf noting in retrospect: I don't know how to stop it [...] there was never any intent to write a programming language [...] I have absolutely no idea how to write a programming language [...] I just kept adding the next logical step on the way. A development team began to form and, after months of work and beta testing, officially released PHP/FI 2 in November 1997. The fact that PHP was not originally designed, but instead was developed organically has led to inconsistent naming of functions and inconsistent ordering of their parameters. In some cases, the function names were chosen to match the lower-level libraries which PHP was wrapping, while in some very early versions of PHP the length of the function names was used internally as a hash function, so names were chosen to improve the distribution of hash values.",
    "php__and_": "This is an example of PHP code for the WordPress content management system. Zeev Suraski and Andi Gutmans rewrote the parser in 1997 and formed the base of PHP 3, changing the language's name to the recursive acronym PHP: Hypertext Preprocessor. Afterwards, public testing of PHP 3 began, and the official launch came in June 1998. Suraski and Gutmans then started a new rewrite of PHP's core, producing the Zend Engine in 1999. They also founded Zend Technologies in Ramat Gan, Israel. On 22 May 2000, PHP 4, powered by the Zend Engine 1.0, was released. By August 2008, this branch had reached version 4.4.9. PHP 4 is now no longer under development and nor are any security updates planned to be released.",
    "php_": "PHP 8.4 was released on November 21, 2024.",
    "php__and_unicode": "PHP received mixed reviews due to lacking native Unicode support at the core language level. In 2005, a project headed by Andrei Zmievski was initiated to bring native Unicode support throughout PHP, by embedding the International Components for Unicode (ICU) library, and representing text strings as UTF-16 internally. Since this would cause major changes both to the internals of the language and to user code, it was planned to release this as version 6.0 of the language, along with other major features then in development. However, a shortage of developers who understood the necessary changes, and performance problems arising from conversion to and from UTF-16, which is rarely used in a web context, led to delays in the project. As a result, a PHP 5.3 release was created in 2009, with many non-Unicode features back-ported from PHP 6, notably namespaces. In March 2010, the project in its current form was officially abandoned, and a PHP 5.4 release was prepared to contain most remaining non-Unicode features from PHP 6, such as traits and closure re-binding. Initial hopes were that a new plan would be formed for Unicode integration, but by 2014 none had been adopted.[citation needed]",
    "just_in_time_compilation": "Just-in-time compilation is supported in PHP 8. PHP 8's JIT compiler can provide substantial performance improvements for some use cases, while (then PHP) developer Nikita Popov stated that the performance improvements for most websites will be less substantial than the upgrade from PHP 5 to PHP 7. Substantial improvements are expected more for mathematical-type operations than for common web-development use cases. Additionally, the JIT compiler provides the future potential to move some code from C to PHP, due to the performance improvements for some use cases.",
    "addition_of_the_match_expression": "Main article: PHP syntax and semantics § Match expression PHP 8 introduced the match expression. The match expression is conceptually similar to a switch statement and is more compact for some use cases. Because match is an expression, its result can be assigned to a variable or returned from a function.",
    "type_changes_and_additions": "PHP 8 introduced union types, a new static return type, and a new mixed type. Attributes, often referred to as annotations in other programming languages, were added in PHP 8, which allow metadata to be added to classes. throw was changed from being a statement to being an expression. This allows exceptions to be thrown in places that were not previously possible.",
    "syntax_changes_and_additions": "PHP 8 includes changes to allow alternate, more concise, or more consistent syntaxes in a number of scenarios. For example, the nullsafe operator is similar to the null coalescing operator ??, but used when calling methods. The following code snippet will not throw an error if getBirthday() returns null: $human_readable_date = $user->getBirthday()?->diffForHumans(); Constructor property promotion has been added as syntactic sugar, allowing class properties to be set automatically when parameters are passed into a class constructor. This reduces the amount of boilerplate code that must be written. Other minor changes include support for use of ::class on objects, which serves as an alternative for the use of get_class(); non-capturing catches in try-catch blocks; variable syntax tweaks to resolve inconsistencies; support for named arguments; and support for trailing commas in parameter lists, which adds consistency with support for trailing commas in other contexts, such as in arrays.",
    "standard_library_changes_and_additions": "Weak maps were added in PHP 8. A WeakMap holds references to objects, but these references do not prevent such objects from being garbage collected. This can provide performance improvements in scenarios where data is being cached; this is of particular relevance for object–relational mappings (ORM). Various adjustments to interfaces, such as adding support for creating DateTime objects from interfaces, and the addition of a Stringable interface that can be used for type hinting. Various new functions including str_contains(), str_starts_with(), and str_ends_with(); fdiv(); get_debug_type(); and get_resource_id() Object implementation of token_get_all()",
    "additional_changes": "Type annotations were also added into PHP's C source code itself to allow internal functions and methods to have complete type information in reflection. Inheritance with private methods Abstract methods in traits improvements",
    "release_history": "Version Release date Supported until Notes Old version, not maintained: 1.0 8 June 1995 Officially called Personal Home Page Tools (PHP Tools). This is the first use of the name PHP. Old version, not maintained: 2.0 1 November 1997 Officially called PHP/FI 2.0. This is the first release that could actually be characterised as PHP, being a standalone language with many features that have endured to the present day. Old version, not maintained: 3.0 6 June 1998 20 October 2000 Development moves from one person to multiple developers. Zeev Suraski and Andi Gutmans rewritten the base for this version. Old version, not maintained: 4.0 22 May 2000 23 June 2001 Added more advanced two-stage parse/execute tag-parsing system called the Zend engine. Old version, not maintained: 4.1 10 December 2001 12 March 2002 Introduced superglobals ($_GET, $_POST, $_SESSION, etc.) Old version, not maintained: 4.2 22 April 2002 6 September 2002 Disabled register_globals by default. Data received over the network is not inserted directly into the global namespace anymore, closing possible security holes in applications. Old version, not maintained: 4.3 27 December 2002 31 March 2005 Introduced the command-line interface (CLI), to supplement the CGI. Old version, not maintained: 4.4 11 July 2005 7 August 2008 Fixed a memory corruption bug, which required breaking binary compatibility with extensions compiled against PHP version 4.3.x. Old version, not maintained: 5.0 13 July 2004 5 September 2005 Zend Engine II with a new object model. Old version, not maintained: 5.1 24 November 2005 24 August 2006 Performance improvements with the introduction of compiler variables in re-engineered PHP Engine. Added PHP Data Objects (PDO) as a consistent interface for accessing databases. Old version, not maintained: 5.2 2 November 2006 6 January 2011 Enabled the filter extension by default. Native JSON support. Old version, not maintained: 5.3 30 June 2009 14 August 2014 Namespace support; late static bindings, jump label (limited goto), anonymous functions, closures, PHP archives (phar), garbage collection for circular references, improved Windows support, sqlite3, mysqlnd as a replacement for libmysql as the underlying library for the extensions that work with MySQL, fileinfo as a replacement for mime_magic for better MIME support, the Internationalization extension, and deprecation of ereg extension. Old version, not maintained: 5.4 1 March 2012 3 September 2015 Trait support, short array syntax support. Removed items: register_globals, safe_mode, allow_call_time_pass_reference, session_register(), session_unregister() and session_is_registered(). Built-in web server. Several improvements to existing features, performance and reduced memory requirements. Old version, not maintained: 5.5 20 June 2013 10 July 2016 Support for generators, finally blocks for exceptions handling, OpCache (based on Zend Optimizer+) bundled in official distribution. Old version, not maintained: 5.6 28 August 2014 31 December 2018 Constant scalar expressions, variadic functions, argument unpacking, new exponentiation operator, extensions of the use statement for functions and constants, new phpdbg debugger as a SAPI module, and other smaller improvements. 6.x Not released — Abandoned version of PHP that planned to include native Unicode support. Old version, not maintained: 7.0 3 December 2015 10 January 2019 Zend Engine 3 (performance improvements and 64-bit integer support on Windows), uniform variable syntax, AST-based compilation process, added Closure::call(), bitwise shift consistency across platforms, ?? (null coalesce) operator, Unicode code point escape syntax, return type declarations, scalar type (integer, float, string and boolean) declarations, <=> spaceship three-way comparison operator, generator delegation, anonymous classes, simpler and more consistently available CSPRNG API, replacement of many remaining internal PHP errors with the more modern exceptions, and shorthand syntax for importing multiple items from a namespace. Old version, not maintained: 7.1 1 December 2016 1 December 2019 iterable type, nullable types, void return type, class constant visibility modifiers, short list syntax, multi-catch Old version, not maintained: 7.2 30 November 2017 30 November 2020 Object parameter and return type declaration, libsodium extension, abstract method overriding, parameter type widening Old version, not maintained: 7.3 6 December 2018 6 December 2021 Flexible Heredoc and Nowdoc syntax, support for reference assignment and array deconstruction with list(), PCRE2 support, hrtime function Old version, not maintained: 7.4 28 November 2019 28 November 2022 Typed properties 2.0, preloading, null-coalescing assignment operator, improve openssl_random_pseudo_bytes, weak references, foreign function interface (FFI), always available hash extension, password hash registry, multibyte string splitting, reflection for references, unbundle ext/wddx, new custom object serialization mechanism Old version, not maintained: 8.0 26 November 2020 26 November 2023 Just-In-Time (JIT) compilation, arrays starting with a negative index, stricter/saner language semantics (validation for abstract trait methods), saner string to number comparisons, saner numeric strings, TypeError on invalid arithmetic/bitwise operators, reclassification of various engine errors, consistent type errors for internal functions, fatal error for incompatible method signatures), locale-independent float to string conversion, variable syntax tweaks, attributes, named arguments, match expression, constructor property promotion, union types, mixed type, static return type, nullsafe operator, non-capturing catches, throw expression, JSON extension is always available. Old version, still maintained: 8.1 25 November 2021 31 December 2025 Explicit octal integer literal notation, enumerations, read-only properties, first-class callable syntax, new in initializers, pure intersection types, never return type, final class constraints, fibers Old version, still maintained: 8.2 8 December 2022 31 December 2026 Readonly classes, null, false, and true as stand-alone types, locale-independent case conversion, disjunctive normal form types, constants in traits Old version, still maintained: 8.3 23 November 2023 31 December 2027 Typed class constants, dynamic class constant fetch, #[\\Override] attribute, deep-cloning of read-only properties, new json_validate function, randomizer additions, the command-line linter supports multiple files Latest version: 8.4 21 November 2024 31 December 2028 Property hooks, asymmetric visibility, an updated DOM API, performance improvements, bug fixes, and general cleanup. Legend:Old version, not maintainedOld version, still maintainedLatest versionLatest preview versionFuture version Beginning on 28 June 2011, the PHP Development Team implemented a timeline for the release of new versions of PHP. Under this system, at least one release should occur every month. Once per year, a minor release should occur which may include new features. Every minor release should at least be supported for two years with security and bug fixes, followed by at least one year of only security fixes, for a total of a three-year release process for every minor release. No new features, unless small and self-contained, are to be introduced into a minor release during the three-year release process.",
    "mascot": "The elePHPant, PHP mascot The mascot of the PHP project is the elePHPant, a blue elephant with the PHP logo on its side, designed by Vincent Pontier in 1998. The (PHP) letters were forming the shape of an elephant if viewed in a sideways angle. The elePHPant is sometimes differently coloured when in plush toy form. Many variations of this mascot have been made over the years. Only the elePHPants based on the original design by Vincent Pontier are considered official by the community. These are collectable and some of them are extremely rare.",
    "syntax": "Main article: PHP syntax and semantics A Hello, World application in PHP 7.4 running on its built-in development server The following Hello, World! program is written in PHP code embedded in an HTML document: <!DOCTYPE html> <html> <head> <title>PHP Hello, World! program</title> </head> <body> <p><?= 'Hello, World!' ?></p> </body> </html> However, as no requirement exists for PHP code to be embedded in HTML, the simplest version of Hello, World! may be written like this, with the closing tag ?> omitted as preferred in files containing pure PHP code. <?php echo 'Hello, World!'; The PHP interpreter only executes PHP code within its delimiters. Anything outside of its delimiters is not processed by PHP, although the non-PHP text is still subject to control structures described in PHP code. The most common delimiters are <?php to open and ?> to close PHP sections. The shortened form <? also exists. This short delimiter makes script files less portable since support for them can be disabled in the local PHP configuration and it is therefore discouraged. Conversely, there is no recommendation against the echo short tag <?=. Prior to PHP 5.4.0, this short syntax for echo only works with the short_open_tag configuration setting enabled, while for PHP 5.4.0 and later it is always available. The purpose of all these delimiters is to separate PHP code from non-PHP content, such as JavaScript code or HTML markup. So the shortest Hello, World! program written in PHP is: <?='Hello, World!'; The first form of delimiters, <?php and ?>, in XHTML and other XML documents, creates correctly formed XML processing instructions. This means that the resulting mixture of PHP code and other markups in the server-side file is itself well-formed XML. Variables are prefixed with a dollar symbol, and a type does not need to be specified in advance. PHP 5 introduced type declarations that allow functions to force their parameters to be objects of a specific class, arrays, interfaces or callback functions. However, before PHP 7, type declarations could not be used with scalar types such as integers or strings. Below is an example of how PHP variables are declared and initialized. <?php $name = 'John'; // variable of string type being declared and initialized $age = 18; // variable of integer type being declared and initialized $height = 5.3; // variable of double type being declared and initialized echo $name . ' is ' . $height . m tall\\n; // concatenating variables and strings echo $name is $age years old.; // interpolating variables to string ?> Unlike function and class names, variable names are case-sensitive. Both double-quoted () and heredoc strings provide the ability to interpolate a variable's value into the string. PHP treats newlines as whitespace in the manner of a free-form language, and statements are terminated by a semicolon. PHP has three types of comment syntax: /* */ marks block and inline comments; // or # are used for one-line comments. The echo statement is one of several facilities PHP provides to output text.[citation needed] In terms of keywords and language syntax, PHP is similar to C-style syntax. if conditions, for and while loops and function returns are similar in syntax to languages such as C, C++, C#, Java and Perl.[citation needed]",
    "data_types": "PHP is loosely typed. It stores integers in a platform-dependent range, either as a 32, 64 or 128-bit signed integer equivalent to the C-language long type. Unsigned integers are converted to signed values in certain situations, which is different behaviour to many other programming languages. Integer variables can be assigned using decimal (positive and negative), octal, hexadecimal, and binary notations.[citation needed] Floating-point numbers are also stored in a platform-specific range. They can be specified using floating-point notation, or two forms of scientific notation. PHP has a native Boolean type that is similar to the native Boolean types in Java and C++. Using the Boolean type conversion rules, non-zero values are interpreted as true and zero as false, as in Perl and C++. The null data type represents a variable that has no value; NULL is the only allowed value for this data type. Variables of the resource type represent references to resources from external sources. These are typically created by functions from a particular extension, and can only be processed by functions from the same extension; examples include file, image, and database resources. Arrays can contain elements of any type that PHP can handle, including resources, objects, and even other arrays. Order is preserved in lists of values and in hashes with both keys and values, and the two can be intermingled. PHP also supports strings, which can be used with single quotes, double quotes, nowdoc or heredoc syntax. The Standard PHP Library (SPL) attempts to solve standard problems and implements efficient data access interfaces and classes.",
    "functions": "PHP defines a large array of functions in the core language and many are also available in various extensions; these functions are well documented online PHP documentation. However, the built-in library has a wide variety of naming conventions and associated inconsistencies, as described under history above. Custom functions may be defined by the developer: function myAge(int $birthYear): string { // calculate the age by subtracting the birth year from the current year. $yearsOld = date('Y') - $birthYear; // return the age in a descriptive string. return $yearsOld . ($yearsOld == 1 ? ' year' : ' years'); } echo 'I am currently ' . myAge(1995) . ' old.'; As of 2025, the output of the above sample program is I am currently 30 years old. In lieu of function pointers, functions in PHP can be referenced by a string containing their name. In this manner, normal PHP functions can be used, for example, as callbacks or within function tables. User-defined functions may be created at any time without being prototyped. Functions may be defined inside code blocks, permitting a run-time decision as to whether or not a function should be defined. There is a function_exists function that determines whether a function with a given name has already been defined. Function calls must use parentheses, with the exception of zero-argument class constructor functions called with the PHP operator new, in which case parentheses are optional.[citation needed] Since PHP 4.0.1 create_function(), a thin wrapper around eval(), allowed normal PHP functions to be created during program execution; it was deprecated in PHP 7.2 and removed in PHP 8.0 in favor of syntax for anonymous functions or closures that can capture variables from the surrounding scope, which was added in PHP 5.3. Shorthand arrow syntax was added in PHP 7.4: function getAdder($x) { return fn($y) => $x + $y; } $adder = getAdder(8); echo $adder(2); // prints 10 In the example above, getAdder() function creates a closure using passed argument $x, which takes an additional argument $y, and returns the created closure to the caller. Such a function is a first-class object, meaning that it can be stored in a variable, passed as a parameter to other functions, etc. Unusually for a dynamically typed language, PHP supports type declarations on function parameters, which are enforced at runtime. This has been supported for classes and interfaces since PHP 5.0, for arrays since PHP 5.1, for callables since PHP 5.4, and scalar (integer, float, string and boolean) types since PHP 7.0. PHP 7.0 also has type declarations for function return types, expressed by placing the type name after the list of parameters, preceded by a colon. For example, the getAdder function from the earlier example could be annotated with types like so in PHP 7: function getAdder(int $x): Closure { return fn(int $y): int => $x + $y; } $adder = getAdder(8); echo $adder(2); // prints 10 echo $adder(null); // throws an exception because an incorrect type was passed $adder = getAdder([]); // would also throw an exception By default, scalar type declarations follow weak typing principles. So, for example, if a parameter's type is int, PHP would allow not only integers, but also convertible numeric strings, floats or Booleans to be passed to that function, and would convert them. However, PHP 7 has a strict typing mode which, when used, disallows such conversions for function calls and returns within a file.",
    "php_objects": "Basic object-oriented programming functionality was added in PHP 3 and improved in PHP 4. This allowed for PHP to gain further abstraction, making creative tasks easier for programmers using the language. Object handling was completely rewritten for PHP 5, expanding the feature set and enhancing performance. In previous versions of PHP, objects were handled like value types. The drawback of this method was that code had to make heavy use of PHP's reference variables if it wanted to modify an object it was passed rather than creating a copy of it. In the new approach, objects are referenced by handle, and not by value.[citation needed] PHP 5 introduced private and protected member variables and methods, along with abstract classes, final classes, abstract methods, and final methods. It also introduced a standard way of declaring constructors and destructors, similar to that of other object-oriented languages such as C++, and a standard exception handling model. Furthermore, PHP 5 added interfaces and allowed for multiple interfaces to be implemented. There are special interfaces that allow objects to interact with the runtime system. Objects implementing ArrayAccess can be used with array syntax and objects implementing Iterator or IteratorAggregate can be used with the foreach language construct. There is no virtual table feature in the engine, so static variables are bound with a name instead of a reference at compile time. If the developer creates a copy of an object using the reserved word clone, the Zend engine will check whether a __clone() method has been defined. If not, it will call a default __clone() which will copy the object's properties. If a __clone() method is defined, then it will be responsible for setting the necessary properties in the created object. For convenience, the engine will supply a function that imports the properties of the source object, so the programmer can start with a by-value replica of the source object and only override properties that need to be changed. The visibility of PHP properties and methods is defined using the keywords public, private, and protected. The default is public, if only var is used; var is a synonym for public. Items declared public can be accessed everywhere. protected limits access to inherited classes (and to the class that defines the item). private limits visibility only to the class that defines the item. Objects of the same type have access to each other's private and protected members even though they are not the same instance.[citation needed]",
    "example": "The following is a basic example of object-oriented programming in PHP 8: <?php abstract class User { protected string $name; public function __construct(string $name) { // make first letter uppercase and the rest lowercase $this->name = ucfirst(strtolower($name)); } public function greet(): string { return Hello, my name is  . $this->name; } abstract public function job(): string; } class Student extends User { public function __construct(string $name, private string $course) { parent::__construct($name); } public function job(): string { return I learn  . $this->course; } } class Teacher extends User { public function __construct(string $name, private array $teachingCourses) { parent::__construct($name); } public function job(): string { return I teach  . implode(, , $this->teachingCourses); } } $students = [ new Student(Alice, Computer Science), new Student(Bob, Computer Science), new Student(Charlie, Business Studies), ]; $teachers = [ new Teacher(Dan, [Computer Science, Information Security]), new Teacher(Erin, [Computer Science, 3D Graphics Programming]), new Teacher(Frankie, [Online Marketing, Business Studies, E-commerce]), ]; foreach ([$students, $teachers] as $users) { echo $users::class . s:\\n; array_walk($users, function (User $user) { echo {$user->greet()}, {$user->job()}\\n; }); } This program outputs the following: Students: Hello, my name is Alice, I learn Computer Science Hello, my name is Bob, I learn Computer Science Hello, my name is Charlie, I learn Business Studies Teachers: Hello, my name is Dan, I teach Computer Science, Information Security Hello, my name is Erin, I teach Computer Science, 3D Graphics Programming Hello, my name is Frankie, I teach Online Marketing, Business Studies, E-commerce",
    "implementations": "The only complete PHP implementation is the original, known simply as PHP. It is the most widely used and is powered by the Zend Engine. To disambiguate it from other implementations, it is sometimes unofficially called Zend PHP. The Zend Engine compiles PHP source code on-the-fly into an internal format that it can execute, thus it works as an interpreter. It is also the reference implementation of PHP, as PHP has no formal specification, and so the semantics of Zend PHP define the semantics of PHP. Due to the complex and nuanced semantics of PHP, defined by how Zend works, it is difficult for competing implementations to offer complete compatibility. PHP's single-request-per-script-execution model, and the fact that the Zend Engine is an interpreter, leads to inefficiency; as a result, various products have been developed to help improve PHP performance. In order to speed up execution time and not have to compile the PHP source code every time the web page is accessed, PHP scripts can also be deployed in the PHP engine's internal format by using an opcode cache, which works by caching the compiled form of a PHP script (opcodes) in shared memory to avoid the overhead of parsing and compiling the code every time the script runs. An opcode cache, Zend Opcache, is built into PHP since version 5.5. Another example of a widely used opcode cache is the Alternative PHP Cache (APC), which is available as a PECL extension. While Zend PHP is still the most popular implementation, several other implementations have been developed. Some of these are compilers or support JIT compilation, and hence offer performance benefits over Zend PHP at the expense of lacking full PHP compatibility.[citation needed] Alternative implementations include the following: HHVM (HipHop Virtual Machine) – developed at Facebook and available as open source, it converts PHP code into a high-level bytecode (commonly known as an intermediate language), which is then translated into x86-64 machine code dynamically at runtime by a just-in-time (JIT) compiler, resulting in up to 6× performance improvements. However, since version 7.2 Zend has outperformed HHVM, and HHVM 3.24 is the last version to officially support PHP. HipHop – developed at Facebook and available as open source, it transforms the PHP scripts into C++ code and then compiles the resulting code, reducing the server load up to 50%. In early 2013, Facebook deprecated it in favour of HHVM due to multiple reasons, including deployment difficulties and lack of support for the whole PHP language, including the create_function() and eval() constructs. Parrot – a virtual machine designed to run dynamic languages efficiently; the cross-translator Pipp transforms the PHP source code into the Parrot intermediate representation, which is then translated into the Parrot's bytecode and executed by the virtual machine. PeachPie – a second-generation compiler to .NET Common Intermediate Language (CIL) bytecode, built on the Roslyn platform; successor of Phalanger, sharing several architectural components Phalanger – compiles PHP into .Net Common Intermediate Language bytecode; predecessor of PeachPie Quercus – compiles PHP into Java bytecode",
    "licensing": "Main article: PHP License PHP is free software released under the PHP License, which stipulates that: Products derived from this software may not be called PHP, nor may PHP appear in their name, without prior written permission from group@php.net. You may indicate that your software works in conjunction with PHP by saying Foo for PHP instead of calling it PHP Foo or phpfoo. This restriction on the use of PHP makes the PHP License incompatible with the GNU General Public License (GPL), while the Zend License is incompatible due to an advertising clause similar to that of the original BSD license.",
    "development_and_community": "PHP includes various free and open-source libraries in its source distribution or uses them in resulting PHP binary builds. PHP is fundamentally an Internet-aware system with built-in modules for accessing File Transfer Protocol (FTP) servers and many database servers, including PostgreSQL, MySQL, Microsoft SQL Server and SQLite (which is an embedded database), LDAP servers, and others. Numerous functions are familiar to C programmers, such as those in the stdio family, are available in standard PHP builds. PHP allows developers to write extensions in C to add functionality to the PHP language. PHP extensions can be compiled statically into PHP or loaded dynamically at runtime. Numerous extensions have been written to add support for the Windows API, process management on Unix-like operating systems, multibyte strings (Unicode), cURL, and several popular compression formats. Other PHP features made available through extensions include integration with Internet Relay Chat (IRC), dynamic generation of images and Adobe Flash content, PHP Data Objects (PDO) as an abstraction layer used for accessing databases, and even speech synthesis. Some of the language's core functions, such as those dealing with strings and arrays, are also implemented as extensions. The PHP Extension Community Library (PECL) project is a repository for extensions to the PHP language. Some other projects, such as Zephir, provide the ability for PHP extensions to be created in a high-level language and compiled into native PHP extensions. Such an approach, instead of writing PHP extensions directly in C, simplifies the development of extensions and reduces the time required for programming and testing. By December 2018 the PHP Group consisted of ten people: Thies C. Arntzen, Stig Bakken, Shane Caraveo, Andi Gutmans, Rasmus Lerdorf, Sam Ruby, Sascha Schumann, Zeev Suraski, Jim Winstead, and Andrei Zmievski. Zend Technologies provides a PHP Certification based on PHP 8 exam (and previously based on PHP 7 and 5.5) for programmers to become certified PHP developers.",
    "the_php_foundation": "PHPFormationNovember 22, 2021; 3 years ago (2021-11-22)FounderAutomattic, Laravel, Acquia, Zend, Private Packagist, Symfony, Craft CMS, Tideways, PrestaShop, JetBrainsWebsitehttps://thephp.foundation On 26 November 2021, the JetBrains blog announced the creation of The PHP Foundation, which will sponsor the design and development of PHP. Year Commits Reviews RFCs 2022 683 283 8 2023 784 702 17 The foundation hires Core Developers to work on the PHP language's core repository. Roman Pronskiy, a member of the foundation's board, said that they aim to pay market salaries to developers. The response to the foundation has mostly been positive, with the foundation being praised for better supporting the language and helping to stop the decrease in the language's popularity. However, it has also been criticised for adding breaking changes to minor versions of PHP, such as in PHP 8.2 where initialising members of a class out-with the original class scope would cause deprecation errors, these changes impacted a number of open source projects including WordPress. Germany's Sovereign Tech Fund provided more than 200,000 Euros to support the PHP Foundation.",
    "installation_and_configuration": "Example output of the phpinfo() function in PHP 7.1 There are two primary ways for adding support for PHP to a web server – as a native web server module, or as a CGI executable. PHP has a direct module interface called server application programming interface (SAPI), which is supported by many web servers including Apache HTTP Server, Microsoft IIS and iPlanet Web Server. Some other web servers, such as OmniHTTPd, support the Internet Server Application Programming Interface (ISAPI), which is Microsoft's web server module interface. If PHP has no module support for a web server, it can always be used as a Common Gateway Interface (CGI) or FastCGI processor; in that case, the web server is configured to use PHP's CGI executable to process all requests to PHP files. PHP-FPM (FastCGI Process Manager) is an alternative FastCGI implementation for PHP, bundled with the official PHP distribution since version 5.3.3. When compared to the older FastCGI implementation, it contains some additional features, mostly useful for heavily loaded web servers. When using PHP for command-line scripting, a PHP command-line interface (CLI) executable is needed. PHP supports a CLI server application programming interface (SAPI) since PHP 4.3.0. The main focus of this SAPI is developing shell applications using PHP. There are quite a few differences between the CLI SAPI and other SAPIs, although they do share many of the same behaviours. PHP has a direct module interface called SAPI for different web servers; in case of PHP 5 and Apache 2.0 on Windows, it is provided in form of a DLL file called php5apache2.dll, which is a module that, among other functions, provides an interface between PHP and the web server, implemented in a form that the server understands. This form is what is known as a SAPI.[citation needed] There are different kinds of SAPIs for various web server extensions. For example, in addition to those listed above, other SAPIs for the PHP language include the Common Gateway Interface and command-line interface. PHP can also be used for writing desktop graphical user interface (GUI) applications, by using the PHP Desktop. GitHub. or discontinued PHP-GTK extension. PHP-GTK is not included in the official PHP distribution, and as an extension, it can be used only with PHP versions 5.1.0 and newer. The most common way of installing PHP-GTK is by compiling it from the source code. When PHP is installed and used in cloud environments, software development kits (SDKs) are provided for using cloud-specific features.[citation needed] For example: Amazon Web Services provides the AWS SDK for PHP Microsoft Azure can be used with the Windows Azure SDK for PHP. Numerous configuration options are supported, affecting both core PHP features and extensions. Configuration file php.ini is searched for in different locations, depending on the way PHP is used. The configuration file is split into various sections, while some of the configuration options can be also set within the web server configuration.",
    "use": "A broad overview of the LAMP software bundle, displayed here together with Squid PHP is a general-purpose scripting language that is especially suited to server-side web development, in which case PHP generally runs on a web server. Any PHP code in a requested file is executed by the PHP runtime, usually to create dynamic web page content or dynamic images used on websites or elsewhere. It can also be used for command-line scripting and client-side graphical user interface (GUI) applications. PHP can be deployed on most web servers, many operating systems and platforms, and can be used with many relational database management systems (RDBMS). Most web hosting providers support PHP for use by their clients. It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use. Dynamic web page: example of server-side scripting (PHP and MySQL) Originally designed to create dynamic web pages, PHP now focuses mainly on server-side scripting, and it is similar to other server-side scripting languages that provide dynamic content from a web server to a client, such as Python, Microsoft's ASP.NET, Sun Microsystems' JavaServer Pages, and mod_perl. PHP has also attracted the development of many software frameworks that provide building blocks and a design structure to promote rapid application development (RAD).[citation needed] Some of these include PRADO, CakePHP, Symfony, CodeIgniter, Laravel, Yii Framework, Phalcon and Laminas, offering features similar to other web frameworks. The LAMP architecture has become popular in the web industry as a way of deploying web applications. PHP is commonly used as the P in this bundle alongside Linux, Apache and MySQL, although the P may also refer to Python, Perl, or some mix of the three. Similar packages, WAMP and MAMP, are also available for Windows and macOS, with the first letter standing for the respective operating system. Although both PHP and Apache are provided as part of the macOS base install, users of these packages seek a simpler installation mechanism that can be more easily kept up to date.[citation needed] For specific and more advanced usage scenarios, PHP offers a well-defined and documented way for writing custom extensions in C or C++.[non-primary source needed] Besides extending the language itself in form of additional libraries, extensions are providing a way for improving execution speed where it is critical and there is room for improvements by using a true compiled language. PHP also offers well-defined ways for embedding itself into other software projects. That way PHP can be easily used as an internal scripting language for another project, also providing tight interfacing with the project's specific internal data structures. PHP received mixed reviews due to lacking support for multithreading at the core language level, though using threads is made possible by the pthreads PECL extension. A command line interface, php-cli, and two ActiveX Windows Script Host scripting engines for PHP have been produced.[citation needed]",
    "popularity_and_usage_statistics": "PHP is used for Web content management systems including MediaWiki, WordPress, Joomla, Drupal, Moodle, eZ Publish, eZ Platform, and SilverStripe. As of January 2013[update], PHP was used in more than 240 million websites (39% of those sampled) and was installed on 2.1 million web servers. As of 21 January 2025[update] (two months after PHP 8.4's release), PHP is used as the server-side programming language on 75.0% of websites where the language could be determined; PHP 7 is the most used version of the language with 47.1% of websites using PHP being on that version, while 40.6% use PHP 8, 12.2% use PHP 5 and 0.1% use PHP 4. PHP 840.6%PHP 747.1%PHP 512.9%PHP 40.1% Usage share of PHP versions on 21 January 2025: two months after PHP 8.4's release PHP 8.4: 0.1% of PHP 8 (0.04%) PHP 8.3: 11.1% of PHP 8 (4.51%) PHP 8.2: 30.1% of PHP 8 (12.22%) PHP 8.1: 35.5% of PHP 8 (14.41%) PHP 8.0: 23.1% of PHP 8 (9.38%) PHP 7.4: 72.8% of PHP 7 (34.29%) PHP 7.3: 11.3% of PHP 7 (5.32%) PHP 7.2: 8.50% of PHP 7 (4%) PHP 7.1: 3.70% of PHP 7 (1.74%) PHP 7.0: 3.70% of PHP 7 (1.74%) PHP 5.6: 54.4% of PHP 5 (6.6368%) PHP 5.5: 8.20% of PHP 5 (1.0004%) PHP 5.4: 15.5% of PHP 5 (1.891%) PHP 5.3: 14.7% of PHP 5 (1.7934%) PHP 5.2: 5.20% of PHP 5 (0.6344%) PHP 5.1: 0.40% of PHP 5 (0.0488%) PHP 5.0: less than 0.1% of PHP 5 (0%) PHP 4.4: 74.0% of PHP 4 (0.074%) PHP 4.3: 20.7% of PHP 4 (0.0207%) PHP 4.2: 4.00% of PHP 4 (0.0004%) PHP 4.1: 0.80% of PHP 4 (0.0008%) PHP 4.0: 0.50% of PHP 4 (0.0005%)",
    "security": "In 2019, 11% of all vulnerabilities listed by the National Vulnerability Database were linked to PHP; historically, about 30% of all vulnerabilities listed since 1996 in this database are linked to PHP. Technical security flaws of the language itself or of its core libraries are not frequent (22 in 2009, about 1% of the total although PHP applies to about 20% of programs listed). Recognizing that programmers make mistakes, some languages include taint checking to automatically detect the lack of input validation which induces many issues. Such a feature has been proposed for PHP in the past, but either been rejected or the proposal abandoned. Third-party projects such as Suhosin and Snuffleupagus aim to remove or change dangerous parts of the language. Historically, old versions of PHP had some configuration parameters and default values for such runtime settings that made some PHP applications prone to security issues. Among these, magic_quotes_gpc and register_globals configuration directives were the best known; the latter made any URL parameters become PHP variables, opening a path for serious security vulnerabilities by allowing an attacker to set the value of any uninitialized global variable and interfere with the execution of a PHP script. Support for magic quotes and register globals settings has been deprecated since PHP 5.3.0, and removed from PHP 5.4.0. Another example for the potential runtime-settings vulnerability comes from failing to disable PHP execution (for example by using the engine configuration directive) for the directory where uploaded files are stored; enabling it can result in the execution of malicious code embedded within the uploaded files. The best practice is to either locate the image directory outside of the document root available to the web server and serve it via an intermediary script or disable PHP execution for the directory which stores the uploaded files.[citation needed] Also, enabling the dynamic loading of PHP extensions (via enable_dl configuration directive) in a shared web hosting environment can lead to security issues. Implied type conversions that result in different values being treated as equal, sometimes against the programmer's intent, can lead to security issues. For example, the result of the comparison '0e1234' == '0' is true, because strings that are parsable as numbers are converted to numbers; in this case, the first compared value is treated as scientific notation having the value (0×101234), which is zero. Errors like this resulted in authentication vulnerabilities in Simple Machines Forum, Typo3 and phpBB when MD5 password hashes were compared. The recommended way is to use hash_equals() (for timing attack safety), strcmp or the identity operator (===), as '0e1234' === '0' results in false.[citation needed] In a 2013 analysis of over 170,000 website defacements, published by Zone-H, the most frequently (53%) used technique was the exploitation of file inclusion vulnerability, mostly related to insecure usage of the PHP language constructs include, require, and allow_url_fopen.",
    "cryptographic_security": "PHP includes rand() and mt_rand()functions which use a pseudorandom number generator, and are not cryptographically secure. As of version 8.1, the random_int() function is included, which uses a cryptographically secure source of randomness provided by the system. There are two attacks that can be performed over PHP entropy sources: seed attack and state recovery attack.[citation needed] As of 2012, a $250 GPU can perform up to 230 MD5 calculations per second, while a $750 GPU can perform four times as many calculations at the same time. In combination with a birthday attack this can lead to serious security vulnerabilities.[citation needed]",
    "long_term_support": "The PHP development team provides official bug fixes for two years following release of each minor version followed by another two years where only security fixes are released. After this, the release is considered end of life and no longer officially supported. Extended long-term support beyond this is available from commercial providers, such as Zend and others",
    "see_also": "Computer programming portalFree and open-source software portal Comparison of programming languages List of Apache–MySQL–PHP packages List of PHP accelerators List of PHP editors PEAR (PHP Extension and Application Repository) PHP accelerator Template processor XAMPP (free and open-source cross-platform web server solution stack package) Zend Server",
    "references": "^ a b Lerdorf, Rasmus (June 8, 1995). Announce: Personal Home Page Tools (PHP Tools). Retrieved 7 June 2011. ^ a b Lerdorf, Rasmus (2007-04-26). PHP on Hormones – history of PHP presentation by Rasmus Lerdorf given at the MySQL Conference in Santa Clara, California. The Conversations Network. Archived from the original on 2013-07-29. ^ Release 8.4.6. 10 April 2025. ^ PHP: Function arguments – Manual. secure.php.net. ^ PHP: Release Archives (museum). museum.php.net. ^ PHP: Preface – Manual. ^ Stogov, Dmitry [@dstogov] (2015-12-04). It's not a secret that some #PHP7 optimization ideas came from HHVM, LuaJIT and V8. Thank you @HipHopVM @SaraMG. #php7thankyou (Tweet) – via Twitter. ^ PHP: Hypertext Preprocessor. www.php.net. Retrieved 2020-02-12. ^ a b Krill, Paul (2013-11-18). Believe the hype: PHP founder backs Facebook's HipHop technology. InfoWorld. Retrieved 2022-10-13. ^ Announce: Personal Home Page Tools (PHP Tools). groups.google.com. Retrieved 2022-11-03. ^ a b c d e f g h i History of PHP and related projects. The PHP Group. Retrieved 2008-02-25. ^ a b History of PHP. php.net. ^ Olsson, Mikael (2013-09-04). PHP Quick Scripting Reference. Apress. ISBN 978-1-4302-6284-8. ^ PHP Manual: Preface, www.php.net. ^ Introduction: What can PHP do?. PHP Manual. Retrieved 2009-03-05. ^ Helicopter: Port of node-ar-drone which allows user to control a Parrot AR Drone over PHP. JoliCode. 2019-01-11. Retrieved 2019-02-23. ^ a b Embedding PHP in HTML. O'Reilly. 2001-05-03. Archived from the original on 2008-02-19. Retrieved 2008-02-25. ^ PHP: Unsupported Branches. www.php.net. ^ a b c Usage statistics of PHP for websites. W3Techs – World Wide Web Technology Surveys. W3Techs. Retrieved 21 January 2025. ^ Lerdorf, Rasmus (2012-07-20). I wonder why people keep writing that PHP was ever written in Perl. It never was. #php. Twitter. Retrieved 2014-09-04. ^ Lerdorf, Rasmus (2007-04-26). PHP on Hormones. The Conversations Network. Archived from the original (mp3) on 2019-01-06. Retrieved 2009-06-22. ^ Lerdorf, Rasmus (2007). Slide 3. slides for 'PHP on Hormones' talk. The PHP Group. Retrieved 2009-06-22. ^ Lerdorf, Rasmus (1995-06-08). Announce: Personal Home Page Tools (PHP Tools). Newsgroup: comp.infosystems.www.authoring.cgi. Retrieved 2006-09-17. ^ Rasmus Lerdorf, Senior Technical Yahoo: PHP, Behind the Mic. 2003-11-19. Archived from the original on 2013-07-28. ^ Alshetwi, A.B.; Rahmat, R. A. A. O.; Borhan, M. N.; Ismael, S.; Ali, A.; Irtema, H. I. M.; Alfakhria, A. Y. (2018). Web-Based Expert System for Optimizing of Traffic Road in Developing Countries. Retrieved 13 Feb 2024. ^ Problems with PHP. Retrieved 20 December 2010. ^ php.internals: Re: Function name consistency. news.php.net. 2013-12-28. Retrieved 2014-02-09. ^ Rasmus Lerdorf (Dec 16, 2013). Re: Flexible function naming. Newsgroup: php.internals. Retrieved December 26, 2013. ^ PHP – Acronym Meaning Vote. PHP.net. Archived from the original on August 15, 2000. ^ Zend Engine version 2.0: Feature Overview and Design. Zend Technologies Ltd. Archived from the original on 2006-07-19. Retrieved 2006-09-17. ^ php.net 2007 news archive. The PHP Group. 2007-07-13. Retrieved 2008-02-22. ^ Kerner, Sean Michael (2008-02-01). PHP 4 is Dead—Long Live PHP 5. InternetNews. Archived from the original on 2018-08-06. Retrieved 2018-12-16. ^ Trachtenberg, Adam (2004-07-15). Why PHP 5 Rocks!. O'Reilly. Archived from the original on 2016-03-31. Retrieved 2008-02-22. ^ Late Static Binding in PHP. Digital Sandwich. 2006-02-23. Retrieved 2008-03-25. ^ Static Keyword. The PHP Group. Retrieved 2008-03-25. ^ GoPHP5. Archived from the original on 2011-07-17. ^ PHP projects join forces to Go PHP 5 (PDF). GoPHP5 Press Release. Archived from the original (PDF) on 2019-08-04. Retrieved 2008-02-23. ^ GoPHP5. GoPHP5. Archived from the original on 2011-04-27. Retrieved 2008-02-22. ^ PHP Installation and Configuration. php.net. Retrieved 2013-10-29. ^ PHP for Windows: Binaries and sources releases (5.3). php.net. Retrieved 2013-10-29. ^ PHP for Windows: Binaries and sources releases (5.4). php.net. Retrieved 2013-10-29. ^ PHP for Windows: Binaries and sources releases (5.5). php.net. Retrieved 2013-10-29. ^ PHP: Supported Versions. ^ Types: Strings (PHP Manual). PHP.net. Retrieved 2013-09-22. ^ Details of the String Type (PHP Manual). PHP.net. Retrieved 2021-09-22. ^ Andrei Zmievski (2005-08-10). PHP Unicode support design document (Mailing list). Retrieved 2014-02-09. ^ PHP 5.5 or 6.0. Retrieved 2014-02-09. ^ Andrei Zmievski (2011-04-22). The Good, the Bad, and the Ugly: What Happened to Unicode and PHP 6. Retrieved 2014-02-09. ^ Rasmus Lerdorf (2010-03-11). PHP 6 (Mailing list). Retrieved 2014-02-07. ^ The Neverending Muppet Debate of PHP 6 v PHP 7. Archived from the original on 2015-11-19. Retrieved 2015-11-19. ^ RFC: Name of Next Release of PHP. php.net. 2014-07-07. Retrieved 2014-07-15. ^ Re: [PHP-DEV] [VOTE] [RFC] Name of Next Release of PHP (again). 2014-07-30. Retrieved 2014-07-30. ^ phpng: Refactored PHP Engine with Big Performance Improvement. news.php.net. ^ PHP: rfc:phpng. php.net. Retrieved 16 December 2014. ^ a b PHP: phpng. php.net. Retrieved 2014-07-15. ^ Merge branch 'ZendEngine3'. github.com. 2014-12-05. Retrieved 2014-12-05. ^ a b c PHP: Release Process. 2011-06-20. Retrieved 2013-10-06. ^ a b PHP RFC: Exceptions in the engine (for PHP 7). php.net. Retrieved 2015-05-21. ^ a b PHP RFC: Uniform Variable Syntax. php.net. 2014-05-31. Retrieved 2014-07-30. ^ Online PHP editor | output for udRhX. 3v4l.org. ^ PHP RFC: Fix foreach behavior. php.net. Retrieved 2015-05-21. ^ PHP RFC: Constructor behaviour of internal classes. php.net. Retrieved 2015-05-21. ^ PHP RFC: Removal of dead or not yet PHP7 ported SAPIs and extensions. php.net. Retrieved 2015-05-21. ^ PHP RFC: Fix list() behavior inconsistency. php.net. Retrieved 2015-05-21. ^ PHP RFC: Remove alternative PHP tags. php.net. Retrieved 2015-05-21. ^ PHP RFC: Make defining multiple default cases in a switch a syntax error. php.net. Retrieved 2015-05-21. ^ PHP RFC: Remove hex support in numeric strings. php.net. Retrieved 2015-05-21. ^ a b PHP RFC: Integer Semantics. php.net. Retrieved 2015-05-21. Making NaN and Infinity always become zero when cast to integer means more cross-platform consistency, and is also less surprising than what is currently produces ^ PHP RFC: ZPP Failure on Overflow. php.net. Retrieved 2015-05-21. ^ a b c RFC: Return Types. php.net. 2015-01-27. Retrieved 2015-01-28. ^ a b c d e f RFC: Scalar Type Declarations. php.net. 2015-03-16. Retrieved 2015-03-17. ^ a b c d e f g h i j k l Brent. What's new in PHP 8. Stitcher. Retrieved 22 September 2020. ^ a b PHP 8 Released. PHP. Retrieved 27 November 2020. ^ a b PHP: rfc:jit. wiki.php.net. Retrieved 2019-04-05. ^ Brent. PHP 8: JIT performance in real-life web applications. Stitcher.io. Retrieved 4 October 2020. ^ Rethams, Derick. PHP 8: A Quick Look at JIT. ^ a b Popov, Nikita (13 July 2020). What's new in PHP 8.0? Nikita Popov. PHP fwdays. Archived from the original on 2021-12-11. Retrieved 4 October 2020. ^ Daniele, Carlo (25 May 2020). What's New in PHP 8 (Features, Improvements, and the JIT Compiler). Kinsta. Retrieved 24 December 2020. ^ Redmond, Paul (15 July 2020). Match Expression is Coming to PHP 8. Laravel News. Retrieved 4 October 2020. ^ PHP 8.0: Match Expressions. PHP Watch. Retrieved 4 October 2020. ^ Barnes, Eric (27 November 2020). PHP 8 is now Released!. Laravel News. Retrieved 24 December 2020. ^ a b PHP RFC: throw expression. wiki.php.net. Retrieved 14 August 2020. ^ a b PHP RFC: Nullsafe operator. wiki.php.net. Retrieved 14 August 2020. ^ Roose, Brent. PHP 8: Constructor property promotion. Retrieved 30 April 2024. ^ a b PHP: rfc:weakrefs. wiki.php.net. Retrieved 2019-04-05. ^ Merchant, Amit (13 June 2020). These new string functions are coming in PHP 8. Amit Merchant. Retrieved 4 October 2020. ^ Popov, Nikita. Call for participation: Annotating internal function argument and return types. Externals. Retrieved 19 November 2020. ^ PHP 8 ChangeLog. PHP.net. Retrieved 2024-01-05. ^ PHP: PHP 8.1.0 Release Announcement. PHP.net. Retrieved 2024-01-05. ^ PHP 8 ChangeLog. PHP.net. Retrieved 2024-01-05. ^ PHP: PHP 8.2.0 Release Announcement. PHP.net. Retrieved 2024-01-05. ^ a b c d e f g h i j k l Unsupported Branches. php.net. Retrieved 2019-07-31. ^ PHP 4.0.0 Released. Retrieved 25 October 2020. ^ a b c d PHP: PHP 4 ChangeLog. The PHP Group. 2008-01-03. Retrieved 2008-02-22. ^ PHP 4.1.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 4.2.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 4.3.0 Release Announcement. Retrieved 25 October 2020. ^ Using PHP from the command line. PHP Manual. The PHP Group. Retrieved 2009-09-11. ^ PHP 4.4.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 4.4.0 Release Announcement. PHP Manual. The PHP Group. Retrieved 2013-11-24. ^ PHP 5.0.0 Released!. Retrieved 25 October 2020. ^ a b c PHP: PHP 5 ChangeLog. The PHP Group. 2007-11-08. Retrieved 2008-02-22. ^ PHP 5.1.0 Release Announcement. Retrieved 25 October 2020. ^ PHP manual: PDO. The PHP Group. 2011-11-15. Retrieved 2011-11-15. ^ PHP 5.2.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 5.3.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 5.4.0 Release Announcement. Retrieved 25 October 2020. ^ Built-in web server. Retrieved March 26, 2012. ^ PHP 5.5.0 Release Announcement. Retrieved 25 October 2020. ^ a b c d Supported Versions. php.net. Retrieved 2017-12-13. ^ PHP 5.5.0 changes. php.net. Retrieved 2015-03-03. ^ PHP 5.6.0 Release Announcement. Retrieved 25 October 2020. ^ Migrating from PHP 5.5.x to PHP 5.6.x. php.net. Retrieved 2014-03-24. ^ Resetting PHP 6. There have been books on the shelves purporting to cover PHP 6 since at least 2008. But, in March 2010, the PHP 6 release is not out – in fact, it is not even close to out. Recent events suggest that PHP 6 will not be released before 2011 – if, indeed, it is released at all. ^ Krill, Paul (2014-10-31). PHP 7 moves full speed ahead. InfoWorld. Recent versions of PHP have been part of the 5.x release series, but there will be no PHP 6. We're going to skip [version] 6, because years ago, we had plans for a 6, but those plans were very different from what we're doing now, Gutmans said. Going right to version 7 avoids confusion. ^ News Archive – 2018: PHP 7.2.9 Released. php.net. 2018-08-16. Retrieved 2018-08-16. ^ PHP: rfc:size_t_and_int64_next. php.net. Retrieved 16 December 2014. ^ PHP: rfc:abstract_syntax_tree. php.net. Retrieved 16 December 2014. ^ PHP: rfc:closure_apply. php.net. Retrieved 16 December 2014. ^ PHP: rfc:integer_semantics. php.net. Retrieved 16 December 2014. ^ PHP: rfc:isset_ternary. php.net. Retrieved 16 December 2014. ^ RFC: Unicode Codepoint Escape Syntax. 2014-11-24. Retrieved 2014-12-19. ^ Combined Comparison (Spaceship) Operator. php.net. Retrieved 2015-05-21. ^ PHP RFC: Generator Delegation. php.net. Retrieved 2015-05-21. ^ PHP RFC: Anonymous Classes. php.net. Retrieved 2015-05-21. ^ PHP RFC: Easy User-land CSPRNG. php.net. Retrieved 2015-05-21. ^ PHP RFC: Group Use Declarations. php.net. Retrieved 2015-05-21. ^ PHP: rfc:iterable. php.net. 2016-06-10. Retrieved 2023-06-30. ^ PHP: rfc:nullable_types. php.net. 2014-04-10. Retrieved 2023-06-30. ^ PHP: rfc:void_return_type. php.net. 2015-11-09. Retrieved 2015-11-14. ^ PHP: rfc:class_constant_visibility. php.net. 2015-10-27. Retrieved 2015-12-08. ^ PHP: rfc:short_list_syntax. php.net. 2016-04-07. Retrieved 2023-06-30. ^ PHP: rfc:multiple-catch. php.net. 2016-03-06. Retrieved 2023-06-30. ^ PHP: rfc:object-typehint. wiki.php.net. ^ PHP: rfc:libsodium. wiki.php.net. ^ PHP: rfc:allow-abstract-function-override. wiki.php.net. ^ PHP: rfc:parameter-no-type-variance. wiki.php.net. ^ PHP: todo:php73. wiki.php.net. ^ PHP: rfc:flexible_heredoc_nowdoc_syntaxes. wiki.php.net. ^ PHP: rfc:list_reference_assignment. wiki.php.net. ^ PHP: rfc:pcre2-migration. wiki.php.net. ^ PHP: hrtime – Manual. php.net. ^ PHP 7.4.0 Released!. php.net. Retrieved 2019-11-28. ^ PHP: rfc:typed_properties_v2. wiki.php.net. Retrieved 2019-04-04. ^ PHP: rfc:preload. wiki.php.net. Retrieved 2019-04-04. ^ PHP: rfc:null_coalesce_equal_operator. wiki.php.net. Retrieved 2019-04-04. ^ PHP: rfc:improve-openssl-random-pseudo-bytes. wiki.php.net. Retrieved 2019-04-04. ^ PHP: rfc:ffi. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:permanent_hash_ext. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:password_registry. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:mb_str_split. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:reference_reflection. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:deprecate-and-remove-ext-wddx. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:custom_object_serialization. wiki.php.net. Retrieved 2019-04-05. ^ PHP: Supported Versions. php.net. Retrieved 2023-11-26. ^ PHP: rfc:negative_array_index. wiki.php.net. Retrieved 2019-04-05. ^ PHP RFC: Validation for abstract trait methods. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Saner string to number comparisons. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Saner numeric strings. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Stricter type checks for arithmetic/bitwise operators. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Reclassifying engine warnings. wiki.php.net. Retrieved 14 August 2020. ^ PHP: rfc:consistent_type_errors. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:lsp_errors. wiki.php.net. Retrieved 2019-05-26. ^ PHP RFC: Locale-independent float to string cast. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Variable Syntax Tweaks. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Attributes V2. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Attribute Amendments. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Shorter Attribute Syntax. wiki.php.net. Retrieved 2020-06-20. ^ PHP RFC: Shorter Attribute Syntax Change. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Named Arguments. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Match expression v2. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Constructor Property Promotion. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Union Types 2.0. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Mixed Type v2. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Static return type. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: non-capturing catches. wiki.php.net. Retrieved 14 August 2020. ^ Andre, Tyson. PHP RFC: Always available JSON extension. PHP. Retrieved 25 October 2020. ^ PHP: todo:php81. wiki.php.net. Retrieved 2022-06-16. ^ PHP RFC: Explicit octal integer literal notation. wiki.php.net. Retrieved 2020-11-25. ^ PHP RFC: Enumerations. wiki.php.net. Retrieved 2021-03-25. ^ PHP: rfc:readonly_properties_v2. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:first_class_callable_syntax. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:new_in_initializers. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:pure-intersection-types. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:noreturn_type. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:final_class_const. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:fibers. wiki.php.net. Retrieved 2021-11-26. ^ PHP: todo:php82. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:readonly_classes. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:null-false-standalone-types. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:true-type. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:strtolower-ascii. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:dnf_types. wiki.php.net. Retrieved 2023-02-07. ^ PHP: rfc:constants_in_traits. wiki.php.net. Retrieved 2023-02-07. ^ PHP 8.3.0 Released!. php.net. 23 November 2023. Retrieved 24 November 2023. ^ PHP: rfc:typed_class_constants. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:dynamic_class_constant_fetch. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:marking_overriden_methods. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:readonly_amendments. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:json_validate. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:randomizer_additions. wiki.php.net. Retrieved 2023-12-17. ^ PHP: todo: php84. php.net. 26 March 2024. Retrieved 26 March 2024. ^ PHP: ElePHPant. 4 Oct 2014. Retrieved 4 Oct 2014. ^ Redirecting…. wwphp-fb.github.io. ^ The PHP Mascot's Birth – Creator Of The elePHPant Vincent Pontier Reveals The True Story!. 7php.com. 2014-01-06. ^ ElePHPant. PHP.earth. Retrieved 2024-02-13. ^ PHP: ElePHPant. www.php.net. ^ A Field Guide to Elephpants. afieldguidetoelephpants.net. ^ tags – Manual. php.net. Retrieved 2014-02-17. ^ a b PHP: rfc:shortags. php.net. 2008-04-03. Retrieved 2014-05-08. ^ PHP: Basic syntax. The PHP Group. Retrieved 2008-02-22. ^ Basic Coding Standard. PHP Framework Interoperability Group. Retrieved 2016-01-03. ^ echo – Manual. php.net. Retrieved 2014-02-17. ^ Description of core php.ini directives – Manual. php.net. 2002-03-17. Retrieved 2014-02-17. ^ Your first PHP-enabled page. The PHP Group. Retrieved 2008-02-25. ^ Bray, Tim; et al. (26 November 2008). Processing Instructions. Extensible Markup Language (XML) 1.0 (Fifth Edition). W3C. Retrieved 2009-06-18. ^ Variables. The PHP Group. Retrieved 2008-03-16. ^ Instruction separation. The PHP Group. Retrieved 2008-03-16. ^ Comments. The PHP Group. Retrieved 2008-03-16. ^ Integers in PHP, running with scissors, and portability. MySQL Performance Blog. March 27, 2007. Retrieved 2007-03-28. ^ a b c d e Types. The PHP Group. Retrieved 2008-03-16. ^ Strings. The PHP Group. Retrieved 2008-03-21. ^ SPL – StandardPHPLibrary. PHP.net. March 16, 2009. Retrieved 2009-03-16. ^ a b User-defined functions (PHP manual). php.net. 2014-07-04. Retrieved 2014-07-07. ^ a b Variable functions (PHP manual). php.net. 2014-07-04. Retrieved 2014-07-07. ^ create_function() (PHP manual). php.net. 2022-04-06. Retrieved 2022-05-04. ^ Anonymous functions (PHP manual). php.net. 2014-07-04. Retrieved 2014-07-07. ^ Arrow Functions (PHP manual). php.net. Retrieved 2021-01-25. ^ Christian Seiler; Dmitry Stogov (2008-07-01). Request for Comments: Lambda functions and closures. php.net. Retrieved 2014-07-07. ^ a b PHP 5 Object References. mjtsai.com. Retrieved 2008-03-16. ^ Classes and Objects (PHP 5). The PHP Group. Retrieved 2008-03-16. ^ Object cloning. The PHP Group. Retrieved 2008-03-16. ^ Visibility (PHP Manual). theserverpages.com. 2005-05-19. Archived from the original on 2010-09-24. Retrieved 2010-08-26. ^ How do computer languages work?. Archived from the original on 2011-07-16. Retrieved 2009-11-04. ^ Gilmore, W. Jason (2006-01-23). Beginning PHP and MySQL 5: From Novice to Professional. Apress. p. 43. ISBN 1-59059-552-1. ^ Julien Pauli; Nikita Popov; Anthony Ferrara. PHP Internals Book. PHP Internals Book. Archived from the original on 2025-01-21. Retrieved 2025-01-21. ^ [VOTE] Integrating Zend Optimizer+ into the PHP distribution. news.php.net. Retrieved 2013-03-08. ^ Alternative PHP Cache. PHP.net. Archived from the original on 2013-11-15. Retrieved 2013-09-21. ^ We are the 98.5% (and the 16%) « HipHop Virtual Machine. hhvm.com. December 2013. Retrieved 2014-02-23. ^ The Definitive PHP 5.6, 7.0, 7.1, 7.2 & 7.3 Benchmarks (2019). 2019-01-14. Retrieved 2019-04-19. ^ Krill, Paul (2017-09-20). Forget PHP! Facebook's HHVM engine switches to Hack instead. InfoWorld. Retrieved 2019-02-06. ^ Announcement on GitHub removing HPHPc support. GitHub. Retrieved 2013-05-24. ^ The PHP License, version 3.01. Retrieved 2010-05-20. ^ GPL-Incompatible, Free Software Licenses. Various Licenses and Comments about Them. Free Software Foundation. Retrieved 2011-01-03. ^ PHP: Function and Method listing – Manual. The PHP Group. Retrieved 2015-01-14. ^ Introduction – Manual. php.net. 2013-06-07. Retrieved 2013-06-13. ^ Darryl Patterson (5 August 2004). Simplify Business Logic with PHP DataObjects — O'Reilly Media. ibm.com. Archived from the original on 16 December 2014. Retrieved 16 December 2014. ^ IBM — United States. Retrieved 16 December 2014. ^ Five common PHP database problems. ibm.com. 2006-08-01. Retrieved 2013-06-13. ^ IBM Redbooks — Developing PHP Applications for IBM Data Servers. redbooks.ibm.com. Retrieved 16 December 2014. ^ php[architect] Magazine – The Journal for PHP Programmers. www.phparch.com. ^ Krill, Paul (19 October 2005). PHP catching on at enterprises, vying with Java. InfoWorld. Archived from the original on 13 July 2014. ^ Cross Reference: /PHP_5_4/ext/standard/. php.net. Archived from the original on 16 March 2012. Retrieved 16 December 2014. ^ Developing Custom PHP Extensions. devnewz.com. 2002-09-09. Archived from the original on 2008-02-18. Retrieved 2008-02-25. ^ Why Zephir?. zephir-lang.com. 2015-10-20. Retrieved 2015-12-14. ^ PHP Credits. Retrieved 2018-12-16. ^ Learn PHP Via PHP Training and PHP Certification. www.zend.com. Retrieved 2020-11-16. ^ Walker, James (2021-12-13). What the New PHP Foundation Means for PHP's Future. How-To Geek. Retrieved 2023-11-26. ^ The New Life of PHP – The PHP Foundation | The PhpStorm Blog. The JetBrains Blog. 22 November 2021. Retrieved 2022-06-16. ^ The PHP Foundation: Impact and Transparency Report 2022. thephp.foundation. Retrieved 2023-11-27. ^ Pronskiy, Roman (2024-02-26). The PHP Foundation: Impact and Transparency Report 2023. The PHP Foundation. Retrieved 2024-04-01. ^ Anderson, Tim. PHP Foundation formed to fund core developers. www.theregister.com. Retrieved 2023-12-05. ^ Programming languages: This old favourite is gaining popularity again. ZDNET. Retrieved 2023-12-05. ^ PHP 8.1 Released With Enums, Read-Only Properties and Fibers. www.i-programmer.info. Retrieved 2023-12-05. ^ It's time for the PHP Foundation to #StopBreakingPHP. trongate.io. Retrieved 2023-11-27. ^ WordPress 6.4 PHP Compatibility. Make WordPress Hosting. 2023-11-16. Retrieved 2023-11-27. ^ PHP. Sovereign Tech Fund. Retrieved 2024-05-26. ^ a b General Installation Considerations. php.net. Retrieved 2013-09-22. ^ News Archive: PHP 5.3.3 Released!. php.net. 2010-07-22. ^ FastCGI Process Manager (FPM). php.net. Retrieved 2013-09-22. ^ Command line usage: Introduction. php.net. Retrieved 2013-09-22. ^ Command line usage: Differences to other SAPIs. php.net. Retrieved 2013-09-22. ^ a b General Installation Considerations. php.net. Retrieved 2013-09-22. ^ PHP: Apache 2.x on Microsoft Windows. php.net. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Command line usage: Introduction. php.net. Retrieved 2013-09-22. ^ Installing PHP-GTK 2. php.net. Archived from the original on 2013-12-12. Retrieved 2013-09-22. ^ AWS SDK for PHP. aws.amazon.com. Retrieved 2014-03-06. ^ Windows Azure SDK for PHP — Interoperability Bridges and Labs Center. interoperabilitybridges.com. Archived from the original on 2014-03-20. Retrieved 2014-03-06. ^ Runtime configuration: Table of contents. php.net. Retrieved 2013-09-22. ^ php.ini directives: List of php.ini directives. php.net. Retrieved 2013-09-22. ^ Runtime configuration: The configuration file. PHP.net. Retrieved 2013-09-22. ^ php.ini directives: List of php.ini sections. PHP.net. Retrieved 2013-09-22. ^ Runtime configuration: Where a configuration setting may be set. PHP.net. Retrieved 2013-09-22. ^ PHP Manual Image Processing and GD;. php.net. Retrieved 2011-04-09. ^ PHP Server-Side Scripting Language. Indiana University. 2007-04-04. Archived from the original on 2016-01-21. Retrieved 2008-02-25. ^ JavaServer Pages Technology — JavaServer Pages Comparing Methods for Server-Side Dynamic Content White Paper. Sun Microsystems. Retrieved 2008-02-25. ^ Five simple ways to tune your LAMP application. IBM. 2011-01-25. ^ PHP at the core: Extension structure. PHP.net. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ PHP at the core: The counter Extension – A Continuing Example. PHP.net. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Extension Writing Part I: Introduction to PHP and Zend. Zend Technologies. 2005-03-01. Archived from the original on 2013-09-24. Retrieved 2013-09-22. ^ Extension Writing Part II: Parameters, Arrays, and ZVALs. Zend Technologies. 2005-06-06. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Extension Writing Part II: Parameters, Arrays, and ZVALs (continued). Zend Technologies. 2005-06-06. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Extension Writing Part III: Resources. Zend Technologies. 2006-05-12. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Wrapping C++ Classes in a PHP Extension. Zend Technologies. 2009-04-22. Archived from the original on 2013-09-20. Retrieved 2013-09-22. ^ Extending PHP with C++?. Stack Overflow. Retrieved 2013-09-22. ^ How can I use C++ code to interact with PHP?. Stack Overflow. Retrieved 2013-09-22. ^ Golemon, Sara (2006). Extending and Embedding PHP. Sams. ISBN 978-0-672-32704-9. ^ Request #46919: Multithreading. PHP.net. Retrieved 2013-09-22. ^ pthreads: Introduction (PHP Manual). PHP.net. Retrieved 2013-09-22. ^ PECL :: Package :: pthreads. pecl.php.net. Retrieved 2014-02-09. ^ Manual:Installation requirements#PHP. MediaWiki. 2010-01-25. Retrieved 2010-02-26. PHP is the programming language in which MediaWiki is written [...] ^ About WordPress. Retrieved 2010-02-26. WordPress was [...] built on PHP ^ Kempkens, Alex. Joomla! — Content Management System to build websites & apps. ^ PHP and Drupal. Drupal.org. 16 September 2007. Archived from the original on 2010-02-08. Retrieved 2010-06-13. ^ About. Moodle.org. Archived from the original on 2010-01-11. Retrieved 2009-12-20. ^ Server requirements of SilverStripe. Archived from the original on 28 November 2014. Retrieved 13 October 2014. SilverStripe requires PHP 5.3.2+ ^ Ide, Andy (2013-01-31). PHP just grows & grows. Retrieved 2013-04-01. ^ Usage Statistics and Market Share of PHP Version 4 for Websites, January 2025. w3techs.com. ^ Usage Statistics and Market Share of PHP Version 5 for Websites, January 2025. w3techs.com. ^ Usage Statistics and Market Share of PHP Version 7 for Websites, January 2025. w3techs.com. ^ Usage Statistics and Market Share of PHP Version 8 for Websites, January 2025. w3techs.com. ^ National Vulnerability Database (NVD) Search Vulnerabilities Statistics. Retrieved 2019-11-22. ^ PHP-related vulnerabilities on the National Vulnerability Database. 2012-07-05. Archived from the original on 2009-06-28. Retrieved 2013-04-01. ^ Developer Meeting Notes, Nov. 2005. ^ Taint mode decision, November 2007. Archived from the original on 2009-02-26. ^ PHP: rfc:taint. wiki.php.net. ^ Hardened-PHP Project. 2008-08-15. Archived from the original on 2019-02-24. Retrieved 2019-08-22. ^ Snuffleupagus Documentation. ^ Security: Using Register Globals. PHP Manual. PHP.net. Archived from the original on 2013-09-27. Retrieved 2013-09-22. ^ Magic Quotes. PHP Manual. PHP.net. Archived from the original on 2014-02-08. Retrieved 2014-01-17. ^ 'engine' configuration directive. PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13. ^ PHP Security Exploit With GIF Images. 2007-06-22. Archived from the original on 2013-09-27. Retrieved 2013-09-22. ^ PHP security exploit with GIF images. PHP Classes blog. 2007-06-20. Retrieved 2013-09-22. ^ Passing Malicious PHP Through getimagesize(). 2007-06-04. Archived from the original on 2013-09-21. Retrieved 2013-09-22. ^ 'enable_dl' configuration directive. PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13. ^ PHP function reference: dl(). PHP.net. Retrieved 2013-09-22. ^ My host won't fix their Trojan. WebHosting Talk. Retrieved 2013-09-22. ^ Raz0r (25 January 2013). Simple Machines Forum <= 2.0.3 Admin Password Reset. Raz0R.name — Web Application Security.{{cite news}}: CS1 maint: numeric names: authors list (link) ^ Nibble Security. TYPO3-SA-2010-020, TYPO3-SA-2010-022 EXPLAINED. ^ Криптостойкость и небезопасное сравнение. ahack.ru (in Russian). Archived from the original on 4 July 2017. ^ Krawczyk, Pawel (2013). Most common attacks on web applications. IPSec.pl. Archived from the original on 2015-04-15. Retrieved 2015-04-15. ^ Krawczyk, Pawel (2013). So what are the most critical application flaws? On new OWASP Top 10. IPSec.pl. Retrieved 2015-04-15. ^ PHP: Rand – Manual. ^ PHP: Mt_rand - Manual. ^ PHP: Random_int – Manual. ^ Argyros, George; Kiayias, Aggelos (10 August 2012). I Forgot Your Password: Randomness Attacks Against PHP Applications. usenix.org. USENIX. Retrieved 19 April 2024. ^ PHP: RFC:release_cycle_update. ^ PHP Support for PHP 7.2 – 8.0 | PHP LTS | Zend by Perforce. Retrieved 2024-05-23. ^ Pagely PHP Long Term Support Page. Pagely. Retrieved 2024-09-14.",
    "further_reading": "Listen to this article (35 minutes) This audio file was created from a revision of this article dated 23 November 2011 (2011-11-23), and does not reflect subsequent edits.(Audio help · More spoken articles) Ford, Paul (June 11, 2015). What is Code?. Bloomberg Businessweek. What's the Absolute Minimum I Must Know About PHP?",
    "external_links": "Official website Links to related articles vtePHPPeople Andi Gutmans Rasmus Lerdorf Zeev Suraski Resources Accelerator (List) Composer Editors Libraries PEAR Implementations HHVM HPHPc Parrot PeachPie Phalanger Quercus Zend Engine Web frameworks CakePHP CodeIgniter Drupal eZ Publish Fat-Free Flow FuelPHP Grav Gyroscope Horde Joomla! Laminas Laravel li₃ Midgard MODX Nette Phalcon PHP-Fusion PHP-Nuke Pop PHP PRADO ProcessWire Qcodo Silverstripe Symfony TYPO3 WordPress XOOPS Yii Testing Behat PHPUnit ORMs Doctrine IDEs Aptana Codelobster Eclipse PDT NetBeans PHPEdit PhpStorm Zend Studio Widget toolkit PHP-GTK wxPHP Category Commons vteWeb interfacesServer-sideProtocols HTTP v2 v3 Encryption WebDAV CGI SCGI FCGI AJP WSRP WebSocket Server APIs C NSAPI C ASAPI C ISAPI COM ASP Jakarta Servlet container CLI OWIN ASP.NET Handler Python WSGI Python ASGI Ruby Rack JavaScript JSGI Perl PSGI Portlet container Apache modules mod_include mod_jk mod_lisp mod_mono mod_parrot mod_perl mod_php mod_proxy mod_python mod_wsgi mod_ruby Phusion Passenger Topics Web service vs. Web resource WOA vs. ROA Open API Webhook Application server comparison Scripting Client-sideBrowser APIs C NPAPI LiveConnect XPConnect C NPRuntime C PPAPI NaCl ActiveX BHO XBAP Web APIsWHATWG Audio Canvas DOM SSE Video WebSockets Web messaging Web storage Web worker XMLHttpRequest W3C DOM events EME File Geolocation IndexedDB MSE SVG WebAssembly WebAuthn WebGPU WebRTC WebXR Khronos WebCL WebGL Others Gears Web SQL Database (formerly W3C) WebUSB Topics Ajax and Remote scripting vs. DHTML Browser extension Cross-site scripting and CORS Hydration Mashup Persistent data Web IDL Scripting Related topics Frontend and backend Microservices REST GraphQL Push technology Solution stack Web page Static Dynamic Web standards Web API security Web application Rich Single-page Progressive Web framework vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteFree and open-source softwareGeneral Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Softwarepackages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category PHP at Wikipedia's sister projects:Media from CommonsTextbooks from WikibooksResources from WikiversityDocumentation from MediaWiki Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherELMCIP",
    "document": "Rasmus Lerdorf, creator of PHP; and Andi Gutmans and Zeev Suraski, creators of the Zend Engine PHP development began in 1993 when Rasmus Lerdorf wrote several Common Gateway Interface (CGI) programs in C, which he used to maintain his personal homepage. He extended them to work with web forms and to communicate with databases, and called this implementation Personal Home Page/Forms Interpreter or PHP/FI. An example of the early PHP syntax: <!--include /text/header.html--> <!--getenv HTTP_USER_AGENT--> <!--if substr $exec_result Mozilla--> Hey, you are using Netscape!<p> <!--endif--> <!--sql database select * from table where user='$username'--> <!--ifless $numentries 1--> Sorry, that record does not exist<p> <!--endif exit--> Welcome <!--$user-->!<p> You have <!--$index:0--> credits left in your account.<p> <!--include /text/footer.html--> PHP/FI could be used to build simple, dynamic web applications. To accelerate bug reporting and improve the code, Lerdorf initially announced the release of PHP/FI as Personal Home Page Tools (PHP Tools) version 1.0 on the Usenet discussion group comp.infosystems.www.authoring.cgi on 8 June 1995. This release included basic functionality such as Perl-like variables, form handling, and the ability to embed HTML. By this point, the syntax had changed to resemble that of Perl, but was simpler, more limited, and less consistent. Early PHP was never intended to be a new programming language; rather, it grew organically, with Lerdorf noting in retrospect: I don't know how to stop it [...] there was never any intent to write a programming language [...] I have absolutely no idea how to write a programming language [...] I just kept adding the next logical step on the way. A development team began to form and, after months of work and beta testing, officially released PHP/FI 2 in November 1997. The fact that PHP was not originally designed, but instead was developed organically has led to inconsistent naming of functions and inconsistent ordering of their parameters. In some cases, the function names were chosen to match the lower-level libraries which PHP was wrapping, while in some very early versions of PHP the length of the function names was used internally as a hash function, so names were chosen to improve the distribution of hash values. This is an example of PHP code for the WordPress content management system. Zeev Suraski and Andi Gutmans rewrote the parser in 1997 and formed the base of PHP 3, changing the language's name to the recursive acronym PHP: Hypertext Preprocessor. Afterwards, public testing of PHP 3 began, and the official launch came in June 1998. Suraski and Gutmans then started a new rewrite of PHP's core, producing the Zend Engine in 1999. They also founded Zend Technologies in Ramat Gan, Israel. On 22 May 2000, PHP 4, powered by the Zend Engine 1.0, was released. By August 2008, this branch had reached version 4.4.9. PHP 4 is now no longer under development and nor are any security updates planned to be released. PHP 8.4 was released on November 21, 2024. PHP received mixed reviews due to lacking native Unicode support at the core language level. In 2005, a project headed by Andrei Zmievski was initiated to bring native Unicode support throughout PHP, by embedding the International Components for Unicode (ICU) library, and representing text strings as UTF-16 internally. Since this would cause major changes both to the internals of the language and to user code, it was planned to release this as version 6.0 of the language, along with other major features then in development. However, a shortage of developers who understood the necessary changes, and performance problems arising from conversion to and from UTF-16, which is rarely used in a web context, led to delays in the project. As a result, a PHP 5.3 release was created in 2009, with many non-Unicode features back-ported from PHP 6, notably namespaces. In March 2010, the project in its current form was officially abandoned, and a PHP 5.4 release was prepared to contain most remaining non-Unicode features from PHP 6, such as traits and closure re-binding. Initial hopes were that a new plan would be formed for Unicode integration, but by 2014 none had been adopted.[citation needed] Just-in-time compilation is supported in PHP 8. PHP 8's JIT compiler can provide substantial performance improvements for some use cases, while (then PHP) developer Nikita Popov stated that the performance improvements for most websites will be less substantial than the upgrade from PHP 5 to PHP 7. Substantial improvements are expected more for mathematical-type operations than for common web-development use cases. Additionally, the JIT compiler provides the future potential to move some code from C to PHP, due to the performance improvements for some use cases. Main article: PHP syntax and semantics § Match expression PHP 8 introduced the match expression. The match expression is conceptually similar to a switch statement and is more compact for some use cases. Because match is an expression, its result can be assigned to a variable or returned from a function. PHP 8 introduced union types, a new static return type, and a new mixed type. Attributes, often referred to as annotations in other programming languages, were added in PHP 8, which allow metadata to be added to classes. throw was changed from being a statement to being an expression. This allows exceptions to be thrown in places that were not previously possible. PHP 8 includes changes to allow alternate, more concise, or more consistent syntaxes in a number of scenarios. For example, the nullsafe operator is similar to the null coalescing operator ??, but used when calling methods. The following code snippet will not throw an error if getBirthday() returns null: $human_readable_date = $user->getBirthday()?->diffForHumans(); Constructor property promotion has been added as syntactic sugar, allowing class properties to be set automatically when parameters are passed into a class constructor. This reduces the amount of boilerplate code that must be written. Other minor changes include support for use of ::class on objects, which serves as an alternative for the use of get_class(); non-capturing catches in try-catch blocks; variable syntax tweaks to resolve inconsistencies; support for named arguments; and support for trailing commas in parameter lists, which adds consistency with support for trailing commas in other contexts, such as in arrays. Weak maps were added in PHP 8. A WeakMap holds references to objects, but these references do not prevent such objects from being garbage collected. This can provide performance improvements in scenarios where data is being cached; this is of particular relevance for object–relational mappings (ORM). Various adjustments to interfaces, such as adding support for creating DateTime objects from interfaces, and the addition of a Stringable interface that can be used for type hinting. Various new functions including str_contains(), str_starts_with(), and str_ends_with(); fdiv(); get_debug_type(); and get_resource_id() Object implementation of token_get_all() Type annotations were also added into PHP's C source code itself to allow internal functions and methods to have complete type information in reflection. Inheritance with private methods Abstract methods in traits improvements Version Release date Supported until Notes Old version, not maintained: 1.0 8 June 1995 Officially called Personal Home Page Tools (PHP Tools). This is the first use of the name PHP. Old version, not maintained: 2.0 1 November 1997 Officially called PHP/FI 2.0. This is the first release that could actually be characterised as PHP, being a standalone language with many features that have endured to the present day. Old version, not maintained: 3.0 6 June 1998 20 October 2000 Development moves from one person to multiple developers. Zeev Suraski and Andi Gutmans rewritten the base for this version. Old version, not maintained: 4.0 22 May 2000 23 June 2001 Added more advanced two-stage parse/execute tag-parsing system called the Zend engine. Old version, not maintained: 4.1 10 December 2001 12 March 2002 Introduced superglobals ($_GET, $_POST, $_SESSION, etc.) Old version, not maintained: 4.2 22 April 2002 6 September 2002 Disabled register_globals by default. Data received over the network is not inserted directly into the global namespace anymore, closing possible security holes in applications. Old version, not maintained: 4.3 27 December 2002 31 March 2005 Introduced the command-line interface (CLI), to supplement the CGI. Old version, not maintained: 4.4 11 July 2005 7 August 2008 Fixed a memory corruption bug, which required breaking binary compatibility with extensions compiled against PHP version 4.3.x. Old version, not maintained: 5.0 13 July 2004 5 September 2005 Zend Engine II with a new object model. Old version, not maintained: 5.1 24 November 2005 24 August 2006 Performance improvements with the introduction of compiler variables in re-engineered PHP Engine. Added PHP Data Objects (PDO) as a consistent interface for accessing databases. Old version, not maintained: 5.2 2 November 2006 6 January 2011 Enabled the filter extension by default. Native JSON support. Old version, not maintained: 5.3 30 June 2009 14 August 2014 Namespace support; late static bindings, jump label (limited goto), anonymous functions, closures, PHP archives (phar), garbage collection for circular references, improved Windows support, sqlite3, mysqlnd as a replacement for libmysql as the underlying library for the extensions that work with MySQL, fileinfo as a replacement for mime_magic for better MIME support, the Internationalization extension, and deprecation of ereg extension. Old version, not maintained: 5.4 1 March 2012 3 September 2015 Trait support, short array syntax support. Removed items: register_globals, safe_mode, allow_call_time_pass_reference, session_register(), session_unregister() and session_is_registered(). Built-in web server. Several improvements to existing features, performance and reduced memory requirements. Old version, not maintained: 5.5 20 June 2013 10 July 2016 Support for generators, finally blocks for exceptions handling, OpCache (based on Zend Optimizer+) bundled in official distribution. Old version, not maintained: 5.6 28 August 2014 31 December 2018 Constant scalar expressions, variadic functions, argument unpacking, new exponentiation operator, extensions of the use statement for functions and constants, new phpdbg debugger as a SAPI module, and other smaller improvements. 6.x Not released — Abandoned version of PHP that planned to include native Unicode support. Old version, not maintained: 7.0 3 December 2015 10 January 2019 Zend Engine 3 (performance improvements and 64-bit integer support on Windows), uniform variable syntax, AST-based compilation process, added Closure::call(), bitwise shift consistency across platforms, ?? (null coalesce) operator, Unicode code point escape syntax, return type declarations, scalar type (integer, float, string and boolean) declarations, <=> spaceship three-way comparison operator, generator delegation, anonymous classes, simpler and more consistently available CSPRNG API, replacement of many remaining internal PHP errors with the more modern exceptions, and shorthand syntax for importing multiple items from a namespace. Old version, not maintained: 7.1 1 December 2016 1 December 2019 iterable type, nullable types, void return type, class constant visibility modifiers, short list syntax, multi-catch Old version, not maintained: 7.2 30 November 2017 30 November 2020 Object parameter and return type declaration, libsodium extension, abstract method overriding, parameter type widening Old version, not maintained: 7.3 6 December 2018 6 December 2021 Flexible Heredoc and Nowdoc syntax, support for reference assignment and array deconstruction with list(), PCRE2 support, hrtime function Old version, not maintained: 7.4 28 November 2019 28 November 2022 Typed properties 2.0, preloading, null-coalescing assignment operator, improve openssl_random_pseudo_bytes, weak references, foreign function interface (FFI), always available hash extension, password hash registry, multibyte string splitting, reflection for references, unbundle ext/wddx, new custom object serialization mechanism Old version, not maintained: 8.0 26 November 2020 26 November 2023 Just-In-Time (JIT) compilation, arrays starting with a negative index, stricter/saner language semantics (validation for abstract trait methods), saner string to number comparisons, saner numeric strings, TypeError on invalid arithmetic/bitwise operators, reclassification of various engine errors, consistent type errors for internal functions, fatal error for incompatible method signatures), locale-independent float to string conversion, variable syntax tweaks, attributes, named arguments, match expression, constructor property promotion, union types, mixed type, static return type, nullsafe operator, non-capturing catches, throw expression, JSON extension is always available. Old version, still maintained: 8.1 25 November 2021 31 December 2025 Explicit octal integer literal notation, enumerations, read-only properties, first-class callable syntax, new in initializers, pure intersection types, never return type, final class constraints, fibers Old version, still maintained: 8.2 8 December 2022 31 December 2026 Readonly classes, null, false, and true as stand-alone types, locale-independent case conversion, disjunctive normal form types, constants in traits Old version, still maintained: 8.3 23 November 2023 31 December 2027 Typed class constants, dynamic class constant fetch, #[\\Override] attribute, deep-cloning of read-only properties, new json_validate function, randomizer additions, the command-line linter supports multiple files Latest version: 8.4 21 November 2024 31 December 2028 Property hooks, asymmetric visibility, an updated DOM API, performance improvements, bug fixes, and general cleanup. Legend:Old version, not maintainedOld version, still maintainedLatest versionLatest preview versionFuture version Beginning on 28 June 2011, the PHP Development Team implemented a timeline for the release of new versions of PHP. Under this system, at least one release should occur every month. Once per year, a minor release should occur which may include new features. Every minor release should at least be supported for two years with security and bug fixes, followed by at least one year of only security fixes, for a total of a three-year release process for every minor release. No new features, unless small and self-contained, are to be introduced into a minor release during the three-year release process. The elePHPant, PHP mascot The mascot of the PHP project is the elePHPant, a blue elephant with the PHP logo on its side, designed by Vincent Pontier in 1998. The (PHP) letters were forming the shape of an elephant if viewed in a sideways angle. The elePHPant is sometimes differently coloured when in plush toy form. Many variations of this mascot have been made over the years. Only the elePHPants based on the original design by Vincent Pontier are considered official by the community. These are collectable and some of them are extremely rare. Main article: PHP syntax and semantics A Hello, World application in PHP 7.4 running on its built-in development server The following Hello, World! program is written in PHP code embedded in an HTML document: <!DOCTYPE html> <html> <head> <title>PHP Hello, World! program</title> </head> <body> <p><?= 'Hello, World!' ?></p> </body> </html> However, as no requirement exists for PHP code to be embedded in HTML, the simplest version of Hello, World! may be written like this, with the closing tag ?> omitted as preferred in files containing pure PHP code. <?php echo 'Hello, World!'; The PHP interpreter only executes PHP code within its delimiters. Anything outside of its delimiters is not processed by PHP, although the non-PHP text is still subject to control structures described in PHP code. The most common delimiters are <?php to open and ?> to close PHP sections. The shortened form <? also exists. This short delimiter makes script files less portable since support for them can be disabled in the local PHP configuration and it is therefore discouraged. Conversely, there is no recommendation against the echo short tag <?=. Prior to PHP 5.4.0, this short syntax for echo only works with the short_open_tag configuration setting enabled, while for PHP 5.4.0 and later it is always available. The purpose of all these delimiters is to separate PHP code from non-PHP content, such as JavaScript code or HTML markup. So the shortest Hello, World! program written in PHP is: <?='Hello, World!'; The first form of delimiters, <?php and ?>, in XHTML and other XML documents, creates correctly formed XML processing instructions. This means that the resulting mixture of PHP code and other markups in the server-side file is itself well-formed XML. Variables are prefixed with a dollar symbol, and a type does not need to be specified in advance. PHP 5 introduced type declarations that allow functions to force their parameters to be objects of a specific class, arrays, interfaces or callback functions. However, before PHP 7, type declarations could not be used with scalar types such as integers or strings. Below is an example of how PHP variables are declared and initialized. <?php $name = 'John'; // variable of string type being declared and initialized $age = 18; // variable of integer type being declared and initialized $height = 5.3; // variable of double type being declared and initialized echo $name . ' is ' . $height . m tall\\n; // concatenating variables and strings echo $name is $age years old.; // interpolating variables to string ?> Unlike function and class names, variable names are case-sensitive. Both double-quoted () and heredoc strings provide the ability to interpolate a variable's value into the string. PHP treats newlines as whitespace in the manner of a free-form language, and statements are terminated by a semicolon. PHP has three types of comment syntax: /* */ marks block and inline comments; // or # are used for one-line comments. The echo statement is one of several facilities PHP provides to output text.[citation needed] In terms of keywords and language syntax, PHP is similar to C-style syntax. if conditions, for and while loops and function returns are similar in syntax to languages such as C, C++, C#, Java and Perl.[citation needed] PHP is loosely typed. It stores integers in a platform-dependent range, either as a 32, 64 or 128-bit signed integer equivalent to the C-language long type. Unsigned integers are converted to signed values in certain situations, which is different behaviour to many other programming languages. Integer variables can be assigned using decimal (positive and negative), octal, hexadecimal, and binary notations.[citation needed] Floating-point numbers are also stored in a platform-specific range. They can be specified using floating-point notation, or two forms of scientific notation. PHP has a native Boolean type that is similar to the native Boolean types in Java and C++. Using the Boolean type conversion rules, non-zero values are interpreted as true and zero as false, as in Perl and C++. The null data type represents a variable that has no value; NULL is the only allowed value for this data type. Variables of the resource type represent references to resources from external sources. These are typically created by functions from a particular extension, and can only be processed by functions from the same extension; examples include file, image, and database resources. Arrays can contain elements of any type that PHP can handle, including resources, objects, and even other arrays. Order is preserved in lists of values and in hashes with both keys and values, and the two can be intermingled. PHP also supports strings, which can be used with single quotes, double quotes, nowdoc or heredoc syntax. The Standard PHP Library (SPL) attempts to solve standard problems and implements efficient data access interfaces and classes. PHP defines a large array of functions in the core language and many are also available in various extensions; these functions are well documented online PHP documentation. However, the built-in library has a wide variety of naming conventions and associated inconsistencies, as described under history above. Custom functions may be defined by the developer: function myAge(int $birthYear): string { // calculate the age by subtracting the birth year from the current year. $yearsOld = date('Y') - $birthYear; // return the age in a descriptive string. return $yearsOld . ($yearsOld == 1 ? ' year' : ' years'); } echo 'I am currently ' . myAge(1995) . ' old.'; As of 2025, the output of the above sample program is I am currently 30 years old. In lieu of function pointers, functions in PHP can be referenced by a string containing their name. In this manner, normal PHP functions can be used, for example, as callbacks or within function tables. User-defined functions may be created at any time without being prototyped. Functions may be defined inside code blocks, permitting a run-time decision as to whether or not a function should be defined. There is a function_exists function that determines whether a function with a given name has already been defined. Function calls must use parentheses, with the exception of zero-argument class constructor functions called with the PHP operator new, in which case parentheses are optional.[citation needed] Since PHP 4.0.1 create_function(), a thin wrapper around eval(), allowed normal PHP functions to be created during program execution; it was deprecated in PHP 7.2 and removed in PHP 8.0 in favor of syntax for anonymous functions or closures that can capture variables from the surrounding scope, which was added in PHP 5.3. Shorthand arrow syntax was added in PHP 7.4: function getAdder($x) { return fn($y) => $x + $y; } $adder = getAdder(8); echo $adder(2); // prints 10 In the example above, getAdder() function creates a closure using passed argument $x, which takes an additional argument $y, and returns the created closure to the caller. Such a function is a first-class object, meaning that it can be stored in a variable, passed as a parameter to other functions, etc. Unusually for a dynamically typed language, PHP supports type declarations on function parameters, which are enforced at runtime. This has been supported for classes and interfaces since PHP 5.0, for arrays since PHP 5.1, for callables since PHP 5.4, and scalar (integer, float, string and boolean) types since PHP 7.0. PHP 7.0 also has type declarations for function return types, expressed by placing the type name after the list of parameters, preceded by a colon. For example, the getAdder function from the earlier example could be annotated with types like so in PHP 7: function getAdder(int $x): Closure { return fn(int $y): int => $x + $y; } $adder = getAdder(8); echo $adder(2); // prints 10 echo $adder(null); // throws an exception because an incorrect type was passed $adder = getAdder([]); // would also throw an exception By default, scalar type declarations follow weak typing principles. So, for example, if a parameter's type is int, PHP would allow not only integers, but also convertible numeric strings, floats or Booleans to be passed to that function, and would convert them. However, PHP 7 has a strict typing mode which, when used, disallows such conversions for function calls and returns within a file. Basic object-oriented programming functionality was added in PHP 3 and improved in PHP 4. This allowed for PHP to gain further abstraction, making creative tasks easier for programmers using the language. Object handling was completely rewritten for PHP 5, expanding the feature set and enhancing performance. In previous versions of PHP, objects were handled like value types. The drawback of this method was that code had to make heavy use of PHP's reference variables if it wanted to modify an object it was passed rather than creating a copy of it. In the new approach, objects are referenced by handle, and not by value.[citation needed] PHP 5 introduced private and protected member variables and methods, along with abstract classes, final classes, abstract methods, and final methods. It also introduced a standard way of declaring constructors and destructors, similar to that of other object-oriented languages such as C++, and a standard exception handling model. Furthermore, PHP 5 added interfaces and allowed for multiple interfaces to be implemented. There are special interfaces that allow objects to interact with the runtime system. Objects implementing ArrayAccess can be used with array syntax and objects implementing Iterator or IteratorAggregate can be used with the foreach language construct. There is no virtual table feature in the engine, so static variables are bound with a name instead of a reference at compile time. If the developer creates a copy of an object using the reserved word clone, the Zend engine will check whether a __clone() method has been defined. If not, it will call a default __clone() which will copy the object's properties. If a __clone() method is defined, then it will be responsible for setting the necessary properties in the created object. For convenience, the engine will supply a function that imports the properties of the source object, so the programmer can start with a by-value replica of the source object and only override properties that need to be changed. The visibility of PHP properties and methods is defined using the keywords public, private, and protected. The default is public, if only var is used; var is a synonym for public. Items declared public can be accessed everywhere. protected limits access to inherited classes (and to the class that defines the item). private limits visibility only to the class that defines the item. Objects of the same type have access to each other's private and protected members even though they are not the same instance.[citation needed] The following is a basic example of object-oriented programming in PHP 8: <?php abstract class User { protected string $name; public function __construct(string $name) { // make first letter uppercase and the rest lowercase $this->name = ucfirst(strtolower($name)); } public function greet(): string { return Hello, my name is  . $this->name; } abstract public function job(): string; } class Student extends User { public function __construct(string $name, private string $course) { parent::__construct($name); } public function job(): string { return I learn  . $this->course; } } class Teacher extends User { public function __construct(string $name, private array $teachingCourses) { parent::__construct($name); } public function job(): string { return I teach  . implode(, , $this->teachingCourses); } } $students = [ new Student(Alice, Computer Science), new Student(Bob, Computer Science), new Student(Charlie, Business Studies), ]; $teachers = [ new Teacher(Dan, [Computer Science, Information Security]), new Teacher(Erin, [Computer Science, 3D Graphics Programming]), new Teacher(Frankie, [Online Marketing, Business Studies, E-commerce]), ]; foreach ([$students, $teachers] as $users) { echo $users::class . s:\\n; array_walk($users, function (User $user) { echo {$user->greet()}, {$user->job()}\\n; }); } This program outputs the following: Students: Hello, my name is Alice, I learn Computer Science Hello, my name is Bob, I learn Computer Science Hello, my name is Charlie, I learn Business Studies Teachers: Hello, my name is Dan, I teach Computer Science, Information Security Hello, my name is Erin, I teach Computer Science, 3D Graphics Programming Hello, my name is Frankie, I teach Online Marketing, Business Studies, E-commerce The only complete PHP implementation is the original, known simply as PHP. It is the most widely used and is powered by the Zend Engine. To disambiguate it from other implementations, it is sometimes unofficially called Zend PHP. The Zend Engine compiles PHP source code on-the-fly into an internal format that it can execute, thus it works as an interpreter. It is also the reference implementation of PHP, as PHP has no formal specification, and so the semantics of Zend PHP define the semantics of PHP. Due to the complex and nuanced semantics of PHP, defined by how Zend works, it is difficult for competing implementations to offer complete compatibility. PHP's single-request-per-script-execution model, and the fact that the Zend Engine is an interpreter, leads to inefficiency; as a result, various products have been developed to help improve PHP performance. In order to speed up execution time and not have to compile the PHP source code every time the web page is accessed, PHP scripts can also be deployed in the PHP engine's internal format by using an opcode cache, which works by caching the compiled form of a PHP script (opcodes) in shared memory to avoid the overhead of parsing and compiling the code every time the script runs. An opcode cache, Zend Opcache, is built into PHP since version 5.5. Another example of a widely used opcode cache is the Alternative PHP Cache (APC), which is available as a PECL extension. While Zend PHP is still the most popular implementation, several other implementations have been developed. Some of these are compilers or support JIT compilation, and hence offer performance benefits over Zend PHP at the expense of lacking full PHP compatibility.[citation needed] Alternative implementations include the following: HHVM (HipHop Virtual Machine) – developed at Facebook and available as open source, it converts PHP code into a high-level bytecode (commonly known as an intermediate language), which is then translated into x86-64 machine code dynamically at runtime by a just-in-time (JIT) compiler, resulting in up to 6× performance improvements. However, since version 7.2 Zend has outperformed HHVM, and HHVM 3.24 is the last version to officially support PHP. HipHop – developed at Facebook and available as open source, it transforms the PHP scripts into C++ code and then compiles the resulting code, reducing the server load up to 50%. In early 2013, Facebook deprecated it in favour of HHVM due to multiple reasons, including deployment difficulties and lack of support for the whole PHP language, including the create_function() and eval() constructs. Parrot – a virtual machine designed to run dynamic languages efficiently; the cross-translator Pipp transforms the PHP source code into the Parrot intermediate representation, which is then translated into the Parrot's bytecode and executed by the virtual machine. PeachPie – a second-generation compiler to .NET Common Intermediate Language (CIL) bytecode, built on the Roslyn platform; successor of Phalanger, sharing several architectural components Phalanger – compiles PHP into .Net Common Intermediate Language bytecode; predecessor of PeachPie Quercus – compiles PHP into Java bytecode Main article: PHP License PHP is free software released under the PHP License, which stipulates that: Products derived from this software may not be called PHP, nor may PHP appear in their name, without prior written permission from group@php.net. You may indicate that your software works in conjunction with PHP by saying Foo for PHP instead of calling it PHP Foo or phpfoo. This restriction on the use of PHP makes the PHP License incompatible with the GNU General Public License (GPL), while the Zend License is incompatible due to an advertising clause similar to that of the original BSD license. PHP includes various free and open-source libraries in its source distribution or uses them in resulting PHP binary builds. PHP is fundamentally an Internet-aware system with built-in modules for accessing File Transfer Protocol (FTP) servers and many database servers, including PostgreSQL, MySQL, Microsoft SQL Server and SQLite (which is an embedded database), LDAP servers, and others. Numerous functions are familiar to C programmers, such as those in the stdio family, are available in standard PHP builds. PHP allows developers to write extensions in C to add functionality to the PHP language. PHP extensions can be compiled statically into PHP or loaded dynamically at runtime. Numerous extensions have been written to add support for the Windows API, process management on Unix-like operating systems, multibyte strings (Unicode), cURL, and several popular compression formats. Other PHP features made available through extensions include integration with Internet Relay Chat (IRC), dynamic generation of images and Adobe Flash content, PHP Data Objects (PDO) as an abstraction layer used for accessing databases, and even speech synthesis. Some of the language's core functions, such as those dealing with strings and arrays, are also implemented as extensions. The PHP Extension Community Library (PECL) project is a repository for extensions to the PHP language. Some other projects, such as Zephir, provide the ability for PHP extensions to be created in a high-level language and compiled into native PHP extensions. Such an approach, instead of writing PHP extensions directly in C, simplifies the development of extensions and reduces the time required for programming and testing. By December 2018 the PHP Group consisted of ten people: Thies C. Arntzen, Stig Bakken, Shane Caraveo, Andi Gutmans, Rasmus Lerdorf, Sam Ruby, Sascha Schumann, Zeev Suraski, Jim Winstead, and Andrei Zmievski. Zend Technologies provides a PHP Certification based on PHP 8 exam (and previously based on PHP 7 and 5.5) for programmers to become certified PHP developers. PHPFormationNovember 22, 2021; 3 years ago (2021-11-22)FounderAutomattic, Laravel, Acquia, Zend, Private Packagist, Symfony, Craft CMS, Tideways, PrestaShop, JetBrainsWebsitehttps://thephp.foundation On 26 November 2021, the JetBrains blog announced the creation of The PHP Foundation, which will sponsor the design and development of PHP. Year Commits Reviews RFCs 2022 683 283 8 2023 784 702 17 The foundation hires Core Developers to work on the PHP language's core repository. Roman Pronskiy, a member of the foundation's board, said that they aim to pay market salaries to developers. The response to the foundation has mostly been positive, with the foundation being praised for better supporting the language and helping to stop the decrease in the language's popularity. However, it has also been criticised for adding breaking changes to minor versions of PHP, such as in PHP 8.2 where initialising members of a class out-with the original class scope would cause deprecation errors, these changes impacted a number of open source projects including WordPress. Germany's Sovereign Tech Fund provided more than 200,000 Euros to support the PHP Foundation. Example output of the phpinfo() function in PHP 7.1 There are two primary ways for adding support for PHP to a web server – as a native web server module, or as a CGI executable. PHP has a direct module interface called server application programming interface (SAPI), which is supported by many web servers including Apache HTTP Server, Microsoft IIS and iPlanet Web Server. Some other web servers, such as OmniHTTPd, support the Internet Server Application Programming Interface (ISAPI), which is Microsoft's web server module interface. If PHP has no module support for a web server, it can always be used as a Common Gateway Interface (CGI) or FastCGI processor; in that case, the web server is configured to use PHP's CGI executable to process all requests to PHP files. PHP-FPM (FastCGI Process Manager) is an alternative FastCGI implementation for PHP, bundled with the official PHP distribution since version 5.3.3. When compared to the older FastCGI implementation, it contains some additional features, mostly useful for heavily loaded web servers. When using PHP for command-line scripting, a PHP command-line interface (CLI) executable is needed. PHP supports a CLI server application programming interface (SAPI) since PHP 4.3.0. The main focus of this SAPI is developing shell applications using PHP. There are quite a few differences between the CLI SAPI and other SAPIs, although they do share many of the same behaviours. PHP has a direct module interface called SAPI for different web servers; in case of PHP 5 and Apache 2.0 on Windows, it is provided in form of a DLL file called php5apache2.dll, which is a module that, among other functions, provides an interface between PHP and the web server, implemented in a form that the server understands. This form is what is known as a SAPI.[citation needed] There are different kinds of SAPIs for various web server extensions. For example, in addition to those listed above, other SAPIs for the PHP language include the Common Gateway Interface and command-line interface. PHP can also be used for writing desktop graphical user interface (GUI) applications, by using the PHP Desktop. GitHub. or discontinued PHP-GTK extension. PHP-GTK is not included in the official PHP distribution, and as an extension, it can be used only with PHP versions 5.1.0 and newer. The most common way of installing PHP-GTK is by compiling it from the source code. When PHP is installed and used in cloud environments, software development kits (SDKs) are provided for using cloud-specific features.[citation needed] For example: Amazon Web Services provides the AWS SDK for PHP Microsoft Azure can be used with the Windows Azure SDK for PHP. Numerous configuration options are supported, affecting both core PHP features and extensions. Configuration file php.ini is searched for in different locations, depending on the way PHP is used. The configuration file is split into various sections, while some of the configuration options can be also set within the web server configuration. A broad overview of the LAMP software bundle, displayed here together with Squid PHP is a general-purpose scripting language that is especially suited to server-side web development, in which case PHP generally runs on a web server. Any PHP code in a requested file is executed by the PHP runtime, usually to create dynamic web page content or dynamic images used on websites or elsewhere. It can also be used for command-line scripting and client-side graphical user interface (GUI) applications. PHP can be deployed on most web servers, many operating systems and platforms, and can be used with many relational database management systems (RDBMS). Most web hosting providers support PHP for use by their clients. It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use. Dynamic web page: example of server-side scripting (PHP and MySQL) Originally designed to create dynamic web pages, PHP now focuses mainly on server-side scripting, and it is similar to other server-side scripting languages that provide dynamic content from a web server to a client, such as Python, Microsoft's ASP.NET, Sun Microsystems' JavaServer Pages, and mod_perl. PHP has also attracted the development of many software frameworks that provide building blocks and a design structure to promote rapid application development (RAD).[citation needed] Some of these include PRADO, CakePHP, Symfony, CodeIgniter, Laravel, Yii Framework, Phalcon and Laminas, offering features similar to other web frameworks. The LAMP architecture has become popular in the web industry as a way of deploying web applications. PHP is commonly used as the P in this bundle alongside Linux, Apache and MySQL, although the P may also refer to Python, Perl, or some mix of the three. Similar packages, WAMP and MAMP, are also available for Windows and macOS, with the first letter standing for the respective operating system. Although both PHP and Apache are provided as part of the macOS base install, users of these packages seek a simpler installation mechanism that can be more easily kept up to date.[citation needed] For specific and more advanced usage scenarios, PHP offers a well-defined and documented way for writing custom extensions in C or C++.[non-primary source needed] Besides extending the language itself in form of additional libraries, extensions are providing a way for improving execution speed where it is critical and there is room for improvements by using a true compiled language. PHP also offers well-defined ways for embedding itself into other software projects. That way PHP can be easily used as an internal scripting language for another project, also providing tight interfacing with the project's specific internal data structures. PHP received mixed reviews due to lacking support for multithreading at the core language level, though using threads is made possible by the pthreads PECL extension. A command line interface, php-cli, and two ActiveX Windows Script Host scripting engines for PHP have been produced.[citation needed] PHP is used for Web content management systems including MediaWiki, WordPress, Joomla, Drupal, Moodle, eZ Publish, eZ Platform, and SilverStripe. As of January 2013[update], PHP was used in more than 240 million websites (39% of those sampled) and was installed on 2.1 million web servers. As of 21 January 2025[update] (two months after PHP 8.4's release), PHP is used as the server-side programming language on 75.0% of websites where the language could be determined; PHP 7 is the most used version of the language with 47.1% of websites using PHP being on that version, while 40.6% use PHP 8, 12.2% use PHP 5 and 0.1% use PHP 4. PHP 840.6%PHP 747.1%PHP 512.9%PHP 40.1% Usage share of PHP versions on 21 January 2025: two months after PHP 8.4's release PHP 8.4: 0.1% of PHP 8 (0.04%) PHP 8.3: 11.1% of PHP 8 (4.51%) PHP 8.2: 30.1% of PHP 8 (12.22%) PHP 8.1: 35.5% of PHP 8 (14.41%) PHP 8.0: 23.1% of PHP 8 (9.38%) PHP 7.4: 72.8% of PHP 7 (34.29%) PHP 7.3: 11.3% of PHP 7 (5.32%) PHP 7.2: 8.50% of PHP 7 (4%) PHP 7.1: 3.70% of PHP 7 (1.74%) PHP 7.0: 3.70% of PHP 7 (1.74%) PHP 5.6: 54.4% of PHP 5 (6.6368%) PHP 5.5: 8.20% of PHP 5 (1.0004%) PHP 5.4: 15.5% of PHP 5 (1.891%) PHP 5.3: 14.7% of PHP 5 (1.7934%) PHP 5.2: 5.20% of PHP 5 (0.6344%) PHP 5.1: 0.40% of PHP 5 (0.0488%) PHP 5.0: less than 0.1% of PHP 5 (0%) PHP 4.4: 74.0% of PHP 4 (0.074%) PHP 4.3: 20.7% of PHP 4 (0.0207%) PHP 4.2: 4.00% of PHP 4 (0.0004%) PHP 4.1: 0.80% of PHP 4 (0.0008%) PHP 4.0: 0.50% of PHP 4 (0.0005%) In 2019, 11% of all vulnerabilities listed by the National Vulnerability Database were linked to PHP; historically, about 30% of all vulnerabilities listed since 1996 in this database are linked to PHP. Technical security flaws of the language itself or of its core libraries are not frequent (22 in 2009, about 1% of the total although PHP applies to about 20% of programs listed). Recognizing that programmers make mistakes, some languages include taint checking to automatically detect the lack of input validation which induces many issues. Such a feature has been proposed for PHP in the past, but either been rejected or the proposal abandoned. Third-party projects such as Suhosin and Snuffleupagus aim to remove or change dangerous parts of the language. Historically, old versions of PHP had some configuration parameters and default values for such runtime settings that made some PHP applications prone to security issues. Among these, magic_quotes_gpc and register_globals configuration directives were the best known; the latter made any URL parameters become PHP variables, opening a path for serious security vulnerabilities by allowing an attacker to set the value of any uninitialized global variable and interfere with the execution of a PHP script. Support for magic quotes and register globals settings has been deprecated since PHP 5.3.0, and removed from PHP 5.4.0. Another example for the potential runtime-settings vulnerability comes from failing to disable PHP execution (for example by using the engine configuration directive) for the directory where uploaded files are stored; enabling it can result in the execution of malicious code embedded within the uploaded files. The best practice is to either locate the image directory outside of the document root available to the web server and serve it via an intermediary script or disable PHP execution for the directory which stores the uploaded files.[citation needed] Also, enabling the dynamic loading of PHP extensions (via enable_dl configuration directive) in a shared web hosting environment can lead to security issues. Implied type conversions that result in different values being treated as equal, sometimes against the programmer's intent, can lead to security issues. For example, the result of the comparison '0e1234' == '0' is true, because strings that are parsable as numbers are converted to numbers; in this case, the first compared value is treated as scientific notation having the value (0×101234), which is zero. Errors like this resulted in authentication vulnerabilities in Simple Machines Forum, Typo3 and phpBB when MD5 password hashes were compared. The recommended way is to use hash_equals() (for timing attack safety), strcmp or the identity operator (===), as '0e1234' === '0' results in false.[citation needed] In a 2013 analysis of over 170,000 website defacements, published by Zone-H, the most frequently (53%) used technique was the exploitation of file inclusion vulnerability, mostly related to insecure usage of the PHP language constructs include, require, and allow_url_fopen. PHP includes rand() and mt_rand()functions which use a pseudorandom number generator, and are not cryptographically secure. As of version 8.1, the random_int() function is included, which uses a cryptographically secure source of randomness provided by the system. There are two attacks that can be performed over PHP entropy sources: seed attack and state recovery attack.[citation needed] As of 2012, a $250 GPU can perform up to 230 MD5 calculations per second, while a $750 GPU can perform four times as many calculations at the same time. In combination with a birthday attack this can lead to serious security vulnerabilities.[citation needed] The PHP development team provides official bug fixes for two years following release of each minor version followed by another two years where only security fixes are released. After this, the release is considered end of life and no longer officially supported. Extended long-term support beyond this is available from commercial providers, such as Zend and others Computer programming portalFree and open-source software portal Comparison of programming languages List of Apache–MySQL–PHP packages List of PHP accelerators List of PHP editors PEAR (PHP Extension and Application Repository) PHP accelerator Template processor XAMPP (free and open-source cross-platform web server solution stack package) Zend Server ^ a b Lerdorf, Rasmus (June 8, 1995). Announce: Personal Home Page Tools (PHP Tools). Retrieved 7 June 2011. ^ a b Lerdorf, Rasmus (2007-04-26). PHP on Hormones – history of PHP presentation by Rasmus Lerdorf given at the MySQL Conference in Santa Clara, California. The Conversations Network. Archived from the original on 2013-07-29. ^ Release 8.4.6. 10 April 2025. ^ PHP: Function arguments – Manual. secure.php.net. ^ PHP: Release Archives (museum). museum.php.net. ^ PHP: Preface – Manual. ^ Stogov, Dmitry [@dstogov] (2015-12-04). It's not a secret that some #PHP7 optimization ideas came from HHVM, LuaJIT and V8. Thank you @HipHopVM @SaraMG. #php7thankyou (Tweet) – via Twitter. ^ PHP: Hypertext Preprocessor. www.php.net. Retrieved 2020-02-12. ^ a b Krill, Paul (2013-11-18). Believe the hype: PHP founder backs Facebook's HipHop technology. InfoWorld. Retrieved 2022-10-13. ^ Announce: Personal Home Page Tools (PHP Tools). groups.google.com. Retrieved 2022-11-03. ^ a b c d e f g h i History of PHP and related projects. The PHP Group. Retrieved 2008-02-25. ^ a b History of PHP. php.net. ^ Olsson, Mikael (2013-09-04). PHP Quick Scripting Reference. Apress. ISBN 978-1-4302-6284-8. ^ PHP Manual: Preface, www.php.net. ^ Introduction: What can PHP do?. PHP Manual. Retrieved 2009-03-05. ^ Helicopter: Port of node-ar-drone which allows user to control a Parrot AR Drone over PHP. JoliCode. 2019-01-11. Retrieved 2019-02-23. ^ a b Embedding PHP in HTML. O'Reilly. 2001-05-03. Archived from the original on 2008-02-19. Retrieved 2008-02-25. ^ PHP: Unsupported Branches. www.php.net. ^ a b c Usage statistics of PHP for websites. W3Techs – World Wide Web Technology Surveys. W3Techs. Retrieved 21 January 2025. ^ Lerdorf, Rasmus (2012-07-20). I wonder why people keep writing that PHP was ever written in Perl. It never was. #php. Twitter. Retrieved 2014-09-04. ^ Lerdorf, Rasmus (2007-04-26). PHP on Hormones. The Conversations Network. Archived from the original (mp3) on 2019-01-06. Retrieved 2009-06-22. ^ Lerdorf, Rasmus (2007). Slide 3. slides for 'PHP on Hormones' talk. The PHP Group. Retrieved 2009-06-22. ^ Lerdorf, Rasmus (1995-06-08). Announce: Personal Home Page Tools (PHP Tools). Newsgroup: comp.infosystems.www.authoring.cgi. Retrieved 2006-09-17. ^ Rasmus Lerdorf, Senior Technical Yahoo: PHP, Behind the Mic. 2003-11-19. Archived from the original on 2013-07-28. ^ Alshetwi, A.B.; Rahmat, R. A. A. O.; Borhan, M. N.; Ismael, S.; Ali, A.; Irtema, H. I. M.; Alfakhria, A. Y. (2018). Web-Based Expert System for Optimizing of Traffic Road in Developing Countries. Retrieved 13 Feb 2024. ^ Problems with PHP. Retrieved 20 December 2010. ^ php.internals: Re: Function name consistency. news.php.net. 2013-12-28. Retrieved 2014-02-09. ^ Rasmus Lerdorf (Dec 16, 2013). Re: Flexible function naming. Newsgroup: php.internals. Retrieved December 26, 2013. ^ PHP – Acronym Meaning Vote. PHP.net. Archived from the original on August 15, 2000. ^ Zend Engine version 2.0: Feature Overview and Design. Zend Technologies Ltd. Archived from the original on 2006-07-19. Retrieved 2006-09-17. ^ php.net 2007 news archive. The PHP Group. 2007-07-13. Retrieved 2008-02-22. ^ Kerner, Sean Michael (2008-02-01). PHP 4 is Dead—Long Live PHP 5. InternetNews. Archived from the original on 2018-08-06. Retrieved 2018-12-16. ^ Trachtenberg, Adam (2004-07-15). Why PHP 5 Rocks!. O'Reilly. Archived from the original on 2016-03-31. Retrieved 2008-02-22. ^ Late Static Binding in PHP. Digital Sandwich. 2006-02-23. Retrieved 2008-03-25. ^ Static Keyword. The PHP Group. Retrieved 2008-03-25. ^ GoPHP5. Archived from the original on 2011-07-17. ^ PHP projects join forces to Go PHP 5 (PDF). GoPHP5 Press Release. Archived from the original (PDF) on 2019-08-04. Retrieved 2008-02-23. ^ GoPHP5. GoPHP5. Archived from the original on 2011-04-27. Retrieved 2008-02-22. ^ PHP Installation and Configuration. php.net. Retrieved 2013-10-29. ^ PHP for Windows: Binaries and sources releases (5.3). php.net. Retrieved 2013-10-29. ^ PHP for Windows: Binaries and sources releases (5.4). php.net. Retrieved 2013-10-29. ^ PHP for Windows: Binaries and sources releases (5.5). php.net. Retrieved 2013-10-29. ^ PHP: Supported Versions. ^ Types: Strings (PHP Manual). PHP.net. Retrieved 2013-09-22. ^ Details of the String Type (PHP Manual). PHP.net. Retrieved 2021-09-22. ^ Andrei Zmievski (2005-08-10). PHP Unicode support design document (Mailing list). Retrieved 2014-02-09. ^ PHP 5.5 or 6.0. Retrieved 2014-02-09. ^ Andrei Zmievski (2011-04-22). The Good, the Bad, and the Ugly: What Happened to Unicode and PHP 6. Retrieved 2014-02-09. ^ Rasmus Lerdorf (2010-03-11). PHP 6 (Mailing list). Retrieved 2014-02-07. ^ The Neverending Muppet Debate of PHP 6 v PHP 7. Archived from the original on 2015-11-19. Retrieved 2015-11-19. ^ RFC: Name of Next Release of PHP. php.net. 2014-07-07. Retrieved 2014-07-15. ^ Re: [PHP-DEV] [VOTE] [RFC] Name of Next Release of PHP (again). 2014-07-30. Retrieved 2014-07-30. ^ phpng: Refactored PHP Engine with Big Performance Improvement. news.php.net. ^ PHP: rfc:phpng. php.net. Retrieved 16 December 2014. ^ a b PHP: phpng. php.net. Retrieved 2014-07-15. ^ Merge branch 'ZendEngine3'. github.com. 2014-12-05. Retrieved 2014-12-05. ^ a b c PHP: Release Process. 2011-06-20. Retrieved 2013-10-06. ^ a b PHP RFC: Exceptions in the engine (for PHP 7). php.net. Retrieved 2015-05-21. ^ a b PHP RFC: Uniform Variable Syntax. php.net. 2014-05-31. Retrieved 2014-07-30. ^ Online PHP editor | output for udRhX. 3v4l.org. ^ PHP RFC: Fix foreach behavior. php.net. Retrieved 2015-05-21. ^ PHP RFC: Constructor behaviour of internal classes. php.net. Retrieved 2015-05-21. ^ PHP RFC: Removal of dead or not yet PHP7 ported SAPIs and extensions. php.net. Retrieved 2015-05-21. ^ PHP RFC: Fix list() behavior inconsistency. php.net. Retrieved 2015-05-21. ^ PHP RFC: Remove alternative PHP tags. php.net. Retrieved 2015-05-21. ^ PHP RFC: Make defining multiple default cases in a switch a syntax error. php.net. Retrieved 2015-05-21. ^ PHP RFC: Remove hex support in numeric strings. php.net. Retrieved 2015-05-21. ^ a b PHP RFC: Integer Semantics. php.net. Retrieved 2015-05-21. Making NaN and Infinity always become zero when cast to integer means more cross-platform consistency, and is also less surprising than what is currently produces ^ PHP RFC: ZPP Failure on Overflow. php.net. Retrieved 2015-05-21. ^ a b c RFC: Return Types. php.net. 2015-01-27. Retrieved 2015-01-28. ^ a b c d e f RFC: Scalar Type Declarations. php.net. 2015-03-16. Retrieved 2015-03-17. ^ a b c d e f g h i j k l Brent. What's new in PHP 8. Stitcher. Retrieved 22 September 2020. ^ a b PHP 8 Released. PHP. Retrieved 27 November 2020. ^ a b PHP: rfc:jit. wiki.php.net. Retrieved 2019-04-05. ^ Brent. PHP 8: JIT performance in real-life web applications. Stitcher.io. Retrieved 4 October 2020. ^ Rethams, Derick. PHP 8: A Quick Look at JIT. ^ a b Popov, Nikita (13 July 2020). What's new in PHP 8.0? Nikita Popov. PHP fwdays. Archived from the original on 2021-12-11. Retrieved 4 October 2020. ^ Daniele, Carlo (25 May 2020). What's New in PHP 8 (Features, Improvements, and the JIT Compiler). Kinsta. Retrieved 24 December 2020. ^ Redmond, Paul (15 July 2020). Match Expression is Coming to PHP 8. Laravel News. Retrieved 4 October 2020. ^ PHP 8.0: Match Expressions. PHP Watch. Retrieved 4 October 2020. ^ Barnes, Eric (27 November 2020). PHP 8 is now Released!. Laravel News. Retrieved 24 December 2020. ^ a b PHP RFC: throw expression. wiki.php.net. Retrieved 14 August 2020. ^ a b PHP RFC: Nullsafe operator. wiki.php.net. Retrieved 14 August 2020. ^ Roose, Brent. PHP 8: Constructor property promotion. Retrieved 30 April 2024. ^ a b PHP: rfc:weakrefs. wiki.php.net. Retrieved 2019-04-05. ^ Merchant, Amit (13 June 2020). These new string functions are coming in PHP 8. Amit Merchant. Retrieved 4 October 2020. ^ Popov, Nikita. Call for participation: Annotating internal function argument and return types. Externals. Retrieved 19 November 2020. ^ PHP 8 ChangeLog. PHP.net. Retrieved 2024-01-05. ^ PHP: PHP 8.1.0 Release Announcement. PHP.net. Retrieved 2024-01-05. ^ PHP 8 ChangeLog. PHP.net. Retrieved 2024-01-05. ^ PHP: PHP 8.2.0 Release Announcement. PHP.net. Retrieved 2024-01-05. ^ a b c d e f g h i j k l Unsupported Branches. php.net. Retrieved 2019-07-31. ^ PHP 4.0.0 Released. Retrieved 25 October 2020. ^ a b c d PHP: PHP 4 ChangeLog. The PHP Group. 2008-01-03. Retrieved 2008-02-22. ^ PHP 4.1.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 4.2.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 4.3.0 Release Announcement. Retrieved 25 October 2020. ^ Using PHP from the command line. PHP Manual. The PHP Group. Retrieved 2009-09-11. ^ PHP 4.4.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 4.4.0 Release Announcement. PHP Manual. The PHP Group. Retrieved 2013-11-24. ^ PHP 5.0.0 Released!. Retrieved 25 October 2020. ^ a b c PHP: PHP 5 ChangeLog. The PHP Group. 2007-11-08. Retrieved 2008-02-22. ^ PHP 5.1.0 Release Announcement. Retrieved 25 October 2020. ^ PHP manual: PDO. The PHP Group. 2011-11-15. Retrieved 2011-11-15. ^ PHP 5.2.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 5.3.0 Release Announcement. Retrieved 25 October 2020. ^ PHP 5.4.0 Release Announcement. Retrieved 25 October 2020. ^ Built-in web server. Retrieved March 26, 2012. ^ PHP 5.5.0 Release Announcement. Retrieved 25 October 2020. ^ a b c d Supported Versions. php.net. Retrieved 2017-12-13. ^ PHP 5.5.0 changes. php.net. Retrieved 2015-03-03. ^ PHP 5.6.0 Release Announcement. Retrieved 25 October 2020. ^ Migrating from PHP 5.5.x to PHP 5.6.x. php.net. Retrieved 2014-03-24. ^ Resetting PHP 6. There have been books on the shelves purporting to cover PHP 6 since at least 2008. But, in March 2010, the PHP 6 release is not out – in fact, it is not even close to out. Recent events suggest that PHP 6 will not be released before 2011 – if, indeed, it is released at all. ^ Krill, Paul (2014-10-31). PHP 7 moves full speed ahead. InfoWorld. Recent versions of PHP have been part of the 5.x release series, but there will be no PHP 6. We're going to skip [version] 6, because years ago, we had plans for a 6, but those plans were very different from what we're doing now, Gutmans said. Going right to version 7 avoids confusion. ^ News Archive – 2018: PHP 7.2.9 Released. php.net. 2018-08-16. Retrieved 2018-08-16. ^ PHP: rfc:size_t_and_int64_next. php.net. Retrieved 16 December 2014. ^ PHP: rfc:abstract_syntax_tree. php.net. Retrieved 16 December 2014. ^ PHP: rfc:closure_apply. php.net. Retrieved 16 December 2014. ^ PHP: rfc:integer_semantics. php.net. Retrieved 16 December 2014. ^ PHP: rfc:isset_ternary. php.net. Retrieved 16 December 2014. ^ RFC: Unicode Codepoint Escape Syntax. 2014-11-24. Retrieved 2014-12-19. ^ Combined Comparison (Spaceship) Operator. php.net. Retrieved 2015-05-21. ^ PHP RFC: Generator Delegation. php.net. Retrieved 2015-05-21. ^ PHP RFC: Anonymous Classes. php.net. Retrieved 2015-05-21. ^ PHP RFC: Easy User-land CSPRNG. php.net. Retrieved 2015-05-21. ^ PHP RFC: Group Use Declarations. php.net. Retrieved 2015-05-21. ^ PHP: rfc:iterable. php.net. 2016-06-10. Retrieved 2023-06-30. ^ PHP: rfc:nullable_types. php.net. 2014-04-10. Retrieved 2023-06-30. ^ PHP: rfc:void_return_type. php.net. 2015-11-09. Retrieved 2015-11-14. ^ PHP: rfc:class_constant_visibility. php.net. 2015-10-27. Retrieved 2015-12-08. ^ PHP: rfc:short_list_syntax. php.net. 2016-04-07. Retrieved 2023-06-30. ^ PHP: rfc:multiple-catch. php.net. 2016-03-06. Retrieved 2023-06-30. ^ PHP: rfc:object-typehint. wiki.php.net. ^ PHP: rfc:libsodium. wiki.php.net. ^ PHP: rfc:allow-abstract-function-override. wiki.php.net. ^ PHP: rfc:parameter-no-type-variance. wiki.php.net. ^ PHP: todo:php73. wiki.php.net. ^ PHP: rfc:flexible_heredoc_nowdoc_syntaxes. wiki.php.net. ^ PHP: rfc:list_reference_assignment. wiki.php.net. ^ PHP: rfc:pcre2-migration. wiki.php.net. ^ PHP: hrtime – Manual. php.net. ^ PHP 7.4.0 Released!. php.net. Retrieved 2019-11-28. ^ PHP: rfc:typed_properties_v2. wiki.php.net. Retrieved 2019-04-04. ^ PHP: rfc:preload. wiki.php.net. Retrieved 2019-04-04. ^ PHP: rfc:null_coalesce_equal_operator. wiki.php.net. Retrieved 2019-04-04. ^ PHP: rfc:improve-openssl-random-pseudo-bytes. wiki.php.net. Retrieved 2019-04-04. ^ PHP: rfc:ffi. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:permanent_hash_ext. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:password_registry. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:mb_str_split. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:reference_reflection. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:deprecate-and-remove-ext-wddx. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:custom_object_serialization. wiki.php.net. Retrieved 2019-04-05. ^ PHP: Supported Versions. php.net. Retrieved 2023-11-26. ^ PHP: rfc:negative_array_index. wiki.php.net. Retrieved 2019-04-05. ^ PHP RFC: Validation for abstract trait methods. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Saner string to number comparisons. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Saner numeric strings. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Stricter type checks for arithmetic/bitwise operators. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Reclassifying engine warnings. wiki.php.net. Retrieved 14 August 2020. ^ PHP: rfc:consistent_type_errors. wiki.php.net. Retrieved 2019-04-05. ^ PHP: rfc:lsp_errors. wiki.php.net. Retrieved 2019-05-26. ^ PHP RFC: Locale-independent float to string cast. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Variable Syntax Tweaks. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Attributes V2. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Attribute Amendments. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Shorter Attribute Syntax. wiki.php.net. Retrieved 2020-06-20. ^ PHP RFC: Shorter Attribute Syntax Change. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Named Arguments. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Match expression v2. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Constructor Property Promotion. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Union Types 2.0. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Mixed Type v2. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: Static return type. wiki.php.net. Retrieved 14 August 2020. ^ PHP RFC: non-capturing catches. wiki.php.net. Retrieved 14 August 2020. ^ Andre, Tyson. PHP RFC: Always available JSON extension. PHP. Retrieved 25 October 2020. ^ PHP: todo:php81. wiki.php.net. Retrieved 2022-06-16. ^ PHP RFC: Explicit octal integer literal notation. wiki.php.net. Retrieved 2020-11-25. ^ PHP RFC: Enumerations. wiki.php.net. Retrieved 2021-03-25. ^ PHP: rfc:readonly_properties_v2. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:first_class_callable_syntax. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:new_in_initializers. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:pure-intersection-types. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:noreturn_type. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:final_class_const. wiki.php.net. Retrieved 2021-11-26. ^ PHP: rfc:fibers. wiki.php.net. Retrieved 2021-11-26. ^ PHP: todo:php82. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:readonly_classes. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:null-false-standalone-types. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:true-type. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:strtolower-ascii. wiki.php.net. Retrieved 2022-06-16. ^ PHP: rfc:dnf_types. wiki.php.net. Retrieved 2023-02-07. ^ PHP: rfc:constants_in_traits. wiki.php.net. Retrieved 2023-02-07. ^ PHP 8.3.0 Released!. php.net. 23 November 2023. Retrieved 24 November 2023. ^ PHP: rfc:typed_class_constants. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:dynamic_class_constant_fetch. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:marking_overriden_methods. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:readonly_amendments. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:json_validate. wiki.php.net. Retrieved 2023-12-17. ^ PHP: rfc:randomizer_additions. wiki.php.net. Retrieved 2023-12-17. ^ PHP: todo: php84. php.net. 26 March 2024. Retrieved 26 March 2024. ^ PHP: ElePHPant. 4 Oct 2014. Retrieved 4 Oct 2014. ^ Redirecting…. wwphp-fb.github.io. ^ The PHP Mascot's Birth – Creator Of The elePHPant Vincent Pontier Reveals The True Story!. 7php.com. 2014-01-06. ^ ElePHPant. PHP.earth. Retrieved 2024-02-13. ^ PHP: ElePHPant. www.php.net. ^ A Field Guide to Elephpants. afieldguidetoelephpants.net. ^ tags – Manual. php.net. Retrieved 2014-02-17. ^ a b PHP: rfc:shortags. php.net. 2008-04-03. Retrieved 2014-05-08. ^ PHP: Basic syntax. The PHP Group. Retrieved 2008-02-22. ^ Basic Coding Standard. PHP Framework Interoperability Group. Retrieved 2016-01-03. ^ echo – Manual. php.net. Retrieved 2014-02-17. ^ Description of core php.ini directives – Manual. php.net. 2002-03-17. Retrieved 2014-02-17. ^ Your first PHP-enabled page. The PHP Group. Retrieved 2008-02-25. ^ Bray, Tim; et al. (26 November 2008). Processing Instructions. Extensible Markup Language (XML) 1.0 (Fifth Edition). W3C. Retrieved 2009-06-18. ^ Variables. The PHP Group. Retrieved 2008-03-16. ^ Instruction separation. The PHP Group. Retrieved 2008-03-16. ^ Comments. The PHP Group. Retrieved 2008-03-16. ^ Integers in PHP, running with scissors, and portability. MySQL Performance Blog. March 27, 2007. Retrieved 2007-03-28. ^ a b c d e Types. The PHP Group. Retrieved 2008-03-16. ^ Strings. The PHP Group. Retrieved 2008-03-21. ^ SPL – StandardPHPLibrary. PHP.net. March 16, 2009. Retrieved 2009-03-16. ^ a b User-defined functions (PHP manual). php.net. 2014-07-04. Retrieved 2014-07-07. ^ a b Variable functions (PHP manual). php.net. 2014-07-04. Retrieved 2014-07-07. ^ create_function() (PHP manual). php.net. 2022-04-06. Retrieved 2022-05-04. ^ Anonymous functions (PHP manual). php.net. 2014-07-04. Retrieved 2014-07-07. ^ Arrow Functions (PHP manual). php.net. Retrieved 2021-01-25. ^ Christian Seiler; Dmitry Stogov (2008-07-01). Request for Comments: Lambda functions and closures. php.net. Retrieved 2014-07-07. ^ a b PHP 5 Object References. mjtsai.com. Retrieved 2008-03-16. ^ Classes and Objects (PHP 5). The PHP Group. Retrieved 2008-03-16. ^ Object cloning. The PHP Group. Retrieved 2008-03-16. ^ Visibility (PHP Manual). theserverpages.com. 2005-05-19. Archived from the original on 2010-09-24. Retrieved 2010-08-26. ^ How do computer languages work?. Archived from the original on 2011-07-16. Retrieved 2009-11-04. ^ Gilmore, W. Jason (2006-01-23). Beginning PHP and MySQL 5: From Novice to Professional. Apress. p. 43. ISBN 1-59059-552-1. ^ Julien Pauli; Nikita Popov; Anthony Ferrara. PHP Internals Book. PHP Internals Book. Archived from the original on 2025-01-21. Retrieved 2025-01-21. ^ [VOTE] Integrating Zend Optimizer+ into the PHP distribution. news.php.net. Retrieved 2013-03-08. ^ Alternative PHP Cache. PHP.net. Archived from the original on 2013-11-15. Retrieved 2013-09-21. ^ We are the 98.5% (and the 16%) « HipHop Virtual Machine. hhvm.com. December 2013. Retrieved 2014-02-23. ^ The Definitive PHP 5.6, 7.0, 7.1, 7.2 & 7.3 Benchmarks (2019). 2019-01-14. Retrieved 2019-04-19. ^ Krill, Paul (2017-09-20). Forget PHP! Facebook's HHVM engine switches to Hack instead. InfoWorld. Retrieved 2019-02-06. ^ Announcement on GitHub removing HPHPc support. GitHub. Retrieved 2013-05-24. ^ The PHP License, version 3.01. Retrieved 2010-05-20. ^ GPL-Incompatible, Free Software Licenses. Various Licenses and Comments about Them. Free Software Foundation. Retrieved 2011-01-03. ^ PHP: Function and Method listing – Manual. The PHP Group. Retrieved 2015-01-14. ^ Introduction – Manual. php.net. 2013-06-07. Retrieved 2013-06-13. ^ Darryl Patterson (5 August 2004). Simplify Business Logic with PHP DataObjects — O'Reilly Media. ibm.com. Archived from the original on 16 December 2014. Retrieved 16 December 2014. ^ IBM — United States. Retrieved 16 December 2014. ^ Five common PHP database problems. ibm.com. 2006-08-01. Retrieved 2013-06-13. ^ IBM Redbooks — Developing PHP Applications for IBM Data Servers. redbooks.ibm.com. Retrieved 16 December 2014. ^ php[architect] Magazine – The Journal for PHP Programmers. www.phparch.com. ^ Krill, Paul (19 October 2005). PHP catching on at enterprises, vying with Java. InfoWorld. Archived from the original on 13 July 2014. ^ Cross Reference: /PHP_5_4/ext/standard/. php.net. Archived from the original on 16 March 2012. Retrieved 16 December 2014. ^ Developing Custom PHP Extensions. devnewz.com. 2002-09-09. Archived from the original on 2008-02-18. Retrieved 2008-02-25. ^ Why Zephir?. zephir-lang.com. 2015-10-20. Retrieved 2015-12-14. ^ PHP Credits. Retrieved 2018-12-16. ^ Learn PHP Via PHP Training and PHP Certification. www.zend.com. Retrieved 2020-11-16. ^ Walker, James (2021-12-13). What the New PHP Foundation Means for PHP's Future. How-To Geek. Retrieved 2023-11-26. ^ The New Life of PHP – The PHP Foundation | The PhpStorm Blog. The JetBrains Blog. 22 November 2021. Retrieved 2022-06-16. ^ The PHP Foundation: Impact and Transparency Report 2022. thephp.foundation. Retrieved 2023-11-27. ^ Pronskiy, Roman (2024-02-26). The PHP Foundation: Impact and Transparency Report 2023. The PHP Foundation. Retrieved 2024-04-01. ^ Anderson, Tim. PHP Foundation formed to fund core developers. www.theregister.com. Retrieved 2023-12-05. ^ Programming languages: This old favourite is gaining popularity again. ZDNET. Retrieved 2023-12-05. ^ PHP 8.1 Released With Enums, Read-Only Properties and Fibers. www.i-programmer.info. Retrieved 2023-12-05. ^ It's time for the PHP Foundation to #StopBreakingPHP. trongate.io. Retrieved 2023-11-27. ^ WordPress 6.4 PHP Compatibility. Make WordPress Hosting. 2023-11-16. Retrieved 2023-11-27. ^ PHP. Sovereign Tech Fund. Retrieved 2024-05-26. ^ a b General Installation Considerations. php.net. Retrieved 2013-09-22. ^ News Archive: PHP 5.3.3 Released!. php.net. 2010-07-22. ^ FastCGI Process Manager (FPM). php.net. Retrieved 2013-09-22. ^ Command line usage: Introduction. php.net. Retrieved 2013-09-22. ^ Command line usage: Differences to other SAPIs. php.net. Retrieved 2013-09-22. ^ a b General Installation Considerations. php.net. Retrieved 2013-09-22. ^ PHP: Apache 2.x on Microsoft Windows. php.net. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Command line usage: Introduction. php.net. Retrieved 2013-09-22. ^ Installing PHP-GTK 2. php.net. Archived from the original on 2013-12-12. Retrieved 2013-09-22. ^ AWS SDK for PHP. aws.amazon.com. Retrieved 2014-03-06. ^ Windows Azure SDK for PHP — Interoperability Bridges and Labs Center. interoperabilitybridges.com. Archived from the original on 2014-03-20. Retrieved 2014-03-06. ^ Runtime configuration: Table of contents. php.net. Retrieved 2013-09-22. ^ php.ini directives: List of php.ini directives. php.net. Retrieved 2013-09-22. ^ Runtime configuration: The configuration file. PHP.net. Retrieved 2013-09-22. ^ php.ini directives: List of php.ini sections. PHP.net. Retrieved 2013-09-22. ^ Runtime configuration: Where a configuration setting may be set. PHP.net. Retrieved 2013-09-22. ^ PHP Manual Image Processing and GD;. php.net. Retrieved 2011-04-09. ^ PHP Server-Side Scripting Language. Indiana University. 2007-04-04. Archived from the original on 2016-01-21. Retrieved 2008-02-25. ^ JavaServer Pages Technology — JavaServer Pages Comparing Methods for Server-Side Dynamic Content White Paper. Sun Microsystems. Retrieved 2008-02-25. ^ Five simple ways to tune your LAMP application. IBM. 2011-01-25. ^ PHP at the core: Extension structure. PHP.net. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ PHP at the core: The counter Extension – A Continuing Example. PHP.net. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Extension Writing Part I: Introduction to PHP and Zend. Zend Technologies. 2005-03-01. Archived from the original on 2013-09-24. Retrieved 2013-09-22. ^ Extension Writing Part II: Parameters, Arrays, and ZVALs. Zend Technologies. 2005-06-06. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Extension Writing Part II: Parameters, Arrays, and ZVALs (continued). Zend Technologies. 2005-06-06. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Extension Writing Part III: Resources. Zend Technologies. 2006-05-12. Archived from the original on 2013-09-26. Retrieved 2013-09-22. ^ Wrapping C++ Classes in a PHP Extension. Zend Technologies. 2009-04-22. Archived from the original on 2013-09-20. Retrieved 2013-09-22. ^ Extending PHP with C++?. Stack Overflow. Retrieved 2013-09-22. ^ How can I use C++ code to interact with PHP?. Stack Overflow. Retrieved 2013-09-22. ^ Golemon, Sara (2006). Extending and Embedding PHP. Sams. ISBN 978-0-672-32704-9. ^ Request #46919: Multithreading. PHP.net. Retrieved 2013-09-22. ^ pthreads: Introduction (PHP Manual). PHP.net. Retrieved 2013-09-22. ^ PECL :: Package :: pthreads. pecl.php.net. Retrieved 2014-02-09. ^ Manual:Installation requirements#PHP. MediaWiki. 2010-01-25. Retrieved 2010-02-26. PHP is the programming language in which MediaWiki is written [...] ^ About WordPress. Retrieved 2010-02-26. WordPress was [...] built on PHP ^ Kempkens, Alex. Joomla! — Content Management System to build websites & apps. ^ PHP and Drupal. Drupal.org. 16 September 2007. Archived from the original on 2010-02-08. Retrieved 2010-06-13. ^ About. Moodle.org. Archived from the original on 2010-01-11. Retrieved 2009-12-20. ^ Server requirements of SilverStripe. Archived from the original on 28 November 2014. Retrieved 13 October 2014. SilverStripe requires PHP 5.3.2+ ^ Ide, Andy (2013-01-31). PHP just grows & grows. Retrieved 2013-04-01. ^ Usage Statistics and Market Share of PHP Version 4 for Websites, January 2025. w3techs.com. ^ Usage Statistics and Market Share of PHP Version 5 for Websites, January 2025. w3techs.com. ^ Usage Statistics and Market Share of PHP Version 7 for Websites, January 2025. w3techs.com. ^ Usage Statistics and Market Share of PHP Version 8 for Websites, January 2025. w3techs.com. ^ National Vulnerability Database (NVD) Search Vulnerabilities Statistics. Retrieved 2019-11-22. ^ PHP-related vulnerabilities on the National Vulnerability Database. 2012-07-05. Archived from the original on 2009-06-28. Retrieved 2013-04-01. ^ Developer Meeting Notes, Nov. 2005. ^ Taint mode decision, November 2007. Archived from the original on 2009-02-26. ^ PHP: rfc:taint. wiki.php.net. ^ Hardened-PHP Project. 2008-08-15. Archived from the original on 2019-02-24. Retrieved 2019-08-22. ^ Snuffleupagus Documentation. ^ Security: Using Register Globals. PHP Manual. PHP.net. Archived from the original on 2013-09-27. Retrieved 2013-09-22. ^ Magic Quotes. PHP Manual. PHP.net. Archived from the original on 2014-02-08. Retrieved 2014-01-17. ^ 'engine' configuration directive. PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13. ^ PHP Security Exploit With GIF Images. 2007-06-22. Archived from the original on 2013-09-27. Retrieved 2013-09-22. ^ PHP security exploit with GIF images. PHP Classes blog. 2007-06-20. Retrieved 2013-09-22. ^ Passing Malicious PHP Through getimagesize(). 2007-06-04. Archived from the original on 2013-09-21. Retrieved 2013-09-22. ^ 'enable_dl' configuration directive. PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13. ^ PHP function reference: dl(). PHP.net. Retrieved 2013-09-22. ^ My host won't fix their Trojan. WebHosting Talk. Retrieved 2013-09-22. ^ Raz0r (25 January 2013). Simple Machines Forum <= 2.0.3 Admin Password Reset. Raz0R.name — Web Application Security.{{cite news}}: CS1 maint: numeric names: authors list (link) ^ Nibble Security. TYPO3-SA-2010-020, TYPO3-SA-2010-022 EXPLAINED. ^ Криптостойкость и небезопасное сравнение. ahack.ru (in Russian). Archived from the original on 4 July 2017. ^ Krawczyk, Pawel (2013). Most common attacks on web applications. IPSec.pl. Archived from the original on 2015-04-15. Retrieved 2015-04-15. ^ Krawczyk, Pawel (2013). So what are the most critical application flaws? On new OWASP Top 10. IPSec.pl. Retrieved 2015-04-15. ^ PHP: Rand – Manual. ^ PHP: Mt_rand - Manual. ^ PHP: Random_int – Manual. ^ Argyros, George; Kiayias, Aggelos (10 August 2012). I Forgot Your Password: Randomness Attacks Against PHP Applications. usenix.org. USENIX. Retrieved 19 April 2024. ^ PHP: RFC:release_cycle_update. ^ PHP Support for PHP 7.2 – 8.0 | PHP LTS | Zend by Perforce. Retrieved 2024-05-23. ^ Pagely PHP Long Term Support Page. Pagely. Retrieved 2024-09-14. Listen to this article (35 minutes) This audio file was created from a revision of this article dated 23 November 2011 (2011-11-23), and does not reflect subsequent edits.(Audio help · More spoken articles) Ford, Paul (June 11, 2015). What is Code?. Bloomberg Businessweek. What's the Absolute Minimum I Must Know About PHP? Official website Links to related articles vtePHPPeople Andi Gutmans Rasmus Lerdorf Zeev Suraski Resources Accelerator (List) Composer Editors Libraries PEAR Implementations HHVM HPHPc Parrot PeachPie Phalanger Quercus Zend Engine Web frameworks CakePHP CodeIgniter Drupal eZ Publish Fat-Free Flow FuelPHP Grav Gyroscope Horde Joomla! Laminas Laravel li₃ Midgard MODX Nette Phalcon PHP-Fusion PHP-Nuke Pop PHP PRADO ProcessWire Qcodo Silverstripe Symfony TYPO3 WordPress XOOPS Yii Testing Behat PHPUnit ORMs Doctrine IDEs Aptana Codelobster Eclipse PDT NetBeans PHPEdit PhpStorm Zend Studio Widget toolkit PHP-GTK wxPHP Category Commons vteWeb interfacesServer-sideProtocols HTTP v2 v3 Encryption WebDAV CGI SCGI FCGI AJP WSRP WebSocket Server APIs C NSAPI C ASAPI C ISAPI COM ASP Jakarta Servlet container CLI OWIN ASP.NET Handler Python WSGI Python ASGI Ruby Rack JavaScript JSGI Perl PSGI Portlet container Apache modules mod_include mod_jk mod_lisp mod_mono mod_parrot mod_perl mod_php mod_proxy mod_python mod_wsgi mod_ruby Phusion Passenger Topics Web service vs. Web resource WOA vs. ROA Open API Webhook Application server comparison Scripting Client-sideBrowser APIs C NPAPI LiveConnect XPConnect C NPRuntime C PPAPI NaCl ActiveX BHO XBAP Web APIsWHATWG Audio Canvas DOM SSE Video WebSockets Web messaging Web storage Web worker XMLHttpRequest W3C DOM events EME File Geolocation IndexedDB MSE SVG WebAssembly WebAuthn WebGPU WebRTC WebXR Khronos WebCL WebGL Others Gears Web SQL Database (formerly W3C) WebUSB Topics Ajax and Remote scripting vs. DHTML Browser extension Cross-site scripting and CORS Hydration Mashup Persistent data Web IDL Scripting Related topics Frontend and backend Microservices REST GraphQL Push technology Solution stack Web page Static Dynamic Web standards Web API security Web application Rich Single-page Progressive Web framework vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteFree and open-source softwareGeneral Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Softwarepackages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category PHP at Wikipedia's sister projects:Media from CommonsTextbooks from WikibooksResources from WikiversityDocumentation from MediaWiki Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherELMCIP",
    "paradigm": "Multi-paradigm : imperative , functional , object-oriented , procedural , reflective",
    "first_appeared": "8 June 1995 ; 29 years ago ( 1995-06-08 )",
    "stable_release": "8.1.32",
    "typing_discipline": "Dynamic , weak , gradual",
    "influenced_by": "Perl , C , C++ , Java , Tcl , JavaScript",
    "influenced": "Hack , JSP , ASP , React JS",
    "stable_release_date": "2025-03-13T00:00:00Z"
  },
  {
    "title": "C++",
    "url": "https://en.wikipedia.org/wiki/C%2B%2B",
    "history": "Bjarne Stroustrup, the creator of C++, in his AT&T New Jersey office, c. 2000 In 1979, Bjarne Stroustrup, a Danish computer scientist, began work on C with Classes, the predecessor to C++. The motivation for creating a new language originated from Stroustrup's experience in programming for his PhD thesis. Stroustrup found that Simula had features that were very helpful for large software development, but the language was too slow for practical use, while BCPL was fast but too low-level to be suitable for large software development. When Stroustrup started working in AT&T Bell Labs, he had the problem of analyzing the UNIX kernel with respect to distributed computing. Remembering his PhD experience, Stroustrup set out to enhance the C language with Simula-like features. C was chosen because it was general-purpose, fast, portable, and widely used. In addition to C and Simula's influences, other languages influenced this new language, including ALGOL 68, Ada, CLU, and ML.[citation needed] Initially, Stroustrup's C with Classes added features to the C compiler, Cpre, including classes, derived classes, strong typing, inlining, and default arguments. A quiz on C++11 features being given in Paris in 2015 In 1982, Stroustrup started to develop a successor to C with Classes, which he named C++ (++ being the increment operator in C) after going through several other names. New features were added, including virtual functions, function name and operator overloading, references, constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL-style single-line comments with two forward slashes (//). Furthermore, Stroustrup developed a new, standalone compiler for C++, Cfront. In 1984, Stroustrup implemented the first stream input/output library. The idea of providing an output operator rather than a named output function was suggested by Doug McIlroy (who had previously suggested Unix pipes). In 1985, the first edition of The C++ Programming Language was released, which became the definitive reference for the language, as there was not yet an official standard. The first commercial implementation of C++ was released in October of the same year. In 1989, C++ 2.0 was released, followed by the updated second edition of The C++ Programming Language in 1991. New features in 2.0 included multiple inheritance, abstract classes, static member functions, const member functions, and protected members. In 1990, The Annotated C++ Reference Manual was published. This work became the basis for the future standard. Later feature additions included templates, exceptions, namespaces, new casts, and a Boolean type. In 1998, C++98 was released, standardizing the language, and a minor update (C++03) was released in 2003. After C++98, C++ evolved relatively slowly until, in 2011, the C++11 standard was released, adding numerous new features, enlarging the standard library further, and providing more facilities to C++ programmers. After a minor C++14 update released in December 2014, various new additions were introduced in C++17. After becoming finalized in February 2020, a draft of the C++20 standard was approved on 4 September 2020, and officially published on 15 December 2020. On January 3, 2018, Stroustrup was announced as the 2018 winner of the Charles Stark Draper Prize for Engineering, for conceptualizing and developing the C++ programming language. In December 2022, C++ ranked third on the TIOBE index, surpassing Java for the first time in the history of the index. As of November 2024[update], the language ranks second after Python, with Java being in third.",
    "etymology": "According to Stroustrup, the name signifies the evolutionary nature of the changes from C. This name is credited to Rick Mascitti (mid-1983) and was first used in December 1983. When Mascitti was questioned informally in 1992 about the naming, he indicated that it was given in a tongue-in-cheek spirit. The name comes from C's ++ operator (which increments the value of a variable) and a common naming convention of using + to indicate an enhanced computer program. During C++'s development period, the language had been referred to as new C and C with Classes before acquiring its final name.",
    "philosophy": "Throughout C++'s life, its development and evolution has been guided by a set of principles: It must be driven by actual problems and its features should be immediately useful in real world programs. Every feature should be implementable (with a reasonably obvious way to do so). Programmers should be free to pick their own programming style, and that style should be fully supported by C++. Allowing a useful feature is more important than preventing every possible misuse of C++. It should provide facilities for organizing programs into separate, well-defined parts, and provide facilities for combining separately developed parts. No implicit violations of the type system (but allow explicit violations; that is, those explicitly requested by the programmer). User-created types need to have the same support and performance as built-in types. Unused features should not negatively impact created executables (e.g. in lower performance). There should be no language beneath C++ (except assembly language). C++ should work alongside other existing programming languages, rather than fostering its own separate and incompatible programming environment. If the programmer's intent is unknown, allow the programmer to specify it by providing manual control.",
    "standardization": "Main articles: C++03, C++11, C++14, C++17, C++20, C++23, and C++26 C++ standards Year ISO/IEC Standard Informal name 1998 14882:1998 C++98 2003 14882:2003 C++03 2011 14882:2011 C++11, C++0x 2014 14882:2014 C++14, C++1y 2017 14882:2017 C++17, C++1z 2020 14882:2020 C++20, C++2a 2024 14882:2024 C++23, C++2b TBA C++26, C++2c C++ is standardized by an ISO working group known as JTC1/SC22/WG21. So far, it has published seven revisions of the C++ standard and is currently working on the next revision, C++26. Scene during the C++ standards committee meeting in Stockholm in 1996 In 1998, the ISO working group standardized C++ for the first time as ISO/IEC 14882:1998, which is informally known as C++98. In 2003, it published a new version of the C++ standard called ISO/IEC 14882:2003, which fixed problems identified in C++98. The next major revision of the standard was informally referred to as C++0x, but it was not released until 2011. C++11 (14882:2011) included many additions to both the core language and the standard library. In 2014, C++14 (also known as C++1y) was released as a small extension to C++11, featuring mainly bug fixes and small improvements. The Draft International Standard ballot procedures completed in mid-August 2014. After C++14, a major revision C++17, informally known as C++1z, was completed by the ISO C++ committee in mid July 2017 and was approved and published in December 2017. As part of the standardization process, ISO also publishes technical reports and specifications: ISO/IEC TR 18015:2006 on the use of C++ in embedded systems and on performance implications of C++ language and library features, ISO/IEC TR 19768:2007 (also known as the C++ Technical Report 1) on library extensions mostly integrated into C++11, ISO/IEC TR 29124:2010 on special mathematical functions, integrated into C++17, ISO/IEC TR 24733:2011 on decimal floating-point arithmetic, ISO/IEC TS 18822:2015 on the standard filesystem library, integrated into C++17, ISO/IEC TS 19570:2015 on parallel versions of the standard library algorithms, integrated into C++17, ISO/IEC TS 19841:2015 on software transactional memory, ISO/IEC TS 19568:2015 on a new set of library extensions, some of which are already integrated into C++17, ISO/IEC TS 19217:2015 on the C++ concepts, integrated into C++20, ISO/IEC TS 19571:2016 on the library extensions for concurrency, some of which are already integrated into C++20, ISO/IEC TS 19568:2017 on a new set of general-purpose library extensions, ISO/IEC TS 21425:2017 on the library extensions for ranges, integrated into C++20, ISO/IEC TS 22277:2017 on coroutines, integrated into C++20, ISO/IEC TS 19216:2018 on the networking library, ISO/IEC TS 21544:2018 on modules, integrated into C++20, ISO/IEC TS 19570:2018 on a new set of library extensions for parallelism ISO/IEC TS 23619:2021 on new extensions for reflective programming (reflection), ISO/IEC TS 9922:2024 on new set of concurrency extensions, and ISO/IEC TS 19568:2024 on another new set of library extensions. More technical specifications are in development and pending approval.",
    "language": "Main article: C++ syntax The C++ language has two main components: a direct mapping of hardware features provided primarily by the C subset, and zero-overhead abstractions based on those mappings. Stroustrup describes C++ as a light-weight abstraction programming language [designed] for building and using efficient and elegant abstractions; and offering both hardware access and abstraction is the basis of C++. Doing it efficiently is what distinguishes it from other languages. C++ inherits most of C's syntax. A hello world program that conforms to the C standard is also a valid C++ hello world program. The following is Bjarne Stroustrup's version of the Hello world program that uses the C++ Standard Library stream facility to write a message to standard output:[note 2] #include <iostream> int main() { std::cout << Hello, world!\\n; }",
    "standard_library": "The draft Working Paper standard that became approved as C++98; half of its size was devoted to the C++ Standard Library. Main article: C++ Standard Library The C++ standard consists of two parts: the core language and the standard library. C++ programmers expect the latter on every major implementation of C++; it includes aggregate types (vectors, lists, maps, sets, queues, stacks, arrays, tuples), algorithms (find, for_each, binary_search, random_shuffle, etc.), input/output facilities (iostream, for reading from and writing to the console and files), filesystem library, localisation support, smart pointers for automatic memory management, regular expression support, multi-threading library, atomics support (allowing a variable to be read or written to by at most one thread at a time without any external synchronisation), time utilities (measurement, getting current time, etc.), a system for converting error reporting that does not use C++ exceptions into C++ exceptions, a random number generator, and a slightly modified version of the C standard library (to make it comply with the C++ type system). A large part of the C++ library is based on the Standard Template Library (STL). Useful tools provided by the STL include containers as the collections of objects (such as vectors and lists), iterators that provide array-like access to containers, and algorithms that perform operations such as searching and sorting. Furthermore, (multi)maps (associative arrays) and (multi)sets are provided, all of which export compatible interfaces. Therefore, using templates it is possible to write generic algorithms that work with any container or on any sequence defined by iterators. As in C, the features of the library may be accessed by using the #include directive to include a standard header. The C++ Standard Library provides 105 standard headers, of which 27 are deprecated. With the introduction of modules in C++20, these headers may be accessed with import, and in C++23, the entire standard library can now be directly imported as module itself, with import std;. Currently, the C++ standard library provides two modules, std and std.compat (a compatibility module for std which exports C standard library facilities into the global namespace). The standard incorporates the STL that was originally designed by Alexander Stepanov, who experimented with generic algorithms and containers for many years. When he started with C++, he finally found a language where it was possible to create generic algorithms (e.g., STL sort) that perform even better than, for example, the C standard library qsort, thanks to C++ features like using inlining and compile-time binding instead of function pointers. The standard does not refer to it as STL, as it is merely a part of the standard library, but the term is still widely used to distinguish it from the rest of the standard library (input/output streams, internationalization, diagnostics, the C library subset, etc.). Most C++ compilers, and all major ones, provide a standards-conforming implementation of the C++ standard library.",
    "c_core_guidelines": "The C++ Core Guidelines are an initiative led by Bjarne Stroustrup, the inventor of C++, and Herb Sutter, the convener and chair of the C++ ISO Working Group, to help programmers write 'Modern C++' by using best practices for the language standards C++11 and newer, and to help developers of compilers and static checking tools to create rules for catching bad programming practices. The main aim is to efficiently and consistently write type and resource safe C++. The Core Guidelines were announced in the opening keynote at CPPCon 2015. The Guidelines are accompanied by the Guideline Support Library (GSL), a header only library of types and functions to implement the Core Guidelines and static checker tools for enforcing Guideline rules.",
    "compatibility": "To give compiler vendors greater freedom, the C++ standards committee decided not to dictate the implementation of name mangling, exception handling, and other implementation-specific features. The downside of this decision is that object code produced by different compilers is expected to be incompatible. There are, however, attempts to standardize compilers for particular machines or operating systems. For example, the Itanium C++ ABI is processor-independent (despite its name) and is implemented by GCC and Clang.",
    "with_c": "Main article: Compatibility of C and C++ C++ is often considered to be a superset of C but this is not strictly true. Most C code can easily be made to compile correctly in C++ but there are a few differences that cause some valid C code to be invalid or behave differently in C++. For example, C allows implicit conversion from void* to other pointer types but C++ does not (for type safety reasons). Also, C++ defines many new keywords, such as new and class, which may be used as identifiers (for example, variable names) in a C program. Some incompatibilities have been removed by the 1999 revision of the C standard (C99), which now supports C++ features such as line comments (//) and declarations mixed with code. On the other hand, C99 introduced a number of new features that C++ did not support that were incompatible or redundant in C++, such as variable-length arrays, native complex-number types (however, the std::complex class in the C++ standard library provides similar functionality, although not code-compatible), designated initializers, compound literals, and the restrict keyword. Some of the C99-introduced features were included in the subsequent version of the C++ standard, C++11 (out of those which were not redundant). However, the C++11 standard introduces new incompatibilities, such as disallowing assignment of a string literal to a character pointer, which remains valid C. To intermix C and C++ code, any function declaration or definition that is to be called from/used both in C and C++ must be declared with C linkage by placing it within an extern C {/*...*/} block. Such a function may not rely on features depending on name mangling (i.e., function overloading).",
    "inline_assembly": "Programs developed in C or C++ often utilize inline assembly to take advantage of its low-level functionalities, greater speed, and enhanced control compared to high-level programming languages when optimizing for performance is essential. C++ provides support for embedding assembly language using asm declarations, but the compatibility of inline assembly varies significantly between compilers and architectures. Unlike high-level language features such as Python or Java, assembly code is highly dependent on the underlying processor and compiler implementation.",
    "variations_across_compilers": "Different C++ compilers implement inline assembly in distinct ways. GCC (GNU Compiler Collection) and Clang: Use the GCC extended inline assembly syntax. Using __asm__ keyword instead of asm when writing code that can be compiled with -ansi and -std options, which allows specifying input/output operands and clobbered registers. This approach is widely adopted, including by Intel and IBM compilers. MSVC (Microsoft Visual C++): The inline assembler is built into the compiler. Previously supported inline assembly via the __asm keyword, but this support has been removed in 64-bit mode, requiring separate .asm modules instead. TI ARM Clang and Embedded Compilers: Some embedded system compilers, like Texas Instruments' TI Arm Clang, allow inline assembly but impose stricter rules to avoid conflicts with register conventions and calling conventions.",
    "interoperability_between_c_and_assembly": "C++ provides two primary methods of integrating ASM code. 1. Standalone assembly files – Assembly code is written separately and linked with C++ code. 2. Inline assembly – Assembly code is embedded within C++ code using compiler-specific extensions. Example Code for ASM Compatibility When calling an assembly function from C++, use extern C to prevent C++ name mangling. //main.cpp import std; extern C int add_asm(int, int); // Declare the assembly function int main() { int result = add_asm(5, 7); std::println(Result from ASM: {}, result); return 0; } #asm code using RISC-V architecture .section .text .global add_asm add_asm: add a0, a0, a1 # Add first argument (a0) and second argument (a1), store in a0 ret # Return (a0 holds return value) Global variables in assembly must be declared as extern in C++ and marked .global in assembly. // main.cpp import std; extern C int global_var; // Declare global variable from assembly int main() { std::println(Global variable from ASM: {}, global_var); return 0; } #asm using RISC-V architecture .section .data .global global_var .align 4 global_var: .word 42 # Define integer value Inline assembly allows embedding ASM directly in C++ using the asm keyword. //main.cpp (using GCC/CLANG compiler) import std; int main() { int x = 10, y = 20, sum; asm volatile ( add %0, %1, %2 : =r (sum) // Output operand (stored in a register) : r (x), r (y) // Input operands (stored in registers) ); std::println(Sum using inline ASM: {}, sum); return 0; }",
    "see_also": "Computer programming portal Carbon (programming language) Comparison of programming languages List of C++ compilers Outline of C++ Category:C++ libraries",
    "footnotes": "^ For the idea of the C++20 stackless coroutines. ^ This code is copied directly from Bjarne Stroustrup's errata page (p. 633). He addresses the use of '\\n' rather than std::endl. Also see Can I write void main()? Archived 2 July 2020 at the Wayback Machine for an explanation of the implicit return 0; in the main function. This implicit return is not available in other functions.",
    "references": "^ Overview of modules in C++. Microsoft. 24 April 2023. ^ a b c d e f Stroustrup, Bjarne (1996). A history of C++: 1979-1991. History of programming languages---II. ACM. pp. 699–769. doi:10.1145/234286.1057836. ^ Stroustrup, Bjarne (16 December 2021). C++20: Reaching for the Aims of C++ - Bjarne Stroustrup - CppCon 2021. CppCon. Archived from the original on 30 December 2021. Retrieved 30 December 2021. ^ Stroustrup, Bjarne (12 June 2020). Thriving in a crowded and changing world: C++ 2006–2020. Proceedings of the ACM on Programming Languages. 4 (HOPL). Association for Computing Machinery (ACM): 1–168. doi:10.1145/3386320. ISSN 2475-1421. S2CID 219603741. ^ Naugler, David (May 2007). C# 2.0 for C++ and Java programmer: conference workshop. Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. ^ Chapel spec (Acknowledgements) (PDF). Cray Inc. 1 October 2015. Archived (PDF) from the original on 24 June 2018. Retrieved 14 January 2016. ^ Fogus, Michael. Rich Hickey Q&A. Code Quarterly. Archived from the original on 11 January 2017. Retrieved 11 January 2017. ^ Harry. H. Chaudhary (28 July 2014). Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans. Archived from the original on 27 May 2021. Retrieved 29 May 2016. ^ Roger Poon (1 May 2017). Scaling JS++: Abstraction, Performance, and Readability. Archived from the original on 11 May 2020. Retrieved 21 April 2020. ^ The evolution of an extension language: a history of Lua. www.lua.org. Retrieved 4 January 2023. ^ FAQ Nim Programming Language. Archived from the original on 11 July 2017. Retrieved 21 April 2020. ^ 9. Classes — Python 3.6.4 documentation. docs.python.org. Archived from the original on 23 October 2012. Retrieved 9 January 2018. ^ Influences - The Rust Reference. doc.rust-lang.org. Retrieved 4 January 2023. ^ Stroustrup, Bjarne (1997). 1. The C++ Programming Language (Third ed.). Addison-Wesley. ISBN 0-201-88954-4. OCLC 59193992. ^ a b c Stroustrup, B. (6 May 2014). Lecture:The essence of C++. University of Edinburgh. YouTube. Archived from the original on 28 April 2015. Retrieved 12 June 2015. ^ Stroustrup, Bjarne (17 February 2014). C++ Applications. stroustrup.com. Archived from the original on 4 April 2021. Retrieved 5 May 2014. ^ a b ISO/IEC 14882:2024. International Organization for Standardization. Retrieved 21 October 2020. ^ Bjarne Stroustrup's Homepage. www.stroustrup.com. Archived from the original on 14 May 2019. Retrieved 15 May 2013. ^ C++ IS schedule (PDF). Archived (PDF) from the original on 10 August 2020. Retrieved 9 August 2020. ^ C++; Where it's heading. Archived from the original on 3 December 2018. Retrieved 3 December 2018. ^ Re: [RFC] Convert builin-mailinfo.c to use The Better String Library (Mailing list). 6 September 2007. Archived from the original on 8 March 2021. Retrieved 31 March 2015. ^ Re: Efforts to attract more users? (Mailing list). 12 July 2010. Archived from the original on 21 March 2015. Retrieved 31 March 2015. ^ Andrew Binstock (18 May 2011). Dr. Dobb's: Interview with Ken Thompson. Dr. Dobb's. Archived from the original on 13 March 2014. Retrieved 7 February 2014. ^ Peter Seibel (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. pp. 475–476. ISBN 978-1-4302-1948-4. Archived from the original on 1 December 2019. Retrieved 9 November 2017. ^ C++ in Coders at Work. 16 October 2009. Archived from the original on 10 November 2017. Retrieved 9 November 2017. ^ An Interview with Donald Knuth. Dr. Dobb's. Archived from the original on 8 March 2021. Retrieved 18 July 2021. ^ (La)TeX Navigator. Archived from the original on 20 November 2017. Retrieved 10 November 2017. ^ Claburn, Thomas (2 March 2025). C++ creator calls for help to defend programming language from 'serious attacks'. The Register. Retrieved 5 March 2025. ^ a b Stroustrup, Bjarne (7 March 2010). Bjarne Stroustrup's FAQ: When was C++ invented?. stroustrup.com. Archived from the original on 6 February 2016. Retrieved 16 September 2010. ^ a b Stroustrup, Bjarne. Evolving a language in and for the real world: C++ 1991-2006 (PDF). Archived (PDF) from the original on 20 November 2007. Retrieved 14 August 2013. ^ a b c Stroustrup, Bjarne. A History of C ++ : 1979− 1991 (PDF). Archived (PDF) from the original on 2 February 2019. Retrieved 18 July 2013. ^ Stroustrup, Bjarne. The C++ Programming Language (First ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010. ^ Stroustrup, Bjarne. The C++ Programming Language (Second ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010. ^ Sutter, Herb (30 June 2016). Trip report: Summer ISO C++ standards meeting (Oulu). herbsutter.com. Archived from the original on 8 October 2016. the next standard after C++17 will be C++20 ^ Dusíková, Hana (6 November 2019). N4817: 2020 Prague Meeting Invitation and Information (PDF). Archived (PDF) from the original on 29 December 2019. Retrieved 13 February 2020. ^ Current Status. isocpp.org. Archived from the original on 8 September 2020. Retrieved 7 September 2020. ^ C++20 Approved -- Herb Sutter. isocpp.org. Archived from the original on 11 September 2020. Retrieved 8 September 2020. ^ Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering (Press release). National Academy of Engineering. 3 January 2018. Archived from the original on 3 January 2018. Retrieved 14 December 2021. ^ TIOBE (November 2024). TIOBE Index for November 2024. TIOBE.com. TIOBE Company. Archived from the original on 18 November 2024. Retrieved 18 November 2024. ^ Bjarne Stroustrup's FAQ – Where did the name C++ come from?. Archived from the original on 6 February 2016. Retrieved 16 January 2008. ^ C For C++ Programmers. Northeastern University. Archived from the original on 17 November 2010. Retrieved 7 September 2015. ^ ISO/IEC 14882:1998. International Organization for Standardization. Archived from the original on 15 January 2017. Retrieved 23 November 2018. ^ ISO/IEC 14882:2003. International Organization for Standardization. Archived from the original on 13 August 2021. Retrieved 23 November 2018. ^ a b ISO/IEC 14882:2011. International Organization for Standardization. Archived from the original on 27 May 2016. Retrieved 23 November 2018. ^ ISO/IEC 14882:2014. International Organization for Standardization. Archived from the original on 29 April 2016. Retrieved 23 November 2018. ^ ISO/IEC 14882:2017. International Organization for Standardization. Archived from the original on 29 January 2013. Retrieved 2 December 2017. ^ ISO/IEC 14882:2020. International Organization for Standardization. Archived from the original on 16 December 2020. Retrieved 16 December 2020. ^ We have an international standard: C++0x is unanimously approved. Sutter's Mill. 12 August 2011. Archived from the original on 28 June 2018. Retrieved 23 November 2018. ^ The Future of C++. Archived from the original on 23 October 2018. Retrieved 23 November 2018 – via channel9.msdn.com. ^ We have C++14! : Standard C++. isocpp.org. Archived from the original on 19 August 2014. Retrieved 19 August 2014. ^ Sutter, Herb (15 July 2017). Trip report: Summer ISO C++ standards meeting (Toronto). Archived from the original on 6 August 2017. Retrieved 4 August 2017. ^ ISO/IEC TR 18015:2006. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TR 19768:2007. International Organization for Standardization. Archived from the original on 4 March 2016. Retrieved 15 February 2019. ^ ISO/IEC TR 29124:2010. International Organization for Standardization. Archived from the original on 12 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TR 24733:2011. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 18822:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19570:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19841:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19568:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19217:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19571:2016. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19568:2017. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 21425:2017. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 22277:2017. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19216:2018. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 21544:2018. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19570:2018. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 23619:2021. International Organization for Standardization. Archived from the original on 15 December 2018. Retrieved 11 October 2021. ^ ISO/IEC TS 9922:2024. International Organization for Standardization. Archived from the original on 1 April 2025. Retrieved 1 April 2025. ^ ISO/IEC TS 19568:2024. International Organization for Standardization. Archived from the original on 25 February 2025. Retrieved 1 April 2025. ^ B. Stroustrup (interviewed by Sergio De Simone) (30 April 2015). Stroustrup: Thoughts on C++17 - An Interview. Archived from the original on 8 July 2015. Retrieved 8 July 2015. ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 46. ISBN 0-201-70073-5. ^ Stroustrup, Bjarne. Open issues for The C++ Programming Language (3rd Edition). Archived from the original on 5 May 2014. Retrieved 5 May 2014. ^ Graziano Lo Russo (2008). An Interview with A. Stepanov. stlport.org. Archived from the original on 4 March 2009. Retrieved 8 October 2015. ^ C++ Core Guidelines. isocpp.github.io. Archived from the original on 16 February 2020. Retrieved 9 February 2020. ^ Bjarne Stroustrup announces C++ Core Guidelines : Standard C++. isocpp.org. Archived from the original on 11 May 2020. Retrieved 31 March 2020. ^ microsoft/GSL. 18 July 2021. Archived from the original on 18 July 2021. Retrieved 18 July 2021 – via GitHub. ^ Using the C++ Core Guidelines checkers. Microsoft Learn. Archived from the original on 13 August 2021. Retrieved 31 March 2020. ^ C++ ABI Summary. 20 March 2001. Archived from the original on 10 July 2018. Retrieved 30 May 2006. ^ Bjarne Stroustrup's FAQ – Is C a subset of C++?. Archived from the original on 6 February 2016. Retrieved 5 May 2014. ^ C9X – The New C Standard. Archived from the original on 21 June 2018. Retrieved 27 December 2008. ^ C++0x Support in GCC. Archived from the original on 21 July 2010. Retrieved 12 October 2010. ^ C++0x Core Language Features In VC10: The Table. Archived from the original on 21 August 2010. Retrieved 12 October 2010. ^ Clang - C++98, C++11, and C++14 Status. Clang.llvm.org. 12 May 2013. Archived from the original on 4 July 2013. Retrieved 10 June 2013. ^ Bokil, Milind A. (2021). Writing Assembly Routines within C/C++ and Java Programs. ResearchGate. Retrieved 1 April 2025. ^ De Vilhena, Paulo Emílio; Lahav, Ori; Vafeiadis, Viktor; Raad, Azalea (2024). Extending the C/C++ Memory Model with Inline Assembly. Proceedings of the ACM on Programming Languages. 8: 1081–1107. arXiv:2408.17208. doi:10.1145/3689749. ^ cppreference.com contributors. asm declaration. cppreference.com. Retrieved 1 April 2025. ^ Extended Asm (Using the GNU Compiler Collection). GCC Online Documentation. GNU Project. Retrieved 1 April 2025. ^ Intel Corporation. Inline Assembly. Intel® C++ Compiler Classic Developer Guide and Reference, Version 2021.9. Retrieved 1 April 2025. ^ IBM. Inline assembly statements (IBM extension). IBM Documentation. Retrieved 1 April 2025. ^ Inline Assembler Overview. Microsoft Learn. Microsoft. Retrieved 1 April 2025. ^ Interfacing C and C++ With Assembly Language. Texas Instruments. Texas Instruments Incorporated. 23 February 2025. Retrieved 1 April 2025. ^ C++ to ASM linkage in GCC. OSDev Wiki. Retrieved 1 April 2025.",
    "further_reading": "Abrahams, David; Gurtovoy, Aleksey (2005). C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond. Addison-Wesley. ISBN 0-321-22725-5. Alexandrescu, Andrei (2001). Modern C++ Design: Generic Programming and Design Patterns Applied. Addison-Wesley. ISBN 0-201-70431-5. Alexandrescu, Andrei; Sutter, Herb (2004). C++ Design and Coding Standards: Rules and Guidelines for Writing Programs. Addison-Wesley. ISBN 0-321-11358-6. Becker, Pete (2006). The C++ Standard Library Extensions : A Tutorial and Reference. Addison-Wesley. ISBN 0-321-41299-0. Brokken, Frank (2010). C++ Annotations. University of Groningen. ISBN 978-90-367-0470-0. Archived from the original on 28 April 2010. Retrieved 28 April 2010. Coplien, James O. (1994) [reprinted with corrections, original year of publication 1992]. Advanced C++: Programming Styles and Idioms. Addison-Wesley. ISBN 0-201-54855-0. Dewhurst, Stephen C. (2005). C++ Common Knowledge: Essential Intermediate Programming. Addison-Wesley. ISBN 0-321-32192-8. Information Technology Industry Council (15 October 2003). Programming languages – C++ (Second ed.). Geneva: ISO/IEC. 14882:2003(E). Josuttis, Nicolai M. (2012). The C++ Standard Library, A Tutorial and Reference (Second ed.). Addison-Wesley. ISBN 978-0-321-62321-8. Koenig, Andrew; Moo, Barbara E. (2000). Accelerated C++ – Practical Programming by Example. Addison-Wesley. ISBN 0-201-70353-X. Lippman, Stanley B.; Lajoie, Josée; Moo, Barbara E. (2011). C++ Primer (Fifth ed.). Addison-Wesley. ISBN 978-0-321-71411-4. Lippman, Stanley B. (1996). Inside the C++ Object Model. Addison-Wesley. ISBN 0-201-83454-5. Meyers, Scott (2005). Effective C++ (Third ed.). Addison-Wesley. ISBN 0-321-33487-6. Stroustrup, Bjarne (2013). The C++ Programming Language (Fourth ed.). Addison-Wesley. ISBN 978-0-321-56384-2. Stroustrup, Bjarne (1994). The Design and Evolution of C++. Addison-Wesley. ISBN 0-201-54330-3. Stroustrup, Bjarne (2014). Programming: Principles and Practice Using C++ (Second ed.). Addison-Wesley. ISBN 978-0-321-99278-9. Sutter, Herb (2001). More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions. Addison-Wesley. ISBN 0-201-70434-X. Sutter, Herb (2004). Exceptional C++ Style. Addison-Wesley. ISBN 0-201-76042-8. Vandevoorde, David; Josuttis, Nicolai M. (2003). C++ Templates: The complete Guide. Addison-Wesley. ISBN 0-201-73484-2.",
    "external_links": "JTC1/SC22/WG21 – the ISO/IEC C++ Standard Working Group Standard C++ Foundation – a non-profit organization that promotes the use and understanding of standard C++. Bjarne Stroustrup is a director of the organization. C++ Keywords C++ Expressions C++ Operator Precedence C++ at Wikipedia's sister projects:Media from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from Wikiversity vteC++ C++ Outline C++98 C++03 C++11 C++14 C++17 C++20 C++23 C++26 Libraries Features C++ syntax Classes Concepts Copy constructor Exception handling (Exception safety) Function overloading Modules Move semantics new and delete Operator overloading Operators Preprocessor References Templates Virtual functions Standard Library I/O Streams Smart pointers STL Strings Ideas As-if rule Barton–Nackman trick Curiously recurring template pattern Most vexing parse One Definition Rule Resource acquisition is initialization Rule of three Slicing Special member functions Substitution failure is not an error Template metaprogramming Compilers Comparison of C++ compilers Borland C++ Borland Turbo C++ C++Builder Clang GCC Intel C++ Compiler Oracle Solaris Studio Visual C++ (MSVC) Watcom C/C++ IDEs Comparison of C IDEs Anjuta CLion Code::Blocks CodeLite Dev-C++ Eclipse Geany NetBeans KDevelop Qt Creator Visual Studio Superset languages Objective-C++ C++/CLI C++/CX C++/WinRT Ch SYCL Dialects Embedded C++ Relative toother languages Comparison of programming languages Comparison of Java and C++ Compatibility of C and C++ Criticism of C++ People David Abrahams Andrei Alexandrescu Pete Becker Rick Mascitti Scott Meyers Alexander Stepanov Bjarne Stroustrup Herb Sutter Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteInternational Organization for Standardization (ISO) standardsList of ISO standards – ISO romanizations – IEC standards1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40500 42010 45001 50001 55000 56000 80000 Category vteIEC standardsIEC 60027 60034 60038 60062 60063 60068 60112 60228 60269 60297 60309 60320 60364 60446 60559 60601 60870 60870-5 60870-6 60906-1 60908 60929 60958 60980-344 61030 61131 61131-3 61131-9 61158 61162 61334 61355 61360 61400 61499 61508 61511 61784 61850 61851 61883 61960 61968 61970 62014-4 62026 62056 62061 62196 62262 62264 62304 62325 62351 62365 62366 62379 62386 62455 62680 62682 62700 63110 63119 63382 ISO/IEC 646 1989 2022 4909 5218 6429 6523 7810 7811 7812 7813 7816 7942 8613 8632 8652 8859 9126 9293 9496 9529 9592 9593 9899 9945 9995 10021 10116 10165 10179 10279 10646 10967 11172 11179 11404 11544 11801 12207 13250 13346 13522-5 13568 13816 13818 14443 14496 14651 14882 15288 15291 15408 15444 15445 15504 15511 15693 15897 15938 16262 16485 17024 17025 18004 18014 18181 19752 19757 19770 19788 20000 20802 21000 21827 22275 22537 23000 23003 23008 23270 23360 24707 24727 24744 24752 26300 27000 27000-series 27002 27040 29110 29119 33001 38500 39075 42010 80000 81346 Related International Electrotechnical Commission Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRef",
    "document": "Bjarne Stroustrup, the creator of C++, in his AT&T New Jersey office, c. 2000 In 1979, Bjarne Stroustrup, a Danish computer scientist, began work on C with Classes, the predecessor to C++. The motivation for creating a new language originated from Stroustrup's experience in programming for his PhD thesis. Stroustrup found that Simula had features that were very helpful for large software development, but the language was too slow for practical use, while BCPL was fast but too low-level to be suitable for large software development. When Stroustrup started working in AT&T Bell Labs, he had the problem of analyzing the UNIX kernel with respect to distributed computing. Remembering his PhD experience, Stroustrup set out to enhance the C language with Simula-like features. C was chosen because it was general-purpose, fast, portable, and widely used. In addition to C and Simula's influences, other languages influenced this new language, including ALGOL 68, Ada, CLU, and ML.[citation needed] Initially, Stroustrup's C with Classes added features to the C compiler, Cpre, including classes, derived classes, strong typing, inlining, and default arguments. A quiz on C++11 features being given in Paris in 2015 In 1982, Stroustrup started to develop a successor to C with Classes, which he named C++ (++ being the increment operator in C) after going through several other names. New features were added, including virtual functions, function name and operator overloading, references, constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL-style single-line comments with two forward slashes (//). Furthermore, Stroustrup developed a new, standalone compiler for C++, Cfront. In 1984, Stroustrup implemented the first stream input/output library. The idea of providing an output operator rather than a named output function was suggested by Doug McIlroy (who had previously suggested Unix pipes). In 1985, the first edition of The C++ Programming Language was released, which became the definitive reference for the language, as there was not yet an official standard. The first commercial implementation of C++ was released in October of the same year. In 1989, C++ 2.0 was released, followed by the updated second edition of The C++ Programming Language in 1991. New features in 2.0 included multiple inheritance, abstract classes, static member functions, const member functions, and protected members. In 1990, The Annotated C++ Reference Manual was published. This work became the basis for the future standard. Later feature additions included templates, exceptions, namespaces, new casts, and a Boolean type. In 1998, C++98 was released, standardizing the language, and a minor update (C++03) was released in 2003. After C++98, C++ evolved relatively slowly until, in 2011, the C++11 standard was released, adding numerous new features, enlarging the standard library further, and providing more facilities to C++ programmers. After a minor C++14 update released in December 2014, various new additions were introduced in C++17. After becoming finalized in February 2020, a draft of the C++20 standard was approved on 4 September 2020, and officially published on 15 December 2020. On January 3, 2018, Stroustrup was announced as the 2018 winner of the Charles Stark Draper Prize for Engineering, for conceptualizing and developing the C++ programming language. In December 2022, C++ ranked third on the TIOBE index, surpassing Java for the first time in the history of the index. As of November 2024[update], the language ranks second after Python, with Java being in third. According to Stroustrup, the name signifies the evolutionary nature of the changes from C. This name is credited to Rick Mascitti (mid-1983) and was first used in December 1983. When Mascitti was questioned informally in 1992 about the naming, he indicated that it was given in a tongue-in-cheek spirit. The name comes from C's ++ operator (which increments the value of a variable) and a common naming convention of using + to indicate an enhanced computer program. During C++'s development period, the language had been referred to as new C and C with Classes before acquiring its final name. Throughout C++'s life, its development and evolution has been guided by a set of principles: It must be driven by actual problems and its features should be immediately useful in real world programs. Every feature should be implementable (with a reasonably obvious way to do so). Programmers should be free to pick their own programming style, and that style should be fully supported by C++. Allowing a useful feature is more important than preventing every possible misuse of C++. It should provide facilities for organizing programs into separate, well-defined parts, and provide facilities for combining separately developed parts. No implicit violations of the type system (but allow explicit violations; that is, those explicitly requested by the programmer). User-created types need to have the same support and performance as built-in types. Unused features should not negatively impact created executables (e.g. in lower performance). There should be no language beneath C++ (except assembly language). C++ should work alongside other existing programming languages, rather than fostering its own separate and incompatible programming environment. If the programmer's intent is unknown, allow the programmer to specify it by providing manual control. Main articles: C++03, C++11, C++14, C++17, C++20, C++23, and C++26 C++ standards Year ISO/IEC Standard Informal name 1998 14882:1998 C++98 2003 14882:2003 C++03 2011 14882:2011 C++11, C++0x 2014 14882:2014 C++14, C++1y 2017 14882:2017 C++17, C++1z 2020 14882:2020 C++20, C++2a 2024 14882:2024 C++23, C++2b TBA C++26, C++2c C++ is standardized by an ISO working group known as JTC1/SC22/WG21. So far, it has published seven revisions of the C++ standard and is currently working on the next revision, C++26. Scene during the C++ standards committee meeting in Stockholm in 1996 In 1998, the ISO working group standardized C++ for the first time as ISO/IEC 14882:1998, which is informally known as C++98. In 2003, it published a new version of the C++ standard called ISO/IEC 14882:2003, which fixed problems identified in C++98. The next major revision of the standard was informally referred to as C++0x, but it was not released until 2011. C++11 (14882:2011) included many additions to both the core language and the standard library. In 2014, C++14 (also known as C++1y) was released as a small extension to C++11, featuring mainly bug fixes and small improvements. The Draft International Standard ballot procedures completed in mid-August 2014. After C++14, a major revision C++17, informally known as C++1z, was completed by the ISO C++ committee in mid July 2017 and was approved and published in December 2017. As part of the standardization process, ISO also publishes technical reports and specifications: ISO/IEC TR 18015:2006 on the use of C++ in embedded systems and on performance implications of C++ language and library features, ISO/IEC TR 19768:2007 (also known as the C++ Technical Report 1) on library extensions mostly integrated into C++11, ISO/IEC TR 29124:2010 on special mathematical functions, integrated into C++17, ISO/IEC TR 24733:2011 on decimal floating-point arithmetic, ISO/IEC TS 18822:2015 on the standard filesystem library, integrated into C++17, ISO/IEC TS 19570:2015 on parallel versions of the standard library algorithms, integrated into C++17, ISO/IEC TS 19841:2015 on software transactional memory, ISO/IEC TS 19568:2015 on a new set of library extensions, some of which are already integrated into C++17, ISO/IEC TS 19217:2015 on the C++ concepts, integrated into C++20, ISO/IEC TS 19571:2016 on the library extensions for concurrency, some of which are already integrated into C++20, ISO/IEC TS 19568:2017 on a new set of general-purpose library extensions, ISO/IEC TS 21425:2017 on the library extensions for ranges, integrated into C++20, ISO/IEC TS 22277:2017 on coroutines, integrated into C++20, ISO/IEC TS 19216:2018 on the networking library, ISO/IEC TS 21544:2018 on modules, integrated into C++20, ISO/IEC TS 19570:2018 on a new set of library extensions for parallelism ISO/IEC TS 23619:2021 on new extensions for reflective programming (reflection), ISO/IEC TS 9922:2024 on new set of concurrency extensions, and ISO/IEC TS 19568:2024 on another new set of library extensions. More technical specifications are in development and pending approval. Main article: C++ syntax The C++ language has two main components: a direct mapping of hardware features provided primarily by the C subset, and zero-overhead abstractions based on those mappings. Stroustrup describes C++ as a light-weight abstraction programming language [designed] for building and using efficient and elegant abstractions; and offering both hardware access and abstraction is the basis of C++. Doing it efficiently is what distinguishes it from other languages. C++ inherits most of C's syntax. A hello world program that conforms to the C standard is also a valid C++ hello world program. The following is Bjarne Stroustrup's version of the Hello world program that uses the C++ Standard Library stream facility to write a message to standard output:[note 2] #include <iostream> int main() { std::cout << Hello, world!\\n; } The draft Working Paper standard that became approved as C++98; half of its size was devoted to the C++ Standard Library. Main article: C++ Standard Library The C++ standard consists of two parts: the core language and the standard library. C++ programmers expect the latter on every major implementation of C++; it includes aggregate types (vectors, lists, maps, sets, queues, stacks, arrays, tuples), algorithms (find, for_each, binary_search, random_shuffle, etc.), input/output facilities (iostream, for reading from and writing to the console and files), filesystem library, localisation support, smart pointers for automatic memory management, regular expression support, multi-threading library, atomics support (allowing a variable to be read or written to by at most one thread at a time without any external synchronisation), time utilities (measurement, getting current time, etc.), a system for converting error reporting that does not use C++ exceptions into C++ exceptions, a random number generator, and a slightly modified version of the C standard library (to make it comply with the C++ type system). A large part of the C++ library is based on the Standard Template Library (STL). Useful tools provided by the STL include containers as the collections of objects (such as vectors and lists), iterators that provide array-like access to containers, and algorithms that perform operations such as searching and sorting. Furthermore, (multi)maps (associative arrays) and (multi)sets are provided, all of which export compatible interfaces. Therefore, using templates it is possible to write generic algorithms that work with any container or on any sequence defined by iterators. As in C, the features of the library may be accessed by using the #include directive to include a standard header. The C++ Standard Library provides 105 standard headers, of which 27 are deprecated. With the introduction of modules in C++20, these headers may be accessed with import, and in C++23, the entire standard library can now be directly imported as module itself, with import std;. Currently, the C++ standard library provides two modules, std and std.compat (a compatibility module for std which exports C standard library facilities into the global namespace). The standard incorporates the STL that was originally designed by Alexander Stepanov, who experimented with generic algorithms and containers for many years. When he started with C++, he finally found a language where it was possible to create generic algorithms (e.g., STL sort) that perform even better than, for example, the C standard library qsort, thanks to C++ features like using inlining and compile-time binding instead of function pointers. The standard does not refer to it as STL, as it is merely a part of the standard library, but the term is still widely used to distinguish it from the rest of the standard library (input/output streams, internationalization, diagnostics, the C library subset, etc.). Most C++ compilers, and all major ones, provide a standards-conforming implementation of the C++ standard library. The C++ Core Guidelines are an initiative led by Bjarne Stroustrup, the inventor of C++, and Herb Sutter, the convener and chair of the C++ ISO Working Group, to help programmers write 'Modern C++' by using best practices for the language standards C++11 and newer, and to help developers of compilers and static checking tools to create rules for catching bad programming practices. The main aim is to efficiently and consistently write type and resource safe C++. The Core Guidelines were announced in the opening keynote at CPPCon 2015. The Guidelines are accompanied by the Guideline Support Library (GSL), a header only library of types and functions to implement the Core Guidelines and static checker tools for enforcing Guideline rules. To give compiler vendors greater freedom, the C++ standards committee decided not to dictate the implementation of name mangling, exception handling, and other implementation-specific features. The downside of this decision is that object code produced by different compilers is expected to be incompatible. There are, however, attempts to standardize compilers for particular machines or operating systems. For example, the Itanium C++ ABI is processor-independent (despite its name) and is implemented by GCC and Clang. Main article: Compatibility of C and C++ C++ is often considered to be a superset of C but this is not strictly true. Most C code can easily be made to compile correctly in C++ but there are a few differences that cause some valid C code to be invalid or behave differently in C++. For example, C allows implicit conversion from void* to other pointer types but C++ does not (for type safety reasons). Also, C++ defines many new keywords, such as new and class, which may be used as identifiers (for example, variable names) in a C program. Some incompatibilities have been removed by the 1999 revision of the C standard (C99), which now supports C++ features such as line comments (//) and declarations mixed with code. On the other hand, C99 introduced a number of new features that C++ did not support that were incompatible or redundant in C++, such as variable-length arrays, native complex-number types (however, the std::complex class in the C++ standard library provides similar functionality, although not code-compatible), designated initializers, compound literals, and the restrict keyword. Some of the C99-introduced features were included in the subsequent version of the C++ standard, C++11 (out of those which were not redundant). However, the C++11 standard introduces new incompatibilities, such as disallowing assignment of a string literal to a character pointer, which remains valid C. To intermix C and C++ code, any function declaration or definition that is to be called from/used both in C and C++ must be declared with C linkage by placing it within an extern C {/*...*/} block. Such a function may not rely on features depending on name mangling (i.e., function overloading). Programs developed in C or C++ often utilize inline assembly to take advantage of its low-level functionalities, greater speed, and enhanced control compared to high-level programming languages when optimizing for performance is essential. C++ provides support for embedding assembly language using asm declarations, but the compatibility of inline assembly varies significantly between compilers and architectures. Unlike high-level language features such as Python or Java, assembly code is highly dependent on the underlying processor and compiler implementation. Different C++ compilers implement inline assembly in distinct ways. GCC (GNU Compiler Collection) and Clang: Use the GCC extended inline assembly syntax. Using __asm__ keyword instead of asm when writing code that can be compiled with -ansi and -std options, which allows specifying input/output operands and clobbered registers. This approach is widely adopted, including by Intel and IBM compilers. MSVC (Microsoft Visual C++): The inline assembler is built into the compiler. Previously supported inline assembly via the __asm keyword, but this support has been removed in 64-bit mode, requiring separate .asm modules instead. TI ARM Clang and Embedded Compilers: Some embedded system compilers, like Texas Instruments' TI Arm Clang, allow inline assembly but impose stricter rules to avoid conflicts with register conventions and calling conventions. C++ provides two primary methods of integrating ASM code. 1. Standalone assembly files – Assembly code is written separately and linked with C++ code. 2. Inline assembly – Assembly code is embedded within C++ code using compiler-specific extensions. Example Code for ASM Compatibility When calling an assembly function from C++, use extern C to prevent C++ name mangling. //main.cpp import std; extern C int add_asm(int, int); // Declare the assembly function int main() { int result = add_asm(5, 7); std::println(Result from ASM: {}, result); return 0; } #asm code using RISC-V architecture .section .text .global add_asm add_asm: add a0, a0, a1 # Add first argument (a0) and second argument (a1), store in a0 ret # Return (a0 holds return value) Global variables in assembly must be declared as extern in C++ and marked .global in assembly. // main.cpp import std; extern C int global_var; // Declare global variable from assembly int main() { std::println(Global variable from ASM: {}, global_var); return 0; } #asm using RISC-V architecture .section .data .global global_var .align 4 global_var: .word 42 # Define integer value Inline assembly allows embedding ASM directly in C++ using the asm keyword. //main.cpp (using GCC/CLANG compiler) import std; int main() { int x = 10, y = 20, sum; asm volatile ( add %0, %1, %2 : =r (sum) // Output operand (stored in a register) : r (x), r (y) // Input operands (stored in registers) ); std::println(Sum using inline ASM: {}, sum); return 0; } Computer programming portal Carbon (programming language) Comparison of programming languages List of C++ compilers Outline of C++ Category:C++ libraries ^ For the idea of the C++20 stackless coroutines. ^ This code is copied directly from Bjarne Stroustrup's errata page (p. 633). He addresses the use of '\\n' rather than std::endl. Also see Can I write void main()? Archived 2 July 2020 at the Wayback Machine for an explanation of the implicit return 0; in the main function. This implicit return is not available in other functions. ^ Overview of modules in C++. Microsoft. 24 April 2023. ^ a b c d e f Stroustrup, Bjarne (1996). A history of C++: 1979-1991. History of programming languages---II. ACM. pp. 699–769. doi:10.1145/234286.1057836. ^ Stroustrup, Bjarne (16 December 2021). C++20: Reaching for the Aims of C++ - Bjarne Stroustrup - CppCon 2021. CppCon. Archived from the original on 30 December 2021. Retrieved 30 December 2021. ^ Stroustrup, Bjarne (12 June 2020). Thriving in a crowded and changing world: C++ 2006–2020. Proceedings of the ACM on Programming Languages. 4 (HOPL). Association for Computing Machinery (ACM): 1–168. doi:10.1145/3386320. ISSN 2475-1421. S2CID 219603741. ^ Naugler, David (May 2007). C# 2.0 for C++ and Java programmer: conference workshop. Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. ^ Chapel spec (Acknowledgements) (PDF). Cray Inc. 1 October 2015. Archived (PDF) from the original on 24 June 2018. Retrieved 14 January 2016. ^ Fogus, Michael. Rich Hickey Q&A. Code Quarterly. Archived from the original on 11 January 2017. Retrieved 11 January 2017. ^ Harry. H. Chaudhary (28 July 2014). Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans. Archived from the original on 27 May 2021. Retrieved 29 May 2016. ^ Roger Poon (1 May 2017). Scaling JS++: Abstraction, Performance, and Readability. Archived from the original on 11 May 2020. Retrieved 21 April 2020. ^ The evolution of an extension language: a history of Lua. www.lua.org. Retrieved 4 January 2023. ^ FAQ Nim Programming Language. Archived from the original on 11 July 2017. Retrieved 21 April 2020. ^ 9. Classes — Python 3.6.4 documentation. docs.python.org. Archived from the original on 23 October 2012. Retrieved 9 January 2018. ^ Influences - The Rust Reference. doc.rust-lang.org. Retrieved 4 January 2023. ^ Stroustrup, Bjarne (1997). 1. The C++ Programming Language (Third ed.). Addison-Wesley. ISBN 0-201-88954-4. OCLC 59193992. ^ a b c Stroustrup, B. (6 May 2014). Lecture:The essence of C++. University of Edinburgh. YouTube. Archived from the original on 28 April 2015. Retrieved 12 June 2015. ^ Stroustrup, Bjarne (17 February 2014). C++ Applications. stroustrup.com. Archived from the original on 4 April 2021. Retrieved 5 May 2014. ^ a b ISO/IEC 14882:2024. International Organization for Standardization. Retrieved 21 October 2020. ^ Bjarne Stroustrup's Homepage. www.stroustrup.com. Archived from the original on 14 May 2019. Retrieved 15 May 2013. ^ C++ IS schedule (PDF). Archived (PDF) from the original on 10 August 2020. Retrieved 9 August 2020. ^ C++; Where it's heading. Archived from the original on 3 December 2018. Retrieved 3 December 2018. ^ Re: [RFC] Convert builin-mailinfo.c to use The Better String Library (Mailing list). 6 September 2007. Archived from the original on 8 March 2021. Retrieved 31 March 2015. ^ Re: Efforts to attract more users? (Mailing list). 12 July 2010. Archived from the original on 21 March 2015. Retrieved 31 March 2015. ^ Andrew Binstock (18 May 2011). Dr. Dobb's: Interview with Ken Thompson. Dr. Dobb's. Archived from the original on 13 March 2014. Retrieved 7 February 2014. ^ Peter Seibel (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. pp. 475–476. ISBN 978-1-4302-1948-4. Archived from the original on 1 December 2019. Retrieved 9 November 2017. ^ C++ in Coders at Work. 16 October 2009. Archived from the original on 10 November 2017. Retrieved 9 November 2017. ^ An Interview with Donald Knuth. Dr. Dobb's. Archived from the original on 8 March 2021. Retrieved 18 July 2021. ^ (La)TeX Navigator. Archived from the original on 20 November 2017. Retrieved 10 November 2017. ^ Claburn, Thomas (2 March 2025). C++ creator calls for help to defend programming language from 'serious attacks'. The Register. Retrieved 5 March 2025. ^ a b Stroustrup, Bjarne (7 March 2010). Bjarne Stroustrup's FAQ: When was C++ invented?. stroustrup.com. Archived from the original on 6 February 2016. Retrieved 16 September 2010. ^ a b Stroustrup, Bjarne. Evolving a language in and for the real world: C++ 1991-2006 (PDF). Archived (PDF) from the original on 20 November 2007. Retrieved 14 August 2013. ^ a b c Stroustrup, Bjarne. A History of C ++ : 1979− 1991 (PDF). Archived (PDF) from the original on 2 February 2019. Retrieved 18 July 2013. ^ Stroustrup, Bjarne. The C++ Programming Language (First ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010. ^ Stroustrup, Bjarne. The C++ Programming Language (Second ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010. ^ Sutter, Herb (30 June 2016). Trip report: Summer ISO C++ standards meeting (Oulu). herbsutter.com. Archived from the original on 8 October 2016. the next standard after C++17 will be C++20 ^ Dusíková, Hana (6 November 2019). N4817: 2020 Prague Meeting Invitation and Information (PDF). Archived (PDF) from the original on 29 December 2019. Retrieved 13 February 2020. ^ Current Status. isocpp.org. Archived from the original on 8 September 2020. Retrieved 7 September 2020. ^ C++20 Approved -- Herb Sutter. isocpp.org. Archived from the original on 11 September 2020. Retrieved 8 September 2020. ^ Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering (Press release). National Academy of Engineering. 3 January 2018. Archived from the original on 3 January 2018. Retrieved 14 December 2021. ^ TIOBE (November 2024). TIOBE Index for November 2024. TIOBE.com. TIOBE Company. Archived from the original on 18 November 2024. Retrieved 18 November 2024. ^ Bjarne Stroustrup's FAQ – Where did the name C++ come from?. Archived from the original on 6 February 2016. Retrieved 16 January 2008. ^ C For C++ Programmers. Northeastern University. Archived from the original on 17 November 2010. Retrieved 7 September 2015. ^ ISO/IEC 14882:1998. International Organization for Standardization. Archived from the original on 15 January 2017. Retrieved 23 November 2018. ^ ISO/IEC 14882:2003. International Organization for Standardization. Archived from the original on 13 August 2021. Retrieved 23 November 2018. ^ a b ISO/IEC 14882:2011. International Organization for Standardization. Archived from the original on 27 May 2016. Retrieved 23 November 2018. ^ ISO/IEC 14882:2014. International Organization for Standardization. Archived from the original on 29 April 2016. Retrieved 23 November 2018. ^ ISO/IEC 14882:2017. International Organization for Standardization. Archived from the original on 29 January 2013. Retrieved 2 December 2017. ^ ISO/IEC 14882:2020. International Organization for Standardization. Archived from the original on 16 December 2020. Retrieved 16 December 2020. ^ We have an international standard: C++0x is unanimously approved. Sutter's Mill. 12 August 2011. Archived from the original on 28 June 2018. Retrieved 23 November 2018. ^ The Future of C++. Archived from the original on 23 October 2018. Retrieved 23 November 2018 – via channel9.msdn.com. ^ We have C++14! : Standard C++. isocpp.org. Archived from the original on 19 August 2014. Retrieved 19 August 2014. ^ Sutter, Herb (15 July 2017). Trip report: Summer ISO C++ standards meeting (Toronto). Archived from the original on 6 August 2017. Retrieved 4 August 2017. ^ ISO/IEC TR 18015:2006. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TR 19768:2007. International Organization for Standardization. Archived from the original on 4 March 2016. Retrieved 15 February 2019. ^ ISO/IEC TR 29124:2010. International Organization for Standardization. Archived from the original on 12 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TR 24733:2011. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 18822:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19570:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19841:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19568:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19217:2015. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19571:2016. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19568:2017. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 21425:2017. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 22277:2017. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19216:2018. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 21544:2018. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 19570:2018. International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019. ^ ISO/IEC TS 23619:2021. International Organization for Standardization. Archived from the original on 15 December 2018. Retrieved 11 October 2021. ^ ISO/IEC TS 9922:2024. International Organization for Standardization. Archived from the original on 1 April 2025. Retrieved 1 April 2025. ^ ISO/IEC TS 19568:2024. International Organization for Standardization. Archived from the original on 25 February 2025. Retrieved 1 April 2025. ^ B. Stroustrup (interviewed by Sergio De Simone) (30 April 2015). Stroustrup: Thoughts on C++17 - An Interview. Archived from the original on 8 July 2015. Retrieved 8 July 2015. ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 46. ISBN 0-201-70073-5. ^ Stroustrup, Bjarne. Open issues for The C++ Programming Language (3rd Edition). Archived from the original on 5 May 2014. Retrieved 5 May 2014. ^ Graziano Lo Russo (2008). An Interview with A. Stepanov. stlport.org. Archived from the original on 4 March 2009. Retrieved 8 October 2015. ^ C++ Core Guidelines. isocpp.github.io. Archived from the original on 16 February 2020. Retrieved 9 February 2020. ^ Bjarne Stroustrup announces C++ Core Guidelines : Standard C++. isocpp.org. Archived from the original on 11 May 2020. Retrieved 31 March 2020. ^ microsoft/GSL. 18 July 2021. Archived from the original on 18 July 2021. Retrieved 18 July 2021 – via GitHub. ^ Using the C++ Core Guidelines checkers. Microsoft Learn. Archived from the original on 13 August 2021. Retrieved 31 March 2020. ^ C++ ABI Summary. 20 March 2001. Archived from the original on 10 July 2018. Retrieved 30 May 2006. ^ Bjarne Stroustrup's FAQ – Is C a subset of C++?. Archived from the original on 6 February 2016. Retrieved 5 May 2014. ^ C9X – The New C Standard. Archived from the original on 21 June 2018. Retrieved 27 December 2008. ^ C++0x Support in GCC. Archived from the original on 21 July 2010. Retrieved 12 October 2010. ^ C++0x Core Language Features In VC10: The Table. Archived from the original on 21 August 2010. Retrieved 12 October 2010. ^ Clang - C++98, C++11, and C++14 Status. Clang.llvm.org. 12 May 2013. Archived from the original on 4 July 2013. Retrieved 10 June 2013. ^ Bokil, Milind A. (2021). Writing Assembly Routines within C/C++ and Java Programs. ResearchGate. Retrieved 1 April 2025. ^ De Vilhena, Paulo Emílio; Lahav, Ori; Vafeiadis, Viktor; Raad, Azalea (2024). Extending the C/C++ Memory Model with Inline Assembly. Proceedings of the ACM on Programming Languages. 8: 1081–1107. arXiv:2408.17208. doi:10.1145/3689749. ^ cppreference.com contributors. asm declaration. cppreference.com. Retrieved 1 April 2025. ^ Extended Asm (Using the GNU Compiler Collection). GCC Online Documentation. GNU Project. Retrieved 1 April 2025. ^ Intel Corporation. Inline Assembly. Intel® C++ Compiler Classic Developer Guide and Reference, Version 2021.9. Retrieved 1 April 2025. ^ IBM. Inline assembly statements (IBM extension). IBM Documentation. Retrieved 1 April 2025. ^ Inline Assembler Overview. Microsoft Learn. Microsoft. Retrieved 1 April 2025. ^ Interfacing C and C++ With Assembly Language. Texas Instruments. Texas Instruments Incorporated. 23 February 2025. Retrieved 1 April 2025. ^ C++ to ASM linkage in GCC. OSDev Wiki. Retrieved 1 April 2025. Abrahams, David; Gurtovoy, Aleksey (2005). C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond. Addison-Wesley. ISBN 0-321-22725-5. Alexandrescu, Andrei (2001). Modern C++ Design: Generic Programming and Design Patterns Applied. Addison-Wesley. ISBN 0-201-70431-5. Alexandrescu, Andrei; Sutter, Herb (2004). C++ Design and Coding Standards: Rules and Guidelines for Writing Programs. Addison-Wesley. ISBN 0-321-11358-6. Becker, Pete (2006). The C++ Standard Library Extensions : A Tutorial and Reference. Addison-Wesley. ISBN 0-321-41299-0. Brokken, Frank (2010). C++ Annotations. University of Groningen. ISBN 978-90-367-0470-0. Archived from the original on 28 April 2010. Retrieved 28 April 2010. Coplien, James O. (1994) [reprinted with corrections, original year of publication 1992]. Advanced C++: Programming Styles and Idioms. Addison-Wesley. ISBN 0-201-54855-0. Dewhurst, Stephen C. (2005). C++ Common Knowledge: Essential Intermediate Programming. Addison-Wesley. ISBN 0-321-32192-8. Information Technology Industry Council (15 October 2003). Programming languages – C++ (Second ed.). Geneva: ISO/IEC. 14882:2003(E). Josuttis, Nicolai M. (2012). The C++ Standard Library, A Tutorial and Reference (Second ed.). Addison-Wesley. ISBN 978-0-321-62321-8. Koenig, Andrew; Moo, Barbara E. (2000). Accelerated C++ – Practical Programming by Example. Addison-Wesley. ISBN 0-201-70353-X. Lippman, Stanley B.; Lajoie, Josée; Moo, Barbara E. (2011). C++ Primer (Fifth ed.). Addison-Wesley. ISBN 978-0-321-71411-4. Lippman, Stanley B. (1996). Inside the C++ Object Model. Addison-Wesley. ISBN 0-201-83454-5. Meyers, Scott (2005). Effective C++ (Third ed.). Addison-Wesley. ISBN 0-321-33487-6. Stroustrup, Bjarne (2013). The C++ Programming Language (Fourth ed.). Addison-Wesley. ISBN 978-0-321-56384-2. Stroustrup, Bjarne (1994). The Design and Evolution of C++. Addison-Wesley. ISBN 0-201-54330-3. Stroustrup, Bjarne (2014). Programming: Principles and Practice Using C++ (Second ed.). Addison-Wesley. ISBN 978-0-321-99278-9. Sutter, Herb (2001). More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions. Addison-Wesley. ISBN 0-201-70434-X. Sutter, Herb (2004). Exceptional C++ Style. Addison-Wesley. ISBN 0-201-76042-8. Vandevoorde, David; Josuttis, Nicolai M. (2003). C++ Templates: The complete Guide. Addison-Wesley. ISBN 0-201-73484-2. JTC1/SC22/WG21 – the ISO/IEC C++ Standard Working Group Standard C++ Foundation – a non-profit organization that promotes the use and understanding of standard C++. Bjarne Stroustrup is a director of the organization. C++ Keywords C++ Expressions C++ Operator Precedence C++ at Wikipedia's sister projects:Media from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from Wikiversity vteC++ C++ Outline C++98 C++03 C++11 C++14 C++17 C++20 C++23 C++26 Libraries Features C++ syntax Classes Concepts Copy constructor Exception handling (Exception safety) Function overloading Modules Move semantics new and delete Operator overloading Operators Preprocessor References Templates Virtual functions Standard Library I/O Streams Smart pointers STL Strings Ideas As-if rule Barton–Nackman trick Curiously recurring template pattern Most vexing parse One Definition Rule Resource acquisition is initialization Rule of three Slicing Special member functions Substitution failure is not an error Template metaprogramming Compilers Comparison of C++ compilers Borland C++ Borland Turbo C++ C++Builder Clang GCC Intel C++ Compiler Oracle Solaris Studio Visual C++ (MSVC) Watcom C/C++ IDEs Comparison of C IDEs Anjuta CLion Code::Blocks CodeLite Dev-C++ Eclipse Geany NetBeans KDevelop Qt Creator Visual Studio Superset languages Objective-C++ C++/CLI C++/CX C++/WinRT Ch SYCL Dialects Embedded C++ Relative toother languages Comparison of programming languages Comparison of Java and C++ Compatibility of C and C++ Criticism of C++ People David Abrahams Andrei Alexandrescu Pete Becker Rick Mascitti Scott Meyers Alexander Stepanov Bjarne Stroustrup Herb Sutter Category vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteInternational Organization for Standardization (ISO) standardsList of ISO standards – ISO romanizations – IEC standards1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40500 42010 45001 50001 55000 56000 80000 Category vteIEC standardsIEC 60027 60034 60038 60062 60063 60068 60112 60228 60269 60297 60309 60320 60364 60446 60559 60601 60870 60870-5 60870-6 60906-1 60908 60929 60958 60980-344 61030 61131 61131-3 61131-9 61158 61162 61334 61355 61360 61400 61499 61508 61511 61784 61850 61851 61883 61960 61968 61970 62014-4 62026 62056 62061 62196 62262 62264 62304 62325 62351 62365 62366 62379 62386 62455 62680 62682 62700 63110 63119 63382 ISO/IEC 646 1989 2022 4909 5218 6429 6523 7810 7811 7812 7813 7816 7942 8613 8632 8652 8859 9126 9293 9496 9529 9592 9593 9899 9945 9995 10021 10116 10165 10179 10279 10646 10967 11172 11179 11404 11544 11801 12207 13250 13346 13522-5 13568 13816 13818 14443 14496 14651 14882 15288 15291 15408 15444 15445 15504 15511 15693 15897 15938 16262 16485 17024 17025 18004 18014 18181 19752 19757 19770 19788 20000 20802 21000 21827 22275 22537 23000 23003 23008 23270 23360 24707 24727 24744 24752 26300 27000 27000-series 27002 27040 29110 29119 33001 38500 39075 42010 80000 81346 Related International Electrotechnical Commission Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRef",
    "paradigm": "Multi-paradigm : procedural , imperative , functional , object-oriented , generic , modular",
    "first_appeared": "1985 ; 40 years ago ( 1985 )",
    "stable_release": "C++23 (ISO/IEC 14882:2024)",
    "typing_discipline": "Static , strong , nominative , partially inferred",
    "influenced_by": "Ada , ALGOL 68 , BCPL , C , CLU , F# , ML , Mesa , Modula-2 , Simula , Smalltalk",
    "influenced": "Ada 95 , C# , C99 , Carbon , Chapel , Clojure , D , Java , JS++ , Lua , Nim , Objective-C++ , Perl , PHP , Python , Rust , Seed7",
    "stable_release_date": "2024-10-19T00:00:00Z"
  }
]