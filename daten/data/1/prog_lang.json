[
{
  "title": "Python (programming language)",
  "url": "https://en.wikipedia.org/wiki/Python_(programming_language)",
  "history": "Main article: History of Python The designer of Python, Guido van Rossum, at PyCon US 2024 Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL, capable of exception handling and interfacing with the Amoeba operating system. Its implementation began in December 1989. Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his permanent vacation from his responsibilities as Python's benevolent dictator for life (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker (he has since come out of retirement and is self-titled BDFL-emeritus). In January 2019, active Python core developers elected a five-member Steering Council to lead the project. The name Python is said to come from the British comedy series Monty Python's Flying Circus. Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support. Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3. It no longer receives security patches or updates. While Python 2.7 and older versions are officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. 2.7.18+ (plus 3.10), with the plus meaning (at least some) backported security updates. Python 3.0 was released on 3 December 2008, with some new semantics and changed syntax. At least every Python release since (now unsupported) 3.5 has added some syntax to the language, and a few later releases have dropped outdated modules, or changed semantics, at least in a minor way. As of 12 March 2025[update], Python 3.13 is the latest stable release. Python 3.13 currently receives full bug-fix and security updates, while Python 3.12—released in October 2023—will have active bug-fix support only until April 2025. Python 3.9 is the oldest supported version of Python (albeit in the 'security support' phase), due to Python 3.8 reaching end-of-life. Starting with 3.13, it and later versions have 2 years of full support (up from one and a half), followed by 3 years of security support (for same total support as before). Security updates were expedited in 2021 (and again twice in 2022, and more fixed in 2023 and in September 2024 for Python 3.12.6 down to 3.8.20), since all Python versions were insecure (including 2.7) because of security issues leading to possible remote code execution and web-cache poisoning. Python 3.10 added the | union type operator and the match and case keywords (for structural pattern matching statements). 3.11 expanded exception handling functionality. Python 3.12 added the new keyword type. Notable changes in 3.11 from 3.10 include increased program execution speed and improved error reporting. Python 3.11 claims to be between 10 and 60% faster than Python 3.10, and Python 3.12 adds another 5% on top of that. It also has improved error messages (again improved in 3.14), and many other changes. Python 3.13 introduces more syntax for types, a new and improved interactive interpreter (REPL), featuring multi-line editing and color support; an incremental garbage collector (producing shorter pauses for collection in programs with a lot of objects, and addition to the improved speed in 3.11 and 3.12), and an experimental just-in-time (JIT) compiler (such features, can/needs to be enabled specifically for the increase in speed), and an experimental free-threaded build mode, which disables the global interpreter lock (GIL), allowing threads to run more concurrently, that latter feature enabled with python3.13t or python3.13t.exe. Python 3.13 introduces some change in behavior, i.e. new well-defined semantics, fixing bugs (plus many removals of deprecated classes, functions and methods, and removed some of the C API and outdated modules): The [old] implementation of locals() and frame.f_locals is slow, inconsistent and buggy [and it] has many corner cases and oddities. Code that works around those may need to be changed. Code that uses locals() for simple templating, or print debugging, will continue to work correctly. Some (more) standard library modules and many deprecated classes, functions and methods, will be removed in Python 3.15 or 3.16. Python 3.11 adds Sigstore digital verification signatures for all CPython artifacts (in addition to PGP). Since use of PGP has been criticized by security practitioners, Python is moving to Sigstore exclusively and dropping PGP from 3.14. Python 3.14 is now in alpha 3; regarding possible change to annotations: In Python 3.14, from __future__ import annotations will continue to work as it did before, converting annotations into strings. PEP 711 proposes PyBI: a standard format for distributing Python Binaries. Python 3.15 will Make UTF-8 mode default, the mode exists in all current Python versions, but currently needs to be opted into. UTF-8 is already used, by default, on Windows (and elsewhere), for most things, but e.g. to open files it's not and enabling also makes code fully cross-platform, i.e. use UTF-8 for everything on all platforms.",
  "design_philosophy_and_features": "Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming and metaobjects). Many other paradigms are supported via extensions, including design by contract and logic programming. Python is often referred to as a 'glue language' because it can seamlessly integrate components written in other languages. Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. It uses dynamic name resolution (late binding), which binds method and variable names during program execution. Its design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions. The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML. Its core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as: Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Readability counts. However, Python features regularly violate these principles and have received criticism for adding unnecessary language bloat. Responses to these criticisms are that the Zen of Python is a guideline rather than a rule. The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8. Nevertheless, rather than building all of its functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach. Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's there is more than one way to do it motto, Python embraces a there should be one—and preferably only one—obvious way to do it. philosophy. In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use. Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: To describe something as 'clever' is not considered a compliment in the Python culture. Python's developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity. Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed. Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group Monty Python—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms spam and eggs (a reference to a Monty Python sketch) in examples, instead of the often-used foo and bar. A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. Pythonic code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability.",
  "syntax_and_semantics": "Main article: Python syntax and semantics An example of Python code and indentation Example of C# code with curly braces and semicolons Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.",
  "indentation": "Main article: Python syntax and semantics § Indentation Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block. Thus, the program's visual structure accurately represents its semantic structure. This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.",
  "statements_and_control_flow": "Python's statements include: The assignment statement, using a single equals sign = The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else if) The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block The while statement, which executes a block of code as long as its condition is true The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups); it also ensures that clean-up code in a finally block is always run regardless of how the block exits The raise statement, used to raise a specified exception or re-raise a caught exception The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming The def statement, which defines a function or method The with statement, which encloses a code block within a context manager (for example, acquiring a lock before it is run, then releasing the lock; or opening and closing a file), allowing resource-acquisition-is-initialization (RAII)-like behavior and replacing a common try/finally idiom The break statement, which exits a loop The continue statement, which skips the rest of the current iteration and continues with the next The del statement, which removes a variable—deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined The pass statement, serving as a NOP, syntactically needed to create an empty code block The assert statement, used in debugging to check for conditions that should apply The yield statement, which returns a value from a generator function (and also an operator); used to implement coroutines The return statement, used to return a value from a function The import and from statements, used to import modules whose functions or variables can be used in the current program The match and case statements, an analog of the switch statement construct, that compares an expression against one or more cases as a control-of-flow measure. The assignment statement (=) binds a name as a reference to a separate, dynamically allocated object. Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed data type; however, it always refers to some object with a type. This is called dynamic typing—in contrast to statically-typed languages, where each variable may contain only a value of a certain type. Python does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will. However, better support for coroutine-like functionality is provided by extending Python's generators. Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.",
  "expressions": "Python's expressions include: The +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of divisions in Python: floor division (or integer division) // and floating-point / division. Python uses the ** operator for exponentiation. Python uses the + operator for string concatenation. Python uses the * operator for duplicating a string a specified number of times. The @ infix operator is intended to be used by libraries such as NumPy for matrix multiplication. The syntax :=, called the walrus operator, was introduced in Python 3.8. It assigns values to variables as part of a larger expression. In Python, == compares by value. Python's is operator may be used to compare object identities (comparison by reference), and comparisons may be chained—for example, a <= b <= c. Python uses and, or, and not as Boolean operators. Python has a type of expression named a list comprehension, and a more general expression named a generator expression. Anonymous functions are implemented using lambda expressions; however, there may be only one expression in each body. Conditional expressions are written as x if c else y (different in order of operands from the c ? x : y operator common to many other languages). Python makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples, written as (1, 2, 3), are immutable and thus can be used as keys of dictionaries, provided all of the tuple's elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a new tuple containing the elements of both. Thus, given the variable t initially equal to (1, 2, 3), executing t = t + (4, 5) first evaluates t + (4, 5), which yields (1, 2, 3, 4, 5), which is then assigned back to t—thereby effectively modifying the contents of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts. Python features sequence unpacking where multiple expressions, each evaluating to anything that can be assigned (to a variable, writable property, etc.) are associated in an identical manner to that forming tuple literals—and, as a whole, are put on the left-hand side of the equal sign in an assignment statement. The statement expects an iterable object on the right-hand side of the equal sign that produces the same number of values as the provided writable expressions; when iterated through them, it assigns each of the produced values to the corresponding expression on the left. Python has a string format operator % that functions analogously to printf format strings in C—e.g. spam=%s eggs=%d % (blah, 2) evaluates to spam=blah eggs=2. In Python 2.6+ and 3+, this was supplemented by the format() method of the str class, e.g. spam={0} eggs={1}.format(blah, 2). Python 3.6 added f-strings: spam = blah; eggs = 2; f'spam={spam} eggs={eggs}'. Strings in Python can be concatenated by adding them (with the same operator as for adding integers and floats), e.g. spam + eggs returns spameggs. If strings contain numbers, they are added as strings rather than integers, e.g. 2 + 2 returns 22. Python has various string literals: Delimited by single or double quotes; unlike in Unix shells, Perl, and Perl-influenced languages, single and double quotes work the same. Both use the backslash (\\) as an escape character. String interpolation became available in Python 3.6 as formatted string literals. Triple-quoted (beginning and ending with three single or double quotes), which may span multiple lines and function like here documents in shells, Perl, and Ruby. Raw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. (Compare @-quoting in C#.) Python has array index and array slicing expressions in lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter, called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted—for example, a[:] returns a copy of the entire list. Each element of a slice is a shallow copy. In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to duplicating some functionality. For example: List comprehensions vs. for-loops Conditional expressions vs. if blocks The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements Statements cannot be a part of an expression—so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement.",
  "methods": "Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) in some other object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby). Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in arithmetic operations and type conversion.",
  "typing": "The standard type hierarchy in Python 3 Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them. Python allows programmers to define their own types using classes, most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection. Before version 3.0, Python had two kinds of classes (both using the same syntax): old-style and new-style; current Python versions only support the semantics of the new style. Python supports optional type annotations. These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors. Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization. Summary of Python 3's built-in types Type Mutability Description Syntax examples bool immutable Boolean value TrueFalse bytearray mutable Sequence of bytes bytearray(b'Some ASCII')bytearray(bSome ASCII)bytearray([119, 105, 107, 105]) bytes immutable Sequence of bytes b'Some ASCII'bSome ASCIIbytes([119, 105, 107, 105]) complex immutable Complex number with real and imaginary parts 3+2.7j3 + 2.7j dict mutable Associative array (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type {'key1': 1.0, 3: False}{} types.EllipsisType immutable An ellipsis placeholder to be used as an index in NumPy arrays ...Ellipsis float immutable Double-precision floating-point number. The precision is machine-dependent but in practice is generally implemented as a 64-bit IEEE 754 number with 53 bits of precision. 1.33333 frozenset immutable Unordered set, contains no duplicates; can contain mixed types, if hashable frozenset([4.0, 'string', True]) int immutable Integer of unlimited magnitude 42 list mutable List, can contain mixed types [4.0, 'string', True][] types.NoneType immutable An object representing the absence of a value, often called null in other languages None types.NotImplementedType immutable A placeholder that can be returned from overloaded operators to indicate unsupported operand types. NotImplemented range immutable An immutable sequence of numbers commonly used for looping a specific number of times in for loops range(−1, 10)range(10, −5, −2) set mutable Unordered set, contains no duplicates; can contain mixed types, if hashable {4.0, 'string', True}set() str immutable A character string: sequence of Unicode codepoints 'Wikipedia'WikipediaSpanning multiple lines Spanning multiple lines tuple immutable Can contain mixed types (4.0, 'string', True)('single element',)()",
  "arithmetic_operations": "Python has the usual symbols for arithmetic operators (+, -, *, /), the floor division operator // and the modulo operation % (where the remainder can be negative, e.g. 4 % -3 == -2). It also has ** for exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0, and a matrix‑multiplication operator @ . These operators work like in traditional math; with the same precedence rules, the operators infix (+ and - can also be unary to represent positive and negative numbers respectively). The division between integers produces floating-point results. The behavior of division has changed significantly over time: Current Python (i.e. since 3.0) changed / to always be floating-point division, e.g. 5/2 == 2.5. The floor division // operator was introduced. So 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 and -7.5//3 == -3.0. Adding from __future__ import division causes a module used in Python 2.7 to use Python 3.0 rules for division (see above). In Python terms, / is true division (or simply division), and // is floor division. / before version 3.0 is classic division. Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a + b)//b == a//b + 1 is always true. It also means that the equation b*(a//b) + a%b == a is valid for both positive and negative values of a. However, maintaining the validity of this equation means that while the result of a%b is, as expected, in the half-open interval [0, b), where b is a positive integer, it has to lie in the interval (b, 0] when b is negative. Python provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses round to even: round(1.5) and round(2.5) both produce 2. Versions before 3 used round-away-from-zero: round(0.5) is 1.0, round(-0.5) is −1.0. Python allows Boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c. C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c. Python uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision and several rounding modes. The Fraction class in the fractions module provides arbitrary precision for rational numbers. Due to Python's extensive mathematics library and the third-party library NumPy, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.",
  "function_syntax": "Functions are created in Python using the def keyword. In Python, you define the function as if you were calling it, by typing the function name and then the attributes required. Here is an example of a function that will print whatever is given: def printer(input1, input2=already there): print(input1) print(input2) printer(hello) # Example output: # hello # already there If you want the attribute to have a set value if no value is given, use the variable-defining syntax inside the function definition.",
  "programming_examples": "Hello, World! program: print('Hello, world!') Program to calculate the factorial of a positive integer: n = int(input('Type a number, and its factorial will be printed: ')) if n < 0: raise ValueError('You must enter a non-negative integer') factorial = 1 for i in range(2, n + 1): factorial *= i print(factorial)",
  "libraries": "Python's large standard library is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals, manipulating regular expressions, and unit testing. Some parts of the standard library are covered by specifications—for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333—but most are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations. As of 13 March 2025,[update] the Python Package Index (PyPI), the official repository for third-party Python software, contains over 614,339 packages with a wide range of functionality, including: Automation Data analytics Databases Documentation Graphical user interfaces Image processing Machine learning Mobile apps Multimedia Computer networking Scientific computing System administration Test frameworks Text processing Web frameworks Web scraping",
  "development_environments": "See also: Comparison of integrated development environments § Python Most Python implementations (including CPython) include a read–eval–print loop (REPL), permitting them to function as a command line interpreter for which users enter statements sequentially and receive results immediately. Python also comes with an Integrated development environment (IDE) called IDLE, which is more beginner-oriented. Other shells, including IDLE and IPython, add further abilities such as improved auto-completion, session state retention, and syntax highlighting. As well as standard desktop integrated development environments including PyCharm, IntelliJ Idea, Visual Studio Code etc, there are web browser-based IDEs, including SageMath, for developing science- and math-related programs; PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing scientific computing.",
  "implementations": "See also: List of Python software § Python implementations",
  "reference_implementation": "CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++. CPython compiles Python programs into an intermediate bytecode which is then executed by its virtual machine. CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8; Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS. Platform portability was one of its earliest priorities. (During Python 1 and 2 development, even OS/2 and Solaris were supported, but support has since been dropped for many platforms.) All current Python versions (i.e. since 3.7) only support operating systems with multi-threading support.",
  "other_implementations": "All alternative implementations have at least slightly different semantics (e.g. may have unordered dictionaries, unlike all current Python versions), e.g. with the larger Python ecosystem, such as with supporting the C Python API of with PyPy: PyPy is a fast, compliant interpreter of Python 2.7 and 3.10. Its just-in-time compiler often brings a significant speed improvement over CPython, but some libraries written in C cannot be used with it. It has e.g. RISC-V support. Codon is a language with an ahead-of-time (AOT) compiler, that (AOT) compiles a statically-typed Python-like language with syntax and semantics are nearly identical to Python's, there are some notable differences e.g. it uses 64-bit machine integers, for speed, not arbitrary like Python, and it claims speedups over CPython are usually on the order of 10–100x. It compiles to machine code (via LLVM) and supports native multithreading. Codon can also compile to Python extension modules that can be imported and used from Python. Stackless Python is a significant fork of CPython that implements microthreads; it does not use the call stack in the same way, thus allowing massively concurrent programs. PyPy also has a stackless version. MicroPython and CircuitPython are Python 3 variants optimized for microcontrollers, including Lego Mindstorms EV3. Pyston is a variant of the Python runtime that uses just-in-time compilation to speed up the execution of Python programs. Cinder is a performance-oriented fork of CPython 3.8 that contains a number of optimizations, including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time JIT, and an experimental bytecode compiler. Snek Embedded Computing Language (compatible with e.g. 8-bit AVR microcontrollers such as ATmega 328P-based Arduino, as well as larger ones compatible with MicroPython) is Python-inspired, but it is not Python. It is possible to write Snek programs that run under a full Python system, but most Python programs will not run under Snek. It is an imperative language not including OOP / classes, unlike Python, and simplifying to one number type with 32-bit single-precision (similar to JavaScript, except smaller).",
  "no_longer_supported_implementations": "Other just-in-time Python compilers have been developed, but are now unsupported: Google began a project named Unladen Swallow in 2009, with the aim of speeding up the Python interpreter five-fold by using the LLVM, and of improving its multithreading ability to scale to thousands of cores, while ordinary implementations suffer from the global interpreter lock. Psyco is a discontinued just-in-time specializing compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain data types and is faster than the standard Python code. Psyco does not support Python 2.7 or later. PyS60 was a Python 2 interpreter for Series 60 mobile phones released by Nokia in 2005. It implemented many of the modules from the standard library and some additional modules for integrating with the Symbian operating system. The Nokia N900 also supports Python with GTK widget libraries, enabling programs to be written and run on the target device.",
  "cross_compilers_to_other_languages": "There are several compilers/transpilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language: Brython, Transcrypt and Pyjs (latest release in 2012) compile Python to JavaScript. Cython compiles (a superset of) Python to C. The resulting code is also usable with Python via direct C-level API calls into the Python interpreter. PyJL compiles/transpiles a subset of Python to human-readable, maintainable, and high-performance Julia source code. Despite claiming high performance, no tool can claim to do that for arbitrary Python code; i.e. it's known not possible to compile to a faster language or machine code. Unless semantics of Python are changed, but in many cases speedup is possible with few or no changes in the Python code. The faster Julia source code can then be used from Python, or compiled to machine code, and based that way. Nuitka compiles Python into C. It works with Python 3.4 to 3.12 (and 2.6 and 2.7), for Python's main supported platforms (and Windows 7 or even Windows XP) and for Android. It claims complete support for Python 3.10, some support for 3.11 and 3.12 and experimental support for Python 3.13. It supports macOS including Apple Silicon-based. It's a free compiler, though it also has commercial add-ons (e.g. for hiding source code). Numba is used from Python, as a tool (enabled by adding a decorator to relevant Python code), a JIT compiler that translates a subset of Python and NumPy code into fast machine code. Pythran compiles a subset of Python 3 to C++ (C++11). RPython can be compiled to C, and is used to build the PyPy interpreter of Python. The Python → 11l → C++ transpiler compiles a subset of Python 3 to C++ (C++17). Specialized: MyHDL is a Python-based hardware description language (HDL), that converts MyHDL code to Verilog or VHDL code. Older projects (or not to be used with Python 3.x and latest syntax): Google's Grumpy (latest release in 2017) transpiles Python 2 to Go. IronPython allows running Python 2.7 programs (and an alpha, released in 2021, is also available for Python 3.4, although features and behaviors from later versions may be included) on the .NET Common Language Runtime. Jython compiles Python 2.7 to Java bytecode, allowing the use of the Java libraries from a Python program. Pyrex (latest release in 2010) and Shed Skin (latest release in 2013) compile to C and C++ respectively.",
  "performance": "Performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13. Python's performance compared to other programming languages is also benchmarked by The Computer Language Benchmarks Game.",
  "development": "Python's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions. Python coding style is covered in PEP 8. Outstanding PEPs are reviewed and commented on by the Python community and the steering council. Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug tracker hosted at by the foundation. In 2022, all issues and discussions were migrated to GitHub. Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017. CPython's public releases come in three types, distinguished by which part of the version number is incremented: Backward-incompatible versions, where code is expected to break and needs to be manually ported. The first part of the version number is incremented. These releases happen infrequently—version 3.0 was released 8 years after 2.0. According to Guido van Rossum, a version 4.0 is very unlikely to ever happen. Major or feature releases are largely compatible with the previous version but introduce new features. The second part of the version number is incremented. Starting with Python 3.9, these releases are expected to happen annually. Each major version is supported by bug fixes for several years after its release. Bug fix releases, which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented. Many alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large unit test suite during development. The major academic conference on Python is PyCon. There are also special Python mentoring programs, such as PyLadies. Python 3.12 removed wstr meaning Python extensions need to be modified, and 3.10 added pattern matching to the language. Python 3.12 dropped some outdated modules, and more will be dropped in the future, deprecated as of 3.13; already deprecated array 'u' format code will emit DeprecationWarning since 3.13 and will be removed in Python 3.16. The 'w' format code should be used instead. Part of ctypes is also deprecated and http.server.CGIHTTPRequestHandler will emit a DeprecationWarning, and will be removed in 3.15. Using that code already has a high potential for both security and functionality bugs. Parts of the typing module are deprecated, e.g. creating a typing.NamedTuple class using keyword arguments to denote the fields and such (and more) will be disallowed in Python 3.15.",
  "api_documentation_generators": "Tools that can generate documentation for Python API include pydoc (available as part of the standard library), Sphinx, Pdoc and its forks, Doxygen and Graphviz, among others.",
  "naming": "Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture; for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar. The official Python documentation also contains various references to Monty Python routines. Users of Python are sometimes referred to as Pythonistas. The prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of Simple DirectMedia Layer to Python (commonly used to create games); PyQt and PyGTK, which bind Qt and GTK to Python respectively; and PyPy, a Python implementation originally written in Python.",
  "popularity": "Since 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming Community Index where as of December 2022[update] it was the most popular language (ahead of C, C++, and Java). It was selected as Programming Language of the Year (for the highest rise in ratings in a year) in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020[update]). Large organizations that use Python include Wikipedia, Google, Yahoo!, CERN, NASA, Facebook, Amazon, Instagram, Spotify, and some smaller entities like Industrial Light & Magic and ITA. The social news networking site Reddit was written mostly in Python. Organizations that partially use Python include Discord and Baidu.",
  "uses": "Main article: List of Python software Python Powered Python can serve as a scripting language for web applications, e.g. via mod_wsgi for the Apache webserver. With Web Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program communications between computers, and is used (for example) by Dropbox. Libraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing, with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus. OpenCV has Python bindings with a rich set of features for computer vision and image processing. Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog. As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing. The combination of Python and Prolog has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capabilities. The Janus system, in particular, exploits the similarities between these two languages, in part because of their use of dynamic typing, and the simple recursive nature of their data structures. Typical applications of this combination include natural language processing, visual query answering, geospatial reasoning, and handling of semantic web data. The Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion. Python can also be used for graphical user interface (GUI) by using libraries like Tkinter. Python is embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP, Inkscape, Scribus and Paint Shop Pro, and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS. It has also been used in several video games, and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go. Many operating systems include Python as a standard component. It ships with most Linux distributions, AmigaOS 4 (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package) and can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage. Python is used extensively in the information security industry, including in exploit development. Most of the Sugar software for the One Laptop per Child XO, developed at Sugar Labs as of 2008[update], is written in Python. The Raspberry Pi single-board computer project has adopted Python as its main user-programming language. LibreOffice includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature since Version 4.0 from 7 February 2013.",
  "languages_influenced_by_python": "Python's design and philosophy have influenced many other programming languages: Boo uses indentation, a similar syntax, and a similar object model. Cobra uses indentation and a similar syntax, and its Acknowledgements document lists Python first among languages that influenced it. CoffeeScript, a programming language that cross-compiles to JavaScript, has Python-inspired syntax. ECMAScript–JavaScript borrowed iterators and generators from Python. GDScript, a scripting language very similar to Python, built-in to the Godot game engine. Go is designed for the speed of working in a dynamic language like Python and shares the same syntax for slicing arrays. Groovy was motivated by the desire to bring the Python design philosophy to Java. Julia was designed to be as usable for general programming as Python. Mojo is a non-strict superset of Python (e.g. still missing classes, and adding e.g. struct). Nim uses indentation and similar syntax. Ruby's creator, Yukihiro Matsumoto, has said: I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language. Swift, a programming language developed by Apple, has some Python-inspired syntax. Kotlin blends Python and Java features, minimizing boilerplate code for enhanced developer efficiency. Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl, Erlang, and Swift.",
  "see_also": "Computer programming portalFree and open-source software portal Python syntax and semantics pip (package manager) List of programming languages History of programming languages Comparison of programming languages",
  "references": "^ General Python FAQ – Python 3 documentation. docs.python.org. Retrieved 7 July 2024. ^ Python 0.9.1 part 01/21. alt.sources archives. Archived from the original on 11 August 2021. Retrieved 11 August 2021. ^ Why is Python a dynamic language and also a strongly typed language. Python Wiki. Archived from the original on 14 March 2021. Retrieved 27 January 2021. ^ a b PEP 483 – The Theory of Type Hints. Python.org. Archived from the original on 14 June 2020. Retrieved 14 June 2018. ^ PEP 11 – CPython platform support | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 22 April 2024. ^ PEP 738 – Adding Android as a supported platform | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 19 May 2024. ^ Download Python for Other Platforms. Python.org. Archived from the original on 27 November 2020. Retrieved 18 August 2023. ^ test – Regression tests package for Python – Python 3.7.13 documentation. docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. ^ platform – Access to underlying platform's identifying data – Python 3.10.4 documentation. docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022. ^ Holth, Moore (30 March 2014). PEP 0441 – Improving Python ZIP Application Support. Archived from the original on 26 December 2018. Retrieved 12 November 2015. ^ Starlark Language. Archived from the original on 15 June 2020. Retrieved 25 May 2019. ^ a b Why was Python created in the first place?. General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 22 March 2007. I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python). ^ Ada 83 Reference Manual (raise statement). Archived from the original on 22 October 2019. Retrieved 7 January 2020. ^ a b Kuchling, Andrew M. (22 December 2006). Interview with Guido van Rossum (July 1998). amk.ca. Archived from the original on 1 May 2007. Retrieved 12 March 2012. I'd spent a summer at DEC's Systems Research Center, which introduced me to Modula-2+; the Modula-3 final report was being written there at about the same time. What I learned there later showed up in Python's exception handling, modules, and the fact that methods explicitly contain 'self' in their parameter list. String slicing came from Algol-68 and Icon. ^ a b c itertools – Functions creating iterators for efficient looping – Python 3.7.1 documentation. docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. ^ van Rossum, Guido (1993). An Introduction to Python for UNIX/C Programmers. Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable. ^ a b Classes. The Python Tutorial. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 20 February 2012. It is a mixture of the class mechanisms found in C++ and Modula-3 ^ Lundh, Fredrik. Call By Object. effbot.org. Archived from the original on 23 November 2019. Retrieved 21 November 2017. replace CLU with Python, record with instance, and procedure with function or method, and you get a pretty accurate description of Python's object model. ^ Simionato, Michele. The Python 2.3 Method Resolution Order. Python Software Foundation. Archived from the original on 20 August 2020. Retrieved 29 July 2014. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers ^ Kuchling, A. M. Functional Programming HOWTO. Python v2.7.2 documentation. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 9 February 2012. List comprehensions and generator expressions [...] are a concise notation for such operations, borrowed from the functional programming language Haskell. ^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). PEP 255 – Simple Generators. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 9 February 2012. ^ More Control Flow Tools. Python 3 documentation. Python Software Foundation. Archived from the original on 4 June 2016. Retrieved 24 July 2015. By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python. With the lambda keyword, small anonymous functions can be created. ^ re – Regular expression operations – Python 3.10.6 documentation. docs.python.org. Archived from the original on 18 July 2018. Retrieved 6 September 2022. This module provides regular expression matching operations similar to those found in Perl. ^ CoffeeScript. coffeescript.org. Archived from the original on 12 June 2020. Retrieved 3 July 2018. ^ Perl and Python influences in JavaScript. www.2ality.com. 24 February 2013. Archived from the original on 26 December 2018. Retrieved 15 May 2015. ^ Rauschmayer, Axel. Chapter 3: The Nature of JavaScript; Influences. O'Reilly, Speaking JavaScript. Archived from the original on 26 December 2018. Retrieved 15 May 2015. ^ a b Why We Created Julia. Julia website. February 2012. Archived from the original on 2 May 2020. Retrieved 5 June 2014. We want something as usable for general programming as Python [...] ^ a b Krill, Paul (4 May 2023). Mojo language marries Python and MLIR for AI development. InfoWorld. Archived from the original on 5 May 2023. Retrieved 5 May 2023. ^ Ring Team (4 December 2017). Ring and other languages. ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 4 December 2017. ^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. ^ Lattner, Chris (3 June 2014). Chris Lattner's Homepage. Chris Lattner. Archived from the original on 25 December 2018. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ V documentation (Introduction). GitHub. Retrieved 24 December 2024. ^ Kuhlman, Dave. A Python Book: Beginning Python, Advanced Python, and Python Exercises. Section 1.1. Archived from the original (PDF) on 23 June 2012. ^ About Python. Python Software Foundation. Archived from the original on 20 April 2012. Retrieved 24 April 2012., second section Fans of Python use the phrase batteries included to describe the standard library, which covers everything from asynchronous processing to zip files. ^ PEP 206 – Python Advanced Library. Python.org. Archived from the original on 5 May 2021. Retrieved 11 October 2021. ^ Rossum, Guido Van (20 January 2009). The History of Python: A Brief Timeline of Python. The History of Python. Archived from the original on 5 June 2020. Retrieved 5 March 2021. ^ Peterson, Benjamin (20 April 2020). Python 2.7.18, the last release of Python 2. Python Insider. Archived from the original on 26 April 2020. Retrieved 27 April 2020. ^ Stack Overflow Developer Survey 2022. Stack Overflow. Archived from the original on 27 June 2022. Retrieved 12 August 2022. ^ The State of Developer Ecosystem in 2020 Infographic. JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 1 March 2021. Retrieved 5 March 2021. ^ a b TIOBE Index. TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required. ^ PYPL PopularitY of Programming Language index. pypl.github.io. Archived from the original on 14 March 2017. Retrieved 26 March 2021. ^ a b Venners, Bill (13 January 2003). The Making of Python. Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007. ^ van Rossum, Guido (29 August 2000). SETL (was: Lukewarm about range literals). Python-Dev (Mailing list). Archived from the original on 14 July 2018. Retrieved 13 March 2011. ^ van Rossum, Guido (20 January 2009). A Brief Timeline of Python. The History of Python. Archived from the original on 5 June 2020. Retrieved 20 January 2009. ^ Fairchild, Carlie (12 July 2018). Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life. Linux Journal. Archived from the original on 13 July 2018. Retrieved 13 July 2018. ^ PEP 8100. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 4 May 2019. ^ PEP 13 – Python Language Governance. Python.org. Archived from the original on 27 May 2021. Retrieved 25 August 2021. ^ Briggs, Jason R.; Lipovača, Miran (2013). Python for kids: a playful introduction to programming. San Francisco, Calif: No Starch Press. ISBN 978-1-59327-407-8. ^ Kuchling, A. M.; Zadka, Moshe (16 October 2000). What's New in Python 2.0. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 11 February 2012. ^ PEP 373 – Python 2.7 Release Schedule. python.org. Archived from the original on 19 May 2020. Retrieved 9 January 2017. ^ PEP 466 – Network Security Enhancements for Python 2.7.x. python.org. Archived from the original on 4 June 2020. Retrieved 9 January 2017. ^ Sunsetting Python 2. Python.org. Archived from the original on 12 January 2020. Retrieved 22 September 2019. ^ PEP 373 – Python 2.7 Release Schedule. Python.org. Archived from the original on 13 January 2020. Retrieved 22 September 2019. ^ mattip (25 December 2023). PyPy v7.3.14 release. PyPy. Archived from the original on 5 January 2024. Retrieved 5 January 2024. ^ Langa, Łukasz (17 May 2022). Python 3.9.13 is now available. Python Insider. Archived from the original on 17 May 2022. Retrieved 21 May 2022. ^ Status of Python versions. Python Developer's Guide. Retrieved 7 October 2024. ^ Python. endoflife.date. 8 October 2024. Retrieved 20 November 2024. ^ CVE-2021-3177. Red Hat Customer Portal. Archived from the original on 6 March 2021. Retrieved 26 February 2021. ^ CVE-2021-3177. CVE. Archived from the original on 27 February 2021. Retrieved 26 February 2021. ^ CVE-2021-23336. CVE. Archived from the original on 24 February 2021. Retrieved 26 February 2021. ^ Built-in Types. ^ corbet (24 October 2022). Python 3.11 released [LWN.net]. lwn.net. Retrieved 15 November 2022. ^ What's New In Python 3.13. Python documentation. Retrieved 30 April 2024. ^ PEP 667 – Consistent views of namespaces | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 7 October 2024. ^ Wouters, Thomas (9 April 2024). Python Insider: Python 3.12.3 and 3.13.0a6 released. Python Insider. Retrieved 29 April 2024. ^ PEP 594 – Removing dead batteries from the standard library. Python Enhancement Proposals. Python Softtware Foundation. 20 May 2019. ^ PEP 761 – Deprecating PGP signatures for CPython artifacts | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 6 January 2025. ^ PEP 749 – Implementing PEP 649 | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. ^ PEP 711: PyBI: a standard format for distributing Python Binaries. Discussions on Python.org. 7 April 2023. Retrieved 20 November 2024. ^ PEP 686 – Make UTF-8 mode default | peps.python.org. Python Enhancement Proposals (PEPs). Retrieved 20 November 2024. ^ The Cain Gang Ltd. Python Metaclasses: Who? Why? When? (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009. ^ 3.3. Special method names. The Python Language Reference. Python Software Foundation. Archived from the original on 15 December 2018. Retrieved 27 June 2009. ^ PyDBC: method preconditions, method postconditions and class invariants for Python. Archived from the original on 23 November 2019. Retrieved 24 September 2011. ^ Contracts for Python. Archived from the original on 15 June 2020. Retrieved 24 September 2011. ^ PyDatalog. Archived from the original on 13 June 2020. Retrieved 22 July 2012. ^ Glue It All Together With Python. Python.org. Retrieved 30 September 2024. ^ Extending and Embedding the Python Interpreter: Reference Counts. Docs.python.org. Archived from the original on 18 October 2012. Retrieved 5 June 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting. ^ a b Hettinger, Raymond (30 January 2002). PEP 289 – Generator Expressions. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. ^ 6.5 itertools – Functions creating iterators for efficient looping. Docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. ^ a b Peters, Tim (19 August 2004). PEP 20 – The Zen of Python. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008. ^ Lutz, Mark (January 2022). Python Changes 2014+. Learning Python. Archived from the original on 15 March 2024. Retrieved 25 February 2024. ^ Confusion regarding a rule in The Zen of Python. Python Help - Discussions on Python.org. 3 May 2022. Archived from the original on 25 February 2024. Retrieved 25 February 2024. ^ Ambi, Chetan (4 July 2021). The Most Controversial Python Walrus Operator. Python Simplified. Archived from the original on 27 August 2023. Retrieved 5 February 2024. ^ Grifski, Jeremy (24 May 2020). The Controversy Behind The Walrus Operator in Python. The Renegade Coder. Archived from the original on 28 December 2023. Retrieved 25 February 2024. ^ Bader, Dan. Python String Formatting Best Practices. Real Python. Archived from the original on 18 February 2024. Retrieved 25 February 2024. ^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition. O'Reilly Media. p. 230. ISBN 978-0-596-00797-3. Archived from the original on 23 February 2020. Retrieved 14 November 2015. ^ Python Culture. ebeab. 21 January 2014. Archived from the original on 30 January 2014. ^ a b Transpiling Python to Julia using PyJL (PDF). Archived (PDF) from the original on 19 November 2023. Retrieved 20 September 2023. After manually modifying one line of code by specifying the necessary type information, we obtained a speedup of 52.6×, making the translated Julia code 19.5× faster than the original Python code. ^ Why is it called Python?. General Python FAQ. Docs.python.org. Archived from the original on 24 October 2012. Retrieved 3 January 2023. ^ 15 Ways Python Is a Powerful Force on the Web. Archived from the original on 11 May 2019. Retrieved 3 July 2018. ^ pprint – Data pretty printer – Python 3.11.0 documentation. docs.python.org. Archived from the original on 22 January 2021. Retrieved 5 November 2022. stuff=['spam', 'eggs', 'lumberjack', 'knights', 'ni'] ^ Code Style – The Hitchhiker's Guide to Python. docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021. ^ Is Python a good language for beginning programmers?. General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 21 March 2007. ^ Myths about indentation in Python. Secnetix.de. Archived from the original on 18 February 2018. Retrieved 19 April 2011. ^ Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4. ^ PEP 8 – Style Guide for Python Code. Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. ^ 8. Errors and Exceptions – Python 3.12.0a0 documentation. docs.python.org. Archived from the original on 9 May 2022. Retrieved 9 May 2022. ^ Highlights: Python 2.5. Python.org. Archived from the original on 4 August 2019. Retrieved 20 March 2018. ^ van Rossum, Guido (22 April 2009). Tail Recursion Elimination. Neopythonic.blogspot.be. Archived from the original on 19 May 2018. Retrieved 3 December 2012. ^ van Rossum, Guido (9 February 2006). Language Design Is Not Just Solving Puzzles. Artima forums. Artima. Archived from the original on 17 January 2020. Retrieved 21 March 2007. ^ van Rossum, Guido; Eby, Phillip J. (10 May 2005). PEP 342 – Coroutines via Enhanced Generators. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 29 May 2020. Retrieved 19 February 2012. ^ PEP 380. Python.org. Archived from the original on 4 June 2020. Retrieved 3 December 2012. ^ division. python.org. Archived from the original on 20 July 2006. Retrieved 30 July 2014. ^ PEP 0465 – A dedicated infix operator for matrix multiplication. python.org. Archived from the original on 4 June 2020. Retrieved 1 January 2016. ^ Python 3.5.1 Release and Changelog. python.org. Archived from the original on 14 May 2020. Retrieved 1 January 2016. ^ What's New in Python 3.8. Archived from the original on 8 June 2020. Retrieved 14 October 2019. ^ van Rossum, Guido; Hettinger, Raymond (7 February 2003). PEP 308 – Conditional Expressions. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 13 March 2016. Retrieved 13 July 2011. ^ 4. Built-in Types – Python 3.6.3rc1 documentation. python.org. Archived from the original on 14 June 2020. Retrieved 1 October 2017. ^ 5.3. Tuples and Sequences – Python 3.7.1rc2 documentation. python.org. Archived from the original on 10 June 2020. Retrieved 17 October 2018. ^ a b PEP 498 – Literal String Interpolation. python.org. Archived from the original on 15 June 2020. Retrieved 8 March 2017. ^ Why must 'self' be used explicitly in method definitions and calls?. Design and History FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 19 February 2012. ^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code. No Starch Press. p. 322. ISBN 978-1-59327-966-0. Archived from the original on 13 August 2021. Retrieved 7 July 2021. ^ The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1. Archived from the original on 26 October 2012. Retrieved 12 January 2011. ^ PEP 484 – Type Hints | peps.python.org. peps.python.org. Archived from the original on 27 November 2023. Retrieved 29 November 2023. ^ typing — Support for type hints. Python documentation. Python Software Foundation. Archived from the original on 21 February 2020. Retrieved 22 December 2023. ^ mypy – Optional Static Typing for Python. Archived from the original on 6 June 2020. Retrieved 28 January 2017. ^ Introduction. mypyc.readthedocs.io. Archived from the original on 22 December 2023. Retrieved 22 December 2023. ^ 15. Floating Point Arithmetic: Issues and Limitations – Python 3.8.3 documentation. docs.python.org. Archived from the original on 6 June 2020. Retrieved 6 June 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 double precision. ^ Zadka, Moshe; van Rossum, Guido (11 March 2001). PEP 237 – Unifying Long Integers and Integers. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 24 September 2011. ^ Built-in Types. Archived from the original on 14 June 2020. Retrieved 3 October 2019. ^ PEP 465 – A dedicated infix operator for matrix multiplication. python.org. Archived from the original on 29 May 2020. Retrieved 3 July 2018. ^ a b Zadka, Moshe; van Rossum, Guido (11 March 2001). PEP 238 – Changing the Division Operator. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013. ^ Why Python's Integer Division Floors. 24 August 2010. Archived from the original on 5 June 2020. Retrieved 25 August 2010. ^ round, The Python standard library, release 3.2, §2: Built-in functions, archived from the original on 25 October 2012, retrieved 14 August 2011 ^ round, The Python standard library, release 2.7, §2: Built-in functions, archived from the original on 27 October 2012, retrieved 14 August 2011 ^ Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. p. 66. ISBN 9780672329784. ^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206. ^ a b Batista, Facundo (17 October 2003). PEP 327 – Decimal Data Type. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008. ^ What's New in Python 2.6. Python v2.6.9 documentation. 29 October 2013. Archived from the original on 23 December 2019. Retrieved 26 September 2015. ^ 10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke. University of Washington Department of Statistics. Archived from the original on 31 May 2020. Retrieved 3 February 2019. ^ Shell, Scott (17 June 2014). An introduction to Python for scientific computing (PDF). Archived (PDF) from the original on 4 February 2019. Retrieved 3 February 2019. ^ Piotrowski, Przemyslaw (July 2006). Build a Rapid Web Development Environment for Python Server Pages and Oracle. Oracle Technology Network. Oracle. Archived from the original on 2 April 2019. Retrieved 12 March 2012. ^ Eby, Phillip J. (7 December 2003). PEP 333 – Python Web Server Gateway Interface v1.0. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012. ^ PyPI. PyPI. 13 March 2025. Archived from the original on 22 February 2025. ^ Enthought, Canopy. Canopy. www.enthought.com. Archived from the original on 15 July 2017. Retrieved 20 August 2016. ^ PEP 7 – Style Guide for C Code | peps.python.org. peps.python.org. Archived from the original on 24 April 2022. Retrieved 28 April 2022. ^ 4. Building C and C++ Extensions – Python 3.9.2 documentation. docs.python.org. Archived from the original on 3 March 2021. Retrieved 1 March 2021. ^ van Rossum, Guido (5 June 2001). PEP 7 – Style Guide for C Code. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 1 June 2020. Retrieved 24 November 2008. ^ CPython byte code. Docs.python.org. Archived from the original on 5 June 2020. Retrieved 16 February 2016. ^ Python 2.5 internals (PDF). Archived (PDF) from the original on 6 August 2012. Retrieved 19 April 2011. ^ Changelog – Python 3.9.0 documentation. docs.python.org. Archived from the original on 7 February 2021. Retrieved 8 February 2021. ^ Download Python. Python.org. Archived from the original on 8 December 2020. Retrieved 13 December 2020. ^ history [vmspython]. www.vmspython.org. Archived from the original on 2 December 2020. Retrieved 4 December 2020. ^ An Interview with Guido van Rossum. Oreilly.com. Archived from the original on 16 July 2014. Retrieved 24 November 2008. ^ Download Python for Other Platforms. Python.org. Archived from the original on 27 November 2020. Retrieved 4 December 2020. ^ PyPy compatibility. Pypy.org. Archived from the original on 6 June 2020. Retrieved 3 December 2012. ^ Team, The PyPy (28 December 2019). Download and Install. PyPy. Archived from the original on 8 January 2022. Retrieved 8 January 2022. ^ speed comparison between CPython and Pypy. Speed.pypy.org. Archived from the original on 10 May 2021. Retrieved 3 December 2012. ^ Codon: Differences with Python. Archived from the original on 25 May 2023. Retrieved 28 August 2023. ^ Lawson, Loraine (14 March 2023). MIT-Created Compiler Speeds up Python Code. The New Stack. Archived from the original on 6 April 2023. Retrieved 28 August 2023. ^ Application-level Stackless features – PyPy 2.0.2 documentation. Doc.pypy.org. Archived from the original on 4 June 2020. Retrieved 17 July 2013. ^ Python-for-EV3. LEGO Education. Archived from the original on 7 June 2020. Retrieved 17 April 2019. ^ Yegulalp, Serdar (29 October 2020). Pyston returns from the dead to speed Python. InfoWorld. Archived from the original on 27 January 2021. Retrieved 26 January 2021. ^ cinder: Instagram's performance-oriented fork of CPython. GitHub. Archived from the original on 4 May 2021. Retrieved 4 May 2021. ^ Aroca, Rafael (7 August 2021). Snek Lang: feels like Python on Arduinos. Yet Another Technology Blog. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ Aufranc (CNXSoft), Jean-Luc (16 January 2020). Snekboard Controls LEGO Power Functions with CircuitPython or Snek Programming Languages (Crowdfunding) – CNX Software. CNX Software – Embedded Systems News. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ Kennedy (@mkennedy), Michael. Ready to find out if you're git famous?. pythonbytes.fm. Archived from the original on 5 January 2024. Retrieved 4 January 2024. ^ Packard, Keith (20 December 2022). The Snek Programming Language: A Python-inspired Embedded Computing Language (PDF). Archived (PDF) from the original on 4 January 2024. Retrieved 4 January 2024. ^ Plans for optimizing Python. Google Project Hosting. 15 December 2009. Archived from the original on 11 April 2016. Retrieved 24 September 2011. ^ Python on the Nokia N900. Stochastic Geometry. 29 April 2010. Archived from the original on 20 June 2019. Retrieved 9 July 2015. ^ Brython. brython.info. Archived from the original on 3 August 2018. Retrieved 21 January 2021. ^ Transcrypt – Python in the browser. transcrypt.org. Archived from the original on 19 August 2018. Retrieved 22 December 2020. ^ Transcrypt: Anatomy of a Python to JavaScript Compiler. InfoQ. Archived from the original on 5 December 2020. Retrieved 20 January 2021. ^ Nuitka Home | Nuitka Home. nuitka.net. Archived from the original on 30 May 2020. Retrieved 18 August 2017. ^ Guelton, Serge; Brunet, Pierrick; Amini, Mehdi; Merlini, Adrien; Corbillon, Xavier; Raynaud, Alan (16 March 2015). Pythran: enabling static optimization of scientific Python programs. Computational Science & Discovery. 8 (1). IOP Publishing: 014001. Bibcode:2015CS&D....8a4001G. doi:10.1088/1749-4680/8/1/014001. ISSN 1749-4699. ^ The Python → 11l → C++ transpiler. Archived from the original on 24 September 2022. Retrieved 17 July 2022. ^ google/grumpy. 10 April 2020. Archived from the original on 15 April 2020. Retrieved 25 March 2020 – via GitHub. ^ Projects. opensource.google. Archived from the original on 24 April 2020. Retrieved 25 March 2020. ^ Francisco, Thomas Claburn in San. Google's Grumpy code makes Python Go. www.theregister.com. Archived from the original on 7 March 2021. Retrieved 20 January 2021. ^ GitHub – IronLanguages/ironpython3: Implementation of Python 3.x for .NET Framework that is built on top of the Dynamic Language Runtime. GitHub. Archived from the original on 28 September 2021. ^ IronPython.net /. ironpython.net. Archived from the original on 17 April 2021. ^ Jython FAQ. www.jython.org. Archived from the original on 22 April 2021. Retrieved 22 April 2021. ^ Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M. ^ The Computer Language Benchmarks Game. Archived from the original on 14 June 2020. Retrieved 30 April 2020. ^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). PEP 1 – PEP Purpose and Guidelines. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011. ^ PEP 8 – Style Guide for Python Code. Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019. ^ Cannon, Brett. Guido, Some Guys, and a Mailing List: How Python is Developed. python.org. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009. ^ Moving Python's bugs to GitHub [LWN.net]. Archived from the original on 2 October 2022. Retrieved 2 October 2022. ^ Python Developer's Guide – Python Developer's Guide. devguide.python.org. Archived from the original on 9 November 2020. Retrieved 17 December 2019. ^ Hughes, Owen (24 May 2021). Programming languages: Why Python 4.0 might never arrive, according to its creator. TechRepublic. Archived from the original on 14 July 2022. Retrieved 16 May 2022. ^ PEP 602 – Annual Release Cycle for Python. Python.org. Archived from the original on 14 June 2020. Retrieved 6 November 2019. ^ Changing the Python release cadence [LWN.net]. lwn.net. Archived from the original on 6 November 2019. Retrieved 6 November 2019. ^ Norwitz, Neal (8 April 2002). [Python-Dev] Release Schedules (was Stability & change). Archived from the original on 15 December 2018. Retrieved 27 June 2009. ^ a b Aahz; Baxter, Anthony (15 March 2001). PEP 6 – Bug Fix Releases. Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 27 June 2009. ^ Python Buildbot. Python Developer's Guide. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 September 2011. ^ 1. Extending Python with C or C++ – Python 3.9.1 documentation. docs.python.org. Archived from the original on 23 June 2020. Retrieved 14 February 2021. ^ PEP 623 – Remove wstr from Unicode. Python.org. Archived from the original on 5 March 2021. Retrieved 14 February 2021. ^ PEP 634 – Structural Pattern Matching: Specification. Python.org. Archived from the original on 6 May 2021. Retrieved 14 February 2021. ^ Documentation Tools. Python.org. Archived from the original on 11 November 2020. Retrieved 22 March 2021. ^ a b Whetting Your Appetite. The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012. ^ In Python, should I use else after a return in an if block?. Stack Overflow. Stack Exchange. 17 February 2011. Archived from the original on 20 June 2019. Retrieved 6 May 2011. ^ Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming. O'Reilly Media, Inc. p. 17. ISBN 9781449379322. Archived from the original on 17 July 2017. Retrieved 9 May 2017. ^ Fehily, Chris (2002). Python. Peachpit Press. p. xv. ISBN 9780201748840. Archived from the original on 17 July 2017. Retrieved 9 May 2017. ^ Lubanovic, Bill (2014). Introducing Python. Sebastopol, CA : O'Reilly Media. p. 305. ISBN 978-1-4493-5936-2. Retrieved 31 July 2023. ^ Blake, Troy (18 January 2021). TIOBE Index for January 2021. Technology News and Information by SeniorDBA. Archived from the original on 21 March 2021. Retrieved 26 February 2021. ^ Quotes about Python. Python Software Foundation. Archived from the original on 3 June 2020. Retrieved 8 January 2012. ^ Organizations Using Python. Python Software Foundation. Archived from the original on 21 August 2018. Retrieved 15 January 2009. ^ Python : the holy grail of programming. CERN Bulletin (31/2006). CERN Publications. 31 July 2006. Archived from the original on 15 January 2013. Retrieved 11 February 2012. ^ Shafer, Daniel G. (17 January 2003). Python Streamlines Space Shuttle Mission Design. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 November 2008. ^ Tornado: Facebook's Real-Time Web Framework for Python – Facebook for Developers. Facebook for Developers. Archived from the original on 19 February 2019. Retrieved 19 June 2018. ^ What Powers Instagram: Hundreds of Instances, Dozens of Technologies. Instagram Engineering. 11 December 2016. Archived from the original on 15 June 2020. Retrieved 27 May 2019. ^ How we use Python at Spotify. Spotify Labs. 20 March 2013. Archived from the original on 10 June 2020. Retrieved 25 July 2018. ^ Fortenberry, Tim",
  "sources": "Python for Artificial Intelligence. Python Wiki. 19 July 2012. Archived from the original on 1 November 2012. Retrieved 3 December 2012. Paine, Jocelyn, ed. (August 2005). AI in Python. AI Expert Newsletter. Amzi!. Archived from the original on 26 March 2012. Retrieved 11 February 2012. PyAIML 0.8.5 : Python Package Index. Pypi.python.org. Retrieved 17 July 2013. Russell, Stuart J. & Norvig, Peter (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 978-0-13-604259-4.",
  "further_reading": "Downey, Allen (July 2024). Think Python: How to Think Like a Computer Scientist (3rd ed.). O'Reilly Media. ISBN 978-1098155438. Lutz, Mark (2013). Learning Python (5th ed.). O'Reilly Media. ISBN 978-0-596-15806-4. Summerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN 978-0-321-68056-3. Ramalho, Luciano (May 2022). Fluent Python. O'Reilly Media. ISBN 978-1-4920-5632-4.",
  "external_links": "Python at Wikipedia's sister projects Media from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from WikiversityData from Wikidata Official website The Python Tutorial vtePythonImplementations CircuitPython CLPython CPython Cython MicroPython Numba IronPython Jython Psyco PyPy Python for S60 Shed Skin Stackless Python Unladen Swallow more... IDEs eric IDLE Ninja-IDE PyCharm PyDev Spyder more... Topics WSGI ASGI Designer Guido van Rossum Software (list) Python Software Foundation Python Conference (PyCon) vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Forth Fortran Go Haskell Java JavaScript TypeScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vtePython web frameworks CherryPy CubicWeb Django FastAPI Flask Grok Nevow Pylons Pyramid Quixote Tornado TurboGears TwistedWeb web2py Zope 2 more... Comparison vteDifferentiable computingGeneral Differentiable programming Information geometry Statistical manifold Automatic differentiation Neuromorphic computing Pattern recognition Ricci calculus Computational learning theory Inductive bias Hardware IPU TPU VPU Memristor SpiNNaker Software libraries TensorFlow PyTorch Keras scikit-learn Theano JAX Flux.jl MindSpore Portals Computer programming Technology vteFree and open-source softwareGeneral Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Softwarepackages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category vteStatistical softwarePublic domain Dataplot Epi Info CSPro X-12-ARIMA Open-source ADMB DAP gretl jamovi JASP JAGS JMulTi Julia Jupyter (Julia, Python, R) GNU Octave OpenBUGS Orange PSPP Python (statsmodels, PyMC3, IPython, IDLE) R (RStudio) SageMath SimFiT SOFA Statistics Stan XLispStat Freeware BV4.1 CumFreq SegReg XploRe WinBUGS CommercialCross-platform Data Desk GAUSS GraphPad InStat GraphPad Prism IBM SPSS Statistics IBM SPSS Modeler JMP Maple Mathcad Mathematica MATLAB OxMetrics RATS Revolution Analytics SAS SmartPLS Stata StatView SUDAAN S-PLUS TSP World Programming System (WPS) Windows only BMDP EViews GenStat LIMDEP LISREL MedCalc Microfit Minitab MLwiN NCSS Shazam SigmaStat Statistica StatsDirect StatXact SYSTAT The Unscrambler Unistat Excel add-ons Analyse-it Unistat for Excel XLfit RExcel Comparison • Category vteNumerical-analysis softwareFree Advanced Simulation Library ADMB Chapel Euler Mathematical Toolbox FreeFem++ FreeMat Genius Gmsh GNU Octave gretl Julia Jupyter (Julia, Python, R; IPython) MFEM OpenFOAM Python R SageMath Salome ScicosLab Scilab X10 Weka Discontinued Fortress Proprietary DADiSP FEATool Multiphysics GAUSS LabVIEW Maple Mathcad Mathematica MATLAB Speakeasy VisSim Comparison Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef"
},
{
  "title": "Rust (programming language)",
  "url": "https://en.wikipedia.org/wiki/Rust_(programming_language)",
  "early_years_": "Mozilla Foundation headquarters in Mountain View, California Rust began as a personal project in 2006 by Mozilla employee Graydon Hoare. Hoare has stated that Rust was named for the group of fungi that are over-engineered for survival. During the time period between 2006 and 2009, Rust was not publicized to others at Mozilla and was written in Hoare's free time;: 7:50 Hoare began speaking about the language around 2009 after a small group at Mozilla became interested in the project. Hoare emphasized prioritizing good ideas from old languages over new development, citing languages including CLU (1974), BETA (1975), Mesa (1977), NIL (1981), Erlang (1987), Newsqueak (1988), Napier (1988), Hermes (1990), Sather (1990), Alef (1992), and Limbo (1996) as influences, stating many older languages [are] better than new ones, and describing the language as technology from the past come to save the future from itself.: 8:17 Early Rust developer Manish Goregaokar similarly described Rust as being based on mostly decades-old research. During the early years, the Rust compiler was written in about 38,000 lines of OCaml.: 15:34 Early Rust contained features such as explicit object-oriented programming via an obj keyword (later removed),: 10:08 and a typestates system that would allow variables of a type to be tracked along with state changes (such as going from uninitialized to initialized).: 13:12",
  "mozilla_sponsorship_": "Mozilla officially sponsored the Rust project in 2009. Brendan Eich and other executives, intrigued by the possibility of using Rust for a safe web browser engine, placed engineers on the project including Patrick Walton, Niko Matsakis, Felix Klock, and Manish Goregaokar. A conference room taken by the project developers was dubbed the nerd cave, with a sign placed outside the door. During this time period, work had shifted from the initial OCaml compiler to a self-hosting compiler, i.e., written in Rust, based on LLVM.[note 4] The Rust ownership system was also in place by 2010. The Rust logo was developed in 2011 based on a bicycle chainring. The first public release, Rust 0.1 was released on January 20, 2012 for Windows, Linux, and MacOS. The early 2010s saw increasing involvement from open source volunteers outside of Mozilla and outside of the United States. At Mozilla, executives would eventually employ over a dozen engineers to work on Rust full time over the next decade.",
  "evolution_": "The years from 2012 to 2015 were marked by substantial changes to the Rust type system, especially, removal of the typestate system, consolidation of other language features, and the removal of the garbage collector.: 18:36 Memory management through the ownership system was gradually consolidated and expanded to prevent memory-related bugs. By 2013, the garbage collector feature was rarely used, and was removed by the team in favor of the ownership system. Other changes during this time included the removal of pure functions, which were declared by an explicit pure annotation, in March 2013. Specialized syntax support for channels and various pointer types were removed to simplify the language.: 22:32 Rust's expansion and consolidation was influenced by developers coming from C++ (e.g., low-level performance of features), scripting languages (e.g., Cargo and package management), and functional programming (e.g., type systems development).: 30:50 Graydon Hoare stepped down from Rust in 2013. This allowed it to evolve organically under a more federated governance structure, with a core team of initially 6 people,: 21:45 around 30-40 developers total across various other teams,: 22:22 and a Request for Comments (RFC) process for new language features added in March 2014.: 33:47 The core team would grow to 9 people by 2016: 21:45 with over 1600 proposed RFCs.: 34:08 According to Andrew Binstock writing for Dr. Dobb's Journal in January 2014, while Rust was widely viewed as a remarkably elegant language, adoption slowed because it radically changed from version to version. Rust development at this time was focused on finalizing the language features and moving towards 1.0 so it could begin promising backward compatibility.: 41:26 Six years after Mozilla sponsored its development, the first stable release, Rust 1.0, was published on May 15, 2015. A year after the release, the Rust compiler had accumulated over 1,400 contributors and there were over 5,000 third-party libraries published on the Rust package management website Crates.io.: 43:15",
  "servo_and_early_adoption_": "Early homepage of Mozilla's Servo browser engine The development of the Servo browser engine continued in parallel with Rust, jointly funded by Mozilla and Samsung. The teams behind the two projects worked in close collaboration; new features in Rust were tested out by the Servo team, and new features in Servo were used to give feedback back to the Rust team.: 5:41 The first version of Servo was released in 2016. The Firefox web browser shipped with Rust code as of 2016 (version 45),: 53:30 but components of Servo did not appear in Firefox until September 2017 (version 57) as part of the Gecko and Quantum projects. Improvements were made to the Rust toolchain ecosystem during the years following 1.0 including Rustfmt, integrated development environment integration,: 44:56 a regular compiler testing and release cycle,: 46:48 a community code of conduct, and community discussion organized through an IRC chat.: 50:36 The earliest adoption outside of Mozilla was by individual projects at Samsung, Facebook (now Meta Platforms), Dropbox, and others including Tilde, Inc. (the company behind ember.js).: 55:44 Amazon Web Services followed in 2020. Engineers cited performance, lack of a garbage collector, safety, and pleasantness of working in the language as reasons for the adoption, while acknowledging that it was a risky bet as Rust was new technology. Amazon developers cited the fact that Rust uses half as much electricity as similar code written in Java, behind only C, as found by a study at the University of Minho, NOVA University Lisbon, and the University of Coimbra.[note 5]",
  "mozilla_layoffs_and_rust_foundation_present": "In August 2020, Mozilla laid off 250 of its 1,000 employees worldwide, as part of a corporate restructuring caused by the COVID-19 pandemic. The team behind Servo was disbanded. The event raised concerns about the future of Rust, due to the overlap between the two projects. In the following week, the Rust Core Team acknowledged the severe impact of the layoffs and announced that plans for a Rust foundation were underway. The first goal of the foundation would be to take ownership of all trademarks and domain names, and take financial responsibility for their costs. On February 8, 2021, the formation of the Rust Foundation was announced by five founding companies: Amazon Web Services, Google, Huawei, Microsoft, and Mozilla. The foundation, led by Shane Miller for its first two years, offered $20,000 grants and other support for programmers working on major Rust features. In a blog post published on April 6, 2021, Google announced support for Rust within the Android Open Source Project as an alternative to C/C++. On November 22, 2021, the Moderation Team, which was responsible for enforcing the community code of conduct, announced their resignation in protest of the Core Team placing themselves unaccountable to anyone but themselves. In May 2022, the Rust Core Team, other lead programmers, and certain members of the Rust Foundation board implemented governance reforms in response to the incident. The Rust Foundation posted a draft for a new trademark policy on April 6, 2023, including rules for how the Rust logo and name can be used, which resulted in negative reactions from Rust users and contributors. On February 26, 2024, the U.S. White House released a 19-page press report urging software development to move to memory-safe programming languages; specifically, moving away from C and C++ and encouraging languages like C#, Go, Java, Ruby, Swift, and Rust. The report was widely interpreted as increasing interest in Rust. The report was released through the Office of the National Cyber Director.",
  "syntax_and_features": "Rust's syntax is similar to that of C and C++, although many of its features were influenced by functional programming languages such as OCaml. Hoare has described Rust as targeted at frustrated C++ developers and emphasized features such as safety, control of memory layout, and concurrency. Safety in Rust includes the guarantees of memory safety, type safety, and lack of data races.",
  "hello_world_program": "Below is a Hello, World! program in Rust. The fn keyword denotes a function, and the println! macro (see § Macros) prints the message to standard output. Statements in Rust are separated by semicolons. fn main() { println!(Hello, World!); }",
  "variables": "Variables in Rust are defined through the let keyword. The example below assigns a value to the variable with name foo and outputs its value. fn main() { let foo = 10; println!(The value of foo is {foo}); } Variables are immutable by default, and adding the mut keyword allows the variable to be mutated. The following example uses //, which denotes the start of a comment. fn main() { // This code would not compile without adding mut. let mut foo = 10; println!(The value of foo is {foo}); foo = 20; println!(The value of foo is {foo}); } Multiple let expressions can define multiple variables with the same name, known as variable shadowing. Variable shadowing allows transforming variables without having to name the variables differently. The example below declares a new variable with the same name that is double the original value: fn main() { let foo = 10; // This will output The value of foo is 10 println!(The value of foo is {foo}); let foo = foo * 2; // This will output The value of foo is 20 println!(The value of foo is {foo}); } Variable shadowing is also possible for values of different types, going from a string to its length: fn main() { let letters = abc; let letters = letters.len(); }",
  "block_expressions_and_control_flow": "A block expression is delimited by curly brackets. When the last expression inside a block does not end with a semicolon, the block evaluates to the value of that trailing expression: fn main() { let x = { println!(this is inside the block); 1 + 2 }; println!(1 + 2 = {x}); } Trailing expressions of function bodies are used as the return value: fn add_two(x: i32) -> i32 { x + 2 }",
  "if_expressions": "An if conditional expression executes code based on whether the given value is true. else can be used for when the value evaluates to false, and else if can be used for combining multiple expressions. fn main() { let x = 10; if x > 5 { println!(value is greater than five); } if x % 7 == 0 { println!(value is divisible by 7); } else if x % 5 == 0 { println!(value is divisible by 5); } else { println!(value is not divisible by 7 or 5); } } if and else blocks can evaluate to a value, which can then be assigned to a variable: fn main() { let x = 10; let new_x = if x % 2 == 0 { x / 2 } else { 3 * x + 1 }; println!({new_x}); }",
  "while_loops": "while can be used to repeat a block of code while a condition is met. fn main() { // Iterate over all integers from 4 to 10 let mut value = 4; while value <= 10 { println!(value = {value}); value += 1; } }",
  "for_loops_and_iterators": "For loops in Rust loop over elements of a collection. for expressions work over any iterator type. fn main() { // Using `for` with range syntax for the same functionality as above // The syntax 4..=10 means the range from 4 to 10, up to and including 10. for value in 4..=10 { println!(value = {value}); } } In the above code, 4..=10 is a value of type Range which implements the Iterator trait. The code within the curly braces is applied to each element returned by the iterator. Iterators can be combined with functions over iterators like map, filter, and sum. For example, the following adds up all numbers between 1 and 100 that are multiples of 3: (1..=100).filter(|&x| x % 3 == 0).sum()",
  "loop_and_break_statements": "More generally, the loop keyword allows repeating a portion of code until a break occurs. break may optionally exit the loop with a value. In the case of nested loops, labels denoted by 'label_name can be used to break an outer loop rather than the innermost loop. fn main() { let value = 456; let mut x = 1; let y = loop { x *= 10; if x > value { break x / 10; } }; println!(largest power of ten that is smaller than or equal to value: {y}); let mut up = 1; 'outer: loop { let mut down = 120; loop { if up > 100 { break 'outer; } if down < 4 { break; } down /= 2; up += 1; println!(up: {up}, down: {down}); } up *= 2; } }",
  "pattern_matching": "The match and if let expressions can be used for pattern matching. For example, match can be used to double an optional integer value if present, and return zero otherwise: fn double(x: Option<u64>) -> u64 { match x { Some(y) => y * 2, None => 0, } } Equivalently, this can be written with if let and else: fn double(x: Option<u64>) -> u64 { if let Some(y) = x { y * 2 } else { 0 } }",
  "types": "Rust is strongly typed and statically typed, meaning that the types of all variables must be known at compilation time. Assigning a value of a particular type to a differently typed variable causes a compilation error. Type inference is used to determine the type of variables if unspecified. The default integer type is i32, and the default floating point type is f64. If the type of a literal number is not explicitly provided, it is either inferred from the context or the default type is used.",
  "primitive_types": "Integer types in Rust are named based on the signedness and the number of bits the type takes. For example, i32 is a signed integer that takes 32 bits of storage, whereas u8 is unsigned and only takes 8 bits of storage. isize and usize take storage depending on the architecture of the computer that runs the code, for example, on computers with 32-bit architectures, both types will take up 32 bits of space. By default, integer literals are in base-10, but different radices are supported with prefixes, for example, 0b11 for binary numbers, 0o567 for octals, and 0xDB for hexadecimals. By default, integer literals default to i32 as its type. Suffixes such as 4u32 can be used to explicitly set the type of a literal. Byte literals such as b'X' are available to represent the ASCII value (as a u8) of a specific character. The Boolean type is referred to as bool which can take a value of either true or false. A char takes up 32 bits of space and represents a Unicode scalar value: a Unicode codepoint that is not a surrogate. IEEE 754 floating point numbers are supported with f32 for single precision floats and f64 for double precision floats.",
  "user_defined_types": "User-defined types are created with the struct or enum keywords. The struct keyword is used to denote a record type that groups multiple related values. enums can take on different variants at runtime, with its capabilities similar to algebraic data types found in functional programming languages. Both records and enum variants can contain fields with different types. Alternative names, or aliases, for the same type can be defined with the type keyword. The impl keyword can define methods for a user-defined type. Data and functions are defined separately. Implementations fulfill a role similar to that of classes within other languages.",
  "standard_library": "The Rust standard library defines and implements many widely used custom data types, including core data structures such as Vec, Option, and HashMap, as well as smart pointer types. Rust also provides a way to exclude most of the standard library using the attribute #![no_std]; this enables applications, such as embedded devices, which want to remove dependency code or provide their own core data structures. Internally, the standard library is divided into three parts, core, alloc, and std, where std and alloc are excluded by #![no_std]. Screenshot of crates.io in June 2022",
  "pointers": "Summary of Rust's pointer and reference primitive types Type Description Examples &T &mut T References (immutable and mutable) let x_ref = &x; let x_ref = &mut x; Option<&T> Option<&mut T> Option wrapped reference Possibly null reference None let x_ref = Some(&x); let x_ref = Some(&mut x); Box<T> Option<Box<T>> A pointer to heap-allocated value (or possibly null pointer if wrapped in option) let boxed = Box::new(0); let boxed = Some(Box::new(Hello World)); *const T *mut T Raw pointers (immutable and mutable) Possibly null; unsafe to dereference let x_ptr = &x as *const T; let x_ptr = &mut x as *mut T; Rust does not use null pointers to indicate a lack of data, as doing so can lead to null dereferencing. Accordingly, the basic & and &mut references are guaranteed to not be null. Rust instead uses Option for this purpose: Some(T) indicates that a value is present, and None is analogous to the null pointer. Option implements a null pointer optimization, avoiding any spatial overhead for types that cannot have a null value (references or the NonZero types, for example). Unlike references, the raw pointer types *const and *mut may be null; however, it is impossible to dereference them unless the code is explicitly declared unsafe through the use of an unsafe block. Unlike dereferencing, the creation of raw pointers is allowed inside of safe Rust code.",
  "type_conversion": "This section is an excerpt from Type conversion § Rust.[edit] Rust provides no implicit type conversion (coercion) between primitive types. But, explicit type conversion (casting) can be performed using the as keyword. let x = 1000; println!(1000 as a u16 is: {}, x as u16);",
  "ownership": "Rust's ownership system consists of rules that ensure memory safety without using a garbage collector. At compile time, each value must be attached to a variable called the owner of that value, and every value must have exactly one owner. Values are moved between different owners through assignment or passing a value as a function parameter. Values can also be borrowed, meaning they are temporarily passed to a different function before being returned to the owner. With these rules, Rust can prevent the creation and use of dangling pointers: fn print_string(s: String) { println!({}, s); } fn main() { let s = String::from(Hello, World); print_string(s); // s consumed by print_string // s has been moved, so cannot be used any more // another print_string(s); would result in a compile error } Because of these ownership rules, Rust types are known as linear or affine types, meaning each value can be used exactly once. This enforces a form of software fault isolation as the owner of a value is solely responsible for its correctness and deallocation. When a value goes out of scope, it is dropped by running its destructor. The destructor may be programmatically defined through implementing the Drop trait. This helps manage resources such as file handles, network sockets, and locks, since when objects are dropped, the resources associated with them are closed or released automatically.",
  "lifetimes": "Object lifetime refers to the period of time during which a reference is valid; that is, the time between the object creation and destruction. These lifetimes are implicitly associated with all Rust reference types. While often inferred, they can also be indicated explicitly with named lifetime parameters (often denoted 'a, 'b, and so on). Lifetimes in Rust can be thought of as lexically scoped, meaning that the duration of an object lifetime is inferred from the set of locations in the source code (i.e., function, line, and column numbers) for which a variable is valid. For example, a reference to a local variable has a lifetime corresponding to the block it is defined in: fn main() { let x = 5; // ------------------+- Lifetime 'a // | let r = &x; // -+-- Lifetime 'b | // | | println!(r: {}, r); // | | // | | // -+ | } // ------------------+ The borrow checker in the Rust compiler then enforces that references are only used in the locations of the source code where the associated lifetime is valid. In the example above, storing a reference to variable x in r is valid, as variable x has a longer lifetime ('a) than variable r ('b). However, when x has a shorter lifetime, the borrow checker would reject the program: fn main() { let r; // ------------------+- Lifetime 'a // | { // | let x = 5; // -+-- Lifetime 'b | r = &x; // | | // ERROR here: x does not live long enough } // -| | // | println!(r: {}, r); // | } // ------------------+ Since the lifetime of the referenced variable ('b) is shorter than the lifetime of the variable holding the reference ('a), the borrow checker errors, preventing x from being used from outside its scope. Lifetimes can be indicated using explicit lifetime parameters on function arguments. For example, the following code specifies that the reference returned by the function has the same lifetime as original (and not necessarily the same lifetime as prefix): fn remove_prefix<'a>(mut original: &'a str, prefix: &str) -> &'a str { if original.starts_with(prefix) { original = original[prefix.len()..]; } original } When user-defined types hold references to data, they also need to use lifetime parameters. The example below parses some configuration options from a string and creates a struct containing the options. The function parse_config also showcases lifetime elision, which reduces the need for explicitly defining lifetime parameters. use std::collections::HashMap; // This struct has one lifetime parameter, 'src. The name is only used within the struct's definition. #[derive(Debug)] struct Config<'src> { hostname: &'src str, username: &'src str, } // The '_ lifetime parameter, in this case, refers to the anonymous lifetime attached to the type // of the argument `config`. fn parse_config(config: &str) -> Config<'_> { let key_values: HashMap<_, _> = config .lines() .filter(|line| !line.starts_with('#')) .filter_map(|line| line.split_once('=')) .map(|(key, value)| (key.trim(), value.trim())) .collect(); Config { hostname: key_values[hostname], username: key_values[username], } } fn main() { let config = parse_config( r#hostname = foobar username=barfoo#, ); println!(Parsed config: {:#?}, config); } In the compiler, ownership and lifetimes work together to prevent memory safety issues such as dangling pointers. A presentation on Rust by Emily Dunham from Mozilla's Rust team (linux.conf.au conference, Hobart, 2017)",
  "generics": "Rust's more advanced features include the use of generic functions. A generic function is given generic parameters, which allow the same function to be applied to different variable types. This capability reduces duplicate code and is known as parametric polymorphism. The following program calculates the sum of two things, for which addition is implemented using a generic function: use std::ops::Add; // sum is a generic function with one type parameter, T fn sum<T>(num1: T, num2: T) -> T where T: Add<Output = T>, // T must implement the Add trait where addition returns another T { num1 + num2 // num1 + num2 is syntactic sugar for num1.add(num2) provided by the Add trait } fn main() { let result1 = sum(10, 20); println!(Sum is: {}, result1); // Sum is: 30 let result2 = sum(10.23, 20.45); println!(Sum is: {}, result2); // Sum is: 30.68 } At compile time, polymorphic functions like sum are instantiated with the specific types the code requires; in this case, sum of integers and sum of floats. Generics can be used in functions to allow implementing a behavior for different types without repeating the same code. Generic functions can be written in relation to other generics, without knowing the actual type.",
  "traits": "Excerpt from std::io Rust's type system supports a mechanism called traits, inspired by type classes in the Haskell language, to define shared behavior between different types. For example, the Add trait can be implemented for floats and integers, which can be added; and the Display or Debug traits can be implemented for any type that can be converted to a string. Traits can be used to provide a set of common behavior for different types without knowing the actual type. This facility is known as ad hoc polymorphism. Generic functions can constrain the generic type to implement a particular trait or traits; for example, an add_one function might require the type to implement Add. This means that a generic function can be type-checked as soon as it is defined. The implementation of generics is similar to the typical implementation of C++ templates: a separate copy of the code is generated for each instantiation. This is called monomorphization and contrasts with the type erasure scheme typically used in Java and Haskell. Type erasure is also available via the keyword dyn (short for dynamic). Because monomorphization duplicates the code for each type used, it can result in more optimized code for specific-use cases, but compile time and size of the output binary are also increased. In addition to defining methods for a user-defined type, the impl keyword can be used to implement a trait for a type. Traits can provide additional derived methods when implemented. For example, the trait Iterator requires that the next method be defined for the type. Once the next method is defined, the trait can provide common functional helper methods over the iterator, such as map or filter.",
  "trait_objects": "Rust traits are implemented using static dispatch, meaning that the type of all values is known at compile time; however, Rust also uses a feature known as trait objects to accomplish dynamic dispatch, a type of polymorphism where the implementation of a polymorphic operation is chosen at runtime. This allows for behavior similar to duck typing, where all data types that implement a given trait can be treated as functionally equivalent. Trait objects are declared using the syntax dyn Tr where Tr is a trait. Trait objects are dynamically sized, therefore they must be put behind a pointer, such as Box. The following example creates a list of objects where each object can be printed out using the Display trait: use std::fmt::Display; let v: Vec<Box<dyn Display>> = vec![ Box::new(3), Box::new(5.0), Box::new(hi), ]; for x in v { println!({x}); } If an element in the list does not implement the Display trait, it will cause a compile-time error.",
  "memory_safety": "Rust is designed to be memory safe. It does not permit null pointers, dangling pointers, or data races. Data values can be initialized only through a fixed set of forms, all of which require their inputs to be already initialized. Unsafe code can subvert some of these restrictions, using the unsafe keyword. Unsafe code may also be used for low-level functionality, such as volatile memory access, architecture-specific intrinsics, type punning, and inline assembly.",
  "memory_management": "Rust does not use garbage collection. Memory and other resources are instead managed through the resource acquisition is initialization convention, with optional reference counting. Rust provides deterministic management of resources, with very low overhead. Values are allocated on the stack by default, and all dynamic allocations must be explicit. The built-in reference types using the & symbol do not involve run-time reference counting. The safety and validity of the underlying pointers is verified at compile time, preventing dangling pointers and other forms of undefined behavior. Rust's type system separates shared, immutable references of the form &T from unique, mutable references of the form &mut T. A mutable reference can be coerced to an immutable reference, but not vice versa.",
  "macros": "Macros allow generation and transformation of Rust code to reduce repetition. Macros come in two forms, with declarative macros defined through macro_rules!, and procedural macros, which are defined in separate crates.",
  "declarative_macros": "A declarative macro (also called a macro by example) is a macro, defined using the macro_rules! keyword, that uses pattern matching to determine its expansion. Below is an example that sums over all its arguments: macro_rules! sum { ( $initial:expr $(, $expr:expr )* $(,)? ) => { $initial $(+ $expr)* } } fn main() { let x = sum!(1, 2, 3); println!({x}); // prints 6 }",
  "procedural_macros": "Procedural macros are Rust functions that run and modify the compiler's input token stream, before any other components are compiled. They are generally more flexible than declarative macros, but are more difficult to maintain due to their complexity. Procedural macros come in three flavors: Function-like macros custom!(...) Derive macros #[derive(CustomDerive)] Attribute macros #[custom_attribute]",
  "interface_with_c_and_c": "Rust has a foreign function interface (FFI) that can be used both to call code written in languages such as C from Rust and to call Rust code from those languages. As of 2024[update], an external library called CXX exists for calling to or from C++. Rust and C differ in how they lay out structs in memory, so Rust structs may be given a #[repr(C)] attribute, forcing the same layout as the equivalent C struct.",
  "ecosystem": "Compiling a Rust program with Cargo The Rust ecosystem includes its compiler, its standard library, and additional components for software development. Component installation is typically managed by rustup, a Rust toolchain installer developed by the Rust project.",
  "compiler": "The Rust compiler, rustc, translates Rust code into low-level LLVM IR. LLVM is then invoked as a subcomponent to apply optimizations and translate the resulting IR into object code. A linker is then used to combine the objects into a single executable image or binary file. Other than LLVM, the compiler also supports using alternative backends such as GCC and Cranelift for code generation. The intention of those alternative backends is to increase platform coverage of Rust or to improve compilation times.",
  "cargo": "Cargo is Rust's build system and package manager. It downloads, compiles, distributes, and uploads packages—called crates—that are maintained in an official registry. It also acts as a front-end for Clippy and other Rust components. By default, Cargo sources its dependencies from the user-contributed registry crates.io, but Git repositories, crates in the local filesystem, and other external sources can also be specified as dependencies.",
  "rustfmt": "Rustfmt is a code formatter for Rust. It formats whitespace and indentation to produce code in accordance with a common style, unless otherwise specified. It can be invoked as a standalone program, or from a Rust project through Cargo. Example output of Clippy on a hello world Rust program",
  "clippy": "Clippy is Rust's built-in linting tool to improve the correctness, performance, and readability of Rust code. As of 2024[update], it has more than 700 rules.",
  "versioning_system": "Following Rust 1.0, new features are developed in nightly versions which are released daily. During each six-week release cycle, changes to nightly versions are released to beta, while changes from the previous beta version are released to a new stable version. Every two or three years, a new edition is produced. Editions are released to allow making limited breaking changes, such as promoting await to a keyword to support async/await features. Crates targeting different editions can interoperate with each other, so a crate can upgrade to a new edition even if its callers or its dependencies still target older editions. Migration to a new edition can be assisted with automated tooling.",
  "ide_support": "rust-analyzer is a collection of utilities that provides Integrated development environments (IDEs) and text editors with information about a Rust project through the Language Server Protocol. This enables features including autocompletion, and the display of compilation errors while editing.",
  "performance": "In general, Rust's memory safety guarantees do not impose a runtime overhead. A notable exception is array indexing which is checked at runtime by default; performance impact varies, but can be significant in some cases. Since it does not perform garbage collection, Rust is often faster than other memory-safe languages. Rust provides two modes: safe and unsafe. Safe mode is the normal one, in which most Rust is written. In unsafe mode, the developer is responsible for the code's memory safety, which is used by developers for cases where the compiler is too restrictive. Many of Rust's features are so-called zero-cost abstractions, meaning they are optimized away at compile time and incur no runtime penalty. The ownership and borrowing system permits zero-copy implementations for some performance-sensitive tasks, such as parsing. Static dispatch is used by default to eliminate method calls, with the exception of methods called on dynamic trait objects. The compiler also uses inline expansion to eliminate function calls and statically-dispatched method invocations. Since Rust utilizes LLVM, any performance improvements in LLVM also carry over to Rust. Unlike C and C++, Rust allows for reordering struct and enum elements to reduce the sizes of structures in memory, for better memory alignment, and to improve cache access efficiency.",
  "adoption": "See also: Category:Rust (programming language) software Firefox has components written in Rust as part of the underlying Gecko browser engine. Rust is used in software across different domains. Components from the Servo browser engine (funded by Mozilla and Samsung) were incorporated in the Gecko browser engine underlying Firefox. In January 2023, Google (Alphabet) announced support for using third party Rust libraries in Chromium. Rust is used in several backend software projects of large web services. OpenDNS, a DNS resolution service owned by Cisco, uses Rust internally. Amazon Web Services uses Rust in performance-sensitive components of its several services. In 2019, AWS open-sourced Firecracker, a virtualization solution primarily written in Rust. Microsoft Azure IoT Edge, a platform used to run Azure services on IoT devices, has components implemented in Rust. Microsoft also uses Rust to run containerized modules with WebAssembly and Kubernetes. Cloudflare, a company providing content delivery network services, used Rust to build a new web proxy named Pingora for increased performance and efficiency. The npm package manager used Rust for its production authentication service in 2019. The Rust for Linux project has been supported in the Linux kernel since 2022. In operating systems, the Rust for Linux project, launched in 2020, merged initial support into the Linux kernel version 6.1 in late 2022. The project is active with a team of 6-7 developers, and has added additional Rust code with kernel releases from 2022 to 2024, aiming to demonstrate the minimum viability of the project and resolve key compatibility blockers. The first drivers written in Rust were merged into the kernel for version 6.8. The Android developers used Rust in 2021 to rewrite existing components. Microsoft has rewritten parts of Windows in Rust. The r9 project aims to re-implement Plan 9 from Bell Labs in Rust. Rust has been used in the development of new operating systems such as Redox, a Unix-like operating system and microkernel, Theseus, an experimental operating system with modular state management, and most of Fuchsia. Rust is also used for command-line tools and operating system components, including stratisd, a file system manager and COSMIC, a desktop environment by System76. In web development, Deno, a secure runtime for JavaScript and TypeScript, is built on top of V8 using Rust and Tokio. Other notable adoptions in this space include Ruffle, an open-source SWF emulator, and Polkadot, an open source blockchain and cryptocurrency platform. Discord, an instant messaging software company, rewrote parts of its system in Rust for increased performance in 2020. In the same year, Dropbox announced that its file synchronization had been rewritten in Rust. Facebook (Meta) used Rust to redesign its system that manages source code for internal projects. In the 2024 Stack Overflow Developer Survey, 12.6% of respondents had recently done extensive development in Rust. The survey named Rust the most admired programming language every year from 2016 to 2024 (inclusive), based on the number of existing developers interested in continuing to work in the same language.[note 7] In 2024, Rust was the 6th most wanted technology, with 28.7% of developers not currently working in Rust expressing an interest in doing so.",
  "in_academic_research": "Rust has been studied in academic research, both for properties of the language itself as well as the utility the language provides for writing software used for research. Its features around safety and performance have been examined. In a journal article published to Proceedings of the International Astronomical Union, astrophysicists Blanco-Cuaresma and Bolmont re-implemented programs responsible for simulating multi-planet systems in Rust, and found it to be a competitive programming language for its speed and accuracy. Likewise, an article published on Nature shared several stories of bioinformaticians using Rust for its performance and safety. However, both articles have cited Rust's unique concepts, including its ownership system, being difficult to learn as one of the main drawbacks to adopting Rust.",
  "community": "Some Rust users refer to themselves as Rustaceans (similar to the word crustacean) and have adopted an orange crab, Ferris, as their unofficial mascot. Rust has been noted as having an inclusive community, and particularly welcomed people from the queer community, partly due to its code of conduct which outlined a set of expectations for Rust community members to follow. One MIT Technology Review article described the Rust community as unusually friendly to newcomers.",
  "rust_foundation": "Rust FoundationFormationFebruary 8, 2021; 4 years ago (2021-02-08)FoundersAmazon Web ServicesGoogleHuaweiMicrosoftMozilla FoundationTypeNonprofit organizationLocationUnited StatesChairpersonShane MillerExecutive DirectorRebecca RumbulWebsitefoundation.rust-lang.org The Rust Foundation is a non-profit membership organization incorporated in United States, with the primary purposes of backing the technical project as a legal entity and helping to manage the trademark and infrastructure assets. It was established on February 8, 2021, with five founding corporate members (Amazon Web Services, Huawei, Google, Microsoft, and Mozilla). The foundation's board is chaired by Shane Miller. Starting in late 2021, its Executive Director and CEO is Rebecca Rumbul. Prior to this, Ashley Williams was interim executive director.",
  "governance_teams": "The Rust project is composed of teams that are responsible for different subareas of the development. The compiler team develops, manages, and optimizes compiler internals; and the language team designs new language features and helps implement them. The Rust project website lists 6 top-level teams as of July 2024[update]. Representatives among teams form the Leadership council, which oversees the Rust project as a whole.",
  "see_also": "Comparison of programming languages History of programming languages List of programming languages List of programming languages by type",
  "notes": "^ Including build tools, host tools, and standard library support for x86-64, ARM, MIPS, RISC-V, WebAssembly, i686, AArch64, PowerPC, and s390x. ^ Including Windows, Linux, macOS, FreeBSD, NetBSD, and Illumos. Host build tools on Android, iOS, Haiku, Redox, and Fuchsia are not officially shipped; these operating systems are supported as targets. ^ Third-party dependencies, e.g., LLVM or MSVC, are subject to their own licenses. ^ The list of Rust compiler versions (referred to as a bootstrapping chain) has history going back to 2012. ^ Energy compared to C was 3% more for Rust and 34% more for C++; time was 4% more and 56% more, respectively. ^ On Unix systems, this is often UTF-8 strings without an internal 0 byte. On Windows, this is UTF-16 strings without an internal 0 byte. Unlike these, str and String are always valid UTF-8 and can contain internal zeros. ^ That is, among respondents who have done extensive development work [with Rust] in over the past year (12.6%), Rust had the largest percentage who also expressed interest to work in [Rust] over the next year (82.2%).",
  "book_sources": "Gjengset, Jon (2021). Rust for Rustaceans (1st ed.). No Starch Press. ISBN 9781718501850. OCLC 1277511986. Klabnik, Steve; Nichols, Carol (2019-08-12). The Rust Programming Language (Covers Rust 2018). No Starch Press. ISBN 978-1-7185-0044-0. Blandy, Jim; Orendorff, Jason; Tindall, Leonora F. S. (2021). Programming Rust: Fast, Safe Systems Development (2nd ed.). O'Reilly Media. ISBN 978-1-4920-5254-8. OCLC 1289839504. McNamara, Tim (2021). Rust in Action. Manning Publications. ISBN 978-1-6172-9455-6. OCLC 1153044639. Klabnik, Steve; Nichols, Carol (2023). The Rust programming language (2nd ed.). No Starch Press. ISBN 978-1-7185-0310-6. OCLC 1363816350.",
  "others": "^ Announcing Rust 1.85.1. 2025-03-18. Retrieved 2025-03-20. ^ a b Platform Support. The rustc book. Archived from the original on 2022-06-30. Retrieved 2022-06-27. ^ Copyright. GitHub. The Rust Programming Language. 2022-10-19. Archived from the original on 2023-07-22. Retrieved 2022-10-19. ^ Licenses. The Rust Programming Language. Archived from the original on 2025-02-23. Retrieved 2025-03-07. ^ Uniqueness Types. Rust Blog. Archived from the original on 2016-09-15. Retrieved 2016-10-08. Those of you familiar with the Elm style may recognize that the updated --explain messages draw heavy inspiration from the Elm approach. ^ a b Influences. The Rust Reference. Archived from the original on 2023-11-26. Retrieved 2023-12-31. ^ Uniqueness Types. Idris 1.3.3 documentation. Archived from the original on 2018-11-21. Retrieved 2022-07-14. They are inspired by ... ownership types and borrowed pointers in the Rust programming language. ^ Microsoft opens up Rust-inspired Project Verona programming language on GitHub. ZDNET. Archived from the original on 2020-01-17. Retrieved 2020-01-17. ^ Jaloyan, Georges-Axel (2017-10-19). Safe Pointers in SPARK 2014. arXiv:1710.07047 [cs.PL]. ^ Lattner, Chris. Chris Lattner's Homepage. Nondot. Archived from the original on 2018-12-25. Retrieved 2019-05-14. ^ V documentation (Introduction). GitHub. The V Programming Language. Retrieved 2023-11-04. ^ Yegulalp, Serdar (2016-08-29). New challenger joins Rust to topple C language. InfoWorld. Archived from the original on 2021-11-25. Retrieved 2022-10-19. ^ Eshwarla, Prabhu (2020-12-24). Practical System Programming for Rust Developers: Build fast and secure software for Linux/Unix systems with the help of practical examples. Packt Publishing Ltd. ISBN 978-1-80056-201-1. ^ a b Blanco-Cuaresma, Sergi; Bolmont, Emeline (2017-05-30). What can the programming language Rust do for astrophysics?. Proceedings of the International Astronomical Union. 12 (S325): 341–344. arXiv:1702.02951. Bibcode:2017IAUS..325..341B. doi:10.1017/S1743921316013168. ISSN 1743-9213. S2CID 7857871. Archived from the original on 2022-06-25. Retrieved 2022-06-25. ^ Blandy, Orendorff & Tindall 2021. ^ a b c d e f g h i j k l m n o p q r s Thompson, Clive (2023-02-14). How Rust went from a side project to the world's most-loved programming language. MIT Technology Review. Archived from the original on 2024-09-19. Retrieved 2023-02-23. ^ a b c d e f g h i j k l m n o p q r s t u Klabnik, Steve (2016-06-02). The History of Rust. Applicative 2016. New York, NY, USA: Association for Computing Machinery. p. 80. doi:10.1145/2959689.2960081. ISBN 978-1-4503-4464-7. ^ a b c Hoare, Graydon (July 2010). Project Servo: Technology from the past come to save the future from itself (PDF). Mozilla Annual Summit. Archived from the original (PDF) on 2021-12-26. Retrieved 2024-10-29. ^ Hoare, Graydon (November 2016). Rust Prehistory (Archive of the original Rust OCaml compiler source code). GitHub. Retrieved 2024-10-29. ^ 0.1 first supported public release Milestone · rust-lang/rust. GitHub. Retrieved 2024-10-29. ^ Nelson, Jynn (2022-08-05). RustConf 2022 - Bootstrapping: The once and future compiler. Portland, Oregon: Rust Team. Retrieved 2024-10-29 – via YouTube. ^ Rust logo. Bugzilla. Archived from the original on 2024-02-02. Retrieved 2024-02-02. ^ Anderson, Brian (2012-01-24). [rust-dev] The Rust compiler 0.1 is unleashed. rust-dev (Mailing list). Archived from the original on 2012-01-24. Retrieved 2025-01-07. ^ Anthony, Sebastian (2012-01-24). Mozilla releases Rust 0.1, the language that will eventually usurp Firefox's C++. ExtremeTech. Retrieved 2025-01-07. ^ Purity by pcwalton · Pull Request #5412 · rust-lang/rust. GitHub. Retrieved 2024-10-29. ^ Binstock, Andrew (2014-01-07). The Rise And Fall of Languages in 2013. Dr. Dobb's Journal. Archived from the original on 2016-08-07. Retrieved 2022-11-20. ^ Lardinois, Frederic (2015-04-03). Mozilla And Samsung Team Up To Develop Servo, Mozilla's Next-Gen Browser Engine For Multicore Processors. TechCrunch. Archived from the original on 2016-09-10. Retrieved 2017-06-25. ^ Firefox 45.0, See All New Features, Updates and Fixes. Mozilla. Archived from the original on 2016-03-17. Retrieved 2024-10-31. ^ Lardinois, Frederic (2017-09-29). It's time to give Firefox another chance. TechCrunch. Archived from the original on 2023-08-15. Retrieved 2023-08-15. ^ Pereira, Rui; Couto, Marco; Ribeiro, Francisco; Rua, Rui; Cunha, Jácome; Fernandes, João Paulo; Saraiva, João (2017-10-23). Energy efficiency across programming languages: How do energy, time, and memory relate?. Proceedings of the 10th ACM SIGPLAN International Conference on Software Language Engineering. SLE 2017. New York, NY, USA: Association for Computing Machinery. pp. 256–267. doi:10.1145/3136014.3136031. hdl:1822/65359. ISBN 978-1-4503-5525-4. ^ Cimpanu, Catalin (2020-08-11). Mozilla lays off 250 employees while it refocuses on commercial products. ZDNET. Archived from the original on 2022-03-18. Retrieved 2020-12-02. ^ Cooper, Daniel (2020-08-11). Mozilla lays off 250 employees due to the pandemic. Engadget. Archived from the original on 2020-12-13. Retrieved 2020-12-02. ^ Tung, Liam (2020-08-21). Programming language Rust: Mozilla job cuts have hit us badly but here's how we'll survive. ZDNET. Archived from the original on 2022-04-21. Retrieved 2022-04-21. ^ Laying the foundation for Rust's future. Rust Blog. 2020-08-18. Archived from the original on 2020-12-02. Retrieved 2020-12-02. ^ Hello World!. Rust Foundation. 2020-02-08. Archived from the original on 2022-04-19. Retrieved 2022-06-04. ^ Mozilla Welcomes the Rust Foundation. Mozilla Blog. 2021-02-09. Archived from the original on 2021-02-08. Retrieved 2021-02-09. ^ Amadeo, Ron (2021-04-07). Google is now writing low-level Android code in Rust. Ars Technica. Archived from the original on 2021-04-08. Retrieved 2021-04-08. ^ Anderson, Tim (2021-11-23). Entire Rust moderation team resigns. The Register. Archived from the original on 2022-07-14. Retrieved 2022-08-04. ^ Governance Update. Inside Rust Blog. Archived from the original on 2022-10-27. Retrieved 2022-10-27. ^ Claburn, Thomas (2023-04-17). Rust Foundation apologizes for trademark policy confusion. The Register. Archived from the original on 2023-05-07. Retrieved 2023-05-07. ^ a b Gross, Grant (2024-02-27). White House urges developers to dump C and C++. InfoWorld. Retrieved 2025-01-26. ^ Warminsky, Joe (2024-02-27). After decades of memory-related software bugs, White House calls on industry to act. The Record. Retrieved 2025-01-26. ^ Jack, Bobby (2024-02-29). The White House Wants Memory-Safe Programming, but What Is That?. MakeUseOf. Retrieved 2025-01-26. ^ Donovan, Ryan (2024-12-30). In Rust we trust? White House Office urges memory safety. The Stack Overflow Blog. Retrieved 2025-01-26. ^ Press Release: Future Software Should Be Memory Safe. The White House. 2024-02-26. Archived from the original on 2025-01-18. Retrieved 2025-01-26. ^ Proven, Liam (2019-11-27). Rebecca Rumbul named new CEO of The Rust Foundation. The Register. Archived from the original on 2022-07-14. Retrieved 2022-07-14. Both are curly bracket languages, with C-like syntax that makes them unintimidating for C programmers. ^ a b c Vigliarolo, Brandon (2021-02-10). The Rust programming language now has its own independent foundation. TechRepublic. Archived from the original on 2023-03-20. Retrieved 2022-07-14. ^ Klabnik & Nichols 2019, p. 263. ^ Klabnik & Nichols 2019, pp. 5–6. ^ Klabnik & Nichols 2023, p. 32. ^ Klabnik & Nichols 2023, pp. 32–33. ^ Klabnik & Nichols 2023, pp. 49–50. ^ Klabnik & Nichols 2023, pp. 34–36. ^ Klabnik & Nichols 2023, pp. 6, 47, 53. ^ Klabnik & Nichols 2023, pp. 47–48. ^ a b Klabnik & Nichols 2023, pp. 50–53. ^ Klabnik & Nichols 2023, p. 56. ^ Klabnik & Nichols 2023, pp. 57–58. ^ Klabnik & Nichols 2023, pp. 54–56. ^ Klabnik & Nichols 2019, pp. 104–109. ^ Klabnik & Nichols 2019, pp. 24. ^ Klabnik & Nichols 2019, pp. 36–38. ^ Klabnik & Nichols 2023, pp. 36–38. ^ Klabnik & Nichols 2023, p. 502. ^ Glossary of Unicode Terms. Unicode Consortium. Archived from the original on 2018-09-24. Retrieved 2024-07-30. ^ Klabnik & Nichols 2019, pp. 38–40. ^ Klabnik & Nichols 2019, p. 83. ^ Klabnik & Nichols 2019, p. 97. ^ Klabnik & Nichols 2019, pp. 98–101. ^ Klabnik & Nichols 2019, pp. 438–440. ^ a b Klabnik & Nichols 2019, pp. 93. ^ OsStr in std::ffi. The Rust Standard Library documentation. Archived from the original on 2023-06-23. Retrieved 2023-10-02. ^ OsString in std::ffi. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-10-02. ^ Path in std::path. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-10-02. ^ PathBuf in std::path. The Rust Standard Library documentation. Archived from the original on 2023-06-27. Retrieved 2023-10-02. ^ a b c d std::boxed. The Rust Standard Library documentation. Archived from the original on 2023-06-23. Retrieved 2023-06-23. ^ Rc in std::rc. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Arc in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Cell in std::cell. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Mutex in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ RwLock in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Condvar in std::sync. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ Duration in std::time. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ HashMap in std::collections. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ BTreeMap in std::collections. The Rust Standard Library documentation. Archived from the original on 2023-06-24. Retrieved 2023-06-24. ^ McNamara 2021. ^ Klabnik & Nichols 2019, pp. 101–104. ^ std::option. The Rust Standard Library documentation. Retrieved 2023-11-12. ^ a b Klabnik & Nichols 2019, pp. 418–427. ^ Casting - Rust By Example. doc.rust-lang.org. ^ Klabnik & Nichols 2019, pp. 59–61. ^ a b Klabnik & Nichols 2019, pp. 63–68. ^ Klabnik & Nichols 2019, pp. 74–75. ^ a b Balasubramanian, Abhiram; Baranowski, Marek S.; Burtsev, Anton; Panda, Aurojit; Rakamarić, Zvonimir; Ryzhyk, Leonid (2017-05-07). System Programming in Rust. Proceedings of the 16th Workshop on Hot Topics in Operating Systems. HotOS '17. New York, NY, US: Association for Computing Machinery. pp. 156–161. doi:10.1145/3102980.3103006. ISBN 978-1-4503-5068-6. S2CID 24100599. Archived from the original on 2022-06-11. Retrieved 2022-06-01. ^ Klabnik & Nichols 2023, pp. 327–30. ^ Lifetimes. Rust by Example. Archived from the original on 2024-11-16. Retrieved 2024-10-29. ^ Explicit annotation. Rust by Example. Retrieved 2024-10-29. ^ a b Klabnik & Nichols 2019, p. 194. ^ Klabnik & Nichols 2019, pp. 75, 134. ^ Shamrell-Harrington, Nell (2022-04-15). The Rust Borrow Checker – a Deep Dive. InfoQ. Archived from the original on 2022-06-25. Retrieved 2022-06-25. ^ Klabnik & Nichols 2019, pp. 194–195. ^ Klabnik & Nichols 2023, pp. 208–12. ^ Klabnik & Nichols 2019, pp. 201–203. ^ Klabnik & Nichols 2023, 4.2. References and Borrowing. ^ Pearce, David (2021-04-17). A Lightweight Formalism for Reference Lifetimes and Borrowing in Rust. ACM Transactions on Programming Languages and Systems. 43: 1–73. doi:10.1145/3443420. Archived from the original on 2024-04-15. Retrieved 2024-12-11. ^ Klabnik & Nichols 2019, pp. 171–172. ^ Klabnik & Nichols 2019, pp. 171–172, 205. ^ Klabnik & Nichols 2019, pp. 181, 182. ^ Gjengset 2021, p. 25. ^ Klabnik & Nichols 2019, pp. 182–184. ^ Klabnik & Nichols 2019, pp. 281–283. ^ Klabnik & Nichols 2023, 18.2. Using Trait Objects That Allow for Values of Different Types. ^ Klabnik & Nichols 2019, pp. 441–442. ^ Klabnik & Nichols 2019, pp. 379–380. ^ Rosenblatt, Seth (2013-04-03). Samsung joins Mozilla's quest for Rust. CNET. Archived from the original on 2013-04-04. Retrieved 2013-04-05. ^ Brown, Neil (2013-04-17). A taste of Rust. LWN.net. Archived from the original on 2013-04-26. Retrieved 2013-04-25. ^ Races. The Rustonomicon. Archived from the original on 2017-07-10. Retrieved 2017-07-03. ^ Vandervelden, Thibaut; De Smet, Ruben; Deac, Diana; Steenhaut, Kris; Braeken, An (2024-09-07). Overview of Embedded Rust Operating Systems and Frameworks. Sensors. 24 (17): 5818. Bibcode:2024Senso..24.5818V. doi:10.3390/s24175818. PMC 11398098. PMID 39275729. ^ The Rust Language FAQ. The Rust Programming Language. 2015. Archived from the original on 2015-04-20. Retrieved 2017-04-24. ^ McNamara 2021, p. 139, 376–379, 395. ^ RAII. Rust by Example. Archived from the original on 2019-04-21. Retrieved 2020-11-22. ^ Abstraction without overhead: traits in Rust. Rust Blog. Archived from the original on 2021-09-23. Retrieved 2021-10-19. ^ Box, stack and heap. Rust by Example. Archived from the original on 2022-05-31. Retrieved 2022-06-13. ^ Klabnik & Nichols 2019, pp. 70–75. ^ Klabnik & Nichols 2019, p. 323. ^ Klabnik & Nichols 2023, pp. 449–455. ^ Gjengset 2021, pp. 101–102. ^ Macros By Example. The Rust Reference. Archived from the original on 2023-04-21. Retrieved 2023-04-21. ^ Klabnik & Nichols 2019, pp. 446–448. ^ Procedural Macros. The Rust Programming Language Reference. Archived from the original on 2020-11-07. Retrieved 2021-03-23. ^ Klabnik & Nichols 2019, pp. 449–455. ^ Safe Interoperability between Rust and C++ with CXX. InfoQ. 2020-12-06. Archived from the original on 2021-01-22. Retrieved 2021-01-03. ^ a b Type layout. The Rust Reference. Archived from the original on 2022-07-16. Retrieved 2022-07-15. ^ Blandy, Orendorff & Tindall 2021, pp. 6–8. ^ Overview of the compiler. Rust Compiler Development Guide. Rust project contributors. Archived from the original on 2023-05-31. Retrieved 2024-11-07. ^ Code Generation. Rust Compiler Development Guide. Rust project contributors. Retrieved 2024-03-03. ^ rust-lang/rustc_codegen_gcc. GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03. ^ rust-lang/rustc_codegen_cranelift. GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03. ^ Gjengset 2021, p. 213-215. ^ a b c Perkel, Jeffrey M. (2020-12-01). Why scientists are turning to Rust. Nature. 588 (7836): 185–186. Bibcode:2020Natur.588..185P. doi:10.1038/d41586-020-03382-2. PMID 33262490. S2CID 227251258. Archived from the original on 2022-05-06. Retrieved 2022-05-15. ^ Simone, Sergio De (2019-04-18). Rust 1.34 Introduces Alternative Registries for Non-Public Crates. InfoQ. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Klabnik & Nichols 2019, pp. 511–512. ^ Clippy. GitHub. The Rust Programming Language. 2023-11-30. Archived from the original on 2021-05-23. Retrieved 2023-11-30. ^ Clippy Lints. The Rust Programming Language. Retrieved 2023-11-30. ^ Klabnik & Nichols 2019, Appendix G – How Rust is Made and Nightly Rust ^ Blandy, Orendorff & Tindall 2021, pp. 176–177. ^ Klabnik & Nichols 2023, p. 623. ^ McNamara 2021, p. 11. ^ Popescu, Natalie; Xu, Ziyang; Apostolakis, Sotiris; August, David I.; Levy, Amit (2021-10-15). Safer at any speed: automatic context-aware safety enhancement for Rust. Proceedings of the ACM on Programming Languages. 5 (OOPSLA). Section 2. doi:10.1145/3485480. S2CID 238212612. p. 5: We observe a large variance in the overheads of checked indexing: 23.6% of benchmarks do report significant performance hits from checked indexing, but 64.5% report little-to-no impact and, surprisingly, 11.8% report improved performance ... Ultimately, while unchecked indexing can improve performance, most of the time it does not. ^ Anderson, Tim (2021-11-30). Can Rust save the planet? Why, and why not. The Register. Archived from the original on 2022-07-11. Retrieved 2022-07-11. ^ Yegulalp, Serdar (2021-10-06). What is the Rust language? Safe, fast, and easy software development. InfoWorld. Archived from the original on 2022-06-24. Retrieved 2022-06-25. ^ a b Astrauskas, Vytautas; Matheja, Christoph; Poli, Federico; Müller, Peter; Summers, Alexander J. (2020-11-13). How do programmers use unsafe rust?. Proceedings of the ACM on Programming Languages. 4 (OOPSLA): 1–27. doi:10.1145/3428204. hdl:20.500.11850/465785. ISSN 2475-1421. ^ McNamara 2021, p. 19, 27. ^ Couprie, Geoffroy (2015). Nom, A Byte oriented, streaming, Zero copy, Parser Combinators Library in Rust. 2015 IEEE Security and Privacy Workshops. pp. 142–148. doi:10.1109/SPW.2015.31. ISBN 978-1-4799-9933-0. S2CID 16608844. Archived from the original on 2022-10-09. Retrieved 2022-10-09. ^ McNamara 2021, p. 20. ^ Code generation. The Rust Reference. Archived from the original on 2022-10-09. Retrieved 2022-10-09. ^ How Fast Is Rust?. The Rust Programming Language FAQ. Archived from the original on 2020-10-28. Retrieved 2019-04-11. ^ Farshin, Alireza; Barbette, Tom; Roozbeh, Amir; Maguire Jr, Gerald Q.; Kostić, Dejan (2021). PacketMill: Toward per-Core 100-GBPS networking. Proceedings of the 26th ACM International Conference on Architectural Support for Programming Languages and Operating Systems. pp. 1–17. doi:10.1145/3445814.3446724. ISBN 9781450383172. S2CID 231949599. Archived from the original on 2022-07-12. Retrieved 2022-07-12. ... While some compilers (e.g., Rust) support structure reordering , C & C++ compilers are forbidden to reorder data structures (e.g., struct or class) ... ^ Keizer, Gregg (2016-10-31). Mozilla plans to rejuvenate Firefox in 2017. Computerworld. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Claburn, Thomas (2023-01-12). Google polishes Chromium code with a layer of Rust. The Register. Retrieved 2024-07-17. ^ Jansens, Dana (2023-01-12). Supporting the Use of Rust in the Chromium Project. Google Online Security Blog. Archived from the original on 2023-01-13. Retrieved 2023-11-12. ^ Shankland, Stephen (2016-07-12). Firefox will get overhaul in bid to get you interested again. CNET. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Security Research Team (2013-10-04). ZeroMQ: Helping us Block Malicious Domains in Real Time. Cisco Umbrella. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Cimpanu, Catalin (2019-10-15). AWS to sponsor Rust project. ZDNET. Retrieved 2024-07-17. ^ Nichols, Shaun (2018-06-27). Microsoft's next trick? Kicking things out of the cloud to Azure IoT Edge. The Register. Archived from the original on 2019-09-27. Retrieved 2019-09-27. ^ Tung, Liam (2020-04-30). Microsoft: Why we used programming language Rust over Go for WebAssembly on Kubernetes app. ZDNET. Archived from the original on 2022-04-21. Retrieved 2022-04-21. ^ Claburn, Thomas (2022-09-20). In Rust We Trust: Microsoft Azure CTO shuns C and C++. The Register. Retrieved 2024-07-07. ^ Simone, Sergio De (2019-03-10). NPM Adopted Rust to Remove Performance Bottlenecks. InfoQ. Archived from the original on 2023-11-19. Retrieved 2023-11-20. ^ Lyu, Shing (2020). Welcome to the World of Rust. In Lyu, Shing (ed.). Practical Rust Projects: Building Game, Physical Computing, and Machine Learning Applications. Berkeley, CA: Apress. pp. 1–8. doi:10.1007/978-1-4842-5599-5_1. ISBN 978-1-4842-5599-5. Retrieved 2023-11-29. ^ Lyu, Shing (2021). Rust in the Web World. In Lyu, Shing (ed.). Practical Rust Web Projects: Building Cloud and Web-Based Applications. Berkeley, CA: Apress. pp. 1–7. doi:10.1007/978-1-4842-6589-5_1. ISBN 978-1-4842-6589-5. Retrieved 2023-11-29. ^ a b c Li, Hongyu; Guo, Liwei; Yang, Yexuan; Wang, Shangguang; Xu, Mengwei (2024-06-30). An Empirical Study of Rust-for-Linux: The Success, Dissatisfaction, and Compromise. USENIX. Retrieved 2024-11-28. ^ Corbet, Jonathan (2022-10-13). A first look at Rust in the 6.1 kernel. LWN.net. Archived from the original on 2023-11-17. Retrieved 2023-11-11. ^ Vaughan-Nichols, Steven (2021-12-07). Rust takes a major step forward as Linux's second official language. ZDNET. Retrieved 2024-11-27. ^ Corbet, Jonathan (2022-11-17). Rust in the 6.2 kernel. LWN.net. Retrieved 2024-11-28. ^ Corbet, Jonathan (2024-09-24). Committing to Rust in the kernel. LWN.net. Retrieved 2024-11-28. ^ Amadeo, Ron (2021-04-07). Google is now writing low-level Android code in Rust. Ars Technica. Archived from the original on 2021-04-08. Retrieved 2022-04-21. ^ Darkcrizt (2021-04-02). Google Develops New Bluetooth Stack for Android, Written in Rust. Desde Linux. Archived from the original on 2021-08-25. Retrieved 2024-08-31. ^ Claburn, Thomas (2023-04-27). Microsoft is rewriting core Windows libraries in Rust. The Register. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Proven, Liam (2023-12-01). Small but mighty, 9Front's 'Humanbiologics' is here for the truly curious. The Register. Retrieved 2024-03-07. ^ Yegulalp, Serdar (2016-03-21). Rust's Redox OS could show Linux a few new tricks. InfoWorld. Archived from the original on 2016-03-21. Retrieved 2016-03-21. ^ Anderson, Tim (2021-01-14). Another Rust-y OS: Theseus joins Redox in pursuit of safer, more resilient systems. The Register. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Boos, Kevin; Liyanage, Namitha; Ijaz, Ramla; Zhong, Lin (2020). Theseus: an Experiment in Operating System Structure and State Management. pp. 1–19. ISBN 978-1-939133-19-9. Archived from the original on 2023-05-13. Retrieved 2023-05-13. ^ Zhang, HanDong (2023-01-31). 2022 Review | The adoption of Rust in Business. Rust Magazine. Retrieved 2023-02-07. ^ Sei, Mark (2018-10-10). Fedora 29 new features: Startis now officially in Fedora. Marksei, Weekly sysadmin pills. Archived from the original on 2019-04-13. Retrieved 2019-05-13. ^ Proven, Liam (2022-07-12). Oracle Linux 9 released, with some interesting additions. The Register. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Proven, Liam (2023-02-02). System76 teases features coming in homegrown Rust-based desktop COSMIC. The Register. Archived from the original on 2024-07-17. Retrieved 2024-07-17. ^ Hu, Vivian (2020-06-12). Deno Is Ready for Production. InfoQ. Archived from the original on 2020-07-01. Retrieved 2022-07-14. ^ Abrams, Lawrence (2021-02-06). This Flash Player emulator lets you securely play your old games. Bleeping Computer. Archived from the original on 2021-12-25. Retrieved 2021-12-25. ^ Kharif, Olga (2020-10-17). Ethereum Blockchain Killer Goes By Unassuming Name of Polkadot. Bloomberg News. Bloomberg L.P. Archived from the original on 2020-10-17. Retrieved 2021-07-14. ^ a b c 2024 Stack Overflow Developer Survey – Technology. Stack Overflow. Retrieved 2024-11-28. ^ Claburn, Thomas (2022-06-23). Linus Torvalds says Rust is coming to the Linux kernel. The Register. Archived from the original on 2022-07-28. Retrieved 2022-07-15. ^ Jung, Ralf; Jourdan, Jacques-Henri; Krebbers, Robbert; Dreyer, Derek (2017-12-27). RustBelt: securing the foundations of the Rust programming language. Proceedings of the ACM on Programming Languages. 2 (POPL): 1–34. doi:10.1145/3158154. hdl:21.11116/0000-0003-34C6-3. ISSN 2475-1421. ^ Popescu, Natalie; Xu, Ziyang; Apostolakis, Sotiris; August, David I.; Levy, Amit (2021-10-20). Safer at any speed: automatic context-aware safety enhancement for Rust. Proceedings of the ACM on Programming Languages. 5 (OOPSLA): 1–23. doi:10.1145/3485480. ISSN 2475-1421. ^ Klabnik & Nichols 2019, p. 4. ^ Getting Started. The Rust Programming Language. Archived from the original on 2020-11-01. Retrieved 2020-10-11. ^ Tung, Liam (2021-02-08). The Rust programming language just took a huge step forwards. ZDNET. Archived from the original on 2022-07-14. Retrieved 2022-07-14. ^ Krill, Paul (2021-02-09). Rust language moves to independent foundation. InfoWorld. Archived from the original on 2021-04-10. Retrieved 2021-04-10. ^ Vaughan-Nichols, Steven J. (2021-04-09). AWS's Shane Miller to head the newly created Rust Foundation. ZDNET. Archived from the original on 2021-04-10. Retrieved 2021-04-10. ^ Vaughan-Nichols, Steven J. (2021-11-17). Rust Foundation appoints Rebecca Rumbul as executive director. ZDNET. Archived from the original on 2021-11-18. Retrieved 2021-11-18. ^ Governance. The Rust Programming Language. Archived from the original on 2022-05-10. Retrieved 2024-07-18. ^ Introducing the Rust Leadership Council. Rust Blog. Retrieved 2024-01-12.",
  "external_links": "Rust at Wikipedia's sister projects Media from CommonsResources from WikiversityData from Wikidata Official website Source code on GitHub vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Forth Fortran Go Haskell Java JavaScript TypeScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteMozillaProjectsMozillaLabs Bugzilla ChatZilla Jetpack Lightning Persona Prism Raindrop Skywriter Sunbird PDF.js Ubiquity MozillaResearch Open Media Rust Shumway WebAssembly WebXR asm.js Daala Firefox OS OpenFlint MozillaFoundation Mozilla Location Service SeaMonkey Mozilla Monitor Thunderbird Mozilla VPN List of products Firefox Firefox Browser Early version history 2 3 3.5 3.6 4 Version history for Android Focus Sync Pocket Origins Mozilla Application Suite Netscape Navigator Netscape Communicator Netscape Communications Beonex Communicator Frameworks Add-on Gecko Necko NPAPI Components Composer NSPR NSS Rhino SpiderMonkey Tamarin Features Typefaces Fira Zilla Slab Discontinued Calendar Project Camino Firefox Lockwise Firefox Send Minimo XUL XBL XPCOM XPInstall XULRunner Forks Basilisk Classilla Flock Floorp Goanna IceCat LibreWolf Miro Netscape 9 Pale Moon Portable Edition Swiftfox Swiftweasel Waterfox xB Browser Zen Browser Discontinued projects are in italics. Some projects abandoned by Mozilla that are still maintained by third parties are in underline.OrganizationFoundation Mozilla Foundation Mozilla Corporation Mozilla Messaging Official affiliates Mozilla China Mozilla Europe (defunct) Mozilla Japan People Mitchell Baker David Baron Tantek Çelik Laura Chambers Brendan Eich John Hammink Johnny Stenbäck Doug Turner Community mozdev.org MDN Web Docs MozillaZine Other topics Mozilla Manifesto The Book of Mozilla Code Rush Mozilla Public License Mascot Debian–Mozilla trademark dispute Common Voice Mozilla Corp. v. FCC (2019) Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataSpainIsrael Portal: Computer programming"
},
{
  "title": "JavaScript",
  "url": "https://en.wikipedia.org/wiki/JavaScript",
  "creation_at_netscape": "The first popular web browser with a graphical user interface, Mosaic, was released in 1993. Accessible to non-technical people, it played a prominent role in the rapid growth of the early World Wide Web. The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used. During these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so in 1995, Netscape decided to add a programming language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java language, while also hiring Brendan Eich to embed the Scheme language. The goal was a language for the masses, to help nonprogrammers create dynamic, interactive Web sites. Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages. Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December. The choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was a popular new language, so Eich considered the JavaScript name a marketing ploy by Netscape.",
  "adoption_by_microsoft": "Microsoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft created its own interpreter called JScript. Microsoft first released JScript in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Netscape Navigator. These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of best viewed in Netscape and best viewed in Internet Explorer logos for several years.",
  "the_rise_of_jscript": "Brendan Eich later said of this period: It's still kind of a sidekick language. It's considered slow or annoying. People do pop-ups or those scrolling messages in the old status bar at the bottom of your old browser. In November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in June 1997. The standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000. However, the effort to fully standardize the language was undermined by Microsoft gaining an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer's market share reached 95%. This meant that JScript became the de facto standard for client-side scripting on the Web. Microsoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on ECMA work. Thus ECMAScript 4 was mothballed.",
  "growth_and_standardization": "During the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking significant market share from Internet Explorer. In 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition. Meanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools. Google debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition. The key innovation was just-in-time compilation (JIT), so other browser vendors needed to overhaul their engines for JIT. In July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009.",
  "reaching_maturity": "Ambitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015. The creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime system. As of 2018, Node had been used by millions of developers, and npm had the most modules of any package manager in the world. The ECMAScript draft specification is currently maintained openly on GitHub, and editions are produced via regular annual snapshots. Potential revisions to the language are vetted through a comprehensive proposal process. Now, instead of edition numbers, developers check the status of upcoming features individually. The current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers. Plus, with the rise of single-page applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process.",
  "trademark": "JavaScript is a trademark of Oracle Corporation in the United States. The trademark was originally issued to Sun Microsystems on 6 May 1997, and was transferred to Oracle when they acquired Sun in 2009. A letter was circulated in September 2024, spearheaded by Ryan Dahl, calling on Oracle to free the JavaScript trademark. Brendan Eich, the original creator of JavaScript, was among the over 14,000 signatories who supported the initiative.",
  "website_client_side_usage": "JavaScript is the dominant client-side scripting language of the Web, with 99% of all websites using it for this purpose. Scripts are embedded in or included from HTML documents and interact with the DOM. All major web browsers have a built-in JavaScript engine that executes the code on the user's device.",
  "examples_of_scripted_behavior": "Loading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page. Web page animations, such as fading objects in and out, resizing, and moving them. Playing browser games. Controlling the playback of streaming media. Generating pop-up ads or alert boxes. Validating input values of a web form before the data is sent to a web server. Logging data about the user's behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization. Redirecting a user to another page. Storing and retrieving data on the user's device, via the storage or IndexedDB standards.",
  "libraries_and_frameworks": "Over 80% of websites use a third-party JavaScript library or web framework as part of their client-side scripting. jQuery is by far the most-used. Other notable ones include Angular, Bootstrap, Lodash, Modernizr, React, Underscore, and Vue. Multiple options can be used in conjunction, such as jQuery and Bootstrap. However, the term Vanilla JS was coined for websites not using any libraries or frameworks at all, instead relying entirely on standard JavaScript functionality.",
  "other_usage": "The use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications. Initial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft's Internet Information Services, but they were small niches. Server-side usage eventually started to grow in the late 2000s, with the creation of Node.js and other approaches. Electron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents and GNOME Shell extensions written in JavaScript. Oracle used to provide Nashorn, a JavaScript interpreter, as part of their Java Development Kit (JDK) API library along with jjs a command line interpreter as of JDK version 8. It was removed in JDK 15. As a replacement Oracle offered GraalJS which can also be used with the OpenJDK which allows one to create and reference Java objects in JavaScript code and add runtime scripting in JavaScript to applications written in Java. JavaScript has been used in some embedded systems, usually by leveraging Node.js.",
  "javascript_engine": "This section is an excerpt from JavaScript engine.[edit] A JavaScript engine is a software component that executes JavaScript code. The first JavaScript engines were mere interpreters, but all relevant modern engines use just-in-time compilation for improved performance. JavaScript engines are typically developed by web browser vendors, and every major browser has one. In a browser, the JavaScript engine runs in concert with the rendering engine via the Document Object Model and Web IDL bindings. However, the use of JavaScript engines is not limited to browsers; for example, the V8 engine is a core component of the Node.js runtime system. Since ECMAScript is the standardized specification of JavaScript, ECMAScript engine is another name for these implementations. With the advent of WebAssembly, some engines can also execute this code in the same sandbox as regular JavaScript code.",
  "runtime_system": "A JavaScript engine must be embedded within a runtime system (such as a web browser or a standalone system) to enable scripts to interact with the broader environment. The runtime system includes the necessary APIs for input/output operations, such as networking, storage, and graphics, and provides the ability to import scripts. JavaScript is a single-threaded language. The runtime processes messages from a queue one at a time, and it calls a function associated with each new message, creating a call stack frame with the function's arguments and local variables. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as run to completion because each message is fully processed before the next message is considered. However, the language's concurrency model describes the event loop as non-blocking: program I/O is performed using events and callback functions. This means, for example, that JavaScript can process a mouse click while waiting for a database query to return information. The notable standalone runtimes are Node.js, Deno, and Bun.",
  "features": "The following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise.",
  "imperative_and_structured": "Main article: Structured programming JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted.",
  "weakly_typed": "Main article: Weakly typed JavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used. The binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator The binary - operator always casts both operands to a number Both unary operators (+, -) always cast the operand to a number. However, + always casts to Number (binary64) while - preserves BigInt (integer) Values are cast to strings like the following: Strings are left as-is Numbers are converted to their string representation Arrays have their elements cast to strings after which they are joined by commas (,) Other objects are converted to the string [object Object] where Object is the name of the constructor of the object Values are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively. JavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency. For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction. JavaScript type conversions left operand operator right operand result [] (empty array) + [] (empty array)  (empty string) [] (empty array) + {} (empty object) [object Object] (string) false (boolean) + [] (empty array) false (string) 123(string) + 1 (number) 1231 (string) 123 (string) - 1 (number) 122 (number) 123 (string) - abc (string) NaN (number) Often also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If the expression is wrapped in parentheses - ({} + []) – the curly brackets are interpreted as an empty object and the result of the expression is [object Object] as expected.",
  "dynamic": "Main article: Dynamic Programming",
  "typing": "Main article: Dynamic typing JavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string. JavaScript supports various ways to test the type of objects, including duck typing.",
  "run_time_evaluation": "Main article: eval JavaScript includes an eval function that can execute statements provided as strings at run-time.",
  "object_orientation_prototype_based": "Prototypal inheritance in JavaScript is described by Douglas Crockford as: You make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that? In JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj[x] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop.",
  "prototypes": "Main article: Prototype-based programming JavaScript uses prototypes where many other object-oriented languages use classes for inheritance, but it's still possible to simulate most class-based features with the prototype system. Additionally, ECMAScript version 6 (released June 2015) introduced the keywords class, extends and super, which serve as syntactic sugar to abstract the underlying prototypal inheritance system with a more conventional interface. Constructors are declared by specifying a method named constructor, and all classes are automatically subclasses of the base class Object, similarly to Java. class Person { constructor(name) { this.name = name; } } class Student extends Person { constructor(name, id) { super(name); this.id = id; } } const bob = new Student(Robert, 12345); console.log(bob.name); // Robert Though the underlying object mechanism is still based on prototypes, the newer syntax is similar to other object oriented languages. Private variables are declared by prefixing the field name with a number sign (#), and polymorphism is not directly supported, although it can be emulated by manually calling different functions depending on the number and type of arguments provided.",
  "functions_as_object_constructors": "Functions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype). ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null). The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. // This code is completely equivalent to the previous snippet function Person(name) { this.name = name; } function Student(name, id) { Person.call(this, name); this.id = id; } var bob = new Student(Robert, 12345); console.log(bob.name); // Robert JavaScript's built-in classes, such as Array and Object, also have prototypes that can be modified. However, it's generally considered bad practice to modify built-in objects, because third-party code may use or inherit methods and properties from these objects, and may not expect the prototype to be modified.",
  "functions_as_methods": "Main article: Method (computer science) Unlike in many object-oriented languages, in JavaScript there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling. When a function is called as a method of an object, the function's local this keyword is bound to that object for that invocation.",
  "functional": "Main article: Functional programming JavaScript functions are first-class; a function is considered to be an object. As such, a function may have properties and methods, such as .call() and .bind().",
  "lexical_closure": "Main article: Closure (computer programming) A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.",
  "anonymous_function": "Main article: Anonymous function JavaScript also supports anonymous functions.",
  "delegative": "Main article: Delegation (object-oriented programming) JavaScript supports implicit and explicit delegation.",
  "functions_as_roles_traits_and_mixins": "Main articles: Role-oriented programming, Traits (computer science), and Mixin JavaScript natively supports various function-based implementations of Role patterns like Traits and Mixins. Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain.",
  "object_composition_and_inheritance": "Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.",
  "zero_based_numbering": "JavaScript is a zero-index language.",
  "variadic_functions": "Main article: Variadic function An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method.",
  "array_and_object_literals": "Main articles: Associative arrays and Object literal Like in many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format.",
  "regular_expressions": "Main article: Regular expression In a manner similar to Perl, JavaScript also supports regular expressions, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.",
  "promises_and_asyncawait": "JavaScript supports promises and Async/await for handling asynchronous operations.[citation needed]",
  "promises": "Main article: Futures and promises A built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action's eventual result. Recently, the JavaScript specification introduced combinator methods, which allow developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any.",
  "asyncawait": "Main article: Async/await Async/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similarly to traditional synchronous, blocking code.",
  "vendor_specific_extensions": "Historically, some JavaScript engines supported these non-standard features: array comprehensions and generator expressions (like Python) concise function expressions (function(args) expr; this experimental syntax predated arrow functions) ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21)",
  "syntax": "Main article: JavaScript syntax Variables in JavaScript can be defined using either the var, let or const keywords. Variables defined without keywords will be defined at the global scope. Arrow functions were first introduced in 6th Edition – ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their creation, unless surrounded by parenthesis and executed immediately. Here is an example of JavaScript syntax. // Declares a function-scoped variable named `x`, and implicitly assigns the // special value `undefined` to it. Variables without value are automatically // set to undefined. // var is generally considered bad practice and let and const are usually preferred. var x; // Variables can be manually set to `undefined` like so let x2 = undefined; // Declares a block-scoped variable named `y`, and implicitly sets it to // `undefined`. The `let` keyword was introduced in ECMAScript 2015. let y; // Declares a block-scoped, un-reassignable variable named `z`, and sets it to // a string literal. The `const` keyword was also introduced in ECMAScript 2015, // and must be explicitly assigned to. // The keyword `const` means constant, hence the variable cannot be reassigned // as the value is `constant`. const z = this value cannot be reassigned!; // Declares a global-scoped variable and assigns 3. This is generally considered // bad practice, and will not work if strict mode is on. t = 3; // Declares a variable named `myNumber`, and assigns a number literal (the value // `2`) to it. let myNumber = 2; // Reassigns `myNumber`, setting it to a string literal (the value `foo`). // JavaScript is a dynamically-typed language, so this is legal. myNumber = foo; Note the comments in the examples above, all of which were preceded with two forward slashes. More examples can be found at the Wikibooks page on JavaScript syntax examples.",
  "security": "See also: Browser security JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one website do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox. There are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements). Closure Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML. Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page.",
  "cross_site_scripting": "Main article: Cross-site scripting A common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Website, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. One important solution to XSS vulnerabilities is HTML sanitization. Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS. XSS vulnerabilities can also occur because of implementation mistakes by browser authors.",
  "cross_site_request_forgery": "Main article: Cross-site request forgery Another cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help. JavaScript hijacking is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include: requiring an authentication token in the POST and GET parameters for any response that returns private information.",
  "misplaced_trust_in_the_client": "Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The author of an application should not assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are: Website authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered. JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client. Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it. It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker. Prototype pollution is a runtime vulnerability in which attackers can overwrite arbitrary properties in an object's prototype.",
  "misplaced_trust_in_developers": "Package management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developers' program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133,000 websites, researchers found 37% of the websites included a library with at least one known vulnerability. The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago. Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break.",
  "browser_and_plugin_coding_errors": "Further information: Buffer overflow JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges. These flaws have affected major browsers including Firefox, Internet Explorer, and Safari. Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past). In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges. Google Chrome similarly confines its page renderers to their own sandbox.",
  "sandbox_implementation_errors": "Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web. Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer and Firefox. In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer. Microsoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[failed verification]",
  "hardware_vulnerabilities": "In 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers. In 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It is called ASLR⊕Cache or AnC. In 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.",
  "development_tools": "Important tools have evolved with the language. Every major web browser has built-in web development tools, including a JavaScript debugger. Static program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines. Some browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench. Many text editors have syntax highlighting support for JavaScript code.",
  "java": "A common misconception is that JavaScript is directly related to Java. Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed, and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0. Both languages first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications. The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme.",
  "json": "JSON is a data format derived from JavaScript; hence the name JavaScript Object Notation. It is a widely used format supported by many other programming languages.",
  "transpilers": "Many websites are JavaScript-heavy, so transpilers have been created to convert code written in other languages, which can aid the development process. TypeScript and CoffeeScript are two notable languages that transpile to JavaScript.",
  "webassembly": "WebAssembly is a newer language with a bytecode format designed to complement JavaScript, especially the performance-critical portions of web page scripts. All of the major JavaScript engines support WebAssembly, which runs in the same sandbox as regular JavaScript code. asm.js is a subset of JavaScript that served as the forerunner of WebAssembly.",
  "references": "^ a b Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet (Press release). 4 December 1995. Archived from the original on 16 September 2007. ^ ECMAScript® 2024 Language Specification. June 2024. Retrieved 30 August 2024. ^ ECMAScript® 2025 Language Specification. 27 March 2024. Retrieved 17 April 2024. ^ nodejs/node-eps. GitHub. Archived from the original on 29 August 2020. Retrieved 5 July 2018. ^ a b Seibel, Peter (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. ISBN 978-1-4302-1948-4. Archived from the original on 24 December 2020. Retrieved 25 December 2018. Eich: The immediate concern at Netscape was it must look like Java. ^ a b c d e Chapter 4. How JavaScript Was Created. speakingjs.com. Archived from the original on 27 February 2020. Retrieved 21 November 2017. ^ Popularity – Brendan Eich. ^ Brendan Eich: An Introduction to JavaScript, JSConf 2010. YouTube. 20 January 2013. p. 22m. Archived from the original on 29 August 2020. Retrieved 25 November 2019. Eich: function, eight letters, I was influenced by AWK. ^ Eich, Brendan (1998). Foreword. In Goodman, Danny (ed.). JavaScript Bible (3rd ed.). John Wiley & Sons. ISBN 0-7645-3188-3. LCCN 97078208. OCLC 38888873. OL 712205M. ^ a b Usage Statistics of JavaScript as Client-side Programming Language on Websites. W3Techs. Retrieved 27 February 2024. ^ ECMAScript 2020 Language Specification. Archived from the original on 8 May 2020. Retrieved 8 May 2020. ^ Bloomberg Game Changers: Marc Andreessen. Bloomberg. Bloomberg. 17 March 2011. Archived from the original on 16 May 2012. Retrieved 7 December 2011. ^ Enzer, Larry (31 August 2018). The Evolution of the Web Browsers. Monmouth Web Developers. Archived from the original on 31 August 2018. Retrieved 31 August 2018. ^ a b c Fin JS (17 June 2016), Brendan Eich – CEO of Brave, YouTube, retrieved 7 February 2018 ^ Netscape Communications Corp., Browser enhancements. Encyclopædia Britannica 2006 Ultimate Reference Suite DVD ^ TechVision: Innovators of the Net: Brendan Eich and JavaScript. Archived from the original on 8 February 2008. ^ a b Han, Sheon (4 March 2024). JavaScript Runs the World—Maybe Even Literally. Wired. Retrieved 21 August 2024. ^ a b Chapter 5. Standardization: ECMAScript. speakingjs.com. Archived from the original on 1 November 2021. Retrieved 1 November 2021. ^ a b Champeon, Steve (6 April 2001). JavaScript, How Did We Get Here?. oreilly.com. Archived from the original on 19 July 2016. Retrieved 16 July 2016. ^ Microsoft Internet Explorer 3.0 Beta Now Available. microsoft.com. Microsoft. 29 May 1996. Archived from the original on 24 November 2020. Retrieved 16 July 2016. ^ McCracken, Harry (16 September 2010). The Unwelcome Return of Best Viewed with Internet Explorer. technologizer.com. Archived from the original on 23 June 2018. Retrieved 16 July 2016. ^ Baker, Loren (24 November 2004). Mozilla Firefox Internet Browser Market Share Gains to 7.4%. Search Engine Journal. Archived from the original on 7 May 2021. Retrieved 8 May 2021. ^ Weber, Tim (9 May 2005). The assault on software giant Microsoft. BBC News. Archived from the original on 25 September 2017. ^ Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome. PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on 2 May 2012. Retrieved 28 June 2010. ^ Purdy, Kevin (11 June 2009). Lifehacker Speed Tests: Safari 4, Chrome 2. Lifehacker. Archived from the original on 14 April 2021. Retrieved 8 May 2021. ^ TraceMonkey: JavaScript Lightspeed, Brendan Eich's Blog. Archived from the original on 4 December 2015. Retrieved 22 July 2020. ^ Mozilla asks, 'Are we fast yet?'. Wired. Archived from the original on 22 June 2018. Retrieved 18 January 2019. ^ ECMAScript 6: New Features: Overview and Comparison. es6-features.org. Archived from the original on 18 March 2018. Retrieved 19 March 2018. ^ Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012 ^ Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012 ^ Lawton, George (19 July 2018). The secret history behind the success of npm and Node. TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021. ^ Brown, Paul (13 January 2017). State of the Union: npm. Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021. ^ a b c Branscombe, Mary (4 May 2016). JavaScript Standard Moves to Yearly Release Schedule; Here is What's New for ES16. The New Stack. Archived from the original on 16 January 2021. Retrieved 15 January 2021. ^ The TC39 Process. tc39.es. Ecma International. Archived from the original on 7 February 2021. Retrieved 15 January 2021. ^ ECMAScript proposals. TC39. Archived from the original on 4 December 2020. Retrieved 15 January 2021. ^ a b Ashkenas, Jeremy. List of languages that compile to JS. GitHub. Archived from the original on 31 January 2020. Retrieved 6 February 2020. ^ U.S. Trademark Serial No. 75026640. uspto.gov. United States Patent and Trademark Office. 6 May 1997. Archived from the original on 13 July 2021. Retrieved 8 May 2021. ^ Legal Notices. oracle.com. Oracle Corporation. Archived from the original on 5 June 2021. Retrieved 8 May 2021. ^ Oracle to buy Sun in $7.4-bn deal. The Economic Times. 21 April 2009. ^ Claburn, Thomas (17 September 2024). Oracle urged again to give up JavaScript trademark. The Register. Retrieved 2 February 2025. ^ Krill, Paul (20 September 2024). JavaScript community challenges Oracle's JavaScript trademark. InfoWorld. ^ a b c Usage statistics of JavaScript libraries for websites. W3Techs. Retrieved 9 April 2021. ^ Using jQuery with Bootstrap. clouddevs.com. 10 June 2019. Retrieved 17 March 2024. ^ Vanilla JS. vanilla-js.com. 16 June 2020. Archived from the original on 16 June 2020. Retrieved 17 June 2020. ^ Server-Side JavaScript Guide. oracle.com. Oracle Corporation. 11 December 1998. Archived from the original on 11 March 2021. Retrieved 8 May 2021. ^ Clinick, Andrew (14 July 2000). Introducing JScript .NET. Microsoft Developer Network. Microsoft. Archived from the original on 10 November 2017. Retrieved 10 April 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP) ^ a b Mahemoff, Michael (17 December 2009). Server-Side JavaScript, Back with a Vengeance. readwrite.com. Archived from the original on 17 June 2016. Retrieved 16 July 2016. ^ JavaScript for Acrobat. adobe.com. 7 August 2009. Archived from the original on 7 August 2009. Retrieved 18 August 2009. ^ treitter (2 February 2013). Answering the question: How do I develop an app for GNOME?. livejournal.com. Archived from the original on 11 February 2013. Retrieved 7 February 2013. ^ Ponge, Julien (19 April 2018). Oracle Nashorn: A Next-Generation JavaScript Engine for the JVM. oracle.com. Oracle Corporation. Retrieved 17 February 2025. ^ Migration Guide from Nashorn to GraalJS. graalvm.org. Retrieved 17 February 2025. ^ GraalJS. GraalVM. Retrieved 17 February 2025. ^ Java Interoperability. oracle.com. Oracle. Retrieved 17 February 2025. ^ Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel. tessel.io. Archived from the original on 26 May 2021. Retrieved 8 May 2021. ^ Node.js Raspberry Pi GPIO Introduction. w3schools.com. Archived from the original on 13 August 2021. Retrieved 3 May 2020. ^ Espruino – JavaScript for Microcontrollers. espruino.com. Archived from the original on 1 May 2020. Retrieved 3 May 2020. ^ Looper, Jen (21 September 2015). A Guide to JavaScript Engines for Idiots. Telerik Developer Network. Archived from the original on 8 December 2018. Retrieved 8 December 2018. ^ How Blink Works. Google. Retrieved 12 March 2024. ^ a b Documentation · V8. Google. Retrieved 3 March 2024. ^ Nelaturu, Keerthi. WebAssembly: What's the big deal?. medium.com. Retrieved 3 March 2024. ^ Concurrency model and Event Loop. Mozilla Developer Network. Archived from the original on 5 September 2015. Retrieved 28 August 2015. ^ Flanagan, David (17 August 2006). JavaScript: The Definitive Guide: The Definitive Guide. O'Reilly Media, Inc.. p. 16. ISBN 978-0-596-55447-7. Archived from the original on 1 August 2020. Retrieved 29 March 2019. ^ a b c d Korolev, Mikhail (1 March 2019). JavaScript quirks in one image from the Internet. The DEV Community. Archived from the original on 28 October 2019. Retrieved 28 October 2019. ^ Proposal-bigint/ADVANCED.md at master · tc39/Proposal-bigint. GitHub. ^ Bernhardt, Gary (2012). Wat. Destroy All Software. Archived from the original on 28 October 2019. Retrieved 28 October 2019. ^ JavaScript data types and data structures. MDN. 16 February 2017. Archived from the original on 14 March 2017. Retrieved 24 February 2017. ^ Flanagan 2006, pp. 176–178. ^ Crockford, Douglas. Prototypal Inheritance in JavaScript. Archived from the original on 13 August 2013. Retrieved 20 August 2013. ^ Inheritance and the prototype chain. Mozilla Developer Network. Archived from the original on 25 April 2013. Retrieved 6 April 2013. ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. p. 83. ISBN 978-0-321-81218-6. ^ Ghandi, Raju (2019). JavaScript Next. New York City: Apress Media. pp. 159–171. ISBN 978-1-4842-5394-6. ^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 95–97. ISBN 978-1-59327-282-1. ^ Katz, Yehuda (12 August 2011). Understanding Prototypes in JavaScript. Archived from the original on 5 April 2013. Retrieved 6 April 2013. ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. pp. 125–127. ISBN 978-0-321-81218-6. ^ Function – JavaScript. MDN Web Docs. Retrieved 30 October 2021. ^ Properties of the Function Object. Es5.github.com. Archived from the original on 28 January 2013. Retrieved 26 May 2013. ^ Flanagan 2006, p. 141. ^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogspot.de, April 11, 2014. ^ Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010. ^ Home | CocktailJS. Cocktailjs.github.io. Archived from the original on 4 February 2017. Retrieved 24 February 2017. ^ Croll, Angus (31 May 2011). A fresh look at JavaScript Mixins. JavaScript, JavaScript…. Archived from the original on 15 April 2020. ^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 139–149. ISBN 978-1-59327-282-1. ^ E4X – Archive of obsolete content. Mozilla Developer Network. Mozilla Foundation. 14 February 2014. Archived from the original on 24 July 2014. Retrieved 13 July 2014. ^ var – JavaScript. The Mozilla Developer Network. Archived from the original on 23 December 2012. Retrieved 22 December 2012. ^ let. MDN web docs. Mozilla. Archived from the original on 28 May 2019. Retrieved 27 June 2018. ^ const. MDN web docs. Mozilla. Archived from the original on 28 June 2018. Retrieved 27 June 2018. ^ Making JavaScript Safe for Advertising. ADsafe. Archived from the original on 6 July 2021. Retrieved 8 May 2021. ^ Secure ECMA Script (SES). Archived from the original on 15 May 2013. Retrieved 26 May 2013. ^ Google Caja Project. Google. Archived from the original on 22 January 2021. Retrieved 9 July 2021. ^ Mozilla Cross-Site Scripting Vulnerability Reported and Fixed – MozillaZine Talkback. Mozillazine.org. Archived from the original on 21 July 2011. Retrieved 24 February 2017. ^ Kottelin, Thor (17 June 2008). Right-click protection? Forget about it. blog.anta.net. Archived from the original on 9 August 2011. Retrieved 28 July 2022. ^ Rehorik, Jan (29 November 2016). Why You Should Never Put Sensitive Data in Your JavaScript. ServiceObjects Blog. ServiceObjects. Archived from the original on 3 June 2019. Retrieved 3 June 2019. ^ a b Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (21 December 2016), Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web (PDF), Northeastern University, arXiv:1811.00918, doi:10.14722/ndss.2017.23414, ISBN 978-1-891562-46-4, S2CID 17885720, archived from the original (PDF) on 29 March 2017, retrieved 28 July 2022 ^ Collins, Keith (27 March 2016). How one programmer broke the internet by deleting a tiny piece of code. Quartz. Archived from the original on 22 February 2017. Retrieved 22 February 2017. ^ SC Magazine UK, Developer's 11 lines of deleted code 'breaks the internet' Archived February 23, 2017, at the Wayback Machine ^ Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine ^ Festa, Paul (19 August 1998). Buffer-overflow bug in IE. CNET. Archived from the original on 25 December 2002. ^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine ^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-10-11 at the Wayback Machine ^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine ^ Protected Mode in Vista IE7 – IEBlog. Blogs.msdn.com. 9 February 2006. Archived from the original on 23 January 2010. Retrieved 24 February 2017. ^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine ^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine ^ Andersen, Starr (9 August 2004). Part 5: Enhanced Browsing Security. TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 20 October 2021. ^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-09-13 at the Wayback Machine ^ Gruss, Daniel; Maurice, Clémentine; Mangard, Stefan (24 July 2015). Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript. arXiv:1507.06955 [cs.CR]. ^ Jean-Pharuns, Alix (30 July 2015). Rowhammer.js Is the Most Ingenious Hack I've Ever Seen. Motherboard. Vice. Archived from the original on 27 January 2018. Retrieved 26 January 2018. ^ Goodin, Dan (4 August 2015). DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript. Ars Technica. Archived from the original on 27 January 2018. Retrieved 26 January 2018. ^ Auerbach, David (28 July 2015). Rowhammer security exploit: Why a new security attack is truly terrifying. slate.com. Archived from the original on 30 July 2015. Retrieved 29 July 2015. ^ AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017 ^ New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017 ^ Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack ^ Benchmark.js. benchmarkjs.com. Archived from the original on 19 December 2016. Retrieved 6 November 2016. ^ JSBEN.CH. JSBEN.CH Performance Benchmarking Playground for JavaScript. jsben.ch. Archived from the original on 27 February 2021. Retrieved 13 August 2021. ^ Eich, Brendan (3 April 2008). Popularity. Archived from the original on 3 July 2011. Retrieved 19 January 2012. ^ Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine. Visual Studio Magazine. Archived from the original on 10 February 2018. Retrieved 9 February 2018. ^ frequently asked questions. asm.js. Archived from the original on 4 June 2014. Retrieved 13 April 2014.",
  "further_reading": "See also: ECMAScript Specification Documents Flanagan, David (2020). JavaScript: The Definitive Guide (7th ed.). Sebastopol, California: O'Reilly. ISBN 978-1-491-95202-3. Haverbeke, Marijn (2018). Eloquent JavaScript (3rd ed.). No Starch Press. ISBN 978-1593279509. Zakas, Nicholas (2014). Principles of Object-Oriented JavaScript (1st ed.). No Starch Press. ISBN 978-1593275402.",
  "external_links": "JavaScript at Wikipedia's sister projects Definitions from WiktionaryMedia from CommonsTextbooks from WikibooksResources from WikiversityDocumentation from MediaWiki Listen to this article (48 minutes) This audio file was created from a revision of this article dated 20 August 2013 (2013-8-20), and does not reflect subsequent edits.(Audio help · More spoken articles) The Modern JavaScript Tutorial. A community maintained continuously updated collection of tutorials on the entirety of the language. JavaScript: The First 20 Years. Retrieved 6 February 2022. vteJavaScriptCode analysis ESLint JSHint JSLint Supersets JS++ TypeScript ArkTS Transpilers AtScript Babel ClojureScript CoffeeScript Dart Elm Emscripten Google Closure Compiler Google Web Toolkit Haxe LiveScript Morfik Nim Opa PureScript Reason WebSharper Concepts JavaScript library JavaScript syntax Debuggers Chrome DevTools Firefox Inspector Komodo IDE Microsoft Edge DevTools Opera DevTools Safari Web Inspector Doc generators JSDoc Editors (comparison) Ace Cloud9 IDE Atom CodeMirror Brackets Light Table PhpStorm Orion Visual Studio Visual Studio Express Visual Studio Code Visual Studio Team Services Vim Engines List of ECMAScript engines Frameworks Comparison of JavaScript frameworks List of JavaScript libraries Related technologies Ajax AssemblyScript asm.js Cascading Style Sheets Document Object Model HTML HTML5 JSON WebAssembly WebAuthn Package managers npm pnpm yarn Module bundlers Webpack Vite esbuild Server-side Active Server Pages Bun CommonJS Deno JSGI Node.js Unit testing frameworks (list) Jasmine Mocha QUnit People Douglas Crockford Ryan Dahl Brendan Eich John Resig vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Forth Fortran Go Haskell Java JavaScript TypeScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteECMAScriptDialects ActionScript Caja JavaScript engines asm.js JScript JScript .NET QtScript TypeScript WMLScript Engines(comparison) Carakan Futhark InScript JavaScriptCore JScript KJS Linear B QtScript Rhino SpiderMonkey TraceMonkey JägerMonkey Tamarin V8 ChakraCore Chakra JScript .NET Nashorn FrameworksClient-side Dojo Echo Ext JS Google Web Toolkit jQuery Lively Kernel midori MochiKit MooTools Prototype Pyjs qooxdoo SproutCore Spry Wakanda Framework Server-side Node.js Deno Bun Jaxer AppJet WakandaDB Multiple Cappuccino Libraries Backbone.js SWFObject Underscore.js People Brendan Eich Douglas Crockford John Resig Scott Isaacs Other DHTML Ecma International JSDoc JSGI JSHint JSLint JSON JSSS Sputnik SunSpider Asynchronous module definition CommonJS Lists JavaScript libraries Ajax frameworks Comparisons JavaScript frameworks server-side JavaScript vteWeb browsers Features standards protocols Features Bookmarks Extensions Privacy mode Web standards HTML v5 CSS DOM JavaScript WebAssembly Web storage IndexedDB WebGL WebGPU Protocols HTTP Encryption Cookies third-party OCSP WebRTC WebSocket ActiveBlink-basedProprietary Google Chrome Arc Avast Coc Coc Comodo Epic Huawei Maxthon Microsoft Edge Opera (Mobile) Puffin QQ Samsung Silk Sleipnir SRWare UC Vivaldi Whale Yandex FOSS Chromium Brave Dooble Falkon Otter Supermium ungoogled Gecko-based Firefox Floorp GNU IceCat LibreWolf Midori SlimBrowser Tor Zen Gecko forks Basilisk K-Meleon Pale Moon SeaMonkey Waterfox WebKit-based Safari GNOME Web iCab Orion Multi-engine 360 DuckDuckGo Konqueror Lunascape NetFront qutebrowser Other Dillo eww Flow Ladybird Links Lynx NetSurf Opera Mini w3m DiscontinuedBlink-based Beaker Citrio Flock Redcore Rockmelt SalamWeb Sputnik Torch Gecko-based Beonex Camino Classilla Conkeror Firefox Lite Galeon Ghostzilla IceDragon Kazehakase Kylo Lotus MicroB Minimo Mozilla suite PirateBrowser Pogo Strata Swiftfox Swiftweasel TenFourFox Timberwolf xB MSHTML-based Internet Explorer AOL Deepnet GreenBrowser MediaBrowser NeoPlanet NetCaptor SpaceTime ZAC WebKit-based Arora BOLT Dolphin Fluid Google TV Iris Mercury Nokia Symbian OmniWeb Opera Coast Origyn QtWeb Shiira Steel surf Uzbl WebPositive xombrero Other abaco Amaya Arachne Arena Blazer Cake Charon CM Deepfish Edge Legacy ELinks Gazelle HotJava IBM Home Page Reader IBM WebExplorer IBrowse Internet Explorer for Mac KidZui Line Mode Mosaic MSN TV NetPositive Netscape Skweezer Skyfire ThunderHawk Vision WinWAP WorldWideWeb Category Comparisons List vteNode.jsPlatform Node.js npm V8 CommonJS Frameworks MEAN MongoDB Express.js AngularJS/Angular MEEN (substituted with Ember.js) Backbone.js Fastify Meteor Sails.js (uses Express.js) NestJS Next.js Nuxt.js Libraries Lodash Underscore.js React.js Vue.js Languages JavaScript CoffeeScript TypeScript WebAssembly AssemblyScript C Rust Portal: Computer programming Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRefELMCIP"
},
{
  "title": "TypeScript",
  "url": "https://en.wikipedia.org/wiki/TypeScript",
  "history": "TypeScript was released to the public in October 2012, with version 0.8, after two years of internal development at Microsoft. Soon after the initial public release, Miguel de Icaza praised the language itself, but criticized the lack of mature IDE support apart from Microsoft Visual Studio, which was not available on Linux and macOS at the time. As of April 2021 there is support in other IDEs and text editors, including Emacs, Vim, WebStorm, Atom and Microsoft's own Visual Studio Code. TypeScript 0.9, released in 2013, added support for generics. TypeScript 1.0 was released at Microsoft's Build developer conference in 2014. Visual Studio 2013 Update 2 provided built-in support for TypeScript. Further improvement were made in July 2014, when the development team announced a new TypeScript compiler, asserted to have a five-fold performance increase. Simultaneously, the source code, which was initially hosted on CodePlex, was moved to GitHub. On 22 September 2016, TypeScript 2.0 was released, introducing several features, including the ability for programmers to optionally enforce null safety, to mitigate what's sometimes referred to as the billion-dollar mistake. TypeScript 3.0 was released on 30 July 2018, bringing many language additions like tuples in rest parameters and spread expressions, rest parameters with tuple types, generic rest parameters and so on. TypeScript 4.0 was released on 20 August 2020. While 4.0 did not introduce any breaking changes, it added language features such as Custom JSX Factories and Variadic Tuple Types. TypeScript 5.0 was released on 16 March 2023 and included support for decorators. On March 11, 2025 Anders Hejlsberg announced on the TypeScript blog that the team is working on a Go port of the TypeScript compiler to be released as TypeScript version 7.0 later this year. It is expected to feature a 10x speedup.",
  "design": "TypeScript originated from the shortcomings of JavaScript for the development of large-scale applications both at Microsoft and among their external customers. Challenges with dealing with complex JavaScript code led to demand for custom tooling to ease developing of components in the language. Developers sought a solution that would not break compatibility with the ECMAScript standard and its ecosystem, so a compiler was developed to transform a superset of JavaScript with type annotations and classes (TypeScript files) back into vanilla ECMAScript 5 code. TypeScript classes were based on the then-proposed ECMAScript 6 class specification to make writing prototypal inheritance less verbose and error-prone, and type annotations enabled IntelliSense and improved tooling.",
  "features": "TypeScript adds the following syntax extensions to JavaScript: Type annotations and compile-time type checking Type inference Interfaces Enumerated types Generics Namespaces Tuples Explicit Resource Management Syntactically, TypeScript is very similar to JScript .NET, another Microsoft implementation of the ECMA-262 language standard that added support for static typing and classical object-oriented language features such as classes, inheritance, interfaces, and namespaces. Other inspirations include Java and C#.",
  "type_annotations": "TypeScript provides static typing through type annotations to enable type checking at compile time. function add(left: number, right: number): number { return left + right; } Primitive types are annotated using all-lowercase types, such as number, boolean, bigint, and string. These types are distinct from their boxed counterparts (Number, Boolean, etc), which cannot have operations performed from values directly (a Number and number cannot be added). There are additionally undefined and null types for their respective values. All other non-primitive types are annotated using their class name, such as Error. Arrays can be written in two different ways which are both syntactically the same: the generic-based syntax Array<T> and a shorthand with T[]. Additional built-in data types are tuples, unions, never and any: An array with predefined data types at each index is a tuple, represented as [type1, type2, ..., typeN]. A variable that can hold more than one type of data is a union, represented using the logical OR | symbol (string | number). The never type is used when a given type should be impossible to create, which is useful for filtering mapped types. A value of type any supports the same operations as a value in JavaScript and minimal static type checking is performed, which makes it suitable for weakly or dynamically-typed structures. This is generally discouraged practice and should be avoided when possible. Type annotations can be exported to a separate declarations file to make type information available for TypeScript scripts using types already compiled into JavaScript. Annotations can be declared for an existing JavaScript library, as has been done for Node.js and jQuery. The TypeScript compiler makes use of type inference when types are not given. For example, the add method in the code above would be inferred as returning a number even if no return type annotation had been provided. This is based on the static types of left and right being numbers, and the compiler's knowledge that the result of adding two numbers is always a number. If no type can be inferred because of lack of declarations (such as in a JavaScript module without types), then it defaults to the dynamic any type. Additional module types can be provided using a .d.ts declaration file using the declare module moduleName syntax.",
  "declaration_files": "When a TypeScript script gets compiled, there is an option to generate a declaration file (with the extension .d.ts) that functions as an interface to the components in the compiled JavaScript. In the process, the compiler strips away all function and method bodies and preserves only the signatures of the types that are exported. The resulting declaration file can then be used to describe the exported virtual TypeScript types of a JavaScript library or module when a third-party developer consumes it from TypeScript. The concept of declaration files is analogous to the concept of header files found in C/C++. declare namespace Arithmetics { add(left: number, right: number): number; subtract(left: number, right: number): number; multiply(left: number, right: number): number; divide(left: number, right: number): number; } Type declaration files can be written by hand for existing JavaScript libraries, as has been done for jQuery and Node.js. Large collections of declaration files for popular JavaScript libraries are hosted on GitHub in DefinitelyTyped.",
  "generics": "Main article: Generic programming TypeScript supports generic programming using a syntax similar to Java. The following is an example of the identity function. function id<T>(x: T): T { return x; }",
  "classes": "TypeScript uses the same annotation style for class methods and fields as for functions and variables respectively. Compared with vanilla JavaScript classes, a TypeScript class can also implement an interface through the implements keyword, use generic parameters similarly to Java, and specify public and private fields. class Person { public name: string; private age: number; private salary: number; constructor(name: string, age: number, salary: number) { this.name = name; this.age = age; this.salary = salary; } toString(): string { return `${this.name} (${this.age}) (${this.salary})`; } }",
  "union_types": "This section is an excerpt from Union type § TypeScript.[edit] Union types are supported in TypeScript. The values are implicitly tagged with a type by the language, and may be retrieved using a typeof call for primitive values and an instanceof comparison for complex data types. Types with overlapping usage (e.g. a slice method exists on both strings and arrays, the plus operator works on both strings and numbers) don't need additional narrowing to use these features. function successor(n: number | bigint): number | bigint { // types that support the same operations don't need narrowing return ++n; } function dependsOnParameter(v: string | Array<string> | number) { // distinct types need narrowing if (v instanceof Array) { // do something } else if (typeof(v) === string) { // do something else } else { // has to be a number } }",
  "enumerated_types": "This section is an excerpt from Enumerated type § TypeScript.[edit] TypeScript adds an 'enum' data type to JavaScript. enum Cardsuit {Clubs, Diamonds, Hearts, Spades}; var c: Cardsuit = Cardsuit.Diamonds; By default, enums number members starting at 0; this can be overridden by setting the value of the first: enum Cardsuit {Clubs = 1, Diamonds, Hearts, Spades}; var c: Cardsuit = Cardsuit.Diamonds; All the values can be set: enum Cardsuit {Clubs = 1, Diamonds = 2, Hearts = 4, Spades = 8}; var c: Cardsuit = Cardsuit.Diamonds; TypeScript supports mapping the numeric value to its name. For example, this finds the name of the value 2: enum Cardsuit {Clubs = 1, Diamonds, Hearts, Spades}; var suitName: string = Cardsuit; alert(suitName);",
  "modules_and_namespaces": "TypeScript distinguishes between modules and namespaces. Both features in TypeScript support encapsulation of classes, interfaces, functions and variables into containers. Namespaces (formerly internal modules) use JavaScript immediately-invoked function expressions to encapsulate code, whereas modules (formerly external modules) use existing JavaScript library patterns (CommonJS or ES Modules).",
  "compatibility_with_javascript": "Main article: JavaScript As TypeScript is simply a superset of JavaScript, existing JavaScript can be quickly adapted to TypeScript and TypeScript program can seamlessly consume JavaScript. The compiler can target all ECMAScript versions 5 and above, transpiling modern features like classes and arrow functions to their older counterparts. With TypeScript, it is possible to use existing JavaScript code, incorporate popular JavaScript libraries, and call TypeScript-generated code from other JavaScript. Type declarations for these libraries are usually provided with the source code but can be declared or installed separately if needed.",
  "compiler": "The TypeScript compiler, named tsc, is written in TypeScript. As a result, it can be compiled into regular JavaScript and can then be executed in any JavaScript engine (e.g. a browser). The compiler package comes bundled with a script host that can execute the compiler. It is also available as a Node.js package that uses Node.js as a host. The compiler can target a particular edition of ECMAScript (such as ES5 for legacy browser compatibility), but by default compiles for the latest standards.",
  "ide_and_editor_support": "Microsoft provides a plug-in for Visual Studio 2012 and WebMatrix, full integrated support in Visual Studio 2013, Visual Studio 2015, and basic text editor support for Emacs and Vim. Visual Studio Code supports TypeScript in addition to several other languages, and offers features like debugging and intelligent code completion. alm.tools is an open source cloud IDE for TypeScript built using TypeScript, ReactJS and TypeStyle. JetBrains supports TypeScript with code completion, refactoring and debugging in its IDEs built on IntelliJ platform, such as PhpStorm 6, WebStorm 6, and IntelliJ IDEA, as well as their Visual Studio Add-in and extension, ReSharper 8.1. Atom has a TypeScript plugin with support for code completion, navigation, formatting, and fast compilation. The online Cloud9 IDE and Codenvy support TypeScript. A plugin is available for the NetBeans IDE. A plugin is available for the Eclipse IDE (version Kepler) TypEcs is available for the Eclipse IDE. The Cross Platform Cloud IDE Codeanywhere supports TypeScript. Webclipse An Eclipse plugin designed to develop TypeScript and Angular 2. Angular IDE A standalone IDE available via npm to develop TypeScript and Angular 2 applications, with integrated terminal support. Tide – TypeScript Interactive Development Environment for Emacs.",
  "integration_with_build_automation_tools": "Main article: Build automation Using plug-ins, TypeScript can be integrated with build automation tools, including Grunt (grunt-ts), Apache Maven (TypeScript Maven Plugin), Gulp (gulp-typescript) and Gradle (TypeScript Gradle Plugin).",
  "linting_tools": "TSLint scans TypeScript code for conformance to a set of standards and guidelines. ESLint, a standard JavaScript linter, also provided some support for TypeScript via community plugins. However, ESLint's inability to leverage TypeScript's language services precluded certain forms of semantic linting and program-wide analysis. In early 2019, the TSLint team announced the linter's deprecation in favor of typescript-eslint, a joint effort of the TSLint, ESLint and TypeScript teams to consolidate linting under the ESLint umbrella for improved performance, community unity and developer accessibility.",
  "codedom_provider": "CodeDOM provides types that represent common types of source code elements, which will be transformed to data types, classes and statements etc. of a programming language through a CodeDOMProvider. Programmers use CodeDOM and a CodeDOM provider to construct a code generator that generates codes for an application domain. TypeScript CodeDOM Provider generates TypeScript codes according to a CodeDOM.",
  "release_history": "Legend:Old version, not maintainedOld version, still maintainedLatest versionLatest preview versionFuture version Version number Release date Significant changes Old version, not maintained: 0.8 1 October 2012 (2012-10-01) Old version, not maintained: 0.9 18 June 2013 (2013-06-18) Old version, not maintained: 1.0 12 April 2014 (2014-04-12) Old version, not maintained: 1.1 6 October 2014 (2014-10-06) performance improvements Old version, not maintained: 1.3 12 November 2014 (2014-11-12) protected modifier, tuple types Old version, not maintained: 1.4 20 January 2015 (2015-01-20) union types, let and const declarations, template strings, type guards, type aliases Old version, not maintained: 1.5 20 July 2015 (2015-07-20) ES6 modules, namespace keyword, for..of support, decorators Old version, not maintained: 1.6 16 September 2015 (2015-09-16) JSX support, intersection types, local type declarations, abstract classes and methods, user-defined type guard functions Old version, not maintained: 1.7 30 November 2015 (2015-11-30) async and await support, Old version, not maintained: 1.8 22 February 2016 (2016-02-22) constraints generics, control flow analysis errors, string literal types, allowJs Old version, not maintained: 2.0 22 September 2016 (2016-09-22) null- and undefined-aware types, control flow based type analysis, discriminated union types, never type, readonly keyword, type of this for functions Old version, not maintained: 2.1 8 November 2016 (2016-11-08) keyof and lookup types, mapped types, object spread and rest, Old version, not maintained: 2.2 22 February 2017 (2017-02-22) mix-in classes, object type, Old version, not maintained: 2.3 27 April 2017 (2017-04-27) async iteration, generic parameter defaults, strict option Old version, not maintained: 2.4 27 June 2017 (2017-06-27) dynamic import expressions, string enums, improved inference for generics, strict contravariance for callback parameters Old version, not maintained: 2.5 31 August 2017 (2017-08-31) optional catch clause variables Old version, not maintained: 2.6 31 October 2017 (2017-10-31) strict function types Old version, not maintained: 2.7 31 January 2018 (2018-01-31) constant-named properties, fixed-length tuples Old version, not maintained: 2.8 27 March 2018 (2018-03-27) conditional types, improved keyof with intersection types Old version, not maintained: 2.9 14 May 2018 (2018-05-14) support for symbols and numeric literals in keyof and mapped object types Old version, not maintained: 3.0 30 July 2018 (2018-07-30) project references, extracting and spreading parameter lists with tuples Old version, not maintained: 3.1 27 September 2018 (2018-09-27) mappable tuple and array types Old version, not maintained: 3.2 30 November 2018 (2018-11-30) stricter checking for bind, call, and apply Old version, not maintained: 3.3 31 January 2019 (2019-01-31) relaxed rules on methods of union types, incremental builds for composite projects Old version, not maintained: 3.4 29 March 2019 (2019-03-29) faster incremental builds, type inference from generic functions, readonly modifier for arrays, const assertions, type-checking global this Old version, not maintained: 3.5 29 May 2019 (2019-05-29) faster incremental builds, omit helper type, improved excess property checks in union types, smarter union type checking Old version, not maintained: 3.6 28 August 2019 (2019-08-28) Stricter generators, more accurate array spread, better Unicode support for identifiers Old version, not maintained: 3.7 5 November 2019 (2019-11-05) Optional chaining, nullish coalescing Old version, not maintained: 3.8 20 February 2020 (2020-02-20) Type-only imports and exports, ECMAScript private fields, top-level await Old version, not maintained: 3.9 12 May 2020 (2020-05-12) Improvements in inference, speed improvements Old version, not maintained: 4.0 20 August 2020 (2020-08-20) Variadic tuple types, labeled tuple elements Old version, not maintained: 4.1 19 November 2020 (2020-11-19) Template literal types, key remapping in mapped types, recursive conditional types Old version, not maintained: 4.2 25 February 2021 (2021-02-25) Smarter type alias preservation, leading/middle rest elements in tuple types, stricter checks for the in operator, abstract construct signatures Old version, not maintained: 4.3 26 May 2021 (2021-05-26) Separate write types on properties, override and the --noImplicitOverride flag, template string type improvements Old version, not maintained: 4.4 26 August 2021 (2021-08-26) Control flow analysis of aliased conditions and discriminants, symbol and template string pattern index signatures Old version, not maintained: 4.5 17 November 2021 (2021-11-17) Type and promise improvements, supporting lib from node_modules, template string types as discriminants, and es2022 module Old version, not maintained: 4.6 28 February 2022 (2022-02-28) Type inference and checks improvements, support for ES2022 target, better ECMAScript handling Old version, not maintained: 4.7 24 May 2022 (2022-05-24) Support for ES modules, instantiation expressions, variance annotations for type parameters, better control-flow checks and type check improvements Old version, not maintained: 4.8 25 August 2022 (2022-08-25) Intersection and union types improvements, better type inference Old version, not maintained: 4.9 15 November 2022 (2022-11-15) satisfies operator, auto-accessors in classes (proposal), improvements in type narrowing and checks Old version, not maintained: 5.0 16 March 2023 (2023-03-16) ES decorators (proposal), type inference improvements, bundler module resolution mode, speed and size optimizations Old version, not maintained: 5.1 1 June 2023 (2023-06-01) Easier implicit returns for undefined and unrelated types for getters and setters Old version, not maintained: 5.2 24 August 2023 (2023-08-24) using declarations and explicit resource management, decorator metadata and named and anonymous tuple elements Old version, not maintained: 5.3 20 November 2023 (2023-11-20) Improved type narrowing, correctness checks and performance optimizations Old version, not maintained: 5.4 6 March 2024 Object.groupBy and Map.groupBy support Old version, not maintained: 5.5 20 June 2024 Inferred Type Predicates, Regular Expression Syntax Checking, and Type Imports in JSDoc Old version, not maintained: 5.6 9 September 2024 Advanced type inference, variadic tuple enhancements, partial module declarations. Old version, not maintained: 5.7 22 November 2024 Latest version: 5.8 28 February 2025 Latest preview version: 5.9 2025 Latest preview version: 6.0 Introduce some deprecations and breaking changes to align with the upcoming native codebase. Future version: 7.0 2025 Rewrite in Go with faster performance.",
  "see_also": "Free and open-source software portal Dart Kotlin JS++ PureScript",
  "citations": "^ TypeScript. CodePlex. Archived from the original on 3 April 2015. Retrieved 26 April 2015. ^ Release v5.8.2. ^ Type Compatibility. TypeScript. Archived from the original on 12 March 2018. Retrieved 21 March 2018. ^ The Early History of F# (PDF). Archived (PDF) from the original on 9 August 2024. Retrieved 5 February 2024. TypeScript was directly influenced by F#: one of the originators of TypeScript was Luke Hoban, who began TypeScript (then called Strada) immediately after working on F# 2.0. Recently he noted the influence of F# on early parts of the TypeScript design [Hoban 2017]. ^ Nelson, Gary (28 April 2020). How ActionScript foreshadowed TypeScript. Medium. Archived from the original on 9 August 2024. Retrieved 9 July 2022. ^ Bright, Peter (3 October 2012). Microsoft TypeScript: the JavaScript we need, or a solution looking for a problem?. Ars Technica. Condé Nast. Archived from the original on 9 October 2018. Retrieved 26 April 2015. ^ TypeScript Programming with Visual Studio Code. code.visualstudio.com. Archived from the original on 22 September 2022. Retrieved 12 February 2019. ^ borisyankov/DefinitelyTyped. GitHub. Archived from the original on 1 November 2015. Retrieved 26 April 2015. ^ Foley, Mary Jo (1 October 2012). Microsoft takes the wraps off TypeScript, a superset of JavaScript. ZDNet. CBS Interactive. Archived from the original on 13 November 2014. Retrieved 26 April 2015. ^ Somasegar, S. (1 October 2012). TypeScript: JavaScript Development at Application Scale. Somasegar's blog. Microsoft. Archived from the original on 26 September 2017. Retrieved 26 April 2015. ^ Baxter-Reynolds, Matt (1 October 2012). Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript?. ZDNet. Archived from the original on 3 August 2014. Retrieved 26 April 2015. ^ Jackson, Joab (1 October 2012). Microsoft Augments Javascript for Large-scale Development. CIO. IDG Enterprise. Archived from the original on 17 December 2013. Retrieved 26 April 2015. ^ Microsoft augments JavaScript for large-scale development. InfoWorld. IDG. 1 October 2012. Archived from the original on 31 May 2013. Retrieved 26 April 2015. ^ Turner, Jonathan (2 April 2014). Announcing TypeScript 1.0. TypeScript Language team blog. Microsoft. Archived from the original on 5 September 2015. Retrieved 20 October 2021. ^ Miguel de Icaza (1 October 2012). TypeScript: First Impressions. Archived from the original on 24 February 2019. Retrieved 12 October 2012. But TypeScript only delivers half of the value in using a strongly typed language to Unix developers: strong typing. Intellisense, code completion and refactoring are tools that are only available to Visual Studio Professional users on Windows. There is no Eclipse, MonoDevelop or Emacs support for any of the language features ^ Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript?. ZDNet. 1 October 2012. Archived from the original on 3 August 2014. Retrieved 12 October 2012. And I think this is a pretty big misstep. If you're building web apps that run on anything other than Windows, you're likely using a Mac and most likely not using Visual Studio. You need the Visual Studio plug-in to get the IntelliSense. All you get without Visual Studio is the strong-typing. You don't get the productivity benefits you get from IntelliSense.. ^ TypeStrong: The only TypeScript package you will ever need. GitHub. Archived from the original on 19 December 2018. Retrieved 21 July 2016. ^ Hillar, Gastón (14 May 2013). Working with TypeScript in Visual Studio 2012. Dr. Dobb's Journal. Archived from the original on 29 September 2018. Retrieved 26 April 2015. ^ TypeScript 0.9 arrives with new compiler, support for generics. The Register. 18 June 2013. Archived from the original on 11 March 2018. Retrieved 26 April 2015. ^ Hejlsberg, Anders (2 April 2014). TypeScript. Channel 9. Microsoft. Archived from the original on 25 May 2015. Retrieved 26 April 2015. ^ Jackson, Joab (25 February 2014). Microsoft TypeScript graduates to Visual Studio. PC World. IDG. Archived from the original on 11 March 2016. Retrieved 26 April 2015. ^ Turner, Jonathan (21 July 2014). New Compiler and Moving to GitHub. TypeScript Language team blog. Microsoft. Archived from the original on 22 July 2014. Retrieved 26 April 2015. ^ Bright, Peter (22 September 2016). TypeScript, Microsoft's JavaScript for big applications, reaches version 2.0. Ars Technica. Condé Nast. Archived from the original on 21 December 2018. Retrieved 22 September 2016. ^ Announcing TypeScript 3.0. 30 July 2018. Archived from the original on 30 May 2020. Retrieved 16 March 2020. ^ TypeScript 3.0. 30 July 2018. Archived from the original on 6 June 2020. Retrieved 16 March 2020. ^ a b Announcing TypeScript 4.0. TypeScript. 20 August 2020. Archived from the original on 9 August 2024. Retrieved 30 October 2020. ^ Documentation – TypeScript 5.0. www.typescriptlang.org. Archived from the original on 9 August 2024. Retrieved 18 May 2023. ^ Hejlsberg, Anders (11 March 2025). A 10x Faster TypeScript. TypeScript. Retrieved 11 March 2025. ^ Anders Hejlsberg (5 October 2012). What is TypeScript and why with Anders Hejlsberg. www.hanselminutes.com. Archived from the original on 27 December 2018. Retrieved 15 January 2014. ^ S. Somasegar (1 October 2012). TypeScript: JavaScript Development at Application Scale. msdn.com. Archived from the original on 22 April 2015. Retrieved 27 November 2013. ^ Documentation – TypeScript 5.2. www.typescriptlang.org. Archived from the original on 9 August 2024. Retrieved 9 November 2023. ^ TypeScript Language Specification p.24 (PDF). Archived from the original (PDF) on 17 November 2013. ^ TypeScript: Documentation – Everyday Types. www.typescriptlang.org/. Archived from the original on 9 August 2024. Retrieved 30 March 2021. ^ Turner, Jonathan (18 June 2013). Announcing TypeScript 0.9. TypeScript Language team blog. Microsoft. Archived from the original on 26 November 2013. Retrieved 18 June 2013. ^ Generics in Typescript. Microsoft. Archived from the original on 5 April 2020. Retrieved 8 April 2020. ^ Handbook - Unions and Intersection Types. www.typescriptlang.org. Retrieved 30 November 2020. ^ Sönke Sothmann (31 January 2014). An introduction to TypeScript's module system. blog.oio.de. Archived from the original on 1 February 2014. Retrieved 21 February 2014. ^ Welcome to TypeScript. typescriptlang.org. Microsoft. Archived from the original on 10 March 2018. Retrieved 26 April 2015. ^ Olivier Bloch (1 October 2012). Sublime Text, Vi, Emacs: TypeScript enabled!. Microsoft. Archived from the original on 29 October 2012. Retrieved 28 October 2012. ^ TypeScript support in WebStorm 6. JetBrains. 27 February 2013. Archived from the original on 2 June 2016. Retrieved 20 April 2013. ^ TypeScript support in ReSharper 8.1. JetBrains. 28 October 2013. Archived from the original on 2 February 2014. Retrieved 21 January 2014. ^ ReSharper: The Visual Studio Extension for .NET Developers by JetBrains. JetBrains. ^ atom-typescript. Atom. Archived from the original on 4 October 2016. Retrieved 9 January 2020. ^ TypeStrong/grunt-ts. GitHub. Archived from the original on 16 April 2020. Retrieved 26 April 2015. ^ ppedregal/typescript-maven-plugin. GitHub. Archived from the original on 11 June 2018. Retrieved 26 April 2015. ^ ivogabe/gulp-typescript. GitHub. Archived from the original on 11 June 2018. Retrieved 14 July 2017. ^ sothmann/typescript-gradle-plugin. GitHub. Archived from the original on 11 June 2018. Retrieved 26 April 2015. ^ TSLint. palantir.github.io. Archived from the original on 21 December 2022. Retrieved 11 February 2019. ^ Palantir (19 February 2019). TSLint in 2019. Medium. Retrieved 24 April 2019. ^ TSLint Deprecated to Focus Support on typescript-eslint. InfoQ. Archived from the original on 9 August 2024. Retrieved 24 April 2019. ^ CodeDOM. learn.microsoft.com. 30 March 2024. ^ CodeDOMProvider. learn.microsoft.com. Archived from the original on 9 August 2024. Retrieved 8 December 2023. ^ TypeScript CodeDOM Provider. github.com. Archived from the original on 9 August 2024. Retrieved 26 February 2024.",
  "sources": "Webclipse : Eclipse Plugin Archived 16 December 2016 at the Wayback Machine Genuitec. Retrieved 9 November 2016. Angular IDE by Webclipse : Standalone IDE Archived 10 November 2016 at the Wayback Machine Genuitec. Retrieved 9 November 2016.",
  "external_links": "TypeScript project at GitHub vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Forth Fortran Go Haskell Java JavaScript TypeScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category vteJavaScriptCode analysis ESLint JSHint JSLint Supersets JS++ TypeScript ArkTS Transpilers AtScript Babel ClojureScript CoffeeScript Dart Elm Emscripten Google Closure Compiler Google Web Toolkit Haxe LiveScript Morfik Nim Opa PureScript Reason WebSharper Concepts JavaScript library JavaScript syntax Debuggers Chrome DevTools Firefox Inspector Komodo IDE Microsoft Edge DevTools Opera DevTools Safari Web Inspector Doc generators JSDoc Editors (comparison) Ace Cloud9 IDE Atom CodeMirror Brackets Light Table PhpStorm Orion Visual Studio Visual Studio Express Visual Studio Code Visual Studio Team Services Vim Engines List of ECMAScript engines Frameworks Comparison of JavaScript frameworks List of JavaScript libraries Related technologies Ajax AssemblyScript asm.js Cascading Style Sheets Document Object Model HTML HTML5 JSON WebAssembly WebAuthn Package managers npm pnpm yarn Module bundlers Webpack Vite esbuild Server-side Active Server Pages Bun CommonJS Deno JSGI Node.js Unit testing frameworks (list) Jasmine Mocha QUnit People Douglas Crockford Ryan Dahl Brendan Eich John Resig vteMicrosoft APIs and frameworksGraphics and UI Desktop Window Manager Direct2D Direct3D D3D (extensions) GDI / GDI+ WPF Silverlight WinUI Windows Color System Windows Image Acquisition Windows Imaging Component DirectX Graphics Infrastructure (DXGI) Windows Advanced Rasterization Platform WinG Audio DirectMusic DirectSound DirectX plugin XACT Speech API XAudio2 Multimedia DirectX Media Objects Video Acceleration Xinput DirectInput DirectShow Image Mastering API Managed DirectX Media Foundation XNA Windows Media Video for Windows Web MSHTML RSS Platform JScript VBScript BHO XDR SideBar Gadgets TypeScript Data access Data Access Components (MDAC) ADO ADO.NET ODBC OLE DB Extensible Storage Engine Entity Framework Sync Framework Access Database Engine MSXML OPC Networking Winsock LSP Winsock Kernel Filtering Platform NDIS Windows Rally BITS P2P API MSMQ MS MPI DirectPlay Communication Messaging API Telephony API WCF Administration andmanagement Win32 console Windows Script Host WMI (extensions) PowerShell Task Scheduler Offline Files Shadow Copy Windows Installer Error Reporting Event Log Common Log File System Component model COM COM+ ActiveX Distributed Component Object Model .NET Framework Libraries Framework Class Library Microsoft Foundation Classes (MFC) Active Template Library (ATL) Windows Template Library (WTL) Device drivers WDM WDF KMDF UMDF WDDM NDIS UAA BDA VxD Security Crypto API CAPICOM Windows CardSpace Data Protection API Security Support Provider Interface (SSPI) .NET ASP.NET ADO.NET Remoting Silverlight TPL WCF WCS WPF WF Software factories Enterprise Library CCF IPC MSRPC Dynamic Data Exchange (DDE) Remoting WCF Accessibility Active Accessibility UI Automation Text and multilingualsupport DirectWrite Text Services Framework Text Object Model Input method editor Language Interface Pack Multilingual User Interface Uniscribe vteMicrosoft free and open-source software (FOSS)Overview Microsoft and open source Shared Source Initiative SoftwareApplications 3D Movie Maker Atom Conference XP Family.Show File Manager Open Live Writer Microsoft PowerToys Terminal Windows Calculator Windows Console Windows Package Manager WorldWide Telescope XML Notepad Video games Allegiance Programminglanguages Bosque C# Dafny F# F* GW-BASIC IronPython IronRuby Lean P Power Fx PowerShell Project Verona Q# Small Basic Online TypeScript Visual Basic Frameworks,development tools .NET .NET Framework .NET Gadgeteer .NET MAUI .NET Micro Framework AirSim ASP.NET ASP.NET AJAX ASP.NET Core ASP.NET MVC ASP.NET Razor ASP.NET Web Forms Avalonia Babylon.js BitFunnel Blazor C++/WinRT CCF ChakraCore CLR Profiler Dapr DeepSpeed DiskSpd Dryad Dynamic Language Runtime eBPF on Windows Electron Entity Framework Fluent Design System Fluid Framework Infer.NET LightGBM Managed Extensibility Framework Microsoft Automatic Graph Layout Microsoft C++ Standard Library Microsoft Cognitive Toolkit Microsoft Design Language Microsoft Detours Microsoft Enterprise Library Microsoft SEAL mimalloc Mixed Reality Toolkit ML.NET mod_mono Mono MonoDevelop MSBuild MsQuic Neural Network Intelligence npm NuGet OneFuzz Open Management Infrastructure Open Neural Network Exchange Open Service Mesh Open XML SDK Orleans Playwright ProcDump ProcMon Python Tools for Visual Studio R Tools for Visual Studio RecursiveExtractor Roslyn Sandcastle SignalR StyleCop SVNBridge T2 Temporal Prover Text Template Transformation Toolkit TLA+ Toolbox U-Prove vcpkg Virtual File System for Git Voldemort VoTT Vowpal Wabbit Windows App SDK Windows Communication Foundation Windows Driver Frameworks KMDF UMDF Windows Forms Windows Presentation Foundation Windows Template Library Windows UI Library WinJS WinObjC WiX XDP for Windows XSP xUnit.net Z3 Theorem Prover Operating systems MS-DOS (v1.25, v2.0 & v4.0) Barrelfish SONiC Azure Linux Other ChronoZoom Extensible Storage Engine FlexWiki FourQ Gollum Project Mu ReactiveX SILK TLAPS TPM 2.0 Reference Implementation WikiBhasha Licenses Microsoft Public License Microsoft Reciprocal License Forges CodePlex GitHub Related .NET Foundation F# Software Foundation Microsoft Open Specification Promise Open Letter to Hobbyists Open Source Security Foundation Outercurve Foundation Category vteNode.jsPlatform Node.js npm V8 CommonJS Frameworks MEAN MongoDB Express.js AngularJS/Angular MEEN (substituted with Ember.js) Backbone.js Fastify Meteor Sails.js (uses Express.js) NestJS Next.js Nuxt.js Libraries Lodash Underscore.js React.js Vue.js Languages JavaScript CoffeeScript TypeScript WebAssembly AssemblyScript C Rust Authority control databases: National United StatesIsrael"
},
{
  "title": "Java (programming language)",
  "url": "https://en.wikipedia.org/wiki/Java_(programming_language)",
  "history": "See also: Java (software platform) § History Duke, the Java mascot James Gosling, the creator of Java, in 2008 James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991. Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time. The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee, a type of coffee from Indonesia. Gosling designed Java with a C/C++-style syntax that system and application programmers would find familiar. Sun Microsystems released the first public implementation as Java 1.0 in 1996. It promised write once, run anywhere (WORA) functionality, providing no-cost run-times on popular platforms. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major web browsers soon incorporated the ability to run Java applets within web pages, and Java quickly became popular. The Java 1.0 compiler was re-written in Java by Arthur van Hoff to comply strictly with the Java 1.0 language specification. With the advent of Java 2 (released initially as J2SE 1.2 in December 1998 – 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as Java EE, Java ME, and Java SE, respectively. In 1997, Sun Microsystems approached the ISO/IEC JTC 1 standards body and later the Ecma International to formalize Java, but it soon withdrew from the process. Java remains a de facto standard, controlled through the Java Community Process. At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System. On November 13, 2006, Sun released much of its Java virtual machine (JVM) as free and open-source software (FOSS), under the terms of the GPL-2.0-only license. On May 8, 2007, Sun finished the process, making all of its JVM's core code available under free software/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright. Sun's vice-president Rich Green said that Sun's ideal role with regard to Java was as an evangelist. Following Oracle Corporation's acquisition of Sun Microsystems in 2009–10, Oracle has described itself as the steward of Java technology with a relentless commitment to fostering a community of participation and transparency. This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the Android SDK (see the Android section). On April 2, 2010, James Gosling resigned from Oracle. In January 2016, Oracle announced that Java run-time environments based on JDK 9 will discontinue the browser plugin. Java software runs on most devices from laptops to data centers, game consoles to scientific supercomputers. Oracle (and others) highly recommend uninstalling outdated and unsupported versions of Java, due to unresolved security issues in older versions.",
  "principles": "There were five primary goals in creating the Java language: It must be simple, object-oriented, and familiar. It must be robust and secure. It must be architecture-neutral and portable. It must execute with high performance. It must be interpreted, threaded, and dynamic.",
  "versions": "Main article: Java version history As of November 2024[update], Java 8, 11, 17, and 21 are supported as long-term support (LTS) versions, with Java 25, releasing in September 2025, as the next scheduled LTS version. Oracle released the last zero-cost public update for the legacy version Java 8 LTS in January 2019 for commercial use, although it will otherwise still support Java 8 with public updates for personal use indefinitely. Other vendors such as Adoptium continue to offer free builds of OpenJDK's long-term support (LTS) versions. These builds may include additional security patches and bug fixes. Major release versions of Java, along with their release dates: Version Date JDK Beta 1995 JDK 1.0 January 23, 1996 JDK 1.1 February 19, 1997 J2SE 1.2 December 8, 1998 J2SE 1.3 May 8, 2000 J2SE 1.4 February 6, 2002 J2SE 5.0 September 30, 2004 Java SE 6 December 11, 2006 Java SE 7 July 28, 2011 Java SE 8 (LTS) March 18, 2014 Java SE 9 September 21, 2017 Java SE 10 March 20, 2018 Java SE 11 (LTS) September 25, 2018 Java SE 12 March 19, 2019 Java SE 13 September 17, 2019 Java SE 14 March 17, 2020 Java SE 15 September 15, 2020 Java SE 16 March 16, 2021 Java SE 17 (LTS) September 14, 2021 Java SE 18 March 22, 2022 Java SE 19 September 20, 2022 Java SE 20 March 21, 2023 Java SE 21 (LTS) September 19, 2023 Java SE 22 March 19, 2024 Java SE 23 September 17, 2024 Java SE 24 18 March 2025",
  "editions": "See also: Free Java implementations § Class library Java platform editions Java Card Java ME (Micro Edition) Java SE (Standard Edition) Jakarta EE (Enterprise Edition) JavaFX (bundled in Oracle's JDK from versions 8 to 10 but separately since 11) PersonalJava (Discontinued) vte Sun has defined and supports four editions of Java targeting different application environments and segmented many of its APIs so that they belong to one of the platforms. The platforms are: Java Card for smart-cards. Java Platform, Micro Edition (Java ME) – targeting environments with limited resources. Java Platform, Standard Edition (Java SE) – targeting workstation environments. Java Platform, Enterprise Edition (Java EE) – targeting large distributed enterprise or Internet environments. The classes in the Java APIs are organized into separate groups called packages. Each package contains a set of related interfaces, classes, subpackages and exceptions. Sun also provided an edition called Personal Java that has been superseded by later, standards-based Java ME configuration-profile pairings.",
  "java_jvm_and_bytecode": "Main articles: Java (software platform) and Java virtual machine One design goal of Java is portability, which means that programs written for the Java platform must run similarly on any combination of hardware and operating system with adequate run time support. This is achieved by compiling the Java language code to an intermediate representation called Java bytecode, instead of directly to architecture-specific machine code. Java bytecode instructions are analogous to machine code, but they are intended to be executed by a virtual machine (VM) written specifically for the host hardware. End-users commonly use a Java Runtime Environment (JRE) installed on their device for standalone Java applications or a web browser for Java applets. Standard libraries provide a generic way to access host-specific features such as graphics, threading, and networking. The use of universal bytecode makes porting simple. However, the overhead of interpreting bytecode into machine instructions made interpreted programs almost always run more slowly than native executables. Just-in-time (JIT) compilers that compile byte-codes to machine code during runtime were introduced from an early stage. Java's Hotspot compiler is actually two compilers in one; and with GraalVM (included in e.g. Java 11, but removed as of Java 16) allowing tiered compilation. Java itself is platform-independent and is adapted to the particular platform it is to run on by a Java virtual machine (JVM), which translates the Java bytecode into the platform's machine language.",
  "performance": "Main article: Java performance Programs written in Java have a reputation for being slower and requiring more memory than those written in C++. However, Java programs' execution speed improved significantly with the introduction of just-in-time compilation in 1997/1998 for Java 1.1, the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine, such as HotSpot becoming Sun's default JVM in 2000. With Java 1.5, the performance was improved with the addition of the java.util.concurrent package, including lock-free implementations of the ConcurrentMaps and other multi-core collections, and it was improved further with Java 1.6.",
  "non_jvm": "Some platforms offer direct hardware support for Java; there are micro controllers that can run Java bytecode in hardware instead of a software Java virtual machine, and some ARM-based processors could have hardware support for executing Java bytecode through their Jazelle option, though support has mostly been dropped in current implementations of ARM.",
  "automatic_memory_management": "Java uses an automatic garbage collector to manage memory in the object lifecycle. The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the unreachable memory becomes eligible to be freed automatically by the garbage collector. Something similar to a memory leak may still occur if a programmer's code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use. If methods for a non-existent object are called, a null pointer exception is thrown. One of the ideas behind Java's automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the stack or explicitly allocated and deallocated from the heap. In the latter case, the responsibility of managing memory resides with the programmer. If the program does not deallocate an object, a memory leak occurs. If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable or crash. This can be partially remedied by the use of smart pointers, but these add overhead and complexity. Garbage collection does not prevent logical memory leaks, i.e. those where the memory is still referenced but never used. Garbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java. Java does not support C/C++ style pointer arithmetic, where object addresses can be arithmetically manipulated (e.g. by adding or subtracting an offset). This allows the garbage collector to relocate referenced objects and ensures type safety and security. As in C++ and some other object-oriented languages, variables of Java's primitive data types are either stored directly in fields (for objects) or on the stack (for methods) rather than on the heap, as is commonly true for non-primitive data types (but see escape analysis). This was a conscious decision by Java's designers for performance reasons. Java contains multiple types of garbage collectors. Since Java 9, HotSpot uses the Garbage First Garbage Collector (G1GC) as the default. However, there are also several other garbage collectors that can be used to manage the heap, such as the Z Garbage Collector (ZGC) introduced in Java 11, and Shenandoah GC, introduced in Java 12 but unavailable in Oracle-produced OpenJDK builds. Shenandoah is instead available in third-party builds of OpenJDK, such as Eclipse Temurin. For most applications in Java, G1GC is sufficient. In prior versions of Java, such as Java 8, the Parallel Garbage Collector was used as the default garbage collector. Having solved the memory management problem does not relieve the programmer of the burden of handling properly other kinds of resources, like network or database connections, file handles, etc., especially in the presence of exceptions.",
  "syntax": "Main article: Java syntax This dependency graph of the Java Core classes was created with jdeps and Gephi. The syntax of Java is largely influenced by C++ and C. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language. All code is written inside classes, and every data item is an object, with the exception of the primitive data types, (i.e. integers, floating-point numbers, boolean values, and characters), which are not objects for performance reasons. Java reuses some popular aspects of C++ (such as the printf method). Unlike C++, Java does not support operator overloading or multiple inheritance for classes, though multiple inheritance is supported for interfaces. Java uses comments similar to those of C++. There are three different styles of comments: a single line style marked with two slashes (//), a multiple line style opened with /* and closed with */, and the Javadoc commenting style opened with /** and closed with */. The Javadoc style of commenting allows the user to run the Javadoc executable to create documentation for the program and can be read by some integrated development environments (IDEs) such as Eclipse to allow developers to access documentation within the IDE.",
  "hello_world": "The following is a simple example of a Hello, World! program that writes a message to the standard output: public class Example { public static void main(String[] args) { System.out.println(Hello World!); } }",
  "special_classes": "This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.Find sources: Java programming language – news · newspapers · books · scholar · JSTOR (May 2019) (Learn how and when to remove this message)",
  "applet": "Main article: Java applet Java applets were programs embedded in other applications, mainly in web pages displayed in web browsers. The Java applet API was deprecated with the release of Java 9 in 2017.",
  "servlet": "Main article: Java servlet Java servlet technology provides Web developers with a simple, consistent mechanism for extending the functionality of a Web server and for accessing existing business systems. Servlets are server-side Java EE components that generate responses to requests from clients. Most of the time, this means generating HTML pages in response to HTTP requests, although there are a number of other standard servlet classes available, for example for WebSocket communication. The Java servlet API has to some extent been superseded (but still used under the hood) by two standard Java technologies for web services: the Java API for RESTful Web Services (JAX-RS 2.0) useful for AJAX, JSON and REST services, and the Java API for XML Web Services (JAX-WS) useful for SOAP Web Services. Typical implementations of these APIs on Application Servers or Servlet Containers use a standard servlet for handling all interactions with the HTTP requests and responses that delegate to the web service methods for the actual business logic.",
  "javaserver_pages": "Main article: JavaServer Pages JavaServer Pages (JSP) are server-side Java EE components that generate responses, typically HTML pages, to HTTP requests from clients. JSPs embed Java code in an HTML page by using the special delimiters <% and %>. A JSP is compiled to a Java servlet, a Java application in its own right, the first time it is accessed. After that, the generated servlet creates the response.",
  "swing_application": "Main article: Swing (Java) Swing is a graphical user interface library for the Java SE platform. It is possible to specify a different look and feel through the pluggable look and feel system of Swing. Clones of Windows, GTK+, and Motif are supplied by Sun. Apple also provides an Aqua look and feel for macOS. Where prior implementations of these looks and feels may have been considered lacking, Swing in Java SE 6 addresses this problem by using more native GUI widget drawing routines of the underlying platforms.",
  "javafx_application": "Main article: JavaFX JavaFX is a software platform for creating and delivering desktop applications, as well as rich web applications that can run across a wide variety of devices. JavaFX is intended to replace Swing as the standard graphical user interface (GUI) library for Java SE, but since JDK 11 JavaFX has not been in the core JDK and instead in a separate module. JavaFX has support for desktop computers and web browsers on Microsoft Windows, Linux, and macOS. JavaFX does not have support for native OS look and feels.",
  "generics": "Main article: Generics in Java In 2004, generics were added to the Java language, as part of J2SE 5.0. Prior to the introduction of generics, each variable declaration had to be of a specific type. For container classes, for example, this is a problem because there is no easy way to create a container that accepts only specific types of objects. Either the container operates on all subtypes of a class or interface, usually Object, or a different container class has to be created for each contained class. Generics allow compile-time type checking without having to create many container classes, each containing almost identical code. In addition to enabling more efficient code, certain runtime exceptions are prevented from occurring, by issuing compile-time errors. If Java prevented all runtime type errors (ClassCastExceptions) from occurring, it would be type safe. In 2016, the type system of Java was proven unsound in that it is possible to use generics to construct classes and methods that allow assignment of an instance of one class to a variable of another unrelated class. Such code is accepted by the compiler, but fails at run time with a class cast exception.",
  "criticism": "Main article: Criticism of Java Criticisms directed at Java include the implementation of generics, speed, the handling of unsigned numbers, the implementation of floating-point arithmetic, and a history of security vulnerabilities in the primary Java VM implementation HotSpot. Developers have criticized the complexity and verbosity of the Java Persistence API (JPA), a standard part of Java EE. This has led to increased adoption of higher-level abstractions like Spring Data JPA, which aims to simplify database operations and reduce boilerplate code. The growing popularity of such frameworks suggests limitations in the standard JPA implementation's ease-of-use for modern Java development.",
  "class_libraries": "Main article: Java Class Library The Java Class Library is the standard library, developed to support application development in Java. It is controlled by Oracle in cooperation with others through the Java Community Process program. Companies or individuals participating in this process can influence the design and development of the APIs. This process has been a subject of controversy during the 2010s. The class library contains features such as: The core libraries, which include: Input/output (I/O or IO) and non-blocking I/O (NIO), or IO/NIO Networking (new user agent (HTTP client) since Java 11) Reflective programming (reflection) Concurrent computing (concurrency) Generics Scripting, Compiler Functional programming (Lambda, streaming) Collection libraries that implement data structures such as lists, dictionaries, trees, sets, queues and double-ended queue, or stacks XML Processing (Parsing, Transforming, Validating) libraries Security Internationalization and localization libraries The integration libraries, which allow the application writer to communicate with external systems. These libraries include: The Java Database Connectivity (JDBC) API for database access Java Naming and Directory Interface (JNDI) for lookup and discovery Java remote method invocation (RMI) and Common Object Request Broker Architecture (CORBA) for distributed application development Java Management Extensions (JMX) for managing and monitoring applications User interface libraries, which include: The (heavyweight, or native) Abstract Window Toolkit (AWT), which provides GUI components, the means for laying out those components and the means for handling events from those components The (lightweight) Swing libraries, which are built on AWT but provide (non-native) implementations of the AWT widgetry APIs for audio capture, processing, and playback JavaFX A platform dependent implementation of the Java virtual machine that is the means by which the bytecodes of the Java libraries and third-party applications are executed Plugins, which enable applets to be run in web browsers Java Web Start, which allows Java applications to be efficiently distributed to end users across the Internet Licensing and documentation",
  "documentation": "Main article: Javadoc Javadoc is a comprehensive documentation system, created by Sun Microsystems. It provides developers with an organized system for documenting their code. Javadoc comments have an extra asterisk at the beginning, i.e. the delimiters are /** and */, whereas the normal multi-line comments in Java are delimited by /* and */, and single-line comments start with //.",
  "implementations": "See also: Free Java implementations and List of Java compilers This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.Find sources: Java programming language – news · newspapers · books · scholar · JSTOR (September 2023) (Learn how and when to remove this message) Oracle Corporation owns the official implementation of the Java SE platform, due to its acquisition of Sun Microsystems on January 27, 2010. This implementation is based on the original implementation of Java by Sun. The Oracle implementation is available for Windows, macOS, Linux, and Solaris. Because Java lacks any formal standardization recognized by Ecma International, ISO/IEC, ANSI, or other third-party standards organizations, the Oracle implementation is the de facto standard. The Oracle implementation is packaged into two different distributions: The Java Runtime Environment (JRE) which contains the parts of the Java SE platform required to run Java programs and is intended for end users, and the Java Development Kit (JDK), which is intended for software developers and includes development tools such as the Java compiler, Javadoc, Jar, and a debugger. Oracle has also released GraalVM, a high performance Java dynamic compiler and interpreter. OpenJDK is another Java SE implementation that is licensed under the GNU GPL. The implementation started when Sun began releasing the Java source code under the GPL. As of Java SE 7, OpenJDK is the official Java reference implementation. The goal of Java is to make all implementations of Java compatible. Historically, Sun's trademark license for usage of the Java brand insists that all implementations be compatible. This resulted in a legal dispute with Microsoft after Sun claimed that the Microsoft implementation did not support Java remote method invocation (RMI) or Java Native Interface (JNI) and had added platform-specific features of their own. Sun sued in 1997, and, in 2001, won a settlement of US$20 million, as well as a court order enforcing the terms of the license from Sun. As a result, Microsoft no longer ships Java with Windows. Platform-independent Java is essential to Java EE, and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications.",
  "use_outside_the_java_platform": "The Java programming language requires the presence of a software platform in order for compiled programs to be executed. Oracle supplies the Java platform for use with Java. The Android SDK is an alternative software platform, used primarily for developing Android applications with its own GUI system.",
  "android": "The Java language is a key pillar in Android, an open source mobile operating system. Although Android, built on the Linux kernel, is written largely in C, the Android SDK uses the Java language as the basis for Android applications but does not use any of its standard GUI, SE, ME or other established Java standards. The bytecode language supported by the Android SDK is incompatible with Java bytecode and runs on its own virtual machine, optimized for low-memory devices such as smartphones and tablet computers. Depending on the Android version, the bytecode is either interpreted by the Dalvik virtual machine or compiled into native code by the Android Runtime. Android does not provide the full Java SE standard library, although the Android SDK does include an independent implementation of a large subset of it. It supports Java 6 and some Java 7 features, offering an implementation compatible with the standard library (Apache Harmony).",
  "controversy": "See also: Oracle America, Inc. v. Google, Inc. The use of Java-related technology in Android led to a legal dispute between Oracle and Google. On May 7, 2012, a San Francisco jury found that if APIs could be copyrighted, then Google had infringed Oracle's copyrights by the use of Java in Android devices. District Judge William Alsup ruled on May 31, 2012, that APIs cannot be copyrighted, but this was reversed by the United States Court of Appeals for the Federal Circuit in May 2014. On May 26, 2016, the district court decided in favor of Google, ruling the copyright infringement of the Java API in Android constitutes fair use. In March 2018, this ruling was overturned by the Appeals Court, which sent down the case of determining the damages to federal court in San Francisco. Google filed a petition for writ of certiorari with the Supreme Court of the United States in January 2019 to challenge the two rulings that were made by the Appeals Court in Oracle's favor. On April 5, 2021, the Court ruled 6–2 in Google's favor, that its use of Java APIs should be considered fair use. However, the court refused to rule on the copyrightability of APIs, choosing instead to determine their ruling by considering Java's API copyrightable purely for argument's sake.",
  "see_also": "Computer programming portal C# C++ Dalvik, used in old Android versions, replaced by non-JIT Android Runtime Java Heterogeneous Distributed Computing List of Java APIs List of Java frameworks List of JVM languages List of Java virtual machines Comparison of C# and Java Comparison of Java and C++ Comparison of programming languages",
  "references": "^ Binstock, Andrew (May 20, 2015). Java's 20 Years of Innovation. Forbes. Archived from the original on March 14, 2016. Retrieved March 18, 2016. ^ a b c d Barbara Liskov with John Guttag (2000). Program Development in Java – Abstraction, Specification, and Object-Oriented Design. USA, Addison Wesley. ISBN 978-0-201-65768-5. ^ Chaudhary, Harry H. (July 28, 2014). Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans. Archived from the original on September 29, 2023. Retrieved May 29, 2016. ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language. Archived March 19, 2011, at the Wayback Machine Archived January 7, 2006, at the Wayback Machine ^ Gosling, James; McGilton, Henry (May 1996). The Java Language Environment. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad. The Java Language Specification, 2nd Edition. Archived from the original on August 5, 2011. Retrieved February 8, 2008. ^ The A-Z of Programming Languages: Modula-3. Computerworld. Archived from the original on January 5, 2009. Retrieved June 9, 2010. ^ Niklaus Wirth stated on a number of public occasions, e.g. in a lecture at the Polytechnic Museum, Moscow in September 2005 (several independent first-hand accounts in Russian exist, e.g. one with an audio recording: Filippova, Elena (September 22, 2005). Niklaus Wirth's lecture at the Polytechnic Museum in Moscow. Archived from the original on December 1, 2020. Retrieved November 20, 2011.), that the Sun Java design team licensed the Oberon compiler sources a number of years prior to the release of Java and examined it: a (relative) compactness, type safety, garbage collection, no multiple inheritance for classes – all these key overall design features are shared by Java and Oberon. ^ Patrick Naughton cites Objective-C as a strong influence on the design of the Java programming language, stating that notable direct derivatives include Java interfaces (derived from Objective-C's protocol) and primitive wrapper classes. Archived July 13, 2011, at the Wayback Machine ^ TechMetrix Research (1999). History of Java (PDF). Java Application Servers Report. Archived from the original (PDF) on December 29, 2010. The project went ahead under the name green and the language was based on an old model of UCSD Pascal, which makes it possible to generate interpretive code. ^ A Conversation with James Gosling. ACM Queue. Vol. 2, no. 5. Association for Computing Machinery. August 31, 2004. Archived from the original on July 16, 2015. Retrieved June 9, 2010. ^ The Java Language Team. About Microsoft's 'Delegates' (White Paper). JavaSoft, Sun Microsystems, Inc. Archived from the original on June 27, 2012. In the summer of 1996, Sun was designing the precursor to what is now the event model of the AWT and the JavaBeans component architecture. Borland contributed greatly to this process. We looked very carefully at Delphi Object Pascal and built a working prototype of bound method references in order to understand their interaction with the Java programming language and its APIs. ^ Chapel spec (Acknowledgements) (PDF). Cray Inc. October 1, 2015. Archived (PDF) from the original on February 5, 2016. Retrieved January 14, 2016. ^ Gambas Documentation Introduction. Gambas Website. Archived from the original on October 9, 2017. Retrieved October 9, 2017. ^ Facebook Q&A: Hack brings static typing to PHP world. InfoWorld. March 26, 2014. Archived from the original on February 13, 2015. Retrieved January 11, 2015. ^ Write once, run anywhere?. Computer Weekly. May 2, 2002. Archived from the original on August 13, 2021. Retrieved July 27, 2009. ^ a b c 1.2 Design Goals of the Java Programming Language. Oracle. January 1, 1999. Archived from the original on January 23, 2013. Retrieved January 14, 2013. ^ Melanson, Mike (August 9, 2022). Don't call it a comeback: Why Java is still champ. GitHub. Archived from the original on August 25, 2023. Retrieved October 15, 2023. ^ The top programming languages. The State of the Octoverse. GitHub. Archived from the original on August 2, 2023. Retrieved October 15, 2023. ^ McMillan, Robert (August 1, 2013). Is Java Losing Its Mojo?. Wired. Archived from the original on February 15, 2017. Retrieved October 15, 2023. ^ Byous, Jon (c. 1998). Java technology: The early years. Sun Developer Network. Sun Microsystems. Archived from the original on April 20, 2005. Retrieved April 22, 2005. ^ Object-oriented programming The History of Java Technology. Sun Developer Network. c. 1995. Archived from the original on February 10, 2010. Retrieved April 30, 2010. ^ Murphy, Kieron (October 4, 1996). So why did they decide to call it Java?. JavaWorld. Archived from the original on July 13, 2020. Retrieved July 13, 2020. ^ Kabutz, Heinz; Once Upon an Oak Archived April 13, 2007, at the Wayback Machine. Artima. Retrieved April 29, 2007. ^ JAVASOFT SHIPS JAVA 1.0. Archived from the original on March 10, 2007. Retrieved May 13, 2018. ^ Object-oriented Programming with Java: Essentials and Applications. Tata McGraw-Hill Education. p. 34. ^ JSG – Java Study Group. open-std.org. Archived from the original on August 25, 2006. Retrieved August 2, 2006. ^ Why Java Was – Not – Standardized Twice (PDF). Archived (PDF) from the original on January 13, 2014. Retrieved June 3, 2018. ^ What is ECMA—and why Microsoft cares. ZDNet. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Java Community Process website. Jcp.org. May 24, 2010. Archived from the original on August 8, 2006. Retrieved June 9, 2010. ^ JAVAONE: Sun – The bulk of Java is open sourced. GrnLight.net. Archived from the original on May 27, 2014. Retrieved May 26, 2014. ^ Sun's Evolving Role as Java Evangelist. O'Reilly Media. Archived from the original on September 15, 2010. Retrieved August 2, 2009. ^ Oracle and Java. oracle.com. Oracle Corporation. Archived from the original on January 31, 2010. Retrieved August 23, 2010. Oracle has been a leading and substantive supporter of Java since its emergence in 1995 and takes on the new role as steward of Java technology with a relentless commitment to fostering a community of participation and transparency. ^ Gosling, James (April 9, 2010). Time to move on... On a New Road. Archived from the original on November 5, 2010. Retrieved November 16, 2011. ^ Topic, Dalibor. Moving to a Plugin-Free Web. Archived from the original on March 16, 2016. Retrieved March 15, 2016. ^ Learn About Java Technology. Oracle. Archived from the original on November 24, 2011. Retrieved November 21, 2011. ^ Why should I uninstall older versions of Java from my system?. Oracle. Archived from the original on February 12, 2018. Retrieved September 24, 2021. ^ Oracle Java SE Support Roadmap. Oracle. September 13, 2021. Archived from the original on September 19, 2021. Retrieved September 18, 2021. ^ Temurin™ Support; Adoptium. adoptium.net. Archived from the original on March 29, 2024. Retrieved March 29, 2024. ^ JAVASOFT SHIPS JAVA 1.0. sun.com. Archived from the original on March 10, 2007. Retrieved February 5, 2008. ^ Chander, Sharat. Introducing Java SE 11. oracle.com. Archived from the original on September 26, 2018. Retrieved September 26, 2018. ^ Chander, Sharat (September 15, 2020). The Arrival of Java 15!. Oracle. Archived from the original on September 16, 2020. Retrieved September 15, 2020. ^ JDK 21. openjdk.org. Archived from the original on September 20, 2023. Retrieved September 20, 2023. ^ https://openjdk.org/projects/jdk/24/ ^ Java Card Overview. Oracle Technology Network. Oracle. Archived from the original on January 7, 2015. Retrieved December 18, 2014. ^ Java Platform, Micro Edition (Java ME). Oracle Technology Network. Oracle. Archived from the original on January 4, 2015. Retrieved December 18, 2014. ^ Java SE. Oracle Technology Network. Oracle. Archived from the original on December 24, 2014. Retrieved December 18, 2014. ^ Java Platform, Enterprise Edition (Java EE). Oracle Technology Network. Oracle. Archived from the original on December 17, 2014. Retrieved December 18, 2014. ^ Deep Dive Into the New Java JIT Compiler – Graal | Baeldung. www.baeldung.com. August 6, 2021. Archived from the original on October 28, 2021. Retrieved October 13, 2021. ^ Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?. Programmer Interview. Archived from the original on January 19, 2015. Retrieved January 19, 2015. ^ a b Jelovic, Dejan. Why Java will always be slower than C++. Archived from the original on February 11, 2008. Retrieved February 15, 2008. ^ Hundt, Robert. Loop Recognition in C++/Java/Go/Scala (PDF). Archived (PDF) from the original on November 16, 2011. Retrieved July 12, 2012. ^ Symantec's Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1. Archived from the original on June 28, 2010. Retrieved August 1, 2009. ^ Salcic, Zoran; Park, Heejong; Teich, Jürgen; Malik, Avinash; Nadeem, Muhammad (July 22, 2017). Noc-HMP: A Heterogeneous Multicore Processor for Embedded Systems Designed in SystemJ. ACM Transactions on Design Automation of Electronic Systems. 22 (4): 73. doi:10.1145/3073416. ISSN 1084-4309. S2CID 11150290. ^ a b c Bloch 2018, p. 26-28, §Item 7: Eliminate obsolete object references. ^ NullPointerException. Oracle. Archived from the original on May 6, 2014. Retrieved May 6, 2014. ^ Exceptions in Java. Artima.com. Archived from the original on January 21, 2009. Retrieved August 10, 2010. ^ Java HotSpot™ Virtual Machine Performance Enhancements. Oracle.com. Archived from the original on May 29, 2017. Retrieved April 26, 2017. ^ Operator Overloading (C# vs Java). C# for Java Developers. Microsoft. Archived from the original on January 7, 2015. Retrieved December 10, 2014. ^ Multiple Inheritance of State, Implementation, and Type. The Java Tutorials. Oracle. Archived from the original on November 9, 2014. Retrieved December 10, 2014. ^ Deprecated APIs, Features, and Options. Oracle. Archived from the original on June 19, 2019. Retrieved May 31, 2019. ^ Applet (Java Platform SE 7). Docs. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ What Is a JSP Page? - The Java EE 5 Tutorial. docs.oracle.com. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ Trail: Creating a GUI With JFC/Swing (The Java Tutorials). docs.oracle.com. Archived from the original on April 29, 2020. Retrieved May 1, 2020. ^ Removed from JDK 11, JavaFX 11 arrives as a standalone module. InfoWorld. September 20, 2018. Archived from the original on October 14, 2020. Retrieved October 13, 2020. ^ Getting Started with JavaFX: Hello World, JavaFX Style. JavaFX 2 Tutorials and Documentation. Oracle. Archived from the original on August 2, 2020. Retrieved May 1, 2020. ^ Java and Scala's Type Systems are Unsound (PDF). Archived (PDF) from the original on November 28, 2016. Retrieved February 20, 2017. ^ Arnold, Ken (June 27, 2005). Generics Considered Harmful. java.net. Archived from the original on October 10, 2007. Retrieved September 10, 2015. ^ Owens, Sean R. Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof). Archived from the original on February 20, 2009. Retrieved July 4, 2011. ^ Kahan, William (March 1, 1998). How Java's Floating-Point Hurts Everyone Everywhere – ACM 1998 Workshop on Java (Stanford) (PDF). Electrical Engineering & Computer Science, University of California at Berkeley. Archived (PDF) from the original on September 5, 2012. Retrieved June 4, 2011. ^ Have you checked the Java?. Archived from the original on September 21, 2012. Retrieved December 23, 2011. ^ Chidester, Ashlan. Java Persistence API, Jenkins and AWS. ISBN 9798224253951. Retrieved September 16, 2024. ^ Cadenhead, Rogers (November 20, 2017), Understanding How Java Programs Work, archived from the original on August 13, 2021, retrieved March 26, 2019 ^ Woolf, Nicky (May 26, 2016). Google wins six-year legal battle with Oracle over Android code copyright. The Guardian. ISSN 0261-3077. Archived from the original on March 26, 2019. Retrieved March 26, 2019. ^ a b Bloch 2018, pp. 1–4, § 1 Introduction. ^ java.nio (Java Platform SE 8). docs.oracle.com. ^ Java Networking. docs.oracle.com. ^ HttpClient (Java SE 11 & JDK 11). docs.oracle.com. ^ Collections Framework Overview. Java Documentation. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ Java Security Overview. Java Documentation. Oracle. Archived from the original on January 3, 2015. Retrieved December 18, 2014. ^ Trail: Internationalization. The Java Tutorials. Oracle. Archived from the original on December 31, 2014. Retrieved December 18, 2014. ^ How to Write Doc Comments for the Javadoc Tool. Oracle Technology Network. Oracle. Archived from the original on December 18, 2014. Retrieved December 18, 2014. ^ Niccolai, James (January 24, 2001). Sun, Microsoft settle Java lawsuit. JavaWorld. IDG News Service. Archived from the original on July 14, 2020. Retrieved July 13, 2020. ^ van Gurp, Jilles (November 13, 2007). Google Android: Initial Impressions and Criticism. Javalobby. Archived from the original on August 28, 2008. Retrieved March 7, 2009. Frankly, I don't understand why Google intends to ignore the vast amount of existing implementation out there. It seems like a bad case of not invented here to me. Ultimately, this will slow adoption. There are already too many Java platforms for the mobile world and this is yet another one ^ Mullin, Joe (May 7, 2012). Google guilty of infringement in Oracle trial; future legal headaches loom. Law & Disorder. Ars Technica. Archived from the original on May 8, 2012. Retrieved May 8, 2012. ^ Mullin, Joe (May 31, 2012). Google wins crucial API ruling, Oracle's case decimated. Ars Technica. Archived from the original on March 12, 2017. Retrieved June 1, 2012. ^ Rosenblatt, Seth (May 9, 2014). Court sides with Oracle over Android in Java patent appeal. CNET. Archived from the original on May 10, 2014. Retrieved May 10, 2014. ^ Mullin, Joe (May 26, 2016). Google beats Oracle—Android makes fair use of Java APIs. Ars Technica. Archived from the original on January 20, 2017. Retrieved May 26, 2016. ^ Farivar, Cyrus (March 27, 2018). Google's use of the Java API packages was not fair, appeals court rules. Ars Technica. Archived from the original on September 24, 2019. Retrieved August 6, 2019. ^ Lee, Timothy (April 23, 2019). Google asks Supreme Court to overrule disastrous ruling on API copyrights. Ars Technica. Archived from the original on April 23, 2019. Retrieved April 23, 2019. ^ Google LLC v. Oracle America, Inc 593 U. S. ____ (2021) (PDF). Archived (PDF) from the original on April 5, 2021. Retrieved April 6, 2021.",
  "bibliography": "Bloch, Joshua (2018). Effective Java: Programming Language Guide (Third ed.). Addison-Wesley. ISBN 978-0-13-468599-1. Gosling, James; Joy, Bill; Steele, Guy L. Jr.; Bracha, Gilad (2005). The Java Language Specification (3rd ed.). Addison-Wesley. ISBN 0-321-24678-0. Archived from the original on February 14, 2012. Retrieved February 8, 2019. Gosling, James; Joy, Bill; Steele, Guy; Bracha, Gilad; Buckley, Alex (2014). The Java® Language Specification (PDF) (Java SE 8 ed.). Archived (PDF) from the original on October 21, 2014. Retrieved November 18, 2014. Lindholm, Tim; Yellin, Frank (1999). The Java Virtual Machine Specification (2nd ed.). Addison-Wesley. ISBN 0-201-43294-3. Archived from the original on September 25, 2011. Retrieved February 8, 2019.",
  "external_links": "Java at Wikipedia's sister projects Definitions from WiktionaryMedia from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from WikiversityData from Wikidata Wikiversity has learning resources about Java Platform, Enterprise Edition/Java EE Tutorial Java Software, Oracle OpenJDK, Oracle JDK builds, Adoptium Java for developers, Dev.java Java Weekly vteJava (software platform)Platforms JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK GraalVM Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Servlets MIDlets JSP JSF Web Start (JNLP) Pack200 Modules applets Major third-partytechnologies Eclipse GNU Classpath Hibernate Spring GWT IcedTea Jazelle Struts TopLink WildFly blackdown harmony History Java version history Java Community Process Sun Microsystems Free Java implementations JVM languages Java BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Oxygene CommunityConferences JavaOne Devoxx Organizations Apache Software Foundation Eclipse Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal vteSun MicrosystemsAcquired by OracleHardwareSystems Sun-1 Sun-2 Sun-3 Sun386i Sun-4 SPARCstation/server/center 1 2 4 5 10 20 IPC IPX LX ZX SPARCclassic Netra Ultra 1 2 5 10 24 30 60 80 Enterprise 10000 Blade server Blade workstation Fire 12K 15K E25K T2000 X4500 SPARC Enterprise JavaStation Java Workstation Ray Cobalt Qube Cobalt RaQ Processors SPARC MB86900 microSPARC SuperSPARC UltraSPARC UltraSPARC II UltraSPARC IIe UltraSPARC IIi Gemini UltraSPARC III UltraSPARC III Cu UltraSPARC IIIi UltraSPARC IV UltraSPARC T1 UltraSPARC T2 SPARC T3 SPARC T4 SPARC T5 Rock MAJC Other Sun4d SBus Fireplane LOM port MBus Modular Datacenter Neptune System Service Processor SPARC T series SPOT Ultra Port Architecture Visual Instruction Set Software SunOS Solaris NIS NIS+ NFS ZFS ZFS+ SunView NeWS OpenWindows Java Desktop System Studio Java StarOffice iPlanet Java System Sun Secure Global Desktop MySQL xVM GlassFish VirtualBox Storage StorageTek 5800 System StorageTek SL8500 Open Storage QFS ZFS Performance Cloud Constellation System Visualization System Grid Engine Lustre Research Sun Microsystems Laboratories picoJava Fortress Project Looking Glass Education SCPs BlueJ Community Common Development and Distribution License Java Community Process NetBeans OpenOffice.org OpenSolaris OpenSPARC OpenJDK Open Source University Meetup People Bill Joy Andy Bechtolsheim Scott McNealy Vinod Khosla Acquisitions Afara Websystems Cobalt Networks Gridware Lighthouse Design Montalvo Systems MySQL AB Pixo Procom Technology SavaJe StorageTek Tarantella Slogans The Network is the Computer Write once, run anywhere Category vteOracle CorporationCorporate directors Jeffrey Berg H. Raymond Bingham Michael Boskin Safra Catz Larry Ellison Héctor García-Molina Joseph Grundfest Jeffrey O. Henley Mark Hurd Jack F. Kemp Donald L. Lucas Naomi O. Seligman Acquisitions (list) Sun PeopleSoft Hyperion Siebel BEA JD Edwards RightNow Virtual Iron TimesTen Sunopsis NetSuite Cerner Databases Oracle Database MySQL InnoDB Berkeley DB TimesTen Rdb Essbase Programming languages Java PL/SQL IDEs JDeveloper Forms NetBeans Apex SQL Developer Developer Studio Middleware Fusion Middleware WebCenter SOA Suite WebLogic Server Coherence Tuxedo GlassFish Operating systems Oracle Linux Oracle Solaris Computer hardware Sun Fire SPARC (T-Series, Enterprise) StorageTek Computer appliances Oracle Exadata Oracle Exalogic Big Data Appliance Education and recognition Oracle Certification Program Category vteOracle free and open-source software (FOSS)SoftwareApplications OpenOffice.org VirtualBox Programming languages Java Databases Berkeley DB InnoDB MySQL Oracle NoSQL Database Frameworks anddevelopment tools DTrace GlassFish HotSpot Image Packaging System Java (software platform) Maxine Virtual Machine Memory Nashorn NetBeans OpenJDK VisualVM Operating systems OpenSolaris Oracle Linux Other Java Desktop System OCFS2 Oracle Grid Engine Oracle VM Server for x86 Related Google LLC v. Oracle America, Inc. vteProgramming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Forth Fortran Go Haskell Java JavaScript TypeScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SQL Scratch Shell Smalltalk Swift more... Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherELMCIP"
}
]